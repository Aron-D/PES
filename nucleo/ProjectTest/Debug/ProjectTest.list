
ProjectTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd0  08006fd0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd8  08006fd8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000006c  0800704c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800704c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa99  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258b  00000000  00000000  0002fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9c  00000000  00000000  00032ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021538  00000000  00000000  00033964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011917  00000000  00000000  00054e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c40b3  00000000  00000000  000667b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042d8  00000000  00000000  0012a868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ddc 	.word	0x08006ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006ddc 	.word	0x08006ddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800057c:	b480      	push	{r7}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000586:	23ff      	movs	r3, #255	; 0xff
 8000588:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	e020      	b.n	80005d2 <calculate_crc+0x56>
		crc ^= data[i];
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	4413      	add	r3, r2
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	4053      	eors	r3, r2
 800059c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e010      	b.n	80005c6 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 80005a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da06      	bge.n	80005ba <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80005b6:	75fb      	strb	r3, [r7, #23]
 80005b8:	e002      	b.n	80005c0 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d9eb      	bls.n	80005a4 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	3301      	adds	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3da      	bcc.n	8000590 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	b299      	uxth	r1, r3
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	231e      	movs	r3, #30
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	f001 fa1f 	bl	8001a5c <HAL_I2C_Master_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <sht3x_send_command+0x42>
	}

	return true;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	460a      	mov	r2, r1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4613      	mov	r3, r2
 8000640:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b29b      	uxth	r3, r3
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	b29a      	uxth	r2, r3
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af04      	add	r7, sp, #16
 8000666:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <sht3x_init+0x1e>
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <sht3x_init+0x74>)
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <sht3x_init+0x78>)
 8000676:	2138      	movs	r1, #56	; 0x38
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <sht3x_init+0x7c>)
 800067a:	f005 fa25 	bl	8005ac8 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	889b      	ldrh	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	b299      	uxth	r1, r3
 800068a:	231e      	movs	r3, #30
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2303      	movs	r3, #3
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2302      	movs	r3, #2
 800069a:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800069e:	f001 fca9 	bl	8001ff4 <HAL_I2C_Mem_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e00e      	b.n	80006ca <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff62 	bl	800057c <calculate_crc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d001      	beq.n	80006c8 <sht3x_init+0x68>
		return false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e000      	b.n	80006ca <sht3x_init+0x6a>
	}

	return true;
 80006c8:	2301      	movs	r3, #1
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08006df4 	.word	0x08006df4
 80006d8:	08006f0c 	.word	0x08006f0c
 80006dc:	08006e34 	.word	0x08006e34

080006e0 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80006ec:	f642 4106 	movw	r1, #11270	; 0x2c06
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ff79 	bl	80005e8 <sht3x_send_command>

	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fe0e 	bl	8001318 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b299      	uxth	r1, r3
 8000708:	f107 0214 	add.w	r2, r7, #20
 800070c:	231e      	movs	r3, #30
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2306      	movs	r3, #6
 8000712:	f001 fabb 	bl	8001c8c <HAL_I2C_Master_Receive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 800071c:	2300      	movs	r3, #0
 800071e:	e04f      	b.n	80007c0 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff28 	bl	800057c <calculate_crc>
 800072c:	4603      	mov	r3, r0
 800072e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	3303      	adds	r3, #3
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff1f 	bl	800057c <calculate_crc>
 800073e:	4603      	mov	r3, r0
 8000740:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000742:	7dbb      	ldrb	r3, [r7, #22]
 8000744:	7ffa      	ldrb	r2, [r7, #31]
 8000746:	429a      	cmp	r2, r3
 8000748:	d103      	bne.n	8000752 <sht3x_read_temperature_and_humidity+0x72>
 800074a:	7e7b      	ldrb	r3, [r7, #25]
 800074c:	7fba      	ldrb	r2, [r7, #30]
 800074e:	429a      	cmp	r2, r3
 8000750:	d001      	beq.n	8000756 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000752:	2300      	movs	r3, #0
 8000754:	e034      	b.n	80007c0 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8000756:	7d3b      	ldrb	r3, [r7, #20]
 8000758:	7d7a      	ldrb	r2, [r7, #21]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff68 	bl	8000632 <uint8_to_uint16>
 8000762:	4603      	mov	r3, r0
 8000764:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	7e3a      	ldrb	r2, [r7, #24]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff60 	bl	8000632 <uint8_to_uint16>
 8000772:	4603      	mov	r3, r0
 8000774:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000776:	8bbb      	ldrh	r3, [r7, #28]
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80007c8 <sht3x_read_temperature_and_humidity+0xe8>
 8000784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000788:	eddf 6a10 	vldr	s13, [pc, #64]	; 80007cc <sht3x_read_temperature_and_humidity+0xec>
 800078c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000790:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80007d0 <sht3x_read_temperature_and_humidity+0xf0>
 8000794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800079e:	8b7b      	ldrh	r3, [r7, #26]
 80007a0:	ee07 3a90 	vmov	s15, r3
 80007a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80007d4 <sht3x_read_temperature_and_humidity+0xf4>
 80007ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007b0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80007cc <sht3x_read_temperature_and_humidity+0xec>
 80007b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	edc3 7a00 	vstr	s15, [r3]

	return true;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	432f0000 	.word	0x432f0000
 80007cc:	477fff00 	.word	0x477fff00
 80007d0:	42340000 	.word	0x42340000
 80007d4:	42c80000 	.word	0x42c80000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
//	HAL_StatusTypeDef ret;

//	int16_t val;
//	float temp_c;

	sht3x_handle_t handle = {
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <main+0x98>)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e8:	e883 0003 	stmia.w	r3, {r0, r1}
	    .i2c_handle = &hi2c3,
	    .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
	};

	if (!sht3x_init(&handle)) {
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff35 	bl	8000660 <sht3x_init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <main+0x30>
	    printf("SHT3x access failed.\n\r");
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x9c>)
 8000804:	f005 fa52 	bl	8005cac <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fd11 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f842 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f952 	bl	8000ab8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000814:	f000 f920 	bl	8000a58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000818:	f000 f89e 	bl	8000958 <MX_I2C1_Init>
  MX_I2C3_Init();
 800081c:	f000 f8dc 	bl	80009d8 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, "Hallo!\n\r", 8, HAL_MAX_DELAY);
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2208      	movs	r2, #8
 8000826:	4914      	ldr	r1, [pc, #80]	; (8000878 <main+0xa0>)
 8000828:	4814      	ldr	r0, [pc, #80]	; (800087c <main+0xa4>)
 800082a:	f004 fc81 	bl	8005130 <HAL_UART_Transmit>
  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <main+0xa8>)
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <main+0xac>)
 8000834:	f001 fb8e 	bl	8001f54 <HAL_I2C_Slave_Receive_IT>


  while (1)
  {
	  float humidity;
	  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	4911      	ldr	r1, [pc, #68]	; (8000880 <main+0xa8>)
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0xac>)
 800083e:	f001 fb89 	bl	8001f54 <HAL_I2C_Slave_Receive_IT>
	  sht3x_read_temperature_and_humidity(&handle, &temp, &humidity);
 8000842:	1d3a      	adds	r2, r7, #4
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	490f      	ldr	r1, [pc, #60]	; (8000888 <main+0xb0>)
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff48 	bl	80006e0 <sht3x_read_temperature_and_humidity>
	  sprintf((char*) buf, "%u", (unsigned int) temp);
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <main+0xb0>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800085a:	ee17 2a90 	vmov	r2, s15
 800085e:	490b      	ldr	r1, [pc, #44]	; (800088c <main+0xb4>)
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <main+0xb8>)
 8000862:	f005 fa35 	bl	8005cd0 <siprintf>
	  //HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  //HAL_GPIO_TogglePin(LEDOUT_GPIO_Port, LEDOUT_Pin);
	  HAL_Delay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f000 fd56 	bl	8001318 <HAL_Delay>
  {
 800086c:	e7e4      	b.n	8000838 <main+0x60>
 800086e:	bf00      	nop
 8000870:	08006e70 	.word	0x08006e70
 8000874:	08006e48 	.word	0x08006e48
 8000878:	08006e60 	.word	0x08006e60
 800087c:	20000130 	.word	0x20000130
 8000880:	200001b8 	.word	0x200001b8
 8000884:	20000088 	.word	0x20000088
 8000888:	20000000 	.word	0x20000000
 800088c:	08006e6c 	.word	0x08006e6c
 8000890:	200001bc 	.word	0x200001bc

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2244      	movs	r2, #68	; 0x44
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fa77 	bl	8005d96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ba:	f003 fa65 	bl	8003d88 <HAL_PWREx_ControlVoltageScaling>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c4:	f000 f9f2 	bl	8000cac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008c8:	f003 fa40 	bl	8003d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <SystemClock_Config+0xc0>)
 80008ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <SystemClock_Config+0xc0>)
 80008d4:	f023 0318 	bic.w	r3, r3, #24
 80008d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008dc:	2314      	movs	r3, #20
 80008de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008f4:	2301      	movs	r3, #1
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008fc:	2310      	movs	r3, #16
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000900:	2307      	movs	r3, #7
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fa8f 	bl	8003e34 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800091c:	f000 f9c6 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2303      	movs	r3, #3
 8000926:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fe8f 	bl	800465c <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000944:	f000 f9b2 	bl	8000cac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000948:	f004 faa2 	bl	8004e90 <HAL_RCCEx_EnableMSIPLLMode>
}
 800094c:	bf00      	nop
 800094e:	3758      	adds	r7, #88	; 0x58
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_I2C1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_I2C1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_I2C1_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_I2C1_Init+0x74>)
 800096a:	2220      	movs	r2, #32
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_I2C1_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <MX_I2C1_Init+0x74>)
 8000994:	f000 ffc6 	bl	8001924 <HAL_I2C_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 f985 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <MX_I2C1_Init+0x74>)
 80009a6:	f003 f939 	bl	8003c1c <HAL_I2CEx_ConfigAnalogFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 f97c 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_I2C1_Init+0x74>)
 80009b8:	f003 f97b 	bl	8003cb2 <HAL_I2CEx_ConfigDigitalFilter>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 f973 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000088 	.word	0x20000088
 80009d0:	40005400 	.word	0x40005400
 80009d4:	00707cbb 	.word	0x00707cbb

080009d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_I2C3_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_I2C3_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_I2C3_Init+0x74>)
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_I2C3_Init+0x7c>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_I2C3_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_I2C3_Init+0x74>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_I2C3_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_I2C3_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C3_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C3_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C3_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <MX_I2C3_Init+0x74>)
 8000a14:	f000 ff86 	bl	8001924 <HAL_I2C_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a1e:	f000 f945 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_I2C3_Init+0x74>)
 8000a26:	f003 f8f9 	bl	8003c1c <HAL_I2CEx_ConfigAnalogFilter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a30:	f000 f93c 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_I2C3_Init+0x74>)
 8000a38:	f003 f93b 	bl	8003cb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a42:	f000 f933 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000dc 	.word	0x200000dc
 8000a50:	40005c00 	.word	0x40005c00
 8000a54:	00707cbb 	.word	0x00707cbb

08000a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_USART2_UART_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a9c:	f004 fafa 	bl	8005094 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f901 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000130 	.word	0x20000130
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDOUT_Pin|output1_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f640 0108 	movw	r1, #2056	; 0x808
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 fee8 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	4819      	ldr	r0, [pc, #100]	; (8000b90 <MX_GPIO_Init+0xd8>)
 8000b2a:	f000 fee3 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDOUT_Pin output1_Pin */
  GPIO_InitStruct.Pin = LEDOUT_Pin|output1_Pin;
 8000b2e:	f640 0308 	movw	r3, #2056	; 0x808
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fd69 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <MX_GPIO_Init+0xd8>)
 8000b62:	f000 fd5d 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b66:	2308      	movs	r3, #8
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0xd8>)
 8000b7e:	f000 fd4f 	bl	8001620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400

08000b94 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if (received_command == 0x01) {
 8000b9c:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d132      	bne.n	8000c0a <HAL_I2C_SlaveRxCpltCallback+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received TEMP flag, returning temp: ", 40, HAL_MAX_DELAY);
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2228      	movs	r2, #40	; 0x28
 8000baa:	4937      	ldr	r1, [pc, #220]	; (8000c88 <HAL_I2C_SlaveRxCpltCallback+0xf4>)
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000bae:	f004 fabf 	bl	8005130 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000bb2:	4837      	ldr	r0, [pc, #220]	; (8000c90 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 8000bb4:	f7ff fb0c 	bl	80001d0 <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	4933      	ldr	r1, [pc, #204]	; (8000c90 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 8000bc2:	4832      	ldr	r0, [pc, #200]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000bc4:	f004 fab4 	bl	8005130 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	2202      	movs	r2, #2
 8000bce:	4931      	ldr	r1, [pc, #196]	; (8000c94 <HAL_I2C_SlaveRxCpltCallback+0x100>)
 8000bd0:	482e      	ldr	r0, [pc, #184]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000bd2:	f004 faad 	bl	8005130 <HAL_UART_Transmit>
	    if (HAL_I2C_Slave_Transmit_IT(&hi2c1, buf, strlen((char*)buf)) != HAL_OK) {
 8000bd6:	482e      	ldr	r0, [pc, #184]	; (8000c90 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 8000bd8:	f7ff fafa 	bl	80001d0 <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	492b      	ldr	r1, [pc, #172]	; (8000c90 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 8000be4:	482c      	ldr	r0, [pc, #176]	; (8000c98 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 8000be6:	f001 f947 	bl	8001e78 <HAL_I2C_Slave_Transmit_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_I2C_SlaveRxCpltCallback+0x6a>
	    	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	2228      	movs	r2, #40	; 0x28
 8000bf6:	4929      	ldr	r1, [pc, #164]	; (8000c9c <HAL_I2C_SlaveRxCpltCallback+0x108>)
 8000bf8:	4824      	ldr	r0, [pc, #144]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000bfa:	f004 fa99 	bl	8005130 <HAL_UART_Transmit>
	    }
	    HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4920      	ldr	r1, [pc, #128]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000c02:	4825      	ldr	r0, [pc, #148]	; (8000c98 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 8000c04:	f001 f9a6 	bl	8001f54 <HAL_I2C_Slave_Receive_IT>
		}
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);*/
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
	}
}
 8000c08:	e038      	b.n	8000c7c <HAL_I2C_SlaveRxCpltCallback+0xe8>
	} else if (received_command == 0x02) {
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d112      	bne.n	8000c38 <HAL_I2C_SlaveRxCpltCallback+0xa4>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDON flag, turning LED ON\n\r", 40, HAL_MAX_DELAY);
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	2228      	movs	r2, #40	; 0x28
 8000c18:	4921      	ldr	r1, [pc, #132]	; (8000ca0 <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000c1a:	481c      	ldr	r0, [pc, #112]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000c1c:	f004 fa88 	bl	8005130 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2108      	movs	r1, #8
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f000 fe64 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4915      	ldr	r1, [pc, #84]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000c30:	4819      	ldr	r0, [pc, #100]	; (8000c98 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 8000c32:	f001 f98f 	bl	8001f54 <HAL_I2C_Slave_Receive_IT>
}
 8000c36:	e021      	b.n	8000c7c <HAL_I2C_SlaveRxCpltCallback+0xe8>
	} else if (received_command == 0x03) {
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d112      	bne.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDOFF flag, turning LED OFF\n\r", 40, HAL_MAX_DELAY);
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2228      	movs	r2, #40	; 0x28
 8000c46:	4917      	ldr	r1, [pc, #92]	; (8000ca4 <HAL_I2C_SlaveRxCpltCallback+0x110>)
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000c4a:	f004 fa71 	bl	8005130 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2108      	movs	r1, #8
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f000 fe4d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4909      	ldr	r1, [pc, #36]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000c5e:	480e      	ldr	r0, [pc, #56]	; (8000c98 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 8000c60:	f001 f978 	bl	8001f54 <HAL_I2C_Slave_Receive_IT>
}
 8000c64:	e00a      	b.n	8000c7c <HAL_I2C_SlaveRxCpltCallback+0xe8>
	} else if (received_command == 0x04) {
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d006      	beq.n	8000c7c <HAL_I2C_SlaveRxCpltCallback+0xe8>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	2205      	movs	r2, #5
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8000c78:	f004 fa5a 	bl	8005130 <HAL_UART_Transmit>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001b8 	.word	0x200001b8
 8000c88:	08006e78 	.word	0x08006e78
 8000c8c:	20000130 	.word	0x20000130
 8000c90:	200001bc 	.word	0x200001bc
 8000c94:	08006ea0 	.word	0x08006ea0
 8000c98:	20000088 	.word	0x20000088
 8000c9c:	08006ea4 	.word	0x08006ea4
 8000ca0:	08006eb4 	.word	0x08006eb4
 8000ca4:	08006edc 	.word	0x08006edc
 8000ca8:	08006f04 	.word	0x08006f04

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x44>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0a2      	sub	sp, #136	; 0x88
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	2254      	movs	r2, #84	; 0x54
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f005 f838 	bl	8005d96 <memset>
  if(hi2c->Instance==I2C1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a5e      	ldr	r2, [pc, #376]	; (8000ea4 <HAL_I2C_MspInit+0x1a4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d148      	bne.n	8000dc2 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d30:	2340      	movs	r3, #64	; 0x40
 8000d32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 feb1 	bl	8004aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d48:	f7ff ffb0 	bl	8000cac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b56      	ldr	r3, [pc, #344]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	4a55      	ldr	r2, [pc, #340]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d64:	23c0      	movs	r3, #192	; 0xc0
 8000d66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d76:	2304      	movs	r3, #4
 8000d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d80:	4619      	mov	r1, r3
 8000d82:	484a      	ldr	r0, [pc, #296]	; (8000eac <HAL_I2C_MspInit+0x1ac>)
 8000d84:	f000 fc4c 	bl	8001620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d88:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	4a46      	ldr	r2, [pc, #280]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d92:	6593      	str	r3, [r2, #88]	; 0x58
 8000d94:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	201f      	movs	r0, #31
 8000da6:	f000 fbb6 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000daa:	201f      	movs	r0, #31
 8000dac:	f000 fbcf 	bl	800154e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2020      	movs	r0, #32
 8000db6:	f000 fbae 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dba:	2020      	movs	r0, #32
 8000dbc:	f000 fbc7 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dc0:	e06c      	b.n	8000e9c <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a3a      	ldr	r2, [pc, #232]	; (8000eb0 <HAL_I2C_MspInit+0x1b0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d167      	bne.n	8000e9c <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fe62 	bl	8004aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_I2C_MspInit+0xea>
      Error_Handler();
 8000de6:	f7ff ff61 	bl	8000cac <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f000 fbf0 	bl	8001620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e40:	2310      	movs	r3, #16
 8000e42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e52:	2304      	movs	r3, #4
 8000e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4813      	ldr	r0, [pc, #76]	; (8000eac <HAL_I2C_MspInit+0x1ac>)
 8000e60:	f000 fbde 	bl	8001620 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_I2C_MspInit+0x1a8>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2048      	movs	r0, #72	; 0x48
 8000e82:	f000 fb48 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000e86:	2048      	movs	r0, #72	; 0x48
 8000e88:	f000 fb61 	bl	800154e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2049      	movs	r0, #73	; 0x49
 8000e92:	f000 fb40 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000e96:	2049      	movs	r0, #73	; 0x49
 8000e98:	f000 fb59 	bl	800154e <HAL_NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3788      	adds	r7, #136	; 0x88
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	40005c00 	.word	0x40005c00

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b09e      	sub	sp, #120	; 0x78
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2254      	movs	r2, #84	; 0x54
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 ff5e 	bl	8005d96 <memset>
  if(huart->Instance==USART2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <HAL_UART_MspInit+0xcc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d148      	bne.n	8000f76 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fdd7 	bl	8004aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff fed6 	bl	8000cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f30:	2304      	movs	r3, #4
 8000f32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f40:	2307      	movs	r3, #7
 8000f42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f000 fb67 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f64:	2303      	movs	r3, #3
 8000f66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f000 fb55 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3778      	adds	r7, #120	; 0x78
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f980 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <I2C1_EV_IRQHandler+0x10>)
 8000fe2:	f001 f921 	bl	8002228 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000088 	.word	0x20000088

08000ff0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <I2C1_ER_IRQHandler+0x10>)
 8000ff6:	f001 f931 	bl	800225c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000088 	.word	0x20000088

08001004 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <I2C3_EV_IRQHandler+0x10>)
 800100a:	f001 f90d 	bl	8002228 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000dc 	.word	0x200000dc

08001018 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <I2C3_ER_IRQHandler+0x10>)
 800101e:	f001 f91d 	bl	800225c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000dc 	.word	0x200000dc

0800102c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_kill>:

int _kill(int pid, int sig)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001046:	f004 fef5 	bl	8005e34 <__errno>
 800104a:	4603      	mov	r3, r0
 800104c:	2216      	movs	r2, #22
 800104e:	601a      	str	r2, [r3, #0]
  return -1;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_exit>:

void _exit (int status)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffe7 	bl	800103c <_kill>
  while (1) {}    /* Make sure we hang here */
 800106e:	e7fe      	b.n	800106e <_exit+0x12>

08001070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00a      	b.n	8001098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001082:	f3af 8000 	nop.w
 8001086:	4601      	mov	r1, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf0      	blt.n	8001082 <_read+0x12>
  }

  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e009      	b.n	80010d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf1      	blt.n	80010bc <_write+0x12>
  }
  return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:

int _close(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	605a      	str	r2, [r3, #4]
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f004 fe5a 	bl	8005e34 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20010000 	.word	0x20010000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	200001c8 	.word	0x200001c8
 80011b4:	20000320 	.word	0x20000320

080011b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff ffea 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f004 fe19 	bl	8005e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120e:	f7ff fae3 	bl	80007d8 <main>

08001212 <LoopForever>:

LoopForever:
    b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001220:	08006fe0 	.word	0x08006fe0
  ldr r2, =_sbss
 8001224:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001228:	2000031c 	.word	0x2000031c

0800122c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_IRQHandler>

0800122e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f961 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f80e 	bl	8001260 <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e001      	b.n	8001254 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001250:	f7ff fd32 	bl	8000cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_InitTick+0x70>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_InitTick+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f96d 	bl	800156a <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d809      	bhi.n	80012b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f937 	bl	8001516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_InitTick+0x74>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e007      	b.n	80012c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e001      	b.n	80012c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000008 	.word	0x20000008

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	200001cc 	.word	0x200001cc

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200001cc 	.word	0x200001cc

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000000c 	.word	0x2000000c

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff29 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff3e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff31 	bl	80013c4 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa2 	bl	80014bc <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d005      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2204      	movs	r2, #4
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e029      	b.n	80015fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 020e 	bic.w	r2, r2, #14
 80015b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 021c 	and.w	r2, r3, #28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	4798      	blx	r3
    }
  }
  return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e148      	b.n	80018c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 813a 	beq.w	80018bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d005      	beq.n	8001660 <HAL_GPIO_Init+0x40>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d130      	bne.n	80016c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001696:	2201      	movs	r2, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 0201 	and.w	r2, r3, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d017      	beq.n	80016fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d123      	bne.n	8001752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0203 	and.w	r2, r3, #3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8094 	beq.w	80018bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001794:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x2c0>)
 8001796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001798:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_GPIO_Init+0x2c0>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6613      	str	r3, [r2, #96]	; 0x60
 80017a0:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <HAL_GPIO_Init+0x2c0>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ac:	4a4d      	ldr	r2, [pc, #308]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1d4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a43      	ldr	r2, [pc, #268]	; (80018e8 <HAL_GPIO_Init+0x2c8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1d0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a42      	ldr	r2, [pc, #264]	; (80018ec <HAL_GPIO_Init+0x2cc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1cc>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1d6>
 80017ec:	2307      	movs	r3, #7
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x1d6>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_GPIO_Init+0x1d6>
 80017f4:	2300      	movs	r3, #0
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001806:	4937      	ldr	r1, [pc, #220]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001838:	4a2d      	ldr	r2, [pc, #180]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001862:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f47f aeaf 	bne.w	8001630 <HAL_GPIO_Init+0x10>
  }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	48000800 	.word	0x48000800
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001910:	e002      	b.n	8001918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e08d      	b.n	8001a52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f9d8 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e006      	b.n	80019ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d108      	bne.n	80019c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	e007      	b.n	80019d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69d9      	ldr	r1, [r3, #28]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1a      	ldr	r2, [r3, #32]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	461a      	mov	r2, r3
 8001a68:	460b      	mov	r3, r1
 8001a6a:	817b      	strh	r3, [r7, #10]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	f040 80fd 	bne.w	8001c78 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2C_Master_Transmit+0x30>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e0f6      	b.n	8001c7a <HAL_I2C_Master_Transmit+0x21e>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a94:	f7ff fc34 	bl	8001300 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f001 fd69 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e1      	b.n	8001c7a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2221      	movs	r2, #33	; 0x21
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	893a      	ldrh	r2, [r7, #8]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2bff      	cmp	r3, #255	; 0xff
 8001ae6:	d906      	bls.n	8001af6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	22ff      	movs	r2, #255	; 0xff
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e007      	b.n	8001b06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d024      	beq.n	8001b58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	8979      	ldrh	r1, [r7, #10]
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	; (8001c84 <HAL_I2C_Master_Transmit+0x228>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f001 ff4f 	bl	80039f4 <I2C_TransferConfig>
 8001b56:	e066      	b.n	8001c26 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	8979      	ldrh	r1, [r7, #10]
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <HAL_I2C_Master_Transmit+0x228>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f001 ff44 	bl	80039f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b6c:	e05b      	b.n	8001c26 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	6a39      	ldr	r1, [r7, #32]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f001 fd52 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07b      	b.n	8001c7a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d034      	beq.n	8001c26 <HAL_I2C_Master_Transmit+0x1ca>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d130      	bne.n	8001c26 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f001 fcd5 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e04d      	b.n	8001c7a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2bff      	cmp	r3, #255	; 0xff
 8001be6:	d90e      	bls.n	8001c06 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f001 fef8 	bl	80039f4 <I2C_TransferConfig>
 8001c04:	e00f      	b.n	8001c26 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	8979      	ldrh	r1, [r7, #10]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f001 fee7 	bl	80039f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d19e      	bne.n	8001b6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	6a39      	ldr	r1, [r7, #32]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f001 fd38 	bl	80036aa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e01a      	b.n	8001c7a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_I2C_Master_Transmit+0x22c>)
 8001c58:	400b      	ands	r3, r1
 8001c5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	80002000 	.word	0x80002000
 8001c88:	fe00e800 	.word	0xfe00e800

08001c8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	817b      	strh	r3, [r7, #10]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	f040 80db 	bne.w	8001e64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2C_Master_Receive+0x30>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0d4      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff fb1c 	bl	8001300 <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f001 fc51 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0bf      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2222      	movs	r2, #34	; 0x22
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	893a      	ldrh	r2, [r7, #8]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2bff      	cmp	r3, #255	; 0xff
 8001d16:	d90e      	bls.n	8001d36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <HAL_I2C_Master_Receive+0x1e4>)
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f001 fe60 	bl	80039f4 <I2C_TransferConfig>
 8001d34:	e06d      	b.n	8001e12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_I2C_Master_Receive+0x1e4>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f001 fe4f 	bl	80039f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d56:	e05c      	b.n	8001e12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f001 fce7 	bl	8003730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e07c      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d034      	beq.n	8001e12 <HAL_I2C_Master_Receive+0x186>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d130      	bne.n	8001e12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	2200      	movs	r2, #0
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f001 fbdf 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e04d      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d90e      	bls.n	8001df2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f001 fe02 	bl	80039f4 <I2C_TransferConfig>
 8001df0:	e00f      	b.n	8001e12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	8979      	ldrh	r1, [r7, #10]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f001 fdf1 	bl	80039f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d19d      	bne.n	8001d58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	6a39      	ldr	r1, [r7, #32]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f001 fc42 	bl	80036aa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e01a      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_I2C_Master_Receive+0x1e8>)
 8001e44:	400b      	ands	r3, r1
 8001e46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	80002400 	.word	0x80002400
 8001e74:	fe00e800 	.word	0xfe00e800

08001e78 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d156      	bne.n	8001f40 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2C_Slave_Transmit_IT+0x28>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e050      	b.n	8001f42 <HAL_I2C_Slave_Transmit_IT+0xca>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2221      	movs	r2, #33	; 0x21
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ecc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	88fa      	ldrh	r2, [r7, #6]
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ef8:	d117      	bne.n	8001f2a <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001f32:	f248 0101 	movw	r1, #32769	; 0x8001
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f001 fd8e 	bl	8003a58 <I2C_Enable_IRQ>

    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	ffff0000 	.word	0xffff0000
 8001f50:	080023cf 	.word	0x080023cf

08001f54 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d139      	bne.n	8001fe2 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2C_Slave_Receive_IT+0x28>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e033      	b.n	8001fe4 <HAL_I2C_Slave_Receive_IT+0x90>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2222      	movs	r2, #34	; 0x22
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_I2C_Slave_Receive_IT+0x98>)
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001fd4:	f248 0102 	movw	r1, #32770	; 0x8002
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f001 fd3d 	bl	8003a58 <I2C_Enable_IRQ>

    return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	ffff0000 	.word	0xffff0000
 8001ff0:	080023cf 	.word	0x080023cf

08001ff4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	817b      	strh	r3, [r7, #10]
 8002006:	460b      	mov	r3, r1
 8002008:	813b      	strh	r3, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	f040 80fd 	bne.w	8002216 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_I2C_Mem_Read+0x34>
 8002022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0f1      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Mem_Read+0x4e>
 800203e:	2302      	movs	r3, #2
 8002040:	e0ea      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800204a:	f7ff f959 	bl	8001300 <HAL_GetTick>
 800204e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2319      	movs	r3, #25
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f001 fa8e 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0d5      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2222      	movs	r2, #34	; 0x22
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002094:	88f8      	ldrh	r0, [r7, #6]
 8002096:	893a      	ldrh	r2, [r7, #8]
 8002098:	8979      	ldrh	r1, [r7, #10]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4603      	mov	r3, r0
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fd71 	bl	8002b8c <I2C_RequestMemoryRead>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0ad      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d90e      	bls.n	80020e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	22ff      	movs	r2, #255	; 0xff
 80020ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	8979      	ldrh	r1, [r7, #10]
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_I2C_Mem_Read+0x22c>)
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f001 fc89 	bl	80039f4 <I2C_TransferConfig>
 80020e2:	e00f      	b.n	8002104 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	8979      	ldrh	r1, [r7, #10]
 80020f6:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_I2C_Mem_Read+0x22c>)
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 fc78 	bl	80039f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	2200      	movs	r2, #0
 800210c:	2104      	movs	r1, #4
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f001 fa35 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07c      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d034      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x1d0>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	d130      	bne.n	80021c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	2200      	movs	r2, #0
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f001 fa06 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04d      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2bff      	cmp	r3, #255	; 0xff
 8002184:	d90e      	bls.n	80021a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	22ff      	movs	r2, #255	; 0xff
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	b2da      	uxtb	r2, r3
 8002192:	8979      	ldrh	r1, [r7, #10]
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f001 fc29 	bl	80039f4 <I2C_TransferConfig>
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f001 fc18 	bl	80039f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d19a      	bne.n	8002104 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f001 fa69 	bl	80036aa <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e01a      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2220      	movs	r2, #32
 80021e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_I2C_Mem_Read+0x230>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	80002400 	.word	0x80002400
 8002224:	fe00e800 	.word	0xfe00e800

08002228 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	68f9      	ldr	r1, [r7, #12]
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
  }
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00f      	beq.n	800229e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00f      	beq.n	80022c8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f043 0208 	orr.w	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00f      	beq.n	80022f2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f043 0202 	orr.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 030b 	and.w	r3, r3, #11
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 ffe1 	bl	80032cc <I2C_ITError>
  }
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
 800235a:	4613      	mov	r3, r2
 800235c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <I2C_Slave_ISR_IT+0x24>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e0e1      	b.n	80025b6 <I2C_Slave_ISR_IT+0x1e8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800240e:	6939      	ldr	r1, [r7, #16]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fdf5 	bl	8003000 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04b      	beq.n	80024b8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002426:	2b00      	cmp	r3, #0
 8002428:	d046      	beq.n	80024b8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d128      	bne.n	8002486 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b28      	cmp	r3, #40	; 0x28
 800243e:	d108      	bne.n	8002452 <I2C_Slave_ISR_IT+0x84>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002446:	d104      	bne.n	8002452 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 feea 	bl	8003224 <I2C_ITListenCplt>
 8002450:	e031      	b.n	80024b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b29      	cmp	r3, #41	; 0x29
 800245c:	d10e      	bne.n	800247c <I2C_Slave_ISR_IT+0xae>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002464:	d00a      	beq.n	800247c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2210      	movs	r2, #16
 800246c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f001 f843 	bl	80034fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fc9e 	bl	8002db6 <I2C_ITSlaveSeqCplt>
 800247a:	e01c      	b.n	80024b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2210      	movs	r2, #16
 8002482:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002484:	e08f      	b.n	80025a6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2210      	movs	r2, #16
 800248c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <I2C_Slave_ISR_IT+0xda>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a6:	d17e      	bne.n	80025a6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	4619      	mov	r1, r3
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 ff0c 	bl	80032cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80024b4:	e077      	b.n	80025a6 <I2C_Slave_ISR_IT+0x1d8>
 80024b6:	e076      	b.n	80025a6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d02f      	beq.n	8002522 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02a      	beq.n	8002522 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d018      	beq.n	8002508 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d14b      	bne.n	80025aa <I2C_Slave_ISR_IT+0x1dc>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002518:	d047      	beq.n	80025aa <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fc4b 	bl	8002db6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002520:	e043      	b.n	80025aa <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002536:	6939      	ldr	r1, [r7, #16]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fb7b 	bl	8002c34 <I2C_ITAddrCplt>
 800253e:	e035      	b.n	80025ac <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d030      	beq.n	80025ac <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02b      	beq.n	80025ac <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d018      	beq.n	8002590 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
 800258e:	e00d      	b.n	80025ac <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002596:	d002      	beq.n	800259e <I2C_Slave_ISR_IT+0x1d0>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fc09 	bl	8002db6 <I2C_ITSlaveSeqCplt>
 80025a4:	e002      	b.n	80025ac <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80025aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b088      	sub	sp, #32
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <I2C_Master_ISR_DMA+0x1a>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0d9      	b.n	800278c <I2C_Master_ISR_DMA+0x1ce>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2210      	movs	r2, #16
 80025fa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002608:	2120      	movs	r1, #32
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f001 fa24 	bl	8003a58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 ff72 	bl	80034fa <I2C_Flush_TXDR>
 8002616:	e0b4      	b.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d071      	beq.n	8002706 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002628:	2b00      	cmp	r3, #0
 800262a:	d06c      	beq.n	8002706 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04e      	beq.n	80026e4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002652:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2bff      	cmp	r3, #255	; 0xff
 800265c:	d906      	bls.n	800266c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e010      	b.n	800268e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800267e:	d003      	beq.n	8002688 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e002      	b.n	800268e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	8a79      	ldrh	r1, [r7, #18]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f001 f9a9 	bl	80039f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b22      	cmp	r3, #34	; 0x22
 80026be:	d108      	bne.n	80026d2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80026d0:	e057      	b.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80026e2:	e04e      	b.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f2:	d003      	beq.n	80026fc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fb21 	bl	8002d3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80026fa:	e042      	b.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026fc:	2140      	movs	r1, #64	; 0x40
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fde4 	bl	80032cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002704:	e03d      	b.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d028      	beq.n	8002762 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002716:	2b00      	cmp	r3, #0
 8002718:	d023      	beq.n	8002762 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d119      	bne.n	8002758 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002732:	d025      	beq.n	8002780 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800273c:	d108      	bne.n	8002750 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800274e:	e017      	b.n	8002780 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 faf3 	bl	8002d3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002756:	e013      	b.n	8002780 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fdb6 	bl	80032cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002760:	e00e      	b.n	8002780 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fb79 	bl	8002e70 <I2C_ITMasterCplt>
 800277e:	e000      	b.n	8002782 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002780:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80027a0:	4b8d      	ldr	r3, [pc, #564]	; (80029d8 <I2C_Mem_ISR_DMA+0x244>)
 80027a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <I2C_Mem_ISR_DMA+0x1e>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e10e      	b.n	80029d0 <I2C_Mem_ISR_DMA+0x23c>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d011      	beq.n	80027f2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2210      	movs	r2, #16
 80027d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80027e2:	2120      	movs	r1, #32
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f001 f937 	bl	8003a58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fe85 	bl	80034fa <I2C_Flush_TXDR>
 80027f0:	e0e9      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f04f 32ff 	mov.w	r2, #4294967295
 8002816:	651a      	str	r2, [r3, #80]	; 0x50
 8002818:	e0d5      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05f      	beq.n	80028e4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800282a:	2b00      	cmp	r3, #0
 800282c:	d05a      	beq.n	80028e4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800282e:	2101      	movs	r1, #1
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f001 f995 	bl	8003b60 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002836:	2110      	movs	r1, #16
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f001 f90d 	bl	8003a58 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d048      	beq.n	80028da <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	d910      	bls.n	8002874 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	b299      	uxth	r1, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	b2da      	uxtb	r2, r3
 8002864:	2300      	movs	r3, #0
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f001 f8c1 	bl	80039f4 <I2C_TransferConfig>
 8002872:	e011      	b.n	8002898 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	b299      	uxth	r1, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	b2da      	uxtb	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f001 f8ae 	bl	80039f4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b22      	cmp	r3, #34	; 0x22
 80028b4:	d108      	bne.n	80028c8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80028c6:	e07e      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80028d8:	e075      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fcf5 	bl	80032cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80028e2:	e070      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d05d      	beq.n	80029aa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d058      	beq.n	80029aa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028f8:	2101      	movs	r1, #1
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f001 f930 	bl	8003b60 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002900:	2110      	movs	r1, #16
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f001 f8a8 	bl	8003a58 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b22      	cmp	r3, #34	; 0x22
 8002912:	d101      	bne.n	8002918 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <I2C_Mem_ISR_DMA+0x248>)
 8002916:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2bff      	cmp	r3, #255	; 0xff
 8002920:	d910      	bls.n	8002944 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	b299      	uxth	r1, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	b2da      	uxtb	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f001 f859 	bl	80039f4 <I2C_TransferConfig>
 8002942:	e011      	b.n	8002968 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	b299      	uxth	r1, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	b2da      	uxtb	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f001 f846 	bl	80039f4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b22      	cmp	r3, #34	; 0x22
 8002984:	d108      	bne.n	8002998 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002994:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002996:	e016      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a8:	e00d      	b.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fa55 	bl	8002e70 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	80002000 	.word	0x80002000
 80029dc:	80002400 	.word	0x80002400

080029e0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <I2C_Slave_ISR_DMA+0x24>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0bf      	b.n	8002b84 <I2C_Slave_ISR_DMA+0x1a4>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 faec 	bl	8003000 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8095 	beq.w	8002b5e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 808f 	beq.w	8002b5e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07d      	beq.n	8002b50 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d128      	bne.n	8002af0 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b28      	cmp	r3, #40	; 0x28
 8002aa8:	d108      	bne.n	8002abc <I2C_Slave_ISR_DMA+0xdc>
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ab0:	d104      	bne.n	8002abc <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fbb5 	bl	8003224 <I2C_ITListenCplt>
 8002aba:	e048      	b.n	8002b4e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b29      	cmp	r3, #41	; 0x29
 8002ac6:	d10e      	bne.n	8002ae6 <I2C_Slave_ISR_DMA+0x106>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ace:	d00a      	beq.n	8002ae6 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fd0e 	bl	80034fa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f969 	bl	8002db6 <I2C_ITSlaveSeqCplt>
 8002ae4:	e033      	b.n	8002b4e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2210      	movs	r2, #16
 8002aec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002aee:	e034      	b.n	8002b5a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <I2C_Slave_ISR_DMA+0x13a>
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b18:	d11f      	bne.n	8002b5a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b21      	cmp	r3, #33	; 0x21
 8002b1e:	d002      	beq.n	8002b26 <I2C_Slave_ISR_DMA+0x146>
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b29      	cmp	r3, #41	; 0x29
 8002b24:	d103      	bne.n	8002b2e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b2c:	e008      	b.n	8002b40 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	2b22      	cmp	r3, #34	; 0x22
 8002b32:	d002      	beq.n	8002b3a <I2C_Slave_ISR_DMA+0x15a>
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b2a      	cmp	r3, #42	; 0x2a
 8002b38:	d102      	bne.n	8002b40 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2222      	movs	r2, #34	; 0x22
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	4619      	mov	r1, r3
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fbc0 	bl	80032cc <I2C_ITError>
      if (treatdmanack == 1U)
 8002b4c:	e005      	b.n	8002b5a <I2C_Slave_ISR_DMA+0x17a>
 8002b4e:	e004      	b.n	8002b5a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b58:	e00f      	b.n	8002b7a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002b5a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b5c:	e00d      	b.n	8002b7a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f85d 	bl	8002c34 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	813b      	strh	r3, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <I2C_RequestMemoryRead+0xa4>)
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 ff1e 	bl	80039f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fd2d 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e02c      	b.n	8002c26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
 8002bdc:	e015      	b.n	8002c0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fd13 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e012      	b.n	8002c26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c00:	893b      	ldrh	r3, [r7, #8]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fcb2 	bl	800357e <I2C_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	80002000 	.word	0x80002000

08002c34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c4a:	2b28      	cmp	r3, #40	; 0x28
 8002c4c:	d16a      	bne.n	8002d24 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d138      	bne.n	8002d04 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	89bb      	ldrh	r3, [r7, #12]
 8002c9a:	4053      	eors	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f003 0306 	and.w	r3, r3, #6
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11c      	bne.n	8002ce0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d13b      	bne.n	8002d34 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cd2:	89ba      	ldrh	r2, [r7, #12]
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fb38 	bl	800234e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cde:	e029      	b.n	8002d34 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ce0:	893b      	ldrh	r3, [r7, #8]
 8002ce2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 ff39 	bl	8003b60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cf6:	89ba      	ldrh	r2, [r7, #12]
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fb26 	bl	800234e <HAL_I2C_AddrCallback>
}
 8002d02:	e017      	b.n	8002d34 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 ff29 	bl	8003b60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d16:	89ba      	ldrh	r2, [r7, #12]
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fb16 	bl	800234e <HAL_I2C_AddrCallback>
}
 8002d22:	e007      	b.n	8002d34 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b21      	cmp	r3, #33	; 0x21
 8002d56:	d115      	bne.n	8002d84 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2211      	movs	r2, #17
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fef6 	bl	8003b60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fac8 	bl	8002312 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d82:	e014      	b.n	8002dae <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2212      	movs	r2, #18
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d98:	2102      	movs	r1, #2
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fee0 	bl	8003b60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fabc 	bl	8002326 <HAL_I2C_MasterRxCpltCallback>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e00c      	b.n	8002e04 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e02:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b29      	cmp	r3, #41	; 0x29
 8002e0e:	d112      	bne.n	8002e36 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2228      	movs	r2, #40	; 0x28
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2221      	movs	r2, #33	; 0x21
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fe9d 	bl	8003b60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fa83 	bl	800233a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e34:	e017      	b.n	8002e66 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e40:	d111      	bne.n	8002e66 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2228      	movs	r2, #40	; 0x28
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2222      	movs	r2, #34	; 0x22
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e50:	2102      	movs	r1, #2
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fe84 	bl	8003b60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fd fe97 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b21      	cmp	r3, #33	; 0x21
 8002e90:	d107      	bne.n	8002ea2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e92:	2101      	movs	r1, #1
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fe63 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2211      	movs	r2, #17
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea0:	e00c      	b.n	8002ebc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b22      	cmp	r3, #34	; 0x22
 8002eac:	d106      	bne.n	8002ebc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eae:	2102      	movs	r1, #2
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fe55 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2212      	movs	r2, #18
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <I2C_ITMasterCplt+0x188>)
 8002ec8:	400b      	ands	r3, r1
 8002eca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a49      	ldr	r2, [pc, #292]	; (8002ffc <I2C_ITMasterCplt+0x18c>)
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b60      	cmp	r3, #96	; 0x60
 8002f00:	d10a      	bne.n	8002f18 <I2C_ITMasterCplt+0xa8>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f16:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 faee 	bl	80034fa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b60      	cmp	r3, #96	; 0x60
 8002f2e:	d002      	beq.n	8002f36 <I2C_ITMasterCplt+0xc6>
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9c5 	bl	80032cc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f42:	e054      	b.n	8002fee <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b21      	cmp	r3, #33	; 0x21
 8002f4e:	d124      	bne.n	8002f9a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d10b      	bne.n	8002f82 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff f9ff 	bl	800237e <HAL_I2C_MemTxCpltCallback>
}
 8002f80:	e035      	b.n	8002fee <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff f9bd 	bl	8002312 <HAL_I2C_MasterTxCpltCallback>
}
 8002f98:	e029      	b.n	8002fee <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b22      	cmp	r3, #34	; 0x22
 8002fa4:	d123      	bne.n	8002fee <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d10b      	bne.n	8002fd8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff f9de 	bl	8002392 <HAL_I2C_MemRxCpltCallback>
}
 8002fd6:	e00a      	b.n	8002fee <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff f99c 	bl	8002326 <HAL_I2C_MasterRxCpltCallback>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	fe00e800 	.word	0xfe00e800
 8002ffc:	ffff0000 	.word	0xffff0000

08003000 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2220      	movs	r2, #32
 8003024:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b21      	cmp	r3, #33	; 0x21
 800302a:	d002      	beq.n	8003032 <I2C_ITSlaveCplt+0x32>
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b29      	cmp	r3, #41	; 0x29
 8003030:	d108      	bne.n	8003044 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003032:	f248 0101 	movw	r1, #32769	; 0x8001
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fd92 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2221      	movs	r2, #33	; 0x21
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
 8003042:	e019      	b.n	8003078 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b22      	cmp	r3, #34	; 0x22
 8003048:	d002      	beq.n	8003050 <I2C_ITSlaveCplt+0x50>
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b2a      	cmp	r3, #42	; 0x2a
 800304e:	d108      	bne.n	8003062 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003050:	f248 0102 	movw	r1, #32770	; 0x8002
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fd83 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2222      	movs	r2, #34	; 0x22
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
 8003060:	e00a      	b.n	8003078 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b28      	cmp	r3, #40	; 0x28
 8003066:	d107      	bne.n	8003078 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003068:	f248 0103 	movw	r1, #32771	; 0x8003
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fd77 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003086:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b62      	ldr	r3, [pc, #392]	; (800321c <I2C_ITSlaveCplt+0x21c>)
 8003094:	400b      	ands	r3, r1
 8003096:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa2e 	bl	80034fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01f      	beq.n	8003100 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030ce:	e017      	b.n	8003100 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d020      	beq.n	800314c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0204 	orr.w	r2, r3, #4
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8a4 	bl	80032cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b28      	cmp	r3, #40	; 0x28
 800318e:	d141      	bne.n	8003214 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f846 	bl	8003224 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003198:	e03c      	b.n	8003214 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031a2:	d014      	beq.n	80031ce <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe06 	bl	8002db6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <I2C_ITSlaveCplt+0x220>)
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff f8cf 	bl	800236a <HAL_I2C_ListenCpltCallback>
}
 80031cc:	e022      	b.n	8003214 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	d10e      	bne.n	80031f8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7fd fccf 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
}
 80031f6:	e00d      	b.n	8003214 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff f893 	bl	800233a <HAL_I2C_SlaveTxCpltCallback>
}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	fe00e800 	.word	0xfe00e800
 8003220:	ffff0000 	.word	0xffff0000

08003224 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <I2C_ITListenCplt+0xa4>)
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d022      	beq.n	80032a0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d012      	beq.n	80032a0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032a0:	f248 0103 	movw	r1, #32771	; 0x8003
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fc5b 	bl	8003b60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2210      	movs	r2, #16
 80032b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f855 	bl	800236a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	ffff0000 	.word	0xffff0000

080032cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032dc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a6d      	ldr	r2, [pc, #436]	; (80034a0 <I2C_ITError+0x1d4>)
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b28      	cmp	r3, #40	; 0x28
 8003302:	d005      	beq.n	8003310 <I2C_ITError+0x44>
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b29      	cmp	r3, #41	; 0x29
 8003308:	d002      	beq.n	8003310 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b2a      	cmp	r3, #42	; 0x2a
 800330e:	d10b      	bne.n	8003328 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003310:	2103      	movs	r1, #3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fc24 	bl	8003b60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2228      	movs	r2, #40	; 0x28
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a60      	ldr	r2, [pc, #384]	; (80034a4 <I2C_ITError+0x1d8>)
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
 8003326:	e030      	b.n	800338a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003328:	f248 0103 	movw	r1, #32771	; 0x8003
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fc17 	bl	8003b60 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8e1 	bl	80034fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b60      	cmp	r3, #96	; 0x60
 8003342:	d01f      	beq.n	8003384 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d114      	bne.n	8003384 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b10      	cmp	r3, #16
 8003366:	d109      	bne.n	800337c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2210      	movs	r2, #16
 800336e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0204 	orr.w	r2, r3, #4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2220      	movs	r2, #32
 8003382:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d039      	beq.n	800340c <I2C_ITError+0x140>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b11      	cmp	r3, #17
 800339c:	d002      	beq.n	80033a4 <I2C_ITError+0xd8>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b21      	cmp	r3, #33	; 0x21
 80033a2:	d133      	bne.n	800340c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b2:	d107      	bne.n	80033c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe f91b 	bl	8001604 <HAL_DMA_GetState>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d017      	beq.n	8003404 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	4a33      	ldr	r2, [pc, #204]	; (80034a8 <I2C_ITError+0x1dc>)
 80033da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f8ca 	bl	8001582 <HAL_DMA_Abort_IT>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d04d      	beq.n	8003490 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033fe:	4610      	mov	r0, r2
 8003400:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003402:	e045      	b.n	8003490 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f851 	bl	80034ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800340a:	e041      	b.n	8003490 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d039      	beq.n	8003488 <I2C_ITError+0x1bc>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b12      	cmp	r3, #18
 8003418:	d002      	beq.n	8003420 <I2C_ITError+0x154>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b22      	cmp	r3, #34	; 0x22
 800341e:	d133      	bne.n	8003488 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d107      	bne.n	8003440 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe f8dd 	bl	8001604 <HAL_DMA_GetState>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d017      	beq.n	8003480 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <I2C_ITError+0x1dc>)
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe f88c 	bl	8001582 <HAL_DMA_Abort_IT>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d011      	beq.n	8003494 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800347a:	4610      	mov	r0, r2
 800347c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800347e:	e009      	b.n	8003494 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f813 	bl	80034ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003486:	e005      	b.n	8003494 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f80f 	bl	80034ac <I2C_TreatErrorCallback>
  }
}
 800348e:	e002      	b.n	8003496 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003494:	bf00      	nop
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	ffff0000 	.word	0xffff0000
 80034a4:	080023cf 	.word	0x080023cf
 80034a8:	08003543 	.word	0x08003543

080034ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d10e      	bne.n	80034de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe ff6f 	bl	80023ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034dc:	e009      	b.n	80034f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe ff5a 	bl	80023a6 <HAL_I2C_ErrorCallback>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d103      	bne.n	8003518 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d007      	beq.n	8003536 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	619a      	str	r2, [r3, #24]
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	2200      	movs	r2, #0
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff ff9b 	bl	80034ac <I2C_TreatErrorCallback>
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	e031      	b.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d02d      	beq.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fd feb2 	bl	8001300 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d122      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d113      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e00f      	b.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	429a      	cmp	r2, r3
 8003610:	d0be      	beq.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003628:	e033      	b.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f900 	bl	8003834 <I2C_IsErrorOccurred>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e031      	b.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d025      	beq.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fd fe5b 	bl	8001300 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11a      	bne.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d013      	beq.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e007      	b.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d1c4      	bne.n	800362a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b6:	e02f      	b.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f8b9 	bl	8003834 <I2C_IsErrorOccurred>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e02d      	b.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	f7fd fe18 	bl	8001300 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11a      	bne.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d013      	beq.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d1c8      	bne.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800373c:	e06b      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f876 	bl	8003834 <I2C_IsErrorOccurred>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e069      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d138      	bne.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d105      	bne.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e055      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b10      	cmp	r3, #16
 8003786:	d107      	bne.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2210      	movs	r2, #16
 800378e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2204      	movs	r2, #4
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
 8003796:	e002      	b.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2220      	movs	r2, #32
 80037a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e029      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fd fd95 	bl	8001300 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d116      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d00f      	beq.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d18c      	bne.n	800373e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	fe00e800 	.word	0xfe00e800

08003834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d068      	beq.n	8003932 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003868:	e049      	b.n	80038fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d045      	beq.n	80038fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fd fd45 	bl	8001300 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_IsErrorOccurred+0x54>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d13a      	bne.n	80038fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800389a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038aa:	d121      	bne.n	80038f0 <I2C_IsErrorOccurred+0xbc>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b2:	d01d      	beq.n	80038f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d01a      	beq.n	80038f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038ca:	f7fd fd19 	bl	8001300 <HAL_GetTick>
 80038ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d0:	e00e      	b.n	80038f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038d2:	f7fd fd15 	bl	8001300 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b19      	cmp	r3, #25
 80038de:	d907      	bls.n	80038f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80038ee:	e006      	b.n	80038fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d1e9      	bne.n	80038d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b20      	cmp	r3, #32
 800390a:	d003      	beq.n	8003914 <I2C_IsErrorOccurred+0xe0>
 800390c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0aa      	beq.n	800386a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2220      	movs	r2, #32
 8003922:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003976:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003998:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01c      	beq.n	80039e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fda6 	bl	80034fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <I2C_IsErrorOccurred+0x1bc>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3728      	adds	r7, #40	; 0x28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	fe00e800 	.word	0xfe00e800

080039f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	4613      	mov	r3, r2
 8003a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a06:	897b      	ldrh	r3, [r7, #10]
 8003a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a0c:	7a7b      	ldrb	r3, [r7, #9]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	0d5b      	lsrs	r3, r3, #21
 8003a2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <I2C_TransferConfig+0x60>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	43db      	mvns	r3, r3
 8003a38:	ea02 0103 	and.w	r1, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	03ff63ff 	.word	0x03ff63ff

08003a58 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <I2C_Enable_IRQ+0xfc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d032      	beq.n	8003ad8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a76:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <I2C_Enable_IRQ+0x100>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d02d      	beq.n	8003ad8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a80:	4a36      	ldr	r2, [pc, #216]	; (8003b5c <I2C_Enable_IRQ+0x104>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d028      	beq.n	8003ad8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da03      	bge.n	8003a96 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003aa6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003ab8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d103      	bne.n	8003ac8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003ac6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d133      	bne.n	8003b36 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f043 0320 	orr.w	r3, r3, #32
 8003ad4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ad6:	e02e      	b.n	8003b36 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da03      	bge.n	8003ae8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003ae6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003af8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003b0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d103      	bne.n	8003b1a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d103      	bne.n	8003b28 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d103      	bne.n	8003b36 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	080025bf 	.word	0x080025bf
 8003b58:	080029e1 	.word	0x080029e1
 8003b5c:	08002795 	.word	0x08002795

08003b60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00f      	beq.n	8003b9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b8e:	2b28      	cmp	r3, #40	; 0x28
 8003b90:	d003      	beq.n	8003b9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00f      	beq.n	8003bc4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003baa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bb8:	2b28      	cmp	r3, #40	; 0x28
 8003bba:	d003      	beq.n	8003bc4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003bc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da03      	bge.n	8003bd4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d103      	bne.n	8003be2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d103      	bne.n	8003bf0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f043 0320 	orr.w	r3, r3, #32
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d103      	bne.n	8003bfe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43da      	mvns	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d138      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e032      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d139      	bne.n	8003d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e033      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2224      	movs	r2, #36	; 0x24
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40007000 	.word	0x40007000

08003d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d96:	d130      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d038      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2232      	movs	r2, #50	; 0x32
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dcc:	e002      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d102      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f2      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d110      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d007      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	20000004 	.word	0x20000004
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f000 bc02 	b.w	800464c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e48:	4b96      	ldr	r3, [pc, #600]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e52:	4b94      	ldr	r3, [pc, #592]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80e4 	beq.w	8004032 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	f040 808b 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 8087 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e80:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e3d9      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	4b81      	ldr	r3, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x7e>
 8003ea8:	4b7e      	ldr	r3, [pc, #504]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	e005      	b.n	8003ebe <HAL_RCC_OscConfig+0x8a>
 8003eb2:	4b7c      	ldr	r3, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d223      	bcs.n	8003f0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd8c 	bl	80049e4 <RCC_SetFlashLatencyFromMSIRange>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e3ba      	b.n	800464c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed6:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a72      	ldr	r2, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	496d      	ldr	r1, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef4:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	4968      	ldr	r1, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e025      	b.n	8003f56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a65      	ldr	r2, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4960      	ldr	r1, [pc, #384]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	495b      	ldr	r1, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd4c 	bl	80049e4 <RCC_SetFlashLatencyFromMSIRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e37a      	b.n	800464c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f56:	f000 fc81 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	4950      	ldr	r1, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a4e      	ldr	r2, [pc, #312]	; (80040ac <HAL_RCC_OscConfig+0x278>)
 8003f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd f970 	bl	8001260 <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d052      	beq.n	8004030 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	e35e      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d032      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f96:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd f9ad 	bl	8001300 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003faa:	f7fd f9a9 	bl	8001300 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e347      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fce:	f043 0308 	orr.w	r3, r3, #8
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4930      	ldr	r1, [pc, #192]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	492b      	ldr	r1, [pc, #172]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
 8003ffa:	e01a      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004008:	f7fd f97a 	bl	8001300 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fd f976 	bl	8001300 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e314      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1dc>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d073      	beq.n	8004126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x21c>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d10e      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d063      	beq.n	8004124 <HAL_RCC_OscConfig+0x2f0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15f      	bne.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e2f1      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x24c>
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e025      	b.n	80040cc <HAL_RCC_OscConfig+0x298>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d114      	bne.n	80040b4 <HAL_RCC_OscConfig+0x280>
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e013      	b.n	80040cc <HAL_RCC_OscConfig+0x298>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08006f18 	.word	0x08006f18
 80040ac:	20000004 	.word	0x20000004
 80040b0:	20000008 	.word	0x20000008
 80040b4:	4ba0      	ldr	r3, [pc, #640]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a9f      	ldr	r2, [pc, #636]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b9d      	ldr	r3, [pc, #628]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a9c      	ldr	r2, [pc, #624]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd f914 	bl	8001300 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd f910 	bl	8001300 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2ae      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	4b92      	ldr	r3, [pc, #584]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x2a8>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd f900 	bl	8001300 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd f8fc 	bl	8001300 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e29a      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d0>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d060      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x310>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d119      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d116      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_OscConfig+0x328>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e277      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b76      	ldr	r3, [pc, #472]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4973      	ldr	r1, [pc, #460]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004170:	e040      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d023      	beq.n	80041c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417a:	4b6f      	ldr	r3, [pc, #444]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6e      	ldr	r2, [pc, #440]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd f8bb 	bl	8001300 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fd f8b7 	bl	8001300 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e255      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	495f      	ldr	r1, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e018      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b5d      	ldr	r3, [pc, #372]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5c      	ldr	r2, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd f897 	bl	8001300 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fd f893 	bl	8001300 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e231      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03c      	beq.n	800427a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01c      	beq.n	8004242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fd f872 	bl	8001300 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004220:	f7fd f86e 	bl	8001300 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e20c      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RCC_OscConfig+0x3ec>
 8004240:	e01b      	b.n	800427a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd f855 	bl	8001300 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd f851 	bl	8001300 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1ef      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ef      	bne.n	800425a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a6 	beq.w	80043d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	; 0x58
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	4b21      	ldr	r3, [pc, #132]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d118      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042cc:	f7fd f818 	bl	8001300 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d4:	f7fd f814 	bl	8001300 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1b2      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x4d8>
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	e029      	b.n	8004360 <HAL_RCC_OscConfig+0x52c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d115      	bne.n	8004340 <HAL_RCC_OscConfig+0x50c>
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004334:	e014      	b.n	8004360 <HAL_RCC_OscConfig+0x52c>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
 8004340:	4b9a      	ldr	r3, [pc, #616]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	4a99      	ldr	r2, [pc, #612]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004350:	4b96      	ldr	r3, [pc, #600]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a95      	ldr	r2, [pc, #596]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fc ffca 	bl	8001300 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fc ffc6 	bl	8001300 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e162      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b89      	ldr	r3, [pc, #548]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ed      	beq.n	8004370 <HAL_RCC_OscConfig+0x53c>
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fc ffb3 	bl	8001300 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fc ffaf 	bl	8001300 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e14b      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b4:	4b7d      	ldr	r3, [pc, #500]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ed      	bne.n	800439e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b78      	ldr	r3, [pc, #480]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a77      	ldr	r2, [pc, #476]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03c      	beq.n	800445a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01c      	beq.n	8004422 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e8:	4b70      	ldr	r3, [pc, #448]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ee:	4a6f      	ldr	r2, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc ff82 	bl	8001300 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004400:	f7fc ff7e 	bl	8001300 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e11c      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004412:	4b66      	ldr	r3, [pc, #408]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <HAL_RCC_OscConfig+0x5cc>
 8004420:	e01b      	b.n	800445a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004428:	4a60      	ldr	r2, [pc, #384]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fc ff65 	bl	8001300 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443a:	f7fc ff61 	bl	8001300 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0ff      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800444c:	4b57      	ldr	r3, [pc, #348]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ef      	bne.n	800443a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80f3 	beq.w	800464a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b02      	cmp	r3, #2
 800446a:	f040 80c9 	bne.w	8004600 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800446e:	4b4f      	ldr	r3, [pc, #316]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d12c      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	3b01      	subs	r3, #1
 800448e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d123      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d11b      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d113      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d06b      	beq.n	80045b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d062      	beq.n	80045a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0ac      	b.n	800464c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044fe:	f7fc feff 	bl	8001300 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fc fefb 	bl	8001300 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e099      	b.n	800464c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x77c>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004534:	3a01      	subs	r2, #1
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800453e:	0212      	lsls	r2, r2, #8
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0552      	lsls	r2, r2, #21
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004552:	0852      	lsrs	r2, r2, #1
 8004554:	3a01      	subs	r2, #1
 8004556:	0652      	lsls	r2, r2, #25
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800455e:	06d2      	lsls	r2, r2, #27
 8004560:	430a      	orrs	r2, r1
 8004562:	4912      	ldr	r1, [pc, #72]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004564:	4313      	orrs	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004580:	f7fc febe 	bl	8001300 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fc feba 	bl	8001300 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e058      	b.n	800464c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045a6:	e050      	b.n	800464a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04f      	b.n	800464c <HAL_RCC_OscConfig+0x818>
 80045ac:	40021000 	.word	0x40021000
 80045b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d144      	bne.n	800464a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c0:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a20      	ldr	r2, [pc, #128]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d8:	f7fc fe92 	bl	8001300 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fc fe8e 	bl	8001300 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e02c      	b.n	800464c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	4b18      	ldr	r3, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x7ac>
 80045fe:	e024      	b.n	800464a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d01f      	beq.n	8004646 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fc fe75 	bl	8001300 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461a:	f7fc fe71 	bl	8001300 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e00f      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4905      	ldr	r1, [pc, #20]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_OscConfig+0x824>)
 8004640:	4013      	ands	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
 8004644:	e001      	b.n	800464a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	feeefffc 	.word	0xfeeefffc

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0e7      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b75      	ldr	r3, [pc, #468]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 0207 	bic.w	r2, r3, #7
 8004686:	4970      	ldr	r1, [pc, #448]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cf      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d908      	bls.n	80046ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4960      	ldr	r1, [pc, #384]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04c      	beq.n	8004774 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b5a      	ldr	r3, [pc, #360]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d121      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0a6      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d115      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e09a      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004712:	4b4e      	ldr	r3, [pc, #312]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e08e      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e086      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b46      	ldr	r3, [pc, #280]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4943      	ldr	r1, [pc, #268]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fc fddc 	bl	8001300 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fc fdd8 	bl	8001300 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e06e      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b31      	ldr	r3, [pc, #196]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	429a      	cmp	r2, r3
 800478e:	d208      	bcs.n	80047a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	492b      	ldr	r1, [pc, #172]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d210      	bcs.n	80047d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 0207 	bic.w	r2, r3, #7
 80047b8:	4923      	ldr	r1, [pc, #140]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e036      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4918      	ldr	r1, [pc, #96]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fc:	4b13      	ldr	r3, [pc, #76]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4910      	ldr	r1, [pc, #64]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004810:	f000 f824 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	490b      	ldr	r1, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x1f4>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1f8>)
 800482e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1fc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fc fd13 	bl	8001260 <HAL_InitTick>
 800483a:	4603      	mov	r3, r0
 800483c:	72fb      	strb	r3, [r7, #11]

  return status;
 800483e:	7afb      	ldrb	r3, [r7, #11]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40022000 	.word	0x40022000
 800484c:	40021000 	.word	0x40021000
 8004850:	08006f18 	.word	0x08006f18
 8004854:	20000004 	.word	0x20000004
 8004858:	20000008 	.word	0x20000008

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486a:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004874:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x34>
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d121      	bne.n	80048ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d11e      	bne.n	80048ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004890:	4b34      	ldr	r3, [pc, #208]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 800489e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e005      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d102      	bne.n	80048da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_GetSysClockFreq+0x110>)
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	e004      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048e0:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCC_GetSysClockFreq+0x114>)
 80048e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d134      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0xa6>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d003      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0xac>
 8004900:	e005      	b.n	800490e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_RCC_GetSysClockFreq+0x110>)
 8004904:	617b      	str	r3, [r7, #20]
      break;
 8004906:	e005      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_GetSysClockFreq+0x114>)
 800490a:	617b      	str	r3, [r7, #20]
      break;
 800490c:	e002      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	617b      	str	r3, [r7, #20]
      break;
 8004912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	3301      	adds	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	fb03 f202 	mul.w	r2, r3, r2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	0e5b      	lsrs	r3, r3, #25
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	3301      	adds	r3, #1
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004954:	69bb      	ldr	r3, [r7, #24]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	08006f30 	.word	0x08006f30
 800496c:	00f42400 	.word	0x00f42400
 8004970:	007a1200 	.word	0x007a1200

08004974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_RCC_GetHCLKFreq+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000004 	.word	0x20000004

0800498c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004990:	f7ff fff0 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	08006f28 	.word	0x08006f28

080049b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049bc:	f7ff ffda 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	0adb      	lsrs	r3, r3, #11
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	08006f28 	.word	0x08006f28

080049e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049fc:	f7ff f9b6 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004a00:	6178      	str	r0, [r7, #20]
 8004a02:	e014      	b.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a1c:	f7ff f9a6 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a34:	d10b      	bne.n	8004a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d919      	bls.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a40:	d902      	bls.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a42:	2302      	movs	r3, #2
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	e013      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a48:	2301      	movs	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e010      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d902      	bls.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a54:	2303      	movs	r3, #3
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e00a      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d102      	bne.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a60:	2302      	movs	r3, #2
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e004      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b70      	cmp	r3, #112	; 0x70
 8004a6a:	d101      	bne.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 0207 	bic.w	r2, r3, #7
 8004a78:	4909      	ldr	r1, [pc, #36]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d001      	beq.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40022000 	.word	0x40022000

08004aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aac:	2300      	movs	r3, #0
 8004aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d031      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ac8:	d01a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004aca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ace:	d814      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ad8:	d10f      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ada:	4b5d      	ldr	r3, [pc, #372]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ae6:	e00c      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9de 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004af8:	e003      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	74fb      	strb	r3, [r7, #19]
      break;
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b08:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	494e      	ldr	r1, [pc, #312]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b1e:	e001      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 809e 	beq.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b36:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6593      	str	r3, [r2, #88]	; 0x58
 8004b58:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b68:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a39      	ldr	r2, [pc, #228]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b74:	f7fc fbc4 	bl	8001300 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b7a:	e009      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fc fbc0 	bl	8001300 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d902      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b8e:	e005      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d15a      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01e      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d019      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bea:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d016      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fc fb80 	bl	8001300 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fc fb7c 	bl	8001300 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d902      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	74fb      	strb	r3, [r7, #19]
            break;
 8004c1a:	e006      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ec      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	4904      	ldr	r1, [pc, #16]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c46:	e009      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5c:	7c7b      	ldrb	r3, [r7, #17]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4b8a      	ldr	r3, [pc, #552]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	4a89      	ldr	r2, [pc, #548]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7a:	4b84      	ldr	r3, [pc, #528]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f023 0203 	bic.w	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4980      	ldr	r1, [pc, #512]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9c:	4b7b      	ldr	r3, [pc, #492]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 020c 	bic.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	4978      	ldr	r1, [pc, #480]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cbe:	4b73      	ldr	r3, [pc, #460]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	496f      	ldr	r1, [pc, #444]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	4967      	ldr	r1, [pc, #412]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d02:	4b62      	ldr	r3, [pc, #392]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	495e      	ldr	r1, [pc, #376]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4956      	ldr	r1, [pc, #344]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d46:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	494d      	ldr	r1, [pc, #308]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d028      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d68:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4945      	ldr	r1, [pc, #276]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d86:	d106      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a3f      	ldr	r2, [pc, #252]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
 8004d94:	e011      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d9e:	d10c      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	2101      	movs	r1, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f882 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d028      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	492d      	ldr	r1, [pc, #180]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de4:	d106      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df0:	60d3      	str	r3, [r2, #12]
 8004df2:	e011      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f853 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	4916      	ldr	r1, [pc, #88]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e42:	d10c      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	2102      	movs	r1, #2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f830 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e78:	4904      	ldr	r1, [pc, #16]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000

08004e90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000

08004eb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ebe:	4b74      	ldr	r3, [pc, #464]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eca:	4b71      	ldr	r3, [pc, #452]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0203 	and.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d10d      	bne.n	8004ef6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ee2:	4b6b      	ldr	r3, [pc, #428]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d047      	beq.n	8004f86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	e044      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d018      	beq.n	8004f36 <RCCEx_PLLSAI1_Config+0x86>
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d825      	bhi.n	8004f54 <RCCEx_PLLSAI1_Config+0xa4>
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d002      	beq.n	8004f12 <RCCEx_PLLSAI1_Config+0x62>
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d009      	beq.n	8004f24 <RCCEx_PLLSAI1_Config+0x74>
 8004f10:	e020      	b.n	8004f54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f12:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11d      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f22:	e01a      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f24:	4b5a      	ldr	r3, [pc, #360]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f34:	e013      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f36:	4b56      	ldr	r3, [pc, #344]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f42:	4b53      	ldr	r3, [pc, #332]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f52:	e006      	b.n	8004f62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
      break;
 8004f58:	e004      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10d      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f6a:	4b49      	ldr	r3, [pc, #292]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	4943      	ldr	r1, [pc, #268]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d17c      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f8c:	4b40      	ldr	r3, [pc, #256]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f98:	f7fc f9b2 	bl	8001300 <HAL_GetTick>
 8004f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f9e:	e009      	b.n	8004fb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fa0:	f7fc f9ae 	bl	8001300 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d902      	bls.n	8004fb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb2:	e005      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fb4:	4b36      	ldr	r3, [pc, #216]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ef      	bne.n	8004fa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d15f      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d110      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68d2      	ldr	r2, [r2, #12]
 8004fe2:	06d2      	lsls	r2, r2, #27
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	492a      	ldr	r1, [pc, #168]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
 8004fec:	e027      	b.n	800503e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d112      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff4:	4b26      	ldr	r3, [pc, #152]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ffc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6892      	ldr	r2, [r2, #8]
 8005004:	0211      	lsls	r1, r2, #8
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6912      	ldr	r2, [r2, #16]
 800500a:	0852      	lsrs	r2, r2, #1
 800500c:	3a01      	subs	r2, #1
 800500e:	0552      	lsls	r2, r2, #21
 8005010:	430a      	orrs	r2, r1
 8005012:	491f      	ldr	r1, [pc, #124]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
 8005018:	e011      	b.n	800503e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005022:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6892      	ldr	r2, [r2, #8]
 800502a:	0211      	lsls	r1, r2, #8
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6952      	ldr	r2, [r2, #20]
 8005030:	0852      	lsrs	r2, r2, #1
 8005032:	3a01      	subs	r2, #1
 8005034:	0652      	lsls	r2, r2, #25
 8005036:	430a      	orrs	r2, r1
 8005038:	4915      	ldr	r1, [pc, #84]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a13      	ldr	r2, [pc, #76]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005048:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fc f959 	bl	8001300 <HAL_GetTick>
 800504e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005050:	e009      	b.n	8005066 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005052:	f7fc f955 	bl	8001300 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d902      	bls.n	8005066 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	73fb      	strb	r3, [r7, #15]
          break;
 8005064:	e005      	b.n	8005072 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ef      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	4903      	ldr	r1, [pc, #12]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000

08005094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e040      	b.n	8005128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fb fefc 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	; 0x24
 80050c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fade 	bl	800569c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8af 	bl	8005244 <UART_SetConfig>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e01b      	b.n	8005128 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800510e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb5d 	bl	80057e0 <UART_CheckIdleState>
 8005126:	4603      	mov	r3, r0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005144:	2b20      	cmp	r3, #32
 8005146:	d178      	bne.n	800523a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_UART_Transmit+0x24>
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e071      	b.n	800523c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2221      	movs	r2, #33	; 0x21
 8005164:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005166:	f7fc f8cb 	bl	8001300 <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005184:	d108      	bne.n	8005198 <HAL_UART_Transmit+0x68>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	e003      	b.n	80051a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051a0:	e030      	b.n	8005204 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fbbf 	bl	8005930 <UART_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e03c      	b.n	800523c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	b292      	uxth	r2, r2
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	3302      	adds	r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e008      	b.n	80051f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b292      	uxth	r2, r2
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1c8      	bne.n	80051a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fb88 	bl	8005930 <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e005      	b.n	800523c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005248:	b08a      	sub	sp, #40	; 0x28
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4313      	orrs	r3, r2
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4bb4      	ldr	r3, [pc, #720]	; (8005544 <UART_SetConfig+0x300>)
 8005274:	4013      	ands	r3, r2
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800527c:	430b      	orrs	r3, r1
 800527e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4aa9      	ldr	r2, [pc, #676]	; (8005548 <UART_SetConfig+0x304>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	4313      	orrs	r3, r2
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	430a      	orrs	r2, r1
 80052c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4aa0      	ldr	r2, [pc, #640]	; (800554c <UART_SetConfig+0x308>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d126      	bne.n	800531c <UART_SetConfig+0xd8>
 80052ce:	4ba0      	ldr	r3, [pc, #640]	; (8005550 <UART_SetConfig+0x30c>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d81b      	bhi.n	8005314 <UART_SetConfig+0xd0>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0xa0>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005305 	.word	0x08005305
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e080      	b.n	80053fe <UART_SetConfig+0x1ba>
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e07c      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e078      	b.n	80053fe <UART_SetConfig+0x1ba>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e074      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e070      	b.n	80053fe <UART_SetConfig+0x1ba>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a8c      	ldr	r2, [pc, #560]	; (8005554 <UART_SetConfig+0x310>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d138      	bne.n	8005398 <UART_SetConfig+0x154>
 8005326:	4b8a      	ldr	r3, [pc, #552]	; (8005550 <UART_SetConfig+0x30c>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d82d      	bhi.n	8005390 <UART_SetConfig+0x14c>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0xf8>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005371 	.word	0x08005371
 8005340:	08005391 	.word	0x08005391
 8005344:	08005391 	.word	0x08005391
 8005348:	08005391 	.word	0x08005391
 800534c:	08005381 	.word	0x08005381
 8005350:	08005391 	.word	0x08005391
 8005354:	08005391 	.word	0x08005391
 8005358:	08005391 	.word	0x08005391
 800535c:	08005379 	.word	0x08005379
 8005360:	08005391 	.word	0x08005391
 8005364:	08005391 	.word	0x08005391
 8005368:	08005391 	.word	0x08005391
 800536c:	08005389 	.word	0x08005389
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e042      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e03e      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e03a      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e036      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005396:	e032      	b.n	80053fe <UART_SetConfig+0x1ba>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6a      	ldr	r2, [pc, #424]	; (8005548 <UART_SetConfig+0x304>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d12a      	bne.n	80053f8 <UART_SetConfig+0x1b4>
 80053a2:	4b6b      	ldr	r3, [pc, #428]	; (8005550 <UART_SetConfig+0x30c>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b0:	d01a      	beq.n	80053e8 <UART_SetConfig+0x1a4>
 80053b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b6:	d81b      	bhi.n	80053f0 <UART_SetConfig+0x1ac>
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d00c      	beq.n	80053d8 <UART_SetConfig+0x194>
 80053be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c2:	d815      	bhi.n	80053f0 <UART_SetConfig+0x1ac>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <UART_SetConfig+0x18c>
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053cc:	d008      	beq.n	80053e0 <UART_SetConfig+0x19c>
 80053ce:	e00f      	b.n	80053f0 <UART_SetConfig+0x1ac>
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e012      	b.n	80053fe <UART_SetConfig+0x1ba>
 80053d8:	2302      	movs	r3, #2
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053de:	e00e      	b.n	80053fe <UART_SetConfig+0x1ba>
 80053e0:	2304      	movs	r3, #4
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e6:	e00a      	b.n	80053fe <UART_SetConfig+0x1ba>
 80053e8:	2308      	movs	r3, #8
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ee:	e006      	b.n	80053fe <UART_SetConfig+0x1ba>
 80053f0:	2310      	movs	r3, #16
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e002      	b.n	80053fe <UART_SetConfig+0x1ba>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a51      	ldr	r2, [pc, #324]	; (8005548 <UART_SetConfig+0x304>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d17a      	bne.n	80054fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800540c:	2b08      	cmp	r3, #8
 800540e:	d824      	bhi.n	800545a <UART_SetConfig+0x216>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0x1d4>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	0800543d 	.word	0x0800543d
 800541c:	0800545b 	.word	0x0800545b
 8005420:	08005445 	.word	0x08005445
 8005424:	0800545b 	.word	0x0800545b
 8005428:	0800544b 	.word	0x0800544b
 800542c:	0800545b 	.word	0x0800545b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800545b 	.word	0x0800545b
 8005438:	08005453 	.word	0x08005453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800543c:	f7ff faa6 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 8005440:	61f8      	str	r0, [r7, #28]
        break;
 8005442:	e010      	b.n	8005466 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005444:	4b44      	ldr	r3, [pc, #272]	; (8005558 <UART_SetConfig+0x314>)
 8005446:	61fb      	str	r3, [r7, #28]
        break;
 8005448:	e00d      	b.n	8005466 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544a:	f7ff fa07 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800544e:	61f8      	str	r0, [r7, #28]
        break;
 8005450:	e009      	b.n	8005466 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005456:	61fb      	str	r3, [r7, #28]
        break;
 8005458:	e005      	b.n	8005466 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005464:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8107 	beq.w	800567c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	429a      	cmp	r2, r3
 800547c:	d305      	bcc.n	800548a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	429a      	cmp	r2, r3
 8005488:	d903      	bls.n	8005492 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005490:	e0f4      	b.n	800567c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2200      	movs	r2, #0
 8005496:	461c      	mov	r4, r3
 8005498:	4615      	mov	r5, r2
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	022b      	lsls	r3, r5, #8
 80054a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054a8:	0222      	lsls	r2, r4, #8
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	6849      	ldr	r1, [r1, #4]
 80054ae:	0849      	lsrs	r1, r1, #1
 80054b0:	2000      	movs	r0, #0
 80054b2:	4688      	mov	r8, r1
 80054b4:	4681      	mov	r9, r0
 80054b6:	eb12 0a08 	adds.w	sl, r2, r8
 80054ba:	eb43 0b09 	adc.w	fp, r3, r9
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054cc:	4650      	mov	r0, sl
 80054ce:	4659      	mov	r1, fp
 80054d0:	f7fa fed6 	bl	8000280 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4613      	mov	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e2:	d308      	bcc.n	80054f6 <UART_SetConfig+0x2b2>
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ea:	d204      	bcs.n	80054f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e0c2      	b.n	800567c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054fc:	e0be      	b.n	800567c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005506:	d16a      	bne.n	80055de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800550c:	2b08      	cmp	r3, #8
 800550e:	d834      	bhi.n	800557a <UART_SetConfig+0x336>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x2d4>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800555d 	.word	0x0800555d
 8005520:	08005565 	.word	0x08005565
 8005524:	0800557b 	.word	0x0800557b
 8005528:	0800556b 	.word	0x0800556b
 800552c:	0800557b 	.word	0x0800557b
 8005530:	0800557b 	.word	0x0800557b
 8005534:	0800557b 	.word	0x0800557b
 8005538:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7ff fa26 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 8005540:	61f8      	str	r0, [r7, #28]
        break;
 8005542:	e020      	b.n	8005586 <UART_SetConfig+0x342>
 8005544:	efff69f3 	.word	0xefff69f3
 8005548:	40008000 	.word	0x40008000
 800554c:	40013800 	.word	0x40013800
 8005550:	40021000 	.word	0x40021000
 8005554:	40004400 	.word	0x40004400
 8005558:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7ff fa2c 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 8005560:	61f8      	str	r0, [r7, #28]
        break;
 8005562:	e010      	b.n	8005586 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b4c      	ldr	r3, [pc, #304]	; (8005698 <UART_SetConfig+0x454>)
 8005566:	61fb      	str	r3, [r7, #28]
        break;
 8005568:	e00d      	b.n	8005586 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7ff f977 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800556e:	61f8      	str	r0, [r7, #28]
        break;
 8005570:	e009      	b.n	8005586 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005576:	61fb      	str	r3, [r7, #28]
        break;
 8005578:	e005      	b.n	8005586 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d077      	beq.n	800567c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005a      	lsls	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d916      	bls.n	80055d6 <UART_SetConfig+0x392>
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d212      	bcs.n	80055d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f023 030f 	bic.w	r3, r3, #15
 80055b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	8afb      	ldrh	r3, [r7, #22]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	8afa      	ldrh	r2, [r7, #22]
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	e052      	b.n	800567c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055dc:	e04e      	b.n	800567c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d827      	bhi.n	8005636 <UART_SetConfig+0x3f2>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x3a8>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	08005637 	.word	0x08005637
 80055fc:	08005627 	.word	0x08005627
 8005600:	08005637 	.word	0x08005637
 8005604:	08005637 	.word	0x08005637
 8005608:	08005637 	.word	0x08005637
 800560c:	0800562f 	.word	0x0800562f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7ff f9bc 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 8005614:	61f8      	str	r0, [r7, #28]
        break;
 8005616:	e014      	b.n	8005642 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005618:	f7ff f9ce 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 800561c:	61f8      	str	r0, [r7, #28]
        break;
 800561e:	e010      	b.n	8005642 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <UART_SetConfig+0x454>)
 8005622:	61fb      	str	r3, [r7, #28]
        break;
 8005624:	e00d      	b.n	8005642 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005626:	f7ff f919 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800562a:	61f8      	str	r0, [r7, #28]
        break;
 800562c:	e009      	b.n	8005642 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005632:	61fb      	str	r3, [r7, #28]
        break;
 8005634:	e005      	b.n	8005642 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005640:	bf00      	nop
    }

    if (pclk != 0U)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d019      	beq.n	800567c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	085a      	lsrs	r2, r3, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	441a      	add	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d909      	bls.n	8005676 <UART_SetConfig+0x432>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005668:	d205      	bcs.n	8005676 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e002      	b.n	800567c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800568c:	4618      	mov	r0, r3
 800568e:	3728      	adds	r7, #40	; 0x28
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005696:	bf00      	nop
 8005698:	00f42400 	.word	0x00f42400

0800569c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579a:	d10a      	bne.n	80057b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b098      	sub	sp, #96	; 0x60
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f0:	f7fb fd86 	bl	8001300 <HAL_GetTick>
 80057f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d12e      	bne.n	8005862 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f88c 	bl	8005930 <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d021      	beq.n	8005862 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
 800583e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800584a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e062      	b.n	8005928 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b04      	cmp	r3, #4
 800586e:	d149      	bne.n	8005904 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	2200      	movs	r2, #0
 800587a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f856 	bl	8005930 <UART_WaitOnFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d03c      	beq.n	8005904 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	623b      	str	r3, [r7, #32]
   return(result);
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800589e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a8:	633b      	str	r3, [r7, #48]	; 0x30
 80058aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058dc:	61fa      	str	r2, [r7, #28]
 80058de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e011      	b.n	8005928 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3758      	adds	r7, #88	; 0x58
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005940:	e049      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d045      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594a:	f7fb fcd9 	bl	8001300 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <UART_WaitOnFlagUntilTimeout+0x30>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e048      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d031      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d110      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2208      	movs	r2, #8
 8005986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f838 	bl	80059fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2208      	movs	r2, #8
 8005992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e029      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b0:	d111      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f81e 	bl	80059fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e00f      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4013      	ands	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d0a6      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b095      	sub	sp, #84	; 0x54
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a24:	643b      	str	r3, [r7, #64]	; 0x40
 8005a26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e6      	bne.n	8005a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d118      	bne.n	8005aa6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 0310 	bic.w	r3, r3, #16
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6979      	ldr	r1, [r7, #20]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e6      	bne.n	8005a74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005aba:	bf00      	nop
 8005abc:	3754      	adds	r7, #84	; 0x54
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <__assert_func>:
 8005ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aca:	4614      	mov	r4, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <__assert_func+0x2c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4605      	mov	r5, r0
 8005ad4:	68d8      	ldr	r0, [r3, #12]
 8005ad6:	b14c      	cbz	r4, 8005aec <__assert_func+0x24>
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <__assert_func+0x30>)
 8005ada:	9100      	str	r1, [sp, #0]
 8005adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ae0:	4906      	ldr	r1, [pc, #24]	; (8005afc <__assert_func+0x34>)
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	f000 f8b2 	bl	8005c4c <fiprintf>
 8005ae8:	f000 f9d1 	bl	8005e8e <abort>
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <__assert_func+0x38>)
 8005aee:	461c      	mov	r4, r3
 8005af0:	e7f3      	b.n	8005ada <__assert_func+0x12>
 8005af2:	bf00      	nop
 8005af4:	20000068 	.word	0x20000068
 8005af8:	08006f60 	.word	0x08006f60
 8005afc:	08006f6d 	.word	0x08006f6d
 8005b00:	08006f9b 	.word	0x08006f9b

08005b04 <std>:
 8005b04:	2300      	movs	r3, #0
 8005b06:	b510      	push	{r4, lr}
 8005b08:	4604      	mov	r4, r0
 8005b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b12:	6083      	str	r3, [r0, #8]
 8005b14:	8181      	strh	r1, [r0, #12]
 8005b16:	6643      	str	r3, [r0, #100]	; 0x64
 8005b18:	81c2      	strh	r2, [r0, #14]
 8005b1a:	6183      	str	r3, [r0, #24]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	2208      	movs	r2, #8
 8005b20:	305c      	adds	r0, #92	; 0x5c
 8005b22:	f000 f938 	bl	8005d96 <memset>
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <std+0x58>)
 8005b28:	6263      	str	r3, [r4, #36]	; 0x24
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <std+0x5c>)
 8005b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <std+0x60>)
 8005b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <std+0x64>)
 8005b34:	6323      	str	r3, [r4, #48]	; 0x30
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <std+0x68>)
 8005b38:	6224      	str	r4, [r4, #32]
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d006      	beq.n	8005b4c <std+0x48>
 8005b3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b42:	4294      	cmp	r4, r2
 8005b44:	d002      	beq.n	8005b4c <std+0x48>
 8005b46:	33d0      	adds	r3, #208	; 0xd0
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d105      	bne.n	8005b58 <std+0x54>
 8005b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	f000 b998 	b.w	8005e88 <__retarget_lock_init_recursive>
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08005d11 	.word	0x08005d11
 8005b60:	08005d33 	.word	0x08005d33
 8005b64:	08005d6b 	.word	0x08005d6b
 8005b68:	08005d8f 	.word	0x08005d8f
 8005b6c:	200001d0 	.word	0x200001d0

08005b70 <stdio_exit_handler>:
 8005b70:	4a02      	ldr	r2, [pc, #8]	; (8005b7c <stdio_exit_handler+0xc>)
 8005b72:	4903      	ldr	r1, [pc, #12]	; (8005b80 <stdio_exit_handler+0x10>)
 8005b74:	4803      	ldr	r0, [pc, #12]	; (8005b84 <stdio_exit_handler+0x14>)
 8005b76:	f000 b87b 	b.w	8005c70 <_fwalk_sglue>
 8005b7a:	bf00      	nop
 8005b7c:	20000010 	.word	0x20000010
 8005b80:	080069f1 	.word	0x080069f1
 8005b84:	2000001c 	.word	0x2000001c

08005b88 <cleanup_stdio>:
 8005b88:	6841      	ldr	r1, [r0, #4]
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <cleanup_stdio+0x34>)
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	4604      	mov	r4, r0
 8005b92:	d001      	beq.n	8005b98 <cleanup_stdio+0x10>
 8005b94:	f000 ff2c 	bl	80069f0 <_fflush_r>
 8005b98:	68a1      	ldr	r1, [r4, #8]
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <cleanup_stdio+0x38>)
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d002      	beq.n	8005ba6 <cleanup_stdio+0x1e>
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 ff25 	bl	80069f0 <_fflush_r>
 8005ba6:	68e1      	ldr	r1, [r4, #12]
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <cleanup_stdio+0x3c>)
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d004      	beq.n	8005bb8 <cleanup_stdio+0x30>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f000 bf1c 	b.w	80069f0 <_fflush_r>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	200001d0 	.word	0x200001d0
 8005bc0:	20000238 	.word	0x20000238
 8005bc4:	200002a0 	.word	0x200002a0

08005bc8 <global_stdio_init.part.0>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <global_stdio_init.part.0+0x30>)
 8005bcc:	4c0b      	ldr	r4, [pc, #44]	; (8005bfc <global_stdio_init.part.0+0x34>)
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <global_stdio_init.part.0+0x38>)
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	f7ff ff94 	bl	8005b04 <std>
 8005bdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005be0:	2201      	movs	r2, #1
 8005be2:	2109      	movs	r1, #9
 8005be4:	f7ff ff8e 	bl	8005b04 <std>
 8005be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bec:	2202      	movs	r2, #2
 8005bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf2:	2112      	movs	r1, #18
 8005bf4:	f7ff bf86 	b.w	8005b04 <std>
 8005bf8:	20000308 	.word	0x20000308
 8005bfc:	200001d0 	.word	0x200001d0
 8005c00:	08005b71 	.word	0x08005b71

08005c04 <__sfp_lock_acquire>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sfp_lock_acquire+0x8>)
 8005c06:	f000 b940 	b.w	8005e8a <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000311 	.word	0x20000311

08005c10 <__sfp_lock_release>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sfp_lock_release+0x8>)
 8005c12:	f000 b93b 	b.w	8005e8c <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	20000311 	.word	0x20000311

08005c1c <__sinit>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f7ff fff0 	bl	8005c04 <__sfp_lock_acquire>
 8005c24:	6a23      	ldr	r3, [r4, #32]
 8005c26:	b11b      	cbz	r3, 8005c30 <__sinit+0x14>
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2c:	f7ff bff0 	b.w	8005c10 <__sfp_lock_release>
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <__sinit+0x28>)
 8005c32:	6223      	str	r3, [r4, #32]
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__sinit+0x2c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f5      	bne.n	8005c28 <__sinit+0xc>
 8005c3c:	f7ff ffc4 	bl	8005bc8 <global_stdio_init.part.0>
 8005c40:	e7f2      	b.n	8005c28 <__sinit+0xc>
 8005c42:	bf00      	nop
 8005c44:	08005b89 	.word	0x08005b89
 8005c48:	20000308 	.word	0x20000308

08005c4c <fiprintf>:
 8005c4c:	b40e      	push	{r1, r2, r3}
 8005c4e:	b503      	push	{r0, r1, lr}
 8005c50:	4601      	mov	r1, r0
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <fiprintf+0x20>)
 8005c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	f000 fb97 	bl	8006390 <_vfiprintf_r>
 8005c62:	b002      	add	sp, #8
 8005c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c68:	b003      	add	sp, #12
 8005c6a:	4770      	bx	lr
 8005c6c:	20000068 	.word	0x20000068

08005c70 <_fwalk_sglue>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4607      	mov	r7, r0
 8005c76:	4688      	mov	r8, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c80:	f1b9 0901 	subs.w	r9, r9, #1
 8005c84:	d505      	bpl.n	8005c92 <_fwalk_sglue+0x22>
 8005c86:	6824      	ldr	r4, [r4, #0]
 8005c88:	2c00      	cmp	r4, #0
 8005c8a:	d1f7      	bne.n	8005c7c <_fwalk_sglue+0xc>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d907      	bls.n	8005ca8 <_fwalk_sglue+0x38>
 8005c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d003      	beq.n	8005ca8 <_fwalk_sglue+0x38>
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	4306      	orrs	r6, r0
 8005ca8:	3568      	adds	r5, #104	; 0x68
 8005caa:	e7e9      	b.n	8005c80 <_fwalk_sglue+0x10>

08005cac <iprintf>:
 8005cac:	b40f      	push	{r0, r1, r2, r3}
 8005cae:	b507      	push	{r0, r1, r2, lr}
 8005cb0:	4906      	ldr	r1, [pc, #24]	; (8005ccc <iprintf+0x20>)
 8005cb2:	ab04      	add	r3, sp, #16
 8005cb4:	6808      	ldr	r0, [r1, #0]
 8005cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cba:	6881      	ldr	r1, [r0, #8]
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	f000 fb67 	bl	8006390 <_vfiprintf_r>
 8005cc2:	b003      	add	sp, #12
 8005cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc8:	b004      	add	sp, #16
 8005cca:	4770      	bx	lr
 8005ccc:	20000068 	.word	0x20000068

08005cd0 <siprintf>:
 8005cd0:	b40e      	push	{r1, r2, r3}
 8005cd2:	b500      	push	{lr}
 8005cd4:	b09c      	sub	sp, #112	; 0x70
 8005cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd8:	9002      	str	r0, [sp, #8]
 8005cda:	9006      	str	r0, [sp, #24]
 8005cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ce0:	4809      	ldr	r0, [pc, #36]	; (8005d08 <siprintf+0x38>)
 8005ce2:	9107      	str	r1, [sp, #28]
 8005ce4:	9104      	str	r1, [sp, #16]
 8005ce6:	4909      	ldr	r1, [pc, #36]	; (8005d0c <siprintf+0x3c>)
 8005ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cec:	9105      	str	r1, [sp, #20]
 8005cee:	6800      	ldr	r0, [r0, #0]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	a902      	add	r1, sp, #8
 8005cf4:	f000 fa24 	bl	8006140 <_svfiprintf_r>
 8005cf8:	9b02      	ldr	r3, [sp, #8]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	b01c      	add	sp, #112	; 0x70
 8005d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d04:	b003      	add	sp, #12
 8005d06:	4770      	bx	lr
 8005d08:	20000068 	.word	0x20000068
 8005d0c:	ffff0208 	.word	0xffff0208

08005d10 <__sread>:
 8005d10:	b510      	push	{r4, lr}
 8005d12:	460c      	mov	r4, r1
 8005d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d18:	f000 f868 	bl	8005dec <_read_r>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	bfab      	itete	ge
 8005d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d22:	89a3      	ldrhlt	r3, [r4, #12]
 8005d24:	181b      	addge	r3, r3, r0
 8005d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d2a:	bfac      	ite	ge
 8005d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d2e:	81a3      	strhlt	r3, [r4, #12]
 8005d30:	bd10      	pop	{r4, pc}

08005d32 <__swrite>:
 8005d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d36:	461f      	mov	r7, r3
 8005d38:	898b      	ldrh	r3, [r1, #12]
 8005d3a:	05db      	lsls	r3, r3, #23
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	4616      	mov	r6, r2
 8005d42:	d505      	bpl.n	8005d50 <__swrite+0x1e>
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	2302      	movs	r3, #2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f000 f83c 	bl	8005dc8 <_lseek_r>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	463b      	mov	r3, r7
 8005d60:	4628      	mov	r0, r5
 8005d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d66:	f000 b853 	b.w	8005e10 <_write_r>

08005d6a <__sseek>:
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d72:	f000 f829 	bl	8005dc8 <_lseek_r>
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	bf15      	itete	ne
 8005d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d86:	81a3      	strheq	r3, [r4, #12]
 8005d88:	bf18      	it	ne
 8005d8a:	81a3      	strhne	r3, [r4, #12]
 8005d8c:	bd10      	pop	{r4, pc}

08005d8e <__sclose>:
 8005d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d92:	f000 b809 	b.w	8005da8 <_close_r>

08005d96 <memset>:
 8005d96:	4402      	add	r2, r0
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d100      	bne.n	8005da0 <memset+0xa>
 8005d9e:	4770      	bx	lr
 8005da0:	f803 1b01 	strb.w	r1, [r3], #1
 8005da4:	e7f9      	b.n	8005d9a <memset+0x4>
	...

08005da8 <_close_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4d06      	ldr	r5, [pc, #24]	; (8005dc4 <_close_r+0x1c>)
 8005dac:	2300      	movs	r3, #0
 8005dae:	4604      	mov	r4, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	602b      	str	r3, [r5, #0]
 8005db4:	f7fb f995 	bl	80010e2 <_close>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_close_r+0x1a>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_close_r+0x1a>
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	2000030c 	.word	0x2000030c

08005dc8 <_lseek_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d07      	ldr	r5, [pc, #28]	; (8005de8 <_lseek_r+0x20>)
 8005dcc:	4604      	mov	r4, r0
 8005dce:	4608      	mov	r0, r1
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	602a      	str	r2, [r5, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f7fb f9aa 	bl	8001130 <_lseek>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_lseek_r+0x1e>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_lseek_r+0x1e>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	2000030c 	.word	0x2000030c

08005dec <_read_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_read_r+0x20>)
 8005df0:	4604      	mov	r4, r0
 8005df2:	4608      	mov	r0, r1
 8005df4:	4611      	mov	r1, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f7fb f938 	bl	8001070 <_read>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_read_r+0x1e>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_read_r+0x1e>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	2000030c 	.word	0x2000030c

08005e10 <_write_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d07      	ldr	r5, [pc, #28]	; (8005e30 <_write_r+0x20>)
 8005e14:	4604      	mov	r4, r0
 8005e16:	4608      	mov	r0, r1
 8005e18:	4611      	mov	r1, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	602a      	str	r2, [r5, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f7fb f943 	bl	80010aa <_write>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_write_r+0x1e>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_write_r+0x1e>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	2000030c 	.word	0x2000030c

08005e34 <__errno>:
 8005e34:	4b01      	ldr	r3, [pc, #4]	; (8005e3c <__errno+0x8>)
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000068 	.word	0x20000068

08005e40 <__libc_init_array>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	4d0d      	ldr	r5, [pc, #52]	; (8005e78 <__libc_init_array+0x38>)
 8005e44:	4c0d      	ldr	r4, [pc, #52]	; (8005e7c <__libc_init_array+0x3c>)
 8005e46:	1b64      	subs	r4, r4, r5
 8005e48:	10a4      	asrs	r4, r4, #2
 8005e4a:	2600      	movs	r6, #0
 8005e4c:	42a6      	cmp	r6, r4
 8005e4e:	d109      	bne.n	8005e64 <__libc_init_array+0x24>
 8005e50:	4d0b      	ldr	r5, [pc, #44]	; (8005e80 <__libc_init_array+0x40>)
 8005e52:	4c0c      	ldr	r4, [pc, #48]	; (8005e84 <__libc_init_array+0x44>)
 8005e54:	f000 ffc2 	bl	8006ddc <_init>
 8005e58:	1b64      	subs	r4, r4, r5
 8005e5a:	10a4      	asrs	r4, r4, #2
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	d105      	bne.n	8005e6e <__libc_init_array+0x2e>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e68:	4798      	blx	r3
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7ee      	b.n	8005e4c <__libc_init_array+0xc>
 8005e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e72:	4798      	blx	r3
 8005e74:	3601      	adds	r6, #1
 8005e76:	e7f2      	b.n	8005e5e <__libc_init_array+0x1e>
 8005e78:	08006fd8 	.word	0x08006fd8
 8005e7c:	08006fd8 	.word	0x08006fd8
 8005e80:	08006fd8 	.word	0x08006fd8
 8005e84:	08006fdc 	.word	0x08006fdc

08005e88 <__retarget_lock_init_recursive>:
 8005e88:	4770      	bx	lr

08005e8a <__retarget_lock_acquire_recursive>:
 8005e8a:	4770      	bx	lr

08005e8c <__retarget_lock_release_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <abort>:
 8005e8e:	b508      	push	{r3, lr}
 8005e90:	2006      	movs	r0, #6
 8005e92:	f000 fead 	bl	8006bf0 <raise>
 8005e96:	2001      	movs	r0, #1
 8005e98:	f7fb f8e0 	bl	800105c <_exit>

08005e9c <_free_r>:
 8005e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d044      	beq.n	8005f2c <_free_r+0x90>
 8005ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea6:	9001      	str	r0, [sp, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8005eae:	bfb8      	it	lt
 8005eb0:	18e4      	addlt	r4, r4, r3
 8005eb2:	f000 f8df 	bl	8006074 <__malloc_lock>
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <_free_r+0x94>)
 8005eb8:	9801      	ldr	r0, [sp, #4]
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	b933      	cbnz	r3, 8005ecc <_free_r+0x30>
 8005ebe:	6063      	str	r3, [r4, #4]
 8005ec0:	6014      	str	r4, [r2, #0]
 8005ec2:	b003      	add	sp, #12
 8005ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ec8:	f000 b8da 	b.w	8006080 <__malloc_unlock>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d908      	bls.n	8005ee2 <_free_r+0x46>
 8005ed0:	6825      	ldr	r5, [r4, #0]
 8005ed2:	1961      	adds	r1, r4, r5
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	bf01      	itttt	eq
 8005ed8:	6819      	ldreq	r1, [r3, #0]
 8005eda:	685b      	ldreq	r3, [r3, #4]
 8005edc:	1949      	addeq	r1, r1, r5
 8005ede:	6021      	streq	r1, [r4, #0]
 8005ee0:	e7ed      	b.n	8005ebe <_free_r+0x22>
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	b10b      	cbz	r3, 8005eec <_free_r+0x50>
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	d9fa      	bls.n	8005ee2 <_free_r+0x46>
 8005eec:	6811      	ldr	r1, [r2, #0]
 8005eee:	1855      	adds	r5, r2, r1
 8005ef0:	42a5      	cmp	r5, r4
 8005ef2:	d10b      	bne.n	8005f0c <_free_r+0x70>
 8005ef4:	6824      	ldr	r4, [r4, #0]
 8005ef6:	4421      	add	r1, r4
 8005ef8:	1854      	adds	r4, r2, r1
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	d1e0      	bne.n	8005ec2 <_free_r+0x26>
 8005f00:	681c      	ldr	r4, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	6053      	str	r3, [r2, #4]
 8005f06:	440c      	add	r4, r1
 8005f08:	6014      	str	r4, [r2, #0]
 8005f0a:	e7da      	b.n	8005ec2 <_free_r+0x26>
 8005f0c:	d902      	bls.n	8005f14 <_free_r+0x78>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	6003      	str	r3, [r0, #0]
 8005f12:	e7d6      	b.n	8005ec2 <_free_r+0x26>
 8005f14:	6825      	ldr	r5, [r4, #0]
 8005f16:	1961      	adds	r1, r4, r5
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	bf04      	itt	eq
 8005f1c:	6819      	ldreq	r1, [r3, #0]
 8005f1e:	685b      	ldreq	r3, [r3, #4]
 8005f20:	6063      	str	r3, [r4, #4]
 8005f22:	bf04      	itt	eq
 8005f24:	1949      	addeq	r1, r1, r5
 8005f26:	6021      	streq	r1, [r4, #0]
 8005f28:	6054      	str	r4, [r2, #4]
 8005f2a:	e7ca      	b.n	8005ec2 <_free_r+0x26>
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bd30      	pop	{r4, r5, pc}
 8005f30:	20000314 	.word	0x20000314

08005f34 <sbrk_aligned>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	4e0e      	ldr	r6, [pc, #56]	; (8005f70 <sbrk_aligned+0x3c>)
 8005f38:	460c      	mov	r4, r1
 8005f3a:	6831      	ldr	r1, [r6, #0]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	b911      	cbnz	r1, 8005f46 <sbrk_aligned+0x12>
 8005f40:	f000 fe72 	bl	8006c28 <_sbrk_r>
 8005f44:	6030      	str	r0, [r6, #0]
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 fe6d 	bl	8006c28 <_sbrk_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d00a      	beq.n	8005f68 <sbrk_aligned+0x34>
 8005f52:	1cc4      	adds	r4, r0, #3
 8005f54:	f024 0403 	bic.w	r4, r4, #3
 8005f58:	42a0      	cmp	r0, r4
 8005f5a:	d007      	beq.n	8005f6c <sbrk_aligned+0x38>
 8005f5c:	1a21      	subs	r1, r4, r0
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f000 fe62 	bl	8006c28 <_sbrk_r>
 8005f64:	3001      	adds	r0, #1
 8005f66:	d101      	bne.n	8005f6c <sbrk_aligned+0x38>
 8005f68:	f04f 34ff 	mov.w	r4, #4294967295
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	20000318 	.word	0x20000318

08005f74 <_malloc_r>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	1ccd      	adds	r5, r1, #3
 8005f7a:	f025 0503 	bic.w	r5, r5, #3
 8005f7e:	3508      	adds	r5, #8
 8005f80:	2d0c      	cmp	r5, #12
 8005f82:	bf38      	it	cc
 8005f84:	250c      	movcc	r5, #12
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	4607      	mov	r7, r0
 8005f8a:	db01      	blt.n	8005f90 <_malloc_r+0x1c>
 8005f8c:	42a9      	cmp	r1, r5
 8005f8e:	d905      	bls.n	8005f9c <_malloc_r+0x28>
 8005f90:	230c      	movs	r3, #12
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	2600      	movs	r6, #0
 8005f96:	4630      	mov	r0, r6
 8005f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006070 <_malloc_r+0xfc>
 8005fa0:	f000 f868 	bl	8006074 <__malloc_lock>
 8005fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa8:	461c      	mov	r4, r3
 8005faa:	bb5c      	cbnz	r4, 8006004 <_malloc_r+0x90>
 8005fac:	4629      	mov	r1, r5
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ffc0 	bl	8005f34 <sbrk_aligned>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	d155      	bne.n	8006066 <_malloc_r+0xf2>
 8005fba:	f8d8 4000 	ldr.w	r4, [r8]
 8005fbe:	4626      	mov	r6, r4
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	d145      	bne.n	8006050 <_malloc_r+0xdc>
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	d048      	beq.n	800605a <_malloc_r+0xe6>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4638      	mov	r0, r7
 8005fce:	eb04 0903 	add.w	r9, r4, r3
 8005fd2:	f000 fe29 	bl	8006c28 <_sbrk_r>
 8005fd6:	4581      	cmp	r9, r0
 8005fd8:	d13f      	bne.n	800605a <_malloc_r+0xe6>
 8005fda:	6821      	ldr	r1, [r4, #0]
 8005fdc:	1a6d      	subs	r5, r5, r1
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff ffa7 	bl	8005f34 <sbrk_aligned>
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d037      	beq.n	800605a <_malloc_r+0xe6>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	442b      	add	r3, r5
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d038      	beq.n	800606a <_malloc_r+0xf6>
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	42a2      	cmp	r2, r4
 8005ffc:	d12b      	bne.n	8006056 <_malloc_r+0xe2>
 8005ffe:	2200      	movs	r2, #0
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	e00f      	b.n	8006024 <_malloc_r+0xb0>
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	1b52      	subs	r2, r2, r5
 8006008:	d41f      	bmi.n	800604a <_malloc_r+0xd6>
 800600a:	2a0b      	cmp	r2, #11
 800600c:	d917      	bls.n	800603e <_malloc_r+0xca>
 800600e:	1961      	adds	r1, r4, r5
 8006010:	42a3      	cmp	r3, r4
 8006012:	6025      	str	r5, [r4, #0]
 8006014:	bf18      	it	ne
 8006016:	6059      	strne	r1, [r3, #4]
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	bf08      	it	eq
 800601c:	f8c8 1000 	streq.w	r1, [r8]
 8006020:	5162      	str	r2, [r4, r5]
 8006022:	604b      	str	r3, [r1, #4]
 8006024:	4638      	mov	r0, r7
 8006026:	f104 060b 	add.w	r6, r4, #11
 800602a:	f000 f829 	bl	8006080 <__malloc_unlock>
 800602e:	f026 0607 	bic.w	r6, r6, #7
 8006032:	1d23      	adds	r3, r4, #4
 8006034:	1af2      	subs	r2, r6, r3
 8006036:	d0ae      	beq.n	8005f96 <_malloc_r+0x22>
 8006038:	1b9b      	subs	r3, r3, r6
 800603a:	50a3      	str	r3, [r4, r2]
 800603c:	e7ab      	b.n	8005f96 <_malloc_r+0x22>
 800603e:	42a3      	cmp	r3, r4
 8006040:	6862      	ldr	r2, [r4, #4]
 8006042:	d1dd      	bne.n	8006000 <_malloc_r+0x8c>
 8006044:	f8c8 2000 	str.w	r2, [r8]
 8006048:	e7ec      	b.n	8006024 <_malloc_r+0xb0>
 800604a:	4623      	mov	r3, r4
 800604c:	6864      	ldr	r4, [r4, #4]
 800604e:	e7ac      	b.n	8005faa <_malloc_r+0x36>
 8006050:	4634      	mov	r4, r6
 8006052:	6876      	ldr	r6, [r6, #4]
 8006054:	e7b4      	b.n	8005fc0 <_malloc_r+0x4c>
 8006056:	4613      	mov	r3, r2
 8006058:	e7cc      	b.n	8005ff4 <_malloc_r+0x80>
 800605a:	230c      	movs	r3, #12
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4638      	mov	r0, r7
 8006060:	f000 f80e 	bl	8006080 <__malloc_unlock>
 8006064:	e797      	b.n	8005f96 <_malloc_r+0x22>
 8006066:	6025      	str	r5, [r4, #0]
 8006068:	e7dc      	b.n	8006024 <_malloc_r+0xb0>
 800606a:	605b      	str	r3, [r3, #4]
 800606c:	deff      	udf	#255	; 0xff
 800606e:	bf00      	nop
 8006070:	20000314 	.word	0x20000314

08006074 <__malloc_lock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_lock+0x8>)
 8006076:	f7ff bf08 	b.w	8005e8a <__retarget_lock_acquire_recursive>
 800607a:	bf00      	nop
 800607c:	20000310 	.word	0x20000310

08006080 <__malloc_unlock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_unlock+0x8>)
 8006082:	f7ff bf03 	b.w	8005e8c <__retarget_lock_release_recursive>
 8006086:	bf00      	nop
 8006088:	20000310 	.word	0x20000310

0800608c <__ssputs_r>:
 800608c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	688e      	ldr	r6, [r1, #8]
 8006092:	461f      	mov	r7, r3
 8006094:	42be      	cmp	r6, r7
 8006096:	680b      	ldr	r3, [r1, #0]
 8006098:	4682      	mov	sl, r0
 800609a:	460c      	mov	r4, r1
 800609c:	4690      	mov	r8, r2
 800609e:	d82c      	bhi.n	80060fa <__ssputs_r+0x6e>
 80060a0:	898a      	ldrh	r2, [r1, #12]
 80060a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060a6:	d026      	beq.n	80060f6 <__ssputs_r+0x6a>
 80060a8:	6965      	ldr	r5, [r4, #20]
 80060aa:	6909      	ldr	r1, [r1, #16]
 80060ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060b0:	eba3 0901 	sub.w	r9, r3, r1
 80060b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060b8:	1c7b      	adds	r3, r7, #1
 80060ba:	444b      	add	r3, r9
 80060bc:	106d      	asrs	r5, r5, #1
 80060be:	429d      	cmp	r5, r3
 80060c0:	bf38      	it	cc
 80060c2:	461d      	movcc	r5, r3
 80060c4:	0553      	lsls	r3, r2, #21
 80060c6:	d527      	bpl.n	8006118 <__ssputs_r+0x8c>
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7ff ff53 	bl	8005f74 <_malloc_r>
 80060ce:	4606      	mov	r6, r0
 80060d0:	b360      	cbz	r0, 800612c <__ssputs_r+0xa0>
 80060d2:	6921      	ldr	r1, [r4, #16]
 80060d4:	464a      	mov	r2, r9
 80060d6:	f000 fdb7 	bl	8006c48 <memcpy>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	6126      	str	r6, [r4, #16]
 80060e8:	6165      	str	r5, [r4, #20]
 80060ea:	444e      	add	r6, r9
 80060ec:	eba5 0509 	sub.w	r5, r5, r9
 80060f0:	6026      	str	r6, [r4, #0]
 80060f2:	60a5      	str	r5, [r4, #8]
 80060f4:	463e      	mov	r6, r7
 80060f6:	42be      	cmp	r6, r7
 80060f8:	d900      	bls.n	80060fc <__ssputs_r+0x70>
 80060fa:	463e      	mov	r6, r7
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	4632      	mov	r2, r6
 8006100:	4641      	mov	r1, r8
 8006102:	f000 fd33 	bl	8006b6c <memmove>
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	1b9b      	subs	r3, r3, r6
 800610a:	60a3      	str	r3, [r4, #8]
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	4433      	add	r3, r6
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	2000      	movs	r0, #0
 8006114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006118:	462a      	mov	r2, r5
 800611a:	f000 fda3 	bl	8006c64 <_realloc_r>
 800611e:	4606      	mov	r6, r0
 8006120:	2800      	cmp	r0, #0
 8006122:	d1e0      	bne.n	80060e6 <__ssputs_r+0x5a>
 8006124:	6921      	ldr	r1, [r4, #16]
 8006126:	4650      	mov	r0, sl
 8006128:	f7ff feb8 	bl	8005e9c <_free_r>
 800612c:	230c      	movs	r3, #12
 800612e:	f8ca 3000 	str.w	r3, [sl]
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	e7e9      	b.n	8006114 <__ssputs_r+0x88>

08006140 <_svfiprintf_r>:
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	4698      	mov	r8, r3
 8006146:	898b      	ldrh	r3, [r1, #12]
 8006148:	061b      	lsls	r3, r3, #24
 800614a:	b09d      	sub	sp, #116	; 0x74
 800614c:	4607      	mov	r7, r0
 800614e:	460d      	mov	r5, r1
 8006150:	4614      	mov	r4, r2
 8006152:	d50e      	bpl.n	8006172 <_svfiprintf_r+0x32>
 8006154:	690b      	ldr	r3, [r1, #16]
 8006156:	b963      	cbnz	r3, 8006172 <_svfiprintf_r+0x32>
 8006158:	2140      	movs	r1, #64	; 0x40
 800615a:	f7ff ff0b 	bl	8005f74 <_malloc_r>
 800615e:	6028      	str	r0, [r5, #0]
 8006160:	6128      	str	r0, [r5, #16]
 8006162:	b920      	cbnz	r0, 800616e <_svfiprintf_r+0x2e>
 8006164:	230c      	movs	r3, #12
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e0d0      	b.n	8006310 <_svfiprintf_r+0x1d0>
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	616b      	str	r3, [r5, #20]
 8006172:	2300      	movs	r3, #0
 8006174:	9309      	str	r3, [sp, #36]	; 0x24
 8006176:	2320      	movs	r3, #32
 8006178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800617c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006180:	2330      	movs	r3, #48	; 0x30
 8006182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006328 <_svfiprintf_r+0x1e8>
 8006186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800618a:	f04f 0901 	mov.w	r9, #1
 800618e:	4623      	mov	r3, r4
 8006190:	469a      	mov	sl, r3
 8006192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006196:	b10a      	cbz	r2, 800619c <_svfiprintf_r+0x5c>
 8006198:	2a25      	cmp	r2, #37	; 0x25
 800619a:	d1f9      	bne.n	8006190 <_svfiprintf_r+0x50>
 800619c:	ebba 0b04 	subs.w	fp, sl, r4
 80061a0:	d00b      	beq.n	80061ba <_svfiprintf_r+0x7a>
 80061a2:	465b      	mov	r3, fp
 80061a4:	4622      	mov	r2, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff ff6f 	bl	800608c <__ssputs_r>
 80061ae:	3001      	adds	r0, #1
 80061b0:	f000 80a9 	beq.w	8006306 <_svfiprintf_r+0x1c6>
 80061b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061b6:	445a      	add	r2, fp
 80061b8:	9209      	str	r2, [sp, #36]	; 0x24
 80061ba:	f89a 3000 	ldrb.w	r3, [sl]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80a1 	beq.w	8006306 <_svfiprintf_r+0x1c6>
 80061c4:	2300      	movs	r3, #0
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ce:	f10a 0a01 	add.w	sl, sl, #1
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	9307      	str	r3, [sp, #28]
 80061d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061da:	931a      	str	r3, [sp, #104]	; 0x68
 80061dc:	4654      	mov	r4, sl
 80061de:	2205      	movs	r2, #5
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	4850      	ldr	r0, [pc, #320]	; (8006328 <_svfiprintf_r+0x1e8>)
 80061e6:	f7f9 fffb 	bl	80001e0 <memchr>
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	b9d8      	cbnz	r0, 8006226 <_svfiprintf_r+0xe6>
 80061ee:	06d0      	lsls	r0, r2, #27
 80061f0:	bf44      	itt	mi
 80061f2:	2320      	movmi	r3, #32
 80061f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f8:	0711      	lsls	r1, r2, #28
 80061fa:	bf44      	itt	mi
 80061fc:	232b      	movmi	r3, #43	; 0x2b
 80061fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006202:	f89a 3000 	ldrb.w	r3, [sl]
 8006206:	2b2a      	cmp	r3, #42	; 0x2a
 8006208:	d015      	beq.n	8006236 <_svfiprintf_r+0xf6>
 800620a:	9a07      	ldr	r2, [sp, #28]
 800620c:	4654      	mov	r4, sl
 800620e:	2000      	movs	r0, #0
 8006210:	f04f 0c0a 	mov.w	ip, #10
 8006214:	4621      	mov	r1, r4
 8006216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800621a:	3b30      	subs	r3, #48	; 0x30
 800621c:	2b09      	cmp	r3, #9
 800621e:	d94d      	bls.n	80062bc <_svfiprintf_r+0x17c>
 8006220:	b1b0      	cbz	r0, 8006250 <_svfiprintf_r+0x110>
 8006222:	9207      	str	r2, [sp, #28]
 8006224:	e014      	b.n	8006250 <_svfiprintf_r+0x110>
 8006226:	eba0 0308 	sub.w	r3, r0, r8
 800622a:	fa09 f303 	lsl.w	r3, r9, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	46a2      	mov	sl, r4
 8006234:	e7d2      	b.n	80061dc <_svfiprintf_r+0x9c>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	1d19      	adds	r1, r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	9103      	str	r1, [sp, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfbb      	ittet	lt
 8006242:	425b      	neglt	r3, r3
 8006244:	f042 0202 	orrlt.w	r2, r2, #2
 8006248:	9307      	strge	r3, [sp, #28]
 800624a:	9307      	strlt	r3, [sp, #28]
 800624c:	bfb8      	it	lt
 800624e:	9204      	strlt	r2, [sp, #16]
 8006250:	7823      	ldrb	r3, [r4, #0]
 8006252:	2b2e      	cmp	r3, #46	; 0x2e
 8006254:	d10c      	bne.n	8006270 <_svfiprintf_r+0x130>
 8006256:	7863      	ldrb	r3, [r4, #1]
 8006258:	2b2a      	cmp	r3, #42	; 0x2a
 800625a:	d134      	bne.n	80062c6 <_svfiprintf_r+0x186>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	9203      	str	r2, [sp, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfb8      	it	lt
 8006268:	f04f 33ff 	movlt.w	r3, #4294967295
 800626c:	3402      	adds	r4, #2
 800626e:	9305      	str	r3, [sp, #20]
 8006270:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006338 <_svfiprintf_r+0x1f8>
 8006274:	7821      	ldrb	r1, [r4, #0]
 8006276:	2203      	movs	r2, #3
 8006278:	4650      	mov	r0, sl
 800627a:	f7f9 ffb1 	bl	80001e0 <memchr>
 800627e:	b138      	cbz	r0, 8006290 <_svfiprintf_r+0x150>
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	eba0 000a 	sub.w	r0, r0, sl
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	4082      	lsls	r2, r0
 800628a:	4313      	orrs	r3, r2
 800628c:	3401      	adds	r4, #1
 800628e:	9304      	str	r3, [sp, #16]
 8006290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006294:	4825      	ldr	r0, [pc, #148]	; (800632c <_svfiprintf_r+0x1ec>)
 8006296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800629a:	2206      	movs	r2, #6
 800629c:	f7f9 ffa0 	bl	80001e0 <memchr>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d038      	beq.n	8006316 <_svfiprintf_r+0x1d6>
 80062a4:	4b22      	ldr	r3, [pc, #136]	; (8006330 <_svfiprintf_r+0x1f0>)
 80062a6:	bb1b      	cbnz	r3, 80062f0 <_svfiprintf_r+0x1b0>
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	3307      	adds	r3, #7
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	3308      	adds	r3, #8
 80062b2:	9303      	str	r3, [sp, #12]
 80062b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b6:	4433      	add	r3, r6
 80062b8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ba:	e768      	b.n	800618e <_svfiprintf_r+0x4e>
 80062bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c0:	460c      	mov	r4, r1
 80062c2:	2001      	movs	r0, #1
 80062c4:	e7a6      	b.n	8006214 <_svfiprintf_r+0xd4>
 80062c6:	2300      	movs	r3, #0
 80062c8:	3401      	adds	r4, #1
 80062ca:	9305      	str	r3, [sp, #20]
 80062cc:	4619      	mov	r1, r3
 80062ce:	f04f 0c0a 	mov.w	ip, #10
 80062d2:	4620      	mov	r0, r4
 80062d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d8:	3a30      	subs	r2, #48	; 0x30
 80062da:	2a09      	cmp	r2, #9
 80062dc:	d903      	bls.n	80062e6 <_svfiprintf_r+0x1a6>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0c6      	beq.n	8006270 <_svfiprintf_r+0x130>
 80062e2:	9105      	str	r1, [sp, #20]
 80062e4:	e7c4      	b.n	8006270 <_svfiprintf_r+0x130>
 80062e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80062ea:	4604      	mov	r4, r0
 80062ec:	2301      	movs	r3, #1
 80062ee:	e7f0      	b.n	80062d2 <_svfiprintf_r+0x192>
 80062f0:	ab03      	add	r3, sp, #12
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	462a      	mov	r2, r5
 80062f6:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <_svfiprintf_r+0x1f4>)
 80062f8:	a904      	add	r1, sp, #16
 80062fa:	4638      	mov	r0, r7
 80062fc:	f3af 8000 	nop.w
 8006300:	1c42      	adds	r2, r0, #1
 8006302:	4606      	mov	r6, r0
 8006304:	d1d6      	bne.n	80062b4 <_svfiprintf_r+0x174>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	065b      	lsls	r3, r3, #25
 800630a:	f53f af2d 	bmi.w	8006168 <_svfiprintf_r+0x28>
 800630e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006310:	b01d      	add	sp, #116	; 0x74
 8006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006316:	ab03      	add	r3, sp, #12
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	462a      	mov	r2, r5
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <_svfiprintf_r+0x1f4>)
 800631e:	a904      	add	r1, sp, #16
 8006320:	4638      	mov	r0, r7
 8006322:	f000 f9bd 	bl	80066a0 <_printf_i>
 8006326:	e7eb      	b.n	8006300 <_svfiprintf_r+0x1c0>
 8006328:	08006f9c 	.word	0x08006f9c
 800632c:	08006fa6 	.word	0x08006fa6
 8006330:	00000000 	.word	0x00000000
 8006334:	0800608d 	.word	0x0800608d
 8006338:	08006fa2 	.word	0x08006fa2

0800633c <__sfputc_r>:
 800633c:	6893      	ldr	r3, [r2, #8]
 800633e:	3b01      	subs	r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	b410      	push	{r4}
 8006344:	6093      	str	r3, [r2, #8]
 8006346:	da08      	bge.n	800635a <__sfputc_r+0x1e>
 8006348:	6994      	ldr	r4, [r2, #24]
 800634a:	42a3      	cmp	r3, r4
 800634c:	db01      	blt.n	8006352 <__sfputc_r+0x16>
 800634e:	290a      	cmp	r1, #10
 8006350:	d103      	bne.n	800635a <__sfputc_r+0x1e>
 8006352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006356:	f000 bb73 	b.w	8006a40 <__swbuf_r>
 800635a:	6813      	ldr	r3, [r2, #0]
 800635c:	1c58      	adds	r0, r3, #1
 800635e:	6010      	str	r0, [r2, #0]
 8006360:	7019      	strb	r1, [r3, #0]
 8006362:	4608      	mov	r0, r1
 8006364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006368:	4770      	bx	lr

0800636a <__sfputs_r>:
 800636a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636c:	4606      	mov	r6, r0
 800636e:	460f      	mov	r7, r1
 8006370:	4614      	mov	r4, r2
 8006372:	18d5      	adds	r5, r2, r3
 8006374:	42ac      	cmp	r4, r5
 8006376:	d101      	bne.n	800637c <__sfputs_r+0x12>
 8006378:	2000      	movs	r0, #0
 800637a:	e007      	b.n	800638c <__sfputs_r+0x22>
 800637c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006380:	463a      	mov	r2, r7
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ffda 	bl	800633c <__sfputc_r>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d1f3      	bne.n	8006374 <__sfputs_r+0xa>
 800638c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006390 <_vfiprintf_r>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	460d      	mov	r5, r1
 8006396:	b09d      	sub	sp, #116	; 0x74
 8006398:	4614      	mov	r4, r2
 800639a:	4698      	mov	r8, r3
 800639c:	4606      	mov	r6, r0
 800639e:	b118      	cbz	r0, 80063a8 <_vfiprintf_r+0x18>
 80063a0:	6a03      	ldr	r3, [r0, #32]
 80063a2:	b90b      	cbnz	r3, 80063a8 <_vfiprintf_r+0x18>
 80063a4:	f7ff fc3a 	bl	8005c1c <__sinit>
 80063a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063aa:	07d9      	lsls	r1, r3, #31
 80063ac:	d405      	bmi.n	80063ba <_vfiprintf_r+0x2a>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	059a      	lsls	r2, r3, #22
 80063b2:	d402      	bmi.n	80063ba <_vfiprintf_r+0x2a>
 80063b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063b6:	f7ff fd68 	bl	8005e8a <__retarget_lock_acquire_recursive>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	071b      	lsls	r3, r3, #28
 80063be:	d501      	bpl.n	80063c4 <_vfiprintf_r+0x34>
 80063c0:	692b      	ldr	r3, [r5, #16]
 80063c2:	b99b      	cbnz	r3, 80063ec <_vfiprintf_r+0x5c>
 80063c4:	4629      	mov	r1, r5
 80063c6:	4630      	mov	r0, r6
 80063c8:	f000 fb78 	bl	8006abc <__swsetup_r>
 80063cc:	b170      	cbz	r0, 80063ec <_vfiprintf_r+0x5c>
 80063ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063d0:	07dc      	lsls	r4, r3, #31
 80063d2:	d504      	bpl.n	80063de <_vfiprintf_r+0x4e>
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	b01d      	add	sp, #116	; 0x74
 80063da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	0598      	lsls	r0, r3, #22
 80063e2:	d4f7      	bmi.n	80063d4 <_vfiprintf_r+0x44>
 80063e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063e6:	f7ff fd51 	bl	8005e8c <__retarget_lock_release_recursive>
 80063ea:	e7f3      	b.n	80063d4 <_vfiprintf_r+0x44>
 80063ec:	2300      	movs	r3, #0
 80063ee:	9309      	str	r3, [sp, #36]	; 0x24
 80063f0:	2320      	movs	r3, #32
 80063f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063fa:	2330      	movs	r3, #48	; 0x30
 80063fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80065b0 <_vfiprintf_r+0x220>
 8006400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006404:	f04f 0901 	mov.w	r9, #1
 8006408:	4623      	mov	r3, r4
 800640a:	469a      	mov	sl, r3
 800640c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006410:	b10a      	cbz	r2, 8006416 <_vfiprintf_r+0x86>
 8006412:	2a25      	cmp	r2, #37	; 0x25
 8006414:	d1f9      	bne.n	800640a <_vfiprintf_r+0x7a>
 8006416:	ebba 0b04 	subs.w	fp, sl, r4
 800641a:	d00b      	beq.n	8006434 <_vfiprintf_r+0xa4>
 800641c:	465b      	mov	r3, fp
 800641e:	4622      	mov	r2, r4
 8006420:	4629      	mov	r1, r5
 8006422:	4630      	mov	r0, r6
 8006424:	f7ff ffa1 	bl	800636a <__sfputs_r>
 8006428:	3001      	adds	r0, #1
 800642a:	f000 80a9 	beq.w	8006580 <_vfiprintf_r+0x1f0>
 800642e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006430:	445a      	add	r2, fp
 8006432:	9209      	str	r2, [sp, #36]	; 0x24
 8006434:	f89a 3000 	ldrb.w	r3, [sl]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80a1 	beq.w	8006580 <_vfiprintf_r+0x1f0>
 800643e:	2300      	movs	r3, #0
 8006440:	f04f 32ff 	mov.w	r2, #4294967295
 8006444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006448:	f10a 0a01 	add.w	sl, sl, #1
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	9307      	str	r3, [sp, #28]
 8006450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006454:	931a      	str	r3, [sp, #104]	; 0x68
 8006456:	4654      	mov	r4, sl
 8006458:	2205      	movs	r2, #5
 800645a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800645e:	4854      	ldr	r0, [pc, #336]	; (80065b0 <_vfiprintf_r+0x220>)
 8006460:	f7f9 febe 	bl	80001e0 <memchr>
 8006464:	9a04      	ldr	r2, [sp, #16]
 8006466:	b9d8      	cbnz	r0, 80064a0 <_vfiprintf_r+0x110>
 8006468:	06d1      	lsls	r1, r2, #27
 800646a:	bf44      	itt	mi
 800646c:	2320      	movmi	r3, #32
 800646e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006472:	0713      	lsls	r3, r2, #28
 8006474:	bf44      	itt	mi
 8006476:	232b      	movmi	r3, #43	; 0x2b
 8006478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800647c:	f89a 3000 	ldrb.w	r3, [sl]
 8006480:	2b2a      	cmp	r3, #42	; 0x2a
 8006482:	d015      	beq.n	80064b0 <_vfiprintf_r+0x120>
 8006484:	9a07      	ldr	r2, [sp, #28]
 8006486:	4654      	mov	r4, sl
 8006488:	2000      	movs	r0, #0
 800648a:	f04f 0c0a 	mov.w	ip, #10
 800648e:	4621      	mov	r1, r4
 8006490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006494:	3b30      	subs	r3, #48	; 0x30
 8006496:	2b09      	cmp	r3, #9
 8006498:	d94d      	bls.n	8006536 <_vfiprintf_r+0x1a6>
 800649a:	b1b0      	cbz	r0, 80064ca <_vfiprintf_r+0x13a>
 800649c:	9207      	str	r2, [sp, #28]
 800649e:	e014      	b.n	80064ca <_vfiprintf_r+0x13a>
 80064a0:	eba0 0308 	sub.w	r3, r0, r8
 80064a4:	fa09 f303 	lsl.w	r3, r9, r3
 80064a8:	4313      	orrs	r3, r2
 80064aa:	9304      	str	r3, [sp, #16]
 80064ac:	46a2      	mov	sl, r4
 80064ae:	e7d2      	b.n	8006456 <_vfiprintf_r+0xc6>
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	1d19      	adds	r1, r3, #4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	9103      	str	r1, [sp, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bfbb      	ittet	lt
 80064bc:	425b      	neglt	r3, r3
 80064be:	f042 0202 	orrlt.w	r2, r2, #2
 80064c2:	9307      	strge	r3, [sp, #28]
 80064c4:	9307      	strlt	r3, [sp, #28]
 80064c6:	bfb8      	it	lt
 80064c8:	9204      	strlt	r2, [sp, #16]
 80064ca:	7823      	ldrb	r3, [r4, #0]
 80064cc:	2b2e      	cmp	r3, #46	; 0x2e
 80064ce:	d10c      	bne.n	80064ea <_vfiprintf_r+0x15a>
 80064d0:	7863      	ldrb	r3, [r4, #1]
 80064d2:	2b2a      	cmp	r3, #42	; 0x2a
 80064d4:	d134      	bne.n	8006540 <_vfiprintf_r+0x1b0>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	1d1a      	adds	r2, r3, #4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	9203      	str	r2, [sp, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfb8      	it	lt
 80064e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80064e6:	3402      	adds	r4, #2
 80064e8:	9305      	str	r3, [sp, #20]
 80064ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80065c0 <_vfiprintf_r+0x230>
 80064ee:	7821      	ldrb	r1, [r4, #0]
 80064f0:	2203      	movs	r2, #3
 80064f2:	4650      	mov	r0, sl
 80064f4:	f7f9 fe74 	bl	80001e0 <memchr>
 80064f8:	b138      	cbz	r0, 800650a <_vfiprintf_r+0x17a>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	eba0 000a 	sub.w	r0, r0, sl
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	4082      	lsls	r2, r0
 8006504:	4313      	orrs	r3, r2
 8006506:	3401      	adds	r4, #1
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650e:	4829      	ldr	r0, [pc, #164]	; (80065b4 <_vfiprintf_r+0x224>)
 8006510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006514:	2206      	movs	r2, #6
 8006516:	f7f9 fe63 	bl	80001e0 <memchr>
 800651a:	2800      	cmp	r0, #0
 800651c:	d03f      	beq.n	800659e <_vfiprintf_r+0x20e>
 800651e:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <_vfiprintf_r+0x228>)
 8006520:	bb1b      	cbnz	r3, 800656a <_vfiprintf_r+0x1da>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	3307      	adds	r3, #7
 8006526:	f023 0307 	bic.w	r3, r3, #7
 800652a:	3308      	adds	r3, #8
 800652c:	9303      	str	r3, [sp, #12]
 800652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006530:	443b      	add	r3, r7
 8006532:	9309      	str	r3, [sp, #36]	; 0x24
 8006534:	e768      	b.n	8006408 <_vfiprintf_r+0x78>
 8006536:	fb0c 3202 	mla	r2, ip, r2, r3
 800653a:	460c      	mov	r4, r1
 800653c:	2001      	movs	r0, #1
 800653e:	e7a6      	b.n	800648e <_vfiprintf_r+0xfe>
 8006540:	2300      	movs	r3, #0
 8006542:	3401      	adds	r4, #1
 8006544:	9305      	str	r3, [sp, #20]
 8006546:	4619      	mov	r1, r3
 8006548:	f04f 0c0a 	mov.w	ip, #10
 800654c:	4620      	mov	r0, r4
 800654e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006552:	3a30      	subs	r2, #48	; 0x30
 8006554:	2a09      	cmp	r2, #9
 8006556:	d903      	bls.n	8006560 <_vfiprintf_r+0x1d0>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0c6      	beq.n	80064ea <_vfiprintf_r+0x15a>
 800655c:	9105      	str	r1, [sp, #20]
 800655e:	e7c4      	b.n	80064ea <_vfiprintf_r+0x15a>
 8006560:	fb0c 2101 	mla	r1, ip, r1, r2
 8006564:	4604      	mov	r4, r0
 8006566:	2301      	movs	r3, #1
 8006568:	e7f0      	b.n	800654c <_vfiprintf_r+0x1bc>
 800656a:	ab03      	add	r3, sp, #12
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	462a      	mov	r2, r5
 8006570:	4b12      	ldr	r3, [pc, #72]	; (80065bc <_vfiprintf_r+0x22c>)
 8006572:	a904      	add	r1, sp, #16
 8006574:	4630      	mov	r0, r6
 8006576:	f3af 8000 	nop.w
 800657a:	4607      	mov	r7, r0
 800657c:	1c78      	adds	r0, r7, #1
 800657e:	d1d6      	bne.n	800652e <_vfiprintf_r+0x19e>
 8006580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006582:	07d9      	lsls	r1, r3, #31
 8006584:	d405      	bmi.n	8006592 <_vfiprintf_r+0x202>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	059a      	lsls	r2, r3, #22
 800658a:	d402      	bmi.n	8006592 <_vfiprintf_r+0x202>
 800658c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800658e:	f7ff fc7d 	bl	8005e8c <__retarget_lock_release_recursive>
 8006592:	89ab      	ldrh	r3, [r5, #12]
 8006594:	065b      	lsls	r3, r3, #25
 8006596:	f53f af1d 	bmi.w	80063d4 <_vfiprintf_r+0x44>
 800659a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800659c:	e71c      	b.n	80063d8 <_vfiprintf_r+0x48>
 800659e:	ab03      	add	r3, sp, #12
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	462a      	mov	r2, r5
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <_vfiprintf_r+0x22c>)
 80065a6:	a904      	add	r1, sp, #16
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 f879 	bl	80066a0 <_printf_i>
 80065ae:	e7e4      	b.n	800657a <_vfiprintf_r+0x1ea>
 80065b0:	08006f9c 	.word	0x08006f9c
 80065b4:	08006fa6 	.word	0x08006fa6
 80065b8:	00000000 	.word	0x00000000
 80065bc:	0800636b 	.word	0x0800636b
 80065c0:	08006fa2 	.word	0x08006fa2

080065c4 <_printf_common>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	4616      	mov	r6, r2
 80065ca:	4699      	mov	r9, r3
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	690b      	ldr	r3, [r1, #16]
 80065d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	bfb8      	it	lt
 80065d8:	4613      	movlt	r3, r2
 80065da:	6033      	str	r3, [r6, #0]
 80065dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065e0:	4607      	mov	r7, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b10a      	cbz	r2, 80065ea <_printf_common+0x26>
 80065e6:	3301      	adds	r3, #1
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	0699      	lsls	r1, r3, #26
 80065ee:	bf42      	ittt	mi
 80065f0:	6833      	ldrmi	r3, [r6, #0]
 80065f2:	3302      	addmi	r3, #2
 80065f4:	6033      	strmi	r3, [r6, #0]
 80065f6:	6825      	ldr	r5, [r4, #0]
 80065f8:	f015 0506 	ands.w	r5, r5, #6
 80065fc:	d106      	bne.n	800660c <_printf_common+0x48>
 80065fe:	f104 0a19 	add.w	sl, r4, #25
 8006602:	68e3      	ldr	r3, [r4, #12]
 8006604:	6832      	ldr	r2, [r6, #0]
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	42ab      	cmp	r3, r5
 800660a:	dc26      	bgt.n	800665a <_printf_common+0x96>
 800660c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006610:	1e13      	subs	r3, r2, #0
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	bf18      	it	ne
 8006616:	2301      	movne	r3, #1
 8006618:	0692      	lsls	r2, r2, #26
 800661a:	d42b      	bmi.n	8006674 <_printf_common+0xb0>
 800661c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006620:	4649      	mov	r1, r9
 8006622:	4638      	mov	r0, r7
 8006624:	47c0      	blx	r8
 8006626:	3001      	adds	r0, #1
 8006628:	d01e      	beq.n	8006668 <_printf_common+0xa4>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	f003 0306 	and.w	r3, r3, #6
 8006632:	2b04      	cmp	r3, #4
 8006634:	bf02      	ittt	eq
 8006636:	68e5      	ldreq	r5, [r4, #12]
 8006638:	6833      	ldreq	r3, [r6, #0]
 800663a:	1aed      	subeq	r5, r5, r3
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	bf0c      	ite	eq
 8006640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006644:	2500      	movne	r5, #0
 8006646:	4293      	cmp	r3, r2
 8006648:	bfc4      	itt	gt
 800664a:	1a9b      	subgt	r3, r3, r2
 800664c:	18ed      	addgt	r5, r5, r3
 800664e:	2600      	movs	r6, #0
 8006650:	341a      	adds	r4, #26
 8006652:	42b5      	cmp	r5, r6
 8006654:	d11a      	bne.n	800668c <_printf_common+0xc8>
 8006656:	2000      	movs	r0, #0
 8006658:	e008      	b.n	800666c <_printf_common+0xa8>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4649      	mov	r1, r9
 8006660:	4638      	mov	r0, r7
 8006662:	47c0      	blx	r8
 8006664:	3001      	adds	r0, #1
 8006666:	d103      	bne.n	8006670 <_printf_common+0xac>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	3501      	adds	r5, #1
 8006672:	e7c6      	b.n	8006602 <_printf_common+0x3e>
 8006674:	18e1      	adds	r1, r4, r3
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	2030      	movs	r0, #48	; 0x30
 800667a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800667e:	4422      	add	r2, r4
 8006680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006688:	3302      	adds	r3, #2
 800668a:	e7c7      	b.n	800661c <_printf_common+0x58>
 800668c:	2301      	movs	r3, #1
 800668e:	4622      	mov	r2, r4
 8006690:	4649      	mov	r1, r9
 8006692:	4638      	mov	r0, r7
 8006694:	47c0      	blx	r8
 8006696:	3001      	adds	r0, #1
 8006698:	d0e6      	beq.n	8006668 <_printf_common+0xa4>
 800669a:	3601      	adds	r6, #1
 800669c:	e7d9      	b.n	8006652 <_printf_common+0x8e>
	...

080066a0 <_printf_i>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	7e0f      	ldrb	r7, [r1, #24]
 80066a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066a8:	2f78      	cmp	r7, #120	; 0x78
 80066aa:	4691      	mov	r9, r2
 80066ac:	4680      	mov	r8, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	469a      	mov	sl, r3
 80066b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066b6:	d807      	bhi.n	80066c8 <_printf_i+0x28>
 80066b8:	2f62      	cmp	r7, #98	; 0x62
 80066ba:	d80a      	bhi.n	80066d2 <_printf_i+0x32>
 80066bc:	2f00      	cmp	r7, #0
 80066be:	f000 80d4 	beq.w	800686a <_printf_i+0x1ca>
 80066c2:	2f58      	cmp	r7, #88	; 0x58
 80066c4:	f000 80c0 	beq.w	8006848 <_printf_i+0x1a8>
 80066c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066d0:	e03a      	b.n	8006748 <_printf_i+0xa8>
 80066d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066d6:	2b15      	cmp	r3, #21
 80066d8:	d8f6      	bhi.n	80066c8 <_printf_i+0x28>
 80066da:	a101      	add	r1, pc, #4	; (adr r1, 80066e0 <_printf_i+0x40>)
 80066dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e0:	08006739 	.word	0x08006739
 80066e4:	0800674d 	.word	0x0800674d
 80066e8:	080066c9 	.word	0x080066c9
 80066ec:	080066c9 	.word	0x080066c9
 80066f0:	080066c9 	.word	0x080066c9
 80066f4:	080066c9 	.word	0x080066c9
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	080066c9 	.word	0x080066c9
 8006700:	080066c9 	.word	0x080066c9
 8006704:	080066c9 	.word	0x080066c9
 8006708:	080066c9 	.word	0x080066c9
 800670c:	08006851 	.word	0x08006851
 8006710:	08006779 	.word	0x08006779
 8006714:	0800680b 	.word	0x0800680b
 8006718:	080066c9 	.word	0x080066c9
 800671c:	080066c9 	.word	0x080066c9
 8006720:	08006873 	.word	0x08006873
 8006724:	080066c9 	.word	0x080066c9
 8006728:	08006779 	.word	0x08006779
 800672c:	080066c9 	.word	0x080066c9
 8006730:	080066c9 	.word	0x080066c9
 8006734:	08006813 	.word	0x08006813
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	602a      	str	r2, [r5, #0]
 8006740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006748:	2301      	movs	r3, #1
 800674a:	e09f      	b.n	800688c <_printf_i+0x1ec>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	0607      	lsls	r7, r0, #24
 8006752:	f103 0104 	add.w	r1, r3, #4
 8006756:	6029      	str	r1, [r5, #0]
 8006758:	d501      	bpl.n	800675e <_printf_i+0xbe>
 800675a:	681e      	ldr	r6, [r3, #0]
 800675c:	e003      	b.n	8006766 <_printf_i+0xc6>
 800675e:	0646      	lsls	r6, r0, #25
 8006760:	d5fb      	bpl.n	800675a <_printf_i+0xba>
 8006762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006766:	2e00      	cmp	r6, #0
 8006768:	da03      	bge.n	8006772 <_printf_i+0xd2>
 800676a:	232d      	movs	r3, #45	; 0x2d
 800676c:	4276      	negs	r6, r6
 800676e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006772:	485a      	ldr	r0, [pc, #360]	; (80068dc <_printf_i+0x23c>)
 8006774:	230a      	movs	r3, #10
 8006776:	e012      	b.n	800679e <_printf_i+0xfe>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	6820      	ldr	r0, [r4, #0]
 800677c:	1d19      	adds	r1, r3, #4
 800677e:	6029      	str	r1, [r5, #0]
 8006780:	0605      	lsls	r5, r0, #24
 8006782:	d501      	bpl.n	8006788 <_printf_i+0xe8>
 8006784:	681e      	ldr	r6, [r3, #0]
 8006786:	e002      	b.n	800678e <_printf_i+0xee>
 8006788:	0641      	lsls	r1, r0, #25
 800678a:	d5fb      	bpl.n	8006784 <_printf_i+0xe4>
 800678c:	881e      	ldrh	r6, [r3, #0]
 800678e:	4853      	ldr	r0, [pc, #332]	; (80068dc <_printf_i+0x23c>)
 8006790:	2f6f      	cmp	r7, #111	; 0x6f
 8006792:	bf0c      	ite	eq
 8006794:	2308      	moveq	r3, #8
 8006796:	230a      	movne	r3, #10
 8006798:	2100      	movs	r1, #0
 800679a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800679e:	6865      	ldr	r5, [r4, #4]
 80067a0:	60a5      	str	r5, [r4, #8]
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	bfa2      	ittt	ge
 80067a6:	6821      	ldrge	r1, [r4, #0]
 80067a8:	f021 0104 	bicge.w	r1, r1, #4
 80067ac:	6021      	strge	r1, [r4, #0]
 80067ae:	b90e      	cbnz	r6, 80067b4 <_printf_i+0x114>
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	d04b      	beq.n	800684c <_printf_i+0x1ac>
 80067b4:	4615      	mov	r5, r2
 80067b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80067ba:	fb03 6711 	mls	r7, r3, r1, r6
 80067be:	5dc7      	ldrb	r7, [r0, r7]
 80067c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067c4:	4637      	mov	r7, r6
 80067c6:	42bb      	cmp	r3, r7
 80067c8:	460e      	mov	r6, r1
 80067ca:	d9f4      	bls.n	80067b6 <_printf_i+0x116>
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d10b      	bne.n	80067e8 <_printf_i+0x148>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	07de      	lsls	r6, r3, #31
 80067d4:	d508      	bpl.n	80067e8 <_printf_i+0x148>
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	6861      	ldr	r1, [r4, #4]
 80067da:	4299      	cmp	r1, r3
 80067dc:	bfde      	ittt	le
 80067de:	2330      	movle	r3, #48	; 0x30
 80067e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067e8:	1b52      	subs	r2, r2, r5
 80067ea:	6122      	str	r2, [r4, #16]
 80067ec:	f8cd a000 	str.w	sl, [sp]
 80067f0:	464b      	mov	r3, r9
 80067f2:	aa03      	add	r2, sp, #12
 80067f4:	4621      	mov	r1, r4
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7ff fee4 	bl	80065c4 <_printf_common>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d14a      	bne.n	8006896 <_printf_i+0x1f6>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	b004      	add	sp, #16
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	f043 0320 	orr.w	r3, r3, #32
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	4833      	ldr	r0, [pc, #204]	; (80068e0 <_printf_i+0x240>)
 8006814:	2778      	movs	r7, #120	; 0x78
 8006816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	6829      	ldr	r1, [r5, #0]
 800681e:	061f      	lsls	r7, r3, #24
 8006820:	f851 6b04 	ldr.w	r6, [r1], #4
 8006824:	d402      	bmi.n	800682c <_printf_i+0x18c>
 8006826:	065f      	lsls	r7, r3, #25
 8006828:	bf48      	it	mi
 800682a:	b2b6      	uxthmi	r6, r6
 800682c:	07df      	lsls	r7, r3, #31
 800682e:	bf48      	it	mi
 8006830:	f043 0320 	orrmi.w	r3, r3, #32
 8006834:	6029      	str	r1, [r5, #0]
 8006836:	bf48      	it	mi
 8006838:	6023      	strmi	r3, [r4, #0]
 800683a:	b91e      	cbnz	r6, 8006844 <_printf_i+0x1a4>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	f023 0320 	bic.w	r3, r3, #32
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	2310      	movs	r3, #16
 8006846:	e7a7      	b.n	8006798 <_printf_i+0xf8>
 8006848:	4824      	ldr	r0, [pc, #144]	; (80068dc <_printf_i+0x23c>)
 800684a:	e7e4      	b.n	8006816 <_printf_i+0x176>
 800684c:	4615      	mov	r5, r2
 800684e:	e7bd      	b.n	80067cc <_printf_i+0x12c>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	6826      	ldr	r6, [r4, #0]
 8006854:	6961      	ldr	r1, [r4, #20]
 8006856:	1d18      	adds	r0, r3, #4
 8006858:	6028      	str	r0, [r5, #0]
 800685a:	0635      	lsls	r5, r6, #24
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	d501      	bpl.n	8006864 <_printf_i+0x1c4>
 8006860:	6019      	str	r1, [r3, #0]
 8006862:	e002      	b.n	800686a <_printf_i+0x1ca>
 8006864:	0670      	lsls	r0, r6, #25
 8006866:	d5fb      	bpl.n	8006860 <_printf_i+0x1c0>
 8006868:	8019      	strh	r1, [r3, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	6123      	str	r3, [r4, #16]
 800686e:	4615      	mov	r5, r2
 8006870:	e7bc      	b.n	80067ec <_printf_i+0x14c>
 8006872:	682b      	ldr	r3, [r5, #0]
 8006874:	1d1a      	adds	r2, r3, #4
 8006876:	602a      	str	r2, [r5, #0]
 8006878:	681d      	ldr	r5, [r3, #0]
 800687a:	6862      	ldr	r2, [r4, #4]
 800687c:	2100      	movs	r1, #0
 800687e:	4628      	mov	r0, r5
 8006880:	f7f9 fcae 	bl	80001e0 <memchr>
 8006884:	b108      	cbz	r0, 800688a <_printf_i+0x1ea>
 8006886:	1b40      	subs	r0, r0, r5
 8006888:	6060      	str	r0, [r4, #4]
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	2300      	movs	r3, #0
 8006890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006894:	e7aa      	b.n	80067ec <_printf_i+0x14c>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	462a      	mov	r2, r5
 800689a:	4649      	mov	r1, r9
 800689c:	4640      	mov	r0, r8
 800689e:	47d0      	blx	sl
 80068a0:	3001      	adds	r0, #1
 80068a2:	d0ad      	beq.n	8006800 <_printf_i+0x160>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	079b      	lsls	r3, r3, #30
 80068a8:	d413      	bmi.n	80068d2 <_printf_i+0x232>
 80068aa:	68e0      	ldr	r0, [r4, #12]
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	4298      	cmp	r0, r3
 80068b0:	bfb8      	it	lt
 80068b2:	4618      	movlt	r0, r3
 80068b4:	e7a6      	b.n	8006804 <_printf_i+0x164>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4632      	mov	r2, r6
 80068ba:	4649      	mov	r1, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	47d0      	blx	sl
 80068c0:	3001      	adds	r0, #1
 80068c2:	d09d      	beq.n	8006800 <_printf_i+0x160>
 80068c4:	3501      	adds	r5, #1
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	9903      	ldr	r1, [sp, #12]
 80068ca:	1a5b      	subs	r3, r3, r1
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	dcf2      	bgt.n	80068b6 <_printf_i+0x216>
 80068d0:	e7eb      	b.n	80068aa <_printf_i+0x20a>
 80068d2:	2500      	movs	r5, #0
 80068d4:	f104 0619 	add.w	r6, r4, #25
 80068d8:	e7f5      	b.n	80068c6 <_printf_i+0x226>
 80068da:	bf00      	nop
 80068dc:	08006fad 	.word	0x08006fad
 80068e0:	08006fbe 	.word	0x08006fbe

080068e4 <__sflush_r>:
 80068e4:	898a      	ldrh	r2, [r1, #12]
 80068e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ea:	4605      	mov	r5, r0
 80068ec:	0710      	lsls	r0, r2, #28
 80068ee:	460c      	mov	r4, r1
 80068f0:	d458      	bmi.n	80069a4 <__sflush_r+0xc0>
 80068f2:	684b      	ldr	r3, [r1, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dc05      	bgt.n	8006904 <__sflush_r+0x20>
 80068f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dc02      	bgt.n	8006904 <__sflush_r+0x20>
 80068fe:	2000      	movs	r0, #0
 8006900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006906:	2e00      	cmp	r6, #0
 8006908:	d0f9      	beq.n	80068fe <__sflush_r+0x1a>
 800690a:	2300      	movs	r3, #0
 800690c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006910:	682f      	ldr	r7, [r5, #0]
 8006912:	6a21      	ldr	r1, [r4, #32]
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	d032      	beq.n	800697e <__sflush_r+0x9a>
 8006918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	075a      	lsls	r2, r3, #29
 800691e:	d505      	bpl.n	800692c <__sflush_r+0x48>
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	1ac0      	subs	r0, r0, r3
 8006924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006926:	b10b      	cbz	r3, 800692c <__sflush_r+0x48>
 8006928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800692a:	1ac0      	subs	r0, r0, r3
 800692c:	2300      	movs	r3, #0
 800692e:	4602      	mov	r2, r0
 8006930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006932:	6a21      	ldr	r1, [r4, #32]
 8006934:	4628      	mov	r0, r5
 8006936:	47b0      	blx	r6
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	d106      	bne.n	800694c <__sflush_r+0x68>
 800693e:	6829      	ldr	r1, [r5, #0]
 8006940:	291d      	cmp	r1, #29
 8006942:	d82b      	bhi.n	800699c <__sflush_r+0xb8>
 8006944:	4a29      	ldr	r2, [pc, #164]	; (80069ec <__sflush_r+0x108>)
 8006946:	410a      	asrs	r2, r1
 8006948:	07d6      	lsls	r6, r2, #31
 800694a:	d427      	bmi.n	800699c <__sflush_r+0xb8>
 800694c:	2200      	movs	r2, #0
 800694e:	6062      	str	r2, [r4, #4]
 8006950:	04d9      	lsls	r1, r3, #19
 8006952:	6922      	ldr	r2, [r4, #16]
 8006954:	6022      	str	r2, [r4, #0]
 8006956:	d504      	bpl.n	8006962 <__sflush_r+0x7e>
 8006958:	1c42      	adds	r2, r0, #1
 800695a:	d101      	bne.n	8006960 <__sflush_r+0x7c>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b903      	cbnz	r3, 8006962 <__sflush_r+0x7e>
 8006960:	6560      	str	r0, [r4, #84]	; 0x54
 8006962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006964:	602f      	str	r7, [r5, #0]
 8006966:	2900      	cmp	r1, #0
 8006968:	d0c9      	beq.n	80068fe <__sflush_r+0x1a>
 800696a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800696e:	4299      	cmp	r1, r3
 8006970:	d002      	beq.n	8006978 <__sflush_r+0x94>
 8006972:	4628      	mov	r0, r5
 8006974:	f7ff fa92 	bl	8005e9c <_free_r>
 8006978:	2000      	movs	r0, #0
 800697a:	6360      	str	r0, [r4, #52]	; 0x34
 800697c:	e7c0      	b.n	8006900 <__sflush_r+0x1c>
 800697e:	2301      	movs	r3, #1
 8006980:	4628      	mov	r0, r5
 8006982:	47b0      	blx	r6
 8006984:	1c41      	adds	r1, r0, #1
 8006986:	d1c8      	bne.n	800691a <__sflush_r+0x36>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0c5      	beq.n	800691a <__sflush_r+0x36>
 800698e:	2b1d      	cmp	r3, #29
 8006990:	d001      	beq.n	8006996 <__sflush_r+0xb2>
 8006992:	2b16      	cmp	r3, #22
 8006994:	d101      	bne.n	800699a <__sflush_r+0xb6>
 8006996:	602f      	str	r7, [r5, #0]
 8006998:	e7b1      	b.n	80068fe <__sflush_r+0x1a>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	e7ad      	b.n	8006900 <__sflush_r+0x1c>
 80069a4:	690f      	ldr	r7, [r1, #16]
 80069a6:	2f00      	cmp	r7, #0
 80069a8:	d0a9      	beq.n	80068fe <__sflush_r+0x1a>
 80069aa:	0793      	lsls	r3, r2, #30
 80069ac:	680e      	ldr	r6, [r1, #0]
 80069ae:	bf08      	it	eq
 80069b0:	694b      	ldreq	r3, [r1, #20]
 80069b2:	600f      	str	r7, [r1, #0]
 80069b4:	bf18      	it	ne
 80069b6:	2300      	movne	r3, #0
 80069b8:	eba6 0807 	sub.w	r8, r6, r7
 80069bc:	608b      	str	r3, [r1, #8]
 80069be:	f1b8 0f00 	cmp.w	r8, #0
 80069c2:	dd9c      	ble.n	80068fe <__sflush_r+0x1a>
 80069c4:	6a21      	ldr	r1, [r4, #32]
 80069c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069c8:	4643      	mov	r3, r8
 80069ca:	463a      	mov	r2, r7
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b0      	blx	r6
 80069d0:	2800      	cmp	r0, #0
 80069d2:	dc06      	bgt.n	80069e2 <__sflush_r+0xfe>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	e78e      	b.n	8006900 <__sflush_r+0x1c>
 80069e2:	4407      	add	r7, r0
 80069e4:	eba8 0800 	sub.w	r8, r8, r0
 80069e8:	e7e9      	b.n	80069be <__sflush_r+0xda>
 80069ea:	bf00      	nop
 80069ec:	dfbffffe 	.word	0xdfbffffe

080069f0 <_fflush_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	690b      	ldr	r3, [r1, #16]
 80069f4:	4605      	mov	r5, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b913      	cbnz	r3, 8006a00 <_fflush_r+0x10>
 80069fa:	2500      	movs	r5, #0
 80069fc:	4628      	mov	r0, r5
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	b118      	cbz	r0, 8006a0a <_fflush_r+0x1a>
 8006a02:	6a03      	ldr	r3, [r0, #32]
 8006a04:	b90b      	cbnz	r3, 8006a0a <_fflush_r+0x1a>
 8006a06:	f7ff f909 	bl	8005c1c <__sinit>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f3      	beq.n	80069fa <_fflush_r+0xa>
 8006a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a14:	07d0      	lsls	r0, r2, #31
 8006a16:	d404      	bmi.n	8006a22 <_fflush_r+0x32>
 8006a18:	0599      	lsls	r1, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_fflush_r+0x32>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f7ff fa34 	bl	8005e8a <__retarget_lock_acquire_recursive>
 8006a22:	4628      	mov	r0, r5
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7ff ff5d 	bl	80068e4 <__sflush_r>
 8006a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2c:	07da      	lsls	r2, r3, #31
 8006a2e:	4605      	mov	r5, r0
 8006a30:	d4e4      	bmi.n	80069fc <_fflush_r+0xc>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	d4e1      	bmi.n	80069fc <_fflush_r+0xc>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f7ff fa27 	bl	8005e8c <__retarget_lock_release_recursive>
 8006a3e:	e7dd      	b.n	80069fc <_fflush_r+0xc>

08006a40 <__swbuf_r>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	460e      	mov	r6, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	4605      	mov	r5, r0
 8006a48:	b118      	cbz	r0, 8006a52 <__swbuf_r+0x12>
 8006a4a:	6a03      	ldr	r3, [r0, #32]
 8006a4c:	b90b      	cbnz	r3, 8006a52 <__swbuf_r+0x12>
 8006a4e:	f7ff f8e5 	bl	8005c1c <__sinit>
 8006a52:	69a3      	ldr	r3, [r4, #24]
 8006a54:	60a3      	str	r3, [r4, #8]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	071a      	lsls	r2, r3, #28
 8006a5a:	d525      	bpl.n	8006aa8 <__swbuf_r+0x68>
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	b31b      	cbz	r3, 8006aa8 <__swbuf_r+0x68>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	6922      	ldr	r2, [r4, #16]
 8006a64:	1a98      	subs	r0, r3, r2
 8006a66:	6963      	ldr	r3, [r4, #20]
 8006a68:	b2f6      	uxtb	r6, r6
 8006a6a:	4283      	cmp	r3, r0
 8006a6c:	4637      	mov	r7, r6
 8006a6e:	dc04      	bgt.n	8006a7a <__swbuf_r+0x3a>
 8006a70:	4621      	mov	r1, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	f7ff ffbc 	bl	80069f0 <_fflush_r>
 8006a78:	b9e0      	cbnz	r0, 8006ab4 <__swbuf_r+0x74>
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	60a3      	str	r3, [r4, #8]
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	701e      	strb	r6, [r3, #0]
 8006a88:	6962      	ldr	r2, [r4, #20]
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d004      	beq.n	8006a9a <__swbuf_r+0x5a>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	07db      	lsls	r3, r3, #31
 8006a94:	d506      	bpl.n	8006aa4 <__swbuf_r+0x64>
 8006a96:	2e0a      	cmp	r6, #10
 8006a98:	d104      	bne.n	8006aa4 <__swbuf_r+0x64>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f7ff ffa7 	bl	80069f0 <_fflush_r>
 8006aa2:	b938      	cbnz	r0, 8006ab4 <__swbuf_r+0x74>
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 f806 	bl	8006abc <__swsetup_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d0d5      	beq.n	8006a60 <__swbuf_r+0x20>
 8006ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ab8:	e7f4      	b.n	8006aa4 <__swbuf_r+0x64>
	...

08006abc <__swsetup_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4b2a      	ldr	r3, [pc, #168]	; (8006b68 <__swsetup_r+0xac>)
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	b118      	cbz	r0, 8006ad0 <__swsetup_r+0x14>
 8006ac8:	6a03      	ldr	r3, [r0, #32]
 8006aca:	b90b      	cbnz	r3, 8006ad0 <__swsetup_r+0x14>
 8006acc:	f7ff f8a6 	bl	8005c1c <__sinit>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad6:	0718      	lsls	r0, r3, #28
 8006ad8:	d422      	bmi.n	8006b20 <__swsetup_r+0x64>
 8006ada:	06d9      	lsls	r1, r3, #27
 8006adc:	d407      	bmi.n	8006aee <__swsetup_r+0x32>
 8006ade:	2309      	movs	r3, #9
 8006ae0:	602b      	str	r3, [r5, #0]
 8006ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	e034      	b.n	8006b58 <__swsetup_r+0x9c>
 8006aee:	0758      	lsls	r0, r3, #29
 8006af0:	d512      	bpl.n	8006b18 <__swsetup_r+0x5c>
 8006af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006af4:	b141      	cbz	r1, 8006b08 <__swsetup_r+0x4c>
 8006af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006afa:	4299      	cmp	r1, r3
 8006afc:	d002      	beq.n	8006b04 <__swsetup_r+0x48>
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7ff f9cc 	bl	8005e9c <_free_r>
 8006b04:	2300      	movs	r3, #0
 8006b06:	6363      	str	r3, [r4, #52]	; 0x34
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	2300      	movs	r3, #0
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	6023      	str	r3, [r4, #0]
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	f043 0308 	orr.w	r3, r3, #8
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	b94b      	cbnz	r3, 8006b38 <__swsetup_r+0x7c>
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2e:	d003      	beq.n	8006b38 <__swsetup_r+0x7c>
 8006b30:	4621      	mov	r1, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 f8eb 	bl	8006d0e <__smakebuf_r>
 8006b38:	89a0      	ldrh	r0, [r4, #12]
 8006b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b3e:	f010 0301 	ands.w	r3, r0, #1
 8006b42:	d00a      	beq.n	8006b5a <__swsetup_r+0x9e>
 8006b44:	2300      	movs	r3, #0
 8006b46:	60a3      	str	r3, [r4, #8]
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	425b      	negs	r3, r3
 8006b4c:	61a3      	str	r3, [r4, #24]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	b943      	cbnz	r3, 8006b64 <__swsetup_r+0xa8>
 8006b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b56:	d1c4      	bne.n	8006ae2 <__swsetup_r+0x26>
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	0781      	lsls	r1, r0, #30
 8006b5c:	bf58      	it	pl
 8006b5e:	6963      	ldrpl	r3, [r4, #20]
 8006b60:	60a3      	str	r3, [r4, #8]
 8006b62:	e7f4      	b.n	8006b4e <__swsetup_r+0x92>
 8006b64:	2000      	movs	r0, #0
 8006b66:	e7f7      	b.n	8006b58 <__swsetup_r+0x9c>
 8006b68:	20000068 	.word	0x20000068

08006b6c <memmove>:
 8006b6c:	4288      	cmp	r0, r1
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	eb01 0402 	add.w	r4, r1, r2
 8006b74:	d902      	bls.n	8006b7c <memmove+0x10>
 8006b76:	4284      	cmp	r4, r0
 8006b78:	4623      	mov	r3, r4
 8006b7a:	d807      	bhi.n	8006b8c <memmove+0x20>
 8006b7c:	1e43      	subs	r3, r0, #1
 8006b7e:	42a1      	cmp	r1, r4
 8006b80:	d008      	beq.n	8006b94 <memmove+0x28>
 8006b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b8a:	e7f8      	b.n	8006b7e <memmove+0x12>
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4601      	mov	r1, r0
 8006b90:	428a      	cmp	r2, r1
 8006b92:	d100      	bne.n	8006b96 <memmove+0x2a>
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b9e:	e7f7      	b.n	8006b90 <memmove+0x24>

08006ba0 <_raise_r>:
 8006ba0:	291f      	cmp	r1, #31
 8006ba2:	b538      	push	{r3, r4, r5, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	d904      	bls.n	8006bb4 <_raise_r+0x14>
 8006baa:	2316      	movs	r3, #22
 8006bac:	6003      	str	r3, [r0, #0]
 8006bae:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006bb6:	b112      	cbz	r2, 8006bbe <_raise_r+0x1e>
 8006bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bbc:	b94b      	cbnz	r3, 8006bd2 <_raise_r+0x32>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 f830 	bl	8006c24 <_getpid_r>
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	4601      	mov	r1, r0
 8006bc8:	4620      	mov	r0, r4
 8006bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bce:	f000 b817 	b.w	8006c00 <_kill_r>
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d00a      	beq.n	8006bec <_raise_r+0x4c>
 8006bd6:	1c59      	adds	r1, r3, #1
 8006bd8:	d103      	bne.n	8006be2 <_raise_r+0x42>
 8006bda:	2316      	movs	r3, #22
 8006bdc:	6003      	str	r3, [r0, #0]
 8006bde:	2001      	movs	r0, #1
 8006be0:	e7e7      	b.n	8006bb2 <_raise_r+0x12>
 8006be2:	2400      	movs	r4, #0
 8006be4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006be8:	4628      	mov	r0, r5
 8006bea:	4798      	blx	r3
 8006bec:	2000      	movs	r0, #0
 8006bee:	e7e0      	b.n	8006bb2 <_raise_r+0x12>

08006bf0 <raise>:
 8006bf0:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <raise+0xc>)
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f7ff bfd3 	b.w	8006ba0 <_raise_r>
 8006bfa:	bf00      	nop
 8006bfc:	20000068 	.word	0x20000068

08006c00 <_kill_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	; (8006c20 <_kill_r+0x20>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	f7fa fa15 	bl	800103c <_kill>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d102      	bne.n	8006c1c <_kill_r+0x1c>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	b103      	cbz	r3, 8006c1c <_kill_r+0x1c>
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	bd38      	pop	{r3, r4, r5, pc}
 8006c1e:	bf00      	nop
 8006c20:	2000030c 	.word	0x2000030c

08006c24 <_getpid_r>:
 8006c24:	f7fa ba02 	b.w	800102c <_getpid>

08006c28 <_sbrk_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d06      	ldr	r5, [pc, #24]	; (8006c44 <_sbrk_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fa fa8a 	bl	800114c <_sbrk>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_sbrk_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_sbrk_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	2000030c 	.word	0x2000030c

08006c48 <memcpy>:
 8006c48:	440a      	add	r2, r1
 8006c4a:	4291      	cmp	r1, r2
 8006c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c50:	d100      	bne.n	8006c54 <memcpy+0xc>
 8006c52:	4770      	bx	lr
 8006c54:	b510      	push	{r4, lr}
 8006c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	d1f9      	bne.n	8006c56 <memcpy+0xe>
 8006c62:	bd10      	pop	{r4, pc}

08006c64 <_realloc_r>:
 8006c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c68:	4680      	mov	r8, r0
 8006c6a:	4614      	mov	r4, r2
 8006c6c:	460e      	mov	r6, r1
 8006c6e:	b921      	cbnz	r1, 8006c7a <_realloc_r+0x16>
 8006c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	4611      	mov	r1, r2
 8006c76:	f7ff b97d 	b.w	8005f74 <_malloc_r>
 8006c7a:	b92a      	cbnz	r2, 8006c88 <_realloc_r+0x24>
 8006c7c:	f7ff f90e 	bl	8005e9c <_free_r>
 8006c80:	4625      	mov	r5, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c88:	f000 f8a0 	bl	8006dcc <_malloc_usable_size_r>
 8006c8c:	4284      	cmp	r4, r0
 8006c8e:	4607      	mov	r7, r0
 8006c90:	d802      	bhi.n	8006c98 <_realloc_r+0x34>
 8006c92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c96:	d812      	bhi.n	8006cbe <_realloc_r+0x5a>
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	f7ff f96a 	bl	8005f74 <_malloc_r>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d0ed      	beq.n	8006c82 <_realloc_r+0x1e>
 8006ca6:	42bc      	cmp	r4, r7
 8006ca8:	4622      	mov	r2, r4
 8006caa:	4631      	mov	r1, r6
 8006cac:	bf28      	it	cs
 8006cae:	463a      	movcs	r2, r7
 8006cb0:	f7ff ffca 	bl	8006c48 <memcpy>
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f7ff f8f0 	bl	8005e9c <_free_r>
 8006cbc:	e7e1      	b.n	8006c82 <_realloc_r+0x1e>
 8006cbe:	4635      	mov	r5, r6
 8006cc0:	e7df      	b.n	8006c82 <_realloc_r+0x1e>

08006cc2 <__swhatbuf_r>:
 8006cc2:	b570      	push	{r4, r5, r6, lr}
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	b096      	sub	sp, #88	; 0x58
 8006cce:	4615      	mov	r5, r2
 8006cd0:	461e      	mov	r6, r3
 8006cd2:	da0d      	bge.n	8006cf0 <__swhatbuf_r+0x2e>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	bf0c      	ite	eq
 8006ce0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ce4:	2340      	movne	r3, #64	; 0x40
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	6031      	str	r1, [r6, #0]
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	b016      	add	sp, #88	; 0x58
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	466a      	mov	r2, sp
 8006cf2:	f000 f849 	bl	8006d88 <_fstat_r>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dbec      	blt.n	8006cd4 <__swhatbuf_r+0x12>
 8006cfa:	9901      	ldr	r1, [sp, #4]
 8006cfc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d04:	4259      	negs	r1, r3
 8006d06:	4159      	adcs	r1, r3
 8006d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0c:	e7eb      	b.n	8006ce6 <__swhatbuf_r+0x24>

08006d0e <__smakebuf_r>:
 8006d0e:	898b      	ldrh	r3, [r1, #12]
 8006d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d12:	079d      	lsls	r5, r3, #30
 8006d14:	4606      	mov	r6, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	d507      	bpl.n	8006d2a <__smakebuf_r+0x1c>
 8006d1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	2301      	movs	r3, #1
 8006d24:	6163      	str	r3, [r4, #20]
 8006d26:	b002      	add	sp, #8
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	ab01      	add	r3, sp, #4
 8006d2c:	466a      	mov	r2, sp
 8006d2e:	f7ff ffc8 	bl	8006cc2 <__swhatbuf_r>
 8006d32:	9900      	ldr	r1, [sp, #0]
 8006d34:	4605      	mov	r5, r0
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff f91c 	bl	8005f74 <_malloc_r>
 8006d3c:	b948      	cbnz	r0, 8006d52 <__smakebuf_r+0x44>
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	059a      	lsls	r2, r3, #22
 8006d44:	d4ef      	bmi.n	8006d26 <__smakebuf_r+0x18>
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	e7e3      	b.n	8006d1a <__smakebuf_r+0xc>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	6020      	str	r0, [r4, #0]
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	9b00      	ldr	r3, [sp, #0]
 8006d5e:	6163      	str	r3, [r4, #20]
 8006d60:	9b01      	ldr	r3, [sp, #4]
 8006d62:	6120      	str	r0, [r4, #16]
 8006d64:	b15b      	cbz	r3, 8006d7e <__smakebuf_r+0x70>
 8006d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f81e 	bl	8006dac <_isatty_r>
 8006d70:	b128      	cbz	r0, 8006d7e <__smakebuf_r+0x70>
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	431d      	orrs	r5, r3
 8006d82:	81a5      	strh	r5, [r4, #12]
 8006d84:	e7cf      	b.n	8006d26 <__smakebuf_r+0x18>
	...

08006d88 <_fstat_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d07      	ldr	r5, [pc, #28]	; (8006da8 <_fstat_r+0x20>)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	f7fa f9b0 	bl	80010fa <_fstat>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	d102      	bne.n	8006da4 <_fstat_r+0x1c>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	b103      	cbz	r3, 8006da4 <_fstat_r+0x1c>
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	bd38      	pop	{r3, r4, r5, pc}
 8006da6:	bf00      	nop
 8006da8:	2000030c 	.word	0x2000030c

08006dac <_isatty_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	; (8006dc8 <_isatty_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa f9af 	bl	800111a <_isatty>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_isatty_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_isatty_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	2000030c 	.word	0x2000030c

08006dcc <_malloc_usable_size_r>:
 8006dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd0:	1f18      	subs	r0, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbc      	itt	lt
 8006dd6:	580b      	ldrlt	r3, [r1, r0]
 8006dd8:	18c0      	addlt	r0, r0, r3
 8006dda:	4770      	bx	lr

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
