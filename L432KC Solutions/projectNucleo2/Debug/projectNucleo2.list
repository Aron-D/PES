
projectNucleo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800ab80  0800ab80  0001ab80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aee8  0800aee8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aee8  0800aee8  0001aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef0  0800aef0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800aef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  2000005c  0800af54  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800af54  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a26  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab2  00000000  00000000  00036af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105b  00000000  00000000  0003aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002365c  00000000  00000000  0003bad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188c3  00000000  00000000  0005f12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de31e  00000000  00000000  000779f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006268  00000000  00000000  00155d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab68 	.word	0x0800ab68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800ab68 	.word	0x0800ab68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b970 	b.w	8000f54 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	460d      	mov	r5, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	460f      	mov	r7, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0xe2>
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	b143      	cbz	r3, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	f1c3 0220 	rsb	r2, r3, #32
 8000cb0:	409f      	lsls	r7, r3
 8000cb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	409c      	lsls	r4, r3
 8000cba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cbe:	fa1f f58c 	uxth.w	r5, ip
 8000cc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc6:	0c22      	lsrs	r2, r4, #16
 8000cc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ccc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cd0:	fb01 f005 	mul.w	r0, r1, r5
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ce0:	f080 811c 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f240 8119 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000cea:	3902      	subs	r1, #2
 8000cec:	4462      	add	r2, ip
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	b2a4      	uxth	r4, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfe:	fb00 f505 	mul.w	r5, r0, r5
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x90>
 8000d06:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0e:	f080 8107 	bcs.w	8000f20 <__udivmoddi4+0x294>
 8000d12:	42a5      	cmp	r5, r4
 8000d14:	f240 8104 	bls.w	8000f20 <__udivmoddi4+0x294>
 8000d18:	4464      	add	r4, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11e      	cbz	r6, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40dc      	lsrs	r4, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0xbc>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80ed 	beq.w	8000f16 <__udivmoddi4+0x28a>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d149      	bne.n	8000de4 <__udivmoddi4+0x158>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d302      	bcc.n	8000d5a <__udivmoddi4+0xce>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	f200 80f8 	bhi.w	8000f4a <__udivmoddi4+0x2be>
 8000d5a:	1a84      	subs	r4, r0, r2
 8000d5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	4617      	mov	r7, r2
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d0e2      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	e9c6 4700 	strd	r4, r7, [r6]
 8000d6c:	e7df      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xe6>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f382 	clz	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7c:	1a8a      	subs	r2, r1, r2
 8000d7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	2101      	movs	r1, #1
 8000d88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d90:	0c22      	lsrs	r2, r4, #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb0e f005 	mul.w	r0, lr, r5
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000d9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000da2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4290      	cmp	r0, r2
 8000daa:	f200 80cb 	bhi.w	8000f44 <__udivmoddi4+0x2b8>
 8000dae:	4645      	mov	r5, r8
 8000db0:	1a12      	subs	r2, r2, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x14e>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x14c>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f200 80bb 	bhi.w	8000f4e <__udivmoddi4+0x2c2>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000de2:	e79f      	b.n	8000d24 <__udivmoddi4+0x98>
 8000de4:	f1c1 0720 	rsb	r7, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df2:	fa05 f401 	lsl.w	r4, r5, r1
 8000df6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfa:	40fd      	lsrs	r5, r7
 8000dfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb08 f50e 	mul.w	r5, r8, lr
 8000e18:	42a5      	cmp	r5, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e2c:	f080 8088 	bcs.w	8000f40 <__udivmoddi4+0x2b4>
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	f240 8085 	bls.w	8000f40 <__udivmoddi4+0x2b4>
 8000e36:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3a:	4464      	add	r4, ip
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	b29d      	uxth	r5, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e5c:	d26c      	bcs.n	8000f38 <__udivmoddi4+0x2ac>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	d96a      	bls.n	8000f38 <__udivmoddi4+0x2ac>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	42ac      	cmp	r4, r5
 8000e74:	46c8      	mov	r8, r9
 8000e76:	46ae      	mov	lr, r5
 8000e78:	d356      	bcc.n	8000f28 <__udivmoddi4+0x29c>
 8000e7a:	d053      	beq.n	8000f24 <__udivmoddi4+0x298>
 8000e7c:	b156      	cbz	r6, 8000e94 <__udivmoddi4+0x208>
 8000e7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e82:	eb64 040e 	sbc.w	r4, r4, lr
 8000e86:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8a:	40ca      	lsrs	r2, r1
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4317      	orrs	r7, r2
 8000e90:	e9c6 7400 	strd	r7, r4, [r6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eac:	409d      	lsls	r5, r3
 8000eae:	432a      	orrs	r2, r5
 8000eb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb4:	fa1f fe8c 	uxth.w	lr, ip
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ec0:	0c11      	lsrs	r1, r2, #16
 8000ec2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eca:	428d      	cmp	r5, r1
 8000ecc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x258>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eda:	d22f      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000edc:	428d      	cmp	r5, r1
 8000ede:	d92d      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4461      	add	r1, ip
 8000ee4:	1b49      	subs	r1, r1, r5
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eec:	fb07 1115 	mls	r1, r7, r5, r1
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x282>
 8000efc:	eb1c 0202 	adds.w	r2, ip, r2
 8000f00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f04:	d216      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000f06:	4291      	cmp	r1, r2
 8000f08:	d914      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	1a52      	subs	r2, r2, r1
 8000f10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f14:	e738      	b.n	8000d88 <__udivmoddi4+0xfc>
 8000f16:	4631      	mov	r1, r6
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e708      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	e6e6      	b.n	8000cee <__udivmoddi4+0x62>
 8000f20:	4610      	mov	r0, r2
 8000f22:	e6fb      	b.n	8000d1c <__udivmoddi4+0x90>
 8000f24:	4548      	cmp	r0, r9
 8000f26:	d2a9      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f28:	ebb9 0802 	subs.w	r8, r9, r2
 8000f2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f30:	3b01      	subs	r3, #1
 8000f32:	e7a3      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f34:	4645      	mov	r5, r8
 8000f36:	e7ea      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f38:	462b      	mov	r3, r5
 8000f3a:	e794      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e7d1      	b.n	8000ee4 <__udivmoddi4+0x258>
 8000f40:	46d0      	mov	r8, sl
 8000f42:	e77b      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f44:	3d02      	subs	r5, #2
 8000f46:	4462      	add	r2, ip
 8000f48:	e732      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e70a      	b.n	8000d64 <__udivmoddi4+0xd8>
 8000f4e:	4464      	add	r4, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e742      	b.n	8000dda <__udivmoddi4+0x14e>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ffc2 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SysTick_Config(SystemCoreClock / 1000);
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <main+0xc0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <main+0xc4>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	099b      	lsrs	r3, r3, #6
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffd3 	bl	8000fac <SysTick_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f001 f8d2 	bl	80021ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f86b 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fb17 	bl	8001640 <MX_GPIO_Init>
  MX_DMA_Init();
 8001012:	f000 faf7 	bl	8001604 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001016:	f000 fac5 	bl	80015a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800101a:	f000 f929 	bl	8001270 <MX_I2C1_Init>
  MX_ADC1_Init();
 800101e:	f000 f8c3 	bl	80011a8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001022:	f000 f965 	bl	80012f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001026:	f000 f9f1 	bl	800140c <MX_TIM2_Init>
  MX_TIM15_Init();
 800102a:	f000 fa69 	bl	8001500 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t *)" - Nucleo 2 online - \n\r", 23, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2217      	movs	r2, #23
 8001034:	4920      	ldr	r1, [pc, #128]	; (80010b8 <main+0xc8>)
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <main+0xcc>)
 8001038:	f007 fb86 	bl	8008748 <HAL_UART_Transmit>
  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800103c:	2201      	movs	r2, #1
 800103e:	4920      	ldr	r1, [pc, #128]	; (80010c0 <main+0xd0>)
 8001040:	4820      	ldr	r0, [pc, #128]	; (80010c4 <main+0xd4>)
 8001042:	f003 f957 	bl	80042f4 <HAL_I2C_Slave_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	491d      	ldr	r1, [pc, #116]	; (80010c0 <main+0xd0>)
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <main+0xd4>)
 800104c:	f003 f952 	bl	80042f4 <HAL_I2C_Slave_Receive_IT>
	movementSensor = HAL_GPIO_ReadPin(movementSensor_GPIO_Port, movementSensor_Pin);
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f003 f812 	bl	8004080 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <main+0xd8>)
 8001062:	701a      	strb	r2, [r3, #0]
	sprintf((char*) movementBuf, "%u", movementSensor);
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <main+0xd8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4918      	ldr	r1, [pc, #96]	; (80010cc <main+0xdc>)
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <main+0xe0>)
 800106e:	f008 f837 	bl	80090e0 <siprintf>
//	HAL_UART_Transmit(&huart2, movementBuf, sizeof(movementBuf), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);

	HAL_ADC_Start(&hadc1);
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <main+0xe4>)
 8001074:	f001 fc8c 	bl	8002990 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <main+0xe4>)
 800107e:	f001 fd1d 	bl	8002abc <HAL_ADC_PollForConversion>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d108      	bne.n	800109a <main+0xaa>
		HAL_ADC_Stop(&hadc1);
 8001088:	4812      	ldr	r0, [pc, #72]	; (80010d4 <main+0xe4>)
 800108a:	f001 fce4 	bl	8002a56 <HAL_ADC_Stop>
		drukSensor = HAL_ADC_GetValue(&hadc1);
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <main+0xe4>)
 8001090:	f001 fda3 	bl	8002bda <HAL_ADC_GetValue>
 8001094:	4603      	mov	r3, r0
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <main+0xe8>)
 8001098:	6013      	str	r3, [r2, #0]
	}
	sprintf((char*) drukSensorBuf, "%d", (int) drukSensor);
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <main+0xe8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	490e      	ldr	r1, [pc, #56]	; (80010dc <main+0xec>)
 80010a2:	480f      	ldr	r0, [pc, #60]	; (80010e0 <main+0xf0>)
 80010a4:	f008 f81c 	bl	80090e0 <siprintf>
//	HAL_UART_Transmit(&huart2, drukSensorBuf, sizeof(drukSensorBuf), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);

	HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f001 f8f5 	bl	8002298 <HAL_Delay>
	HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 80010ae:	e7ca      	b.n	8001046 <main+0x56>
 80010b0:	20000000 	.word	0x20000000
 80010b4:	10624dd3 	.word	0x10624dd3
 80010b8:	0800ab80 	.word	0x0800ab80
 80010bc:	20000274 	.word	0x20000274
 80010c0:	20000078 	.word	0x20000078
 80010c4:	200000f4 	.word	0x200000f4
 80010c8:	20000079 	.word	0x20000079
 80010cc:	0800ab98 	.word	0x0800ab98
 80010d0:	2000007c 	.word	0x2000007c
 80010d4:	20000090 	.word	0x20000090
 80010d8:	20000080 	.word	0x20000080
 80010dc:	0800ab9c 	.word	0x0800ab9c
 80010e0:	20000084 	.word	0x20000084

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b096      	sub	sp, #88	; 0x58
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2244      	movs	r2, #68	; 0x44
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 f814 	bl	8009120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001106:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110a:	f004 fc0b 	bl	8005924 <HAL_PWREx_ControlVoltageScaling>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001114:	f000 fd3e 	bl	8001b94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001118:	f004 fbe6 	bl	80058e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <SystemClock_Config+0xc0>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <SystemClock_Config+0xc0>)
 8001124:	f023 0318 	bic.w	r3, r3, #24
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800112c:	2314      	movs	r3, #20
 800112e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001144:	2301      	movs	r3, #1
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 800114c:	2324      	movs	r3, #36	; 0x24
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001150:	2307      	movs	r3, #7
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fc35 	bl	80059d0 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800116c:	f000 fd12 	bl	8001b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2303      	movs	r3, #3
 8001176:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	2104      	movs	r1, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f005 f835 	bl	80061f8 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001194:	f000 fcfe 	bl	8001b94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001198:	f005 fc48 	bl	8006a2c <HAL_RCCEx_EnableMSIPLLMode>
}
 800119c:	bf00      	nop
 800119e:	3758      	adds	r7, #88	; 0x58
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011c0:	4a29      	ldr	r2, [pc, #164]	; (8001268 <MX_ADC1_Init+0xc0>)
 80011c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011de:	2204      	movs	r2, #4
 80011e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC1_Init+0xbc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_ADC1_Init+0xbc>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_ADC1_Init+0xbc>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_ADC1_Init+0xbc>)
 8001212:	2200      	movs	r2, #0
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_ADC1_Init+0xbc>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_ADC1_Init+0xbc>)
 8001220:	f001 fa74 	bl	800270c <HAL_ADC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800122a:	f000 fcb3 	bl	8001b94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_ADC1_Init+0xc4>)
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001232:	2306      	movs	r3, #6
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123a:	237f      	movs	r3, #127	; 0x7f
 800123c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123e:	2304      	movs	r3, #4
 8001240:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_ADC1_Init+0xbc>)
 800124c:	f001 fcd2 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001256:	f000 fc9d 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000090 	.word	0x20000090
 8001268:	50040000 	.word	0x50040000
 800126c:	25b00200 	.word	0x25b00200

08001270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C1_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C1_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012ac:	f002 ff18 	bl	80040e0 <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 fc6d 	bl	8001b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012be:	f004 fa7b 	bl	80057b8 <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 fc64 	bl	8001b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012d0:	f004 fabd 	bl	800584e <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fc5b 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000f4 	.word	0x200000f4
 80012e8:	40005400 	.word	0x40005400
 80012ec:	10808dd3 	.word	0x10808dd3

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b096      	sub	sp, #88	; 0x58
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	222c      	movs	r2, #44	; 0x2c
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f007 feff 	bl	8009120 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_TIM1_Init+0x114>)
 8001324:	4a38      	ldr	r2, [pc, #224]	; (8001408 <MX_TIM1_Init+0x118>)
 8001326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <MX_TIM1_Init+0x114>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <MX_TIM1_Init+0x114>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <MX_TIM1_Init+0x114>)
 8001336:	2259      	movs	r2, #89	; 0x59
 8001338:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <MX_TIM1_Init+0x114>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_TIM1_Init+0x114>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <MX_TIM1_Init+0x114>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134c:	482d      	ldr	r0, [pc, #180]	; (8001404 <MX_TIM1_Init+0x114>)
 800134e:	f005 fd7c 	bl	8006e4a <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001358:	f000 fc1c 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001368:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136c:	4619      	mov	r1, r3
 800136e:	4825      	ldr	r0, [pc, #148]	; (8001404 <MX_TIM1_Init+0x114>)
 8001370:	f007 f8a0 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800137a:	f000 fc0b 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137e:	2360      	movs	r3, #96	; 0x60
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139e:	2204      	movs	r2, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM1_Init+0x114>)
 80013a4:	f006 fa04 	bl	80077b0 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013ae:	f000 fbf1 	bl	8001b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM1_Init+0x114>)
 80013e8:	f007 f8ca 	bl	8008580 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80013f2:	f000 fbcf 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM1_Init+0x114>)
 80013f8:	f000 fd4e 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 80013fc:	bf00      	nop
 80013fe:	3758      	adds	r7, #88	; 0x58
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000148 	.word	0x20000148
 8001408:	40012c00 	.word	0x40012c00

0800140c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001444:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001448:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800144c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150000;
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001456:	4a29      	ldr	r2, [pc, #164]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <MX_TIM2_Init+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001466:	4824      	ldr	r0, [pc, #144]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001468:	f005 fbe2 	bl	8006c30 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001472:	f000 fb8f 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001480:	4619      	mov	r1, r3
 8001482:	481d      	ldr	r0, [pc, #116]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001484:	f006 faa8 	bl	80079d8 <HAL_TIM_ConfigClockSource>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800148e:	f000 fb81 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001492:	4819      	ldr	r0, [pc, #100]	; (80014f8 <MX_TIM2_Init+0xec>)
 8001494:	f005 fc78 	bl	8006d88 <HAL_TIM_OC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800149e:	f000 fb79 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4811      	ldr	r0, [pc, #68]	; (80014f8 <MX_TIM2_Init+0xec>)
 80014b2:	f006 ffff 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014bc:	f000 fb6a 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	2204      	movs	r2, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM2_Init+0xec>)
 80014da:	f006 f8ef 	bl	80076bc <HAL_TIM_OC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80014e4:	f000 fb56 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM2_Init+0xec>)
 80014ea:	f000 fcd5 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 80014ee:	bf00      	nop
 80014f0:	3738      	adds	r7, #56	; 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000194 	.word	0x20000194
 80014fc:	000249f0 	.word	0x000249f0

08001500 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_TIM15_Init+0x9c>)
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <MX_TIM15_Init+0xa0>)
 8001522:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7200-1;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_TIM15_Init+0x9c>)
 8001526:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800152a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_TIM15_Init+0x9c>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15000;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM15_Init+0x9c>)
 8001534:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001538:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_TIM15_Init+0x9c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_TIM15_Init+0x9c>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM15_Init+0x9c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <MX_TIM15_Init+0x9c>)
 800154e:	f005 fb6f 	bl	8006c30 <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001558:	f000 fb1c 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_TIM15_Init+0x9c>)
 800156a:	f006 fa35 	bl	80079d8 <HAL_TIM_ConfigClockSource>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001574:	f000 fb0e 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_TIM15_Init+0x9c>)
 8001586:	f006 ff95 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001590:	f000 fb00 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001e0 	.word	0x200001e0
 80015a0:	40014000 	.word	0x40014000

080015a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <MX_USART2_UART_Init+0x5c>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015e8:	f007 f860 	bl	80086ac <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f2:	f000 facf 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000274 	.word	0x20000274
 8001600:	40004400 	.word	0x40004400

08001604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_DMA_Init+0x38>)
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <MX_DMA_Init+0x38>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6493      	str	r3, [r2, #72]	; 0x48
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_DMA_Init+0x38>)
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200d      	movs	r0, #13
 8001628:	f002 f943 	bl	80038b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800162c:	200d      	movs	r0, #13
 800162e:	f002 f95c 	bl	80038ea <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <MX_GPIO_Init+0xa8>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <MX_GPIO_Init+0xa8>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_GPIO_Init+0xa8>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <MX_GPIO_Init+0xa8>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <MX_GPIO_Init+0xa8>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_GPIO_Init+0xa8>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_GPIO_Init+0xa8>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <MX_GPIO_Init+0xa8>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_GPIO_Init+0xa8>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2108      	movs	r1, #8
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <MX_GPIO_Init+0xac>)
 80016a4:	f002 fd04 	bl	80040b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : movementSensor_Pin */
  GPIO_InitStruct.Pin = movementSensor_Pin;
 80016a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(movementSensor_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f002 fb74 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80016c4:	2308      	movs	r3, #8
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	4619      	mov	r1, r3
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_GPIO_Init+0xac>)
 80016dc:	f002 fb66 	bl	8003dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if (received_command == 0x10) {
 80016f8:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d132      	bne.n	8001766 <HAL_I2C_SlaveRxCpltCallback+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received MOV flag, returning movementSensor status: ", 52, HAL_MAX_DELAY);
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	2234      	movs	r2, #52	; 0x34
 8001706:	4971      	ldr	r1, [pc, #452]	; (80018cc <HAL_I2C_SlaveRxCpltCallback+0x1dc>)
 8001708:	4871      	ldr	r0, [pc, #452]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 800170a:	f007 f81d 	bl	8008748 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, movementBuf, strlen((char*)movementBuf), HAL_MAX_DELAY);
 800170e:	4871      	ldr	r0, [pc, #452]	; (80018d4 <HAL_I2C_SlaveRxCpltCallback+0x1e4>)
 8001710:	f7fe fd5e 	bl	80001d0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	496d      	ldr	r1, [pc, #436]	; (80018d4 <HAL_I2C_SlaveRxCpltCallback+0x1e4>)
 800171e:	486c      	ldr	r0, [pc, #432]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 8001720:	f007 f812 	bl	8008748 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	2202      	movs	r2, #2
 800172a:	496b      	ldr	r1, [pc, #428]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x1e8>)
 800172c:	4868      	ldr	r0, [pc, #416]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 800172e:	f007 f80b 	bl	8008748 <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, movementBuf, strlen((char*)movementBuf)) != HAL_OK) {
 8001732:	4868      	ldr	r0, [pc, #416]	; (80018d4 <HAL_I2C_SlaveRxCpltCallback+0x1e4>)
 8001734:	f7fe fd4c 	bl	80001d0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4965      	ldr	r1, [pc, #404]	; (80018d4 <HAL_I2C_SlaveRxCpltCallback+0x1e4>)
 8001740:	4866      	ldr	r0, [pc, #408]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x1ec>)
 8001742:	f002 fd69 	bl	8004218 <HAL_I2C_Slave_Transmit_IT>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_I2C_SlaveRxCpltCallback+0x6a>
		   	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	2228      	movs	r2, #40	; 0x28
 8001752:	4963      	ldr	r1, [pc, #396]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x1f0>)
 8001754:	485e      	ldr	r0, [pc, #376]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 8001756:	f006 fff7 	bl	8008748 <HAL_UART_Transmit>
		}
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800175a:	2201      	movs	r2, #1
 800175c:	495a      	ldr	r1, [pc, #360]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 800175e:	485f      	ldr	r0, [pc, #380]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x1ec>)
 8001760:	f002 fdc8 	bl	80042f4 <HAL_I2C_Slave_Receive_IT>
		WS2812_Send();
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
	}
}
 8001764:	e0ac      	b.n	80018c0 <HAL_I2C_SlaveRxCpltCallback+0x1d0>
	} else if (received_command == 0x11) {
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b11      	cmp	r3, #17
 800176c:	d132      	bne.n	80017d4 <HAL_I2C_SlaveRxCpltCallback+0xe4>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received PRS flag, returning pressureSensor status: ", 52, HAL_MAX_DELAY);
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	2234      	movs	r2, #52	; 0x34
 8001774:	495b      	ldr	r1, [pc, #364]	; (80018e4 <HAL_I2C_SlaveRxCpltCallback+0x1f4>)
 8001776:	4856      	ldr	r0, [pc, #344]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 8001778:	f006 ffe6 	bl	8008748 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, drukSensorBuf, strlen((char*)drukSensorBuf), HAL_MAX_DELAY);
 800177c:	485a      	ldr	r0, [pc, #360]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x1f8>)
 800177e:	f7fe fd27 	bl	80001d0 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	4957      	ldr	r1, [pc, #348]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x1f8>)
 800178c:	4850      	ldr	r0, [pc, #320]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 800178e:	f006 ffdb 	bl	8008748 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	2202      	movs	r2, #2
 8001798:	494f      	ldr	r1, [pc, #316]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x1e8>)
 800179a:	484d      	ldr	r0, [pc, #308]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 800179c:	f006 ffd4 	bl	8008748 <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, drukSensorBuf, strlen((char*)drukSensorBuf)) != HAL_OK) {
 80017a0:	4851      	ldr	r0, [pc, #324]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x1f8>)
 80017a2:	f7fe fd15 	bl	80001d0 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	494e      	ldr	r1, [pc, #312]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x1f8>)
 80017ae:	484b      	ldr	r0, [pc, #300]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x1ec>)
 80017b0:	f002 fd32 	bl	8004218 <HAL_I2C_Slave_Transmit_IT>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_I2C_SlaveRxCpltCallback+0xd8>
		   	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	4947      	ldr	r1, [pc, #284]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x1f0>)
 80017c2:	4843      	ldr	r0, [pc, #268]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 80017c4:	f006 ffc0 	bl	8008748 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 80017c8:	2201      	movs	r2, #1
 80017ca:	493f      	ldr	r1, [pc, #252]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 80017cc:	4843      	ldr	r0, [pc, #268]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x1ec>)
 80017ce:	f002 fd91 	bl	80042f4 <HAL_I2C_Slave_Receive_IT>
}
 80017d2:	e075      	b.n	80018c0 <HAL_I2C_SlaveRxCpltCallback+0x1d0>
	} else if (received_command == 0x12) {
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b12      	cmp	r3, #18
 80017da:	d154      	bne.n	8001886 <HAL_I2C_SlaveRxCpltCallback+0x196>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDSON flag, turning LEDstrip on\n\r", 43, HAL_MAX_DELAY);
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	222b      	movs	r2, #43	; 0x2b
 80017e2:	4942      	ldr	r1, [pc, #264]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x1fc>)
 80017e4:	483a      	ldr	r0, [pc, #232]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 80017e6:	f006 ffaf 	bl	8008748 <HAL_UART_Transmit>
		Set_LED(0, 255, 255, 255);
 80017ea:	23ff      	movs	r3, #255	; 0xff
 80017ec:	22ff      	movs	r2, #255	; 0xff
 80017ee:	21ff      	movs	r1, #255	; 0xff
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f883 	bl	80018fc <Set_LED>
		Set_LED(1, 255, 255, 255);
 80017f6:	23ff      	movs	r3, #255	; 0xff
 80017f8:	22ff      	movs	r2, #255	; 0xff
 80017fa:	21ff      	movs	r1, #255	; 0xff
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 f87d 	bl	80018fc <Set_LED>
		Set_LED(2, 255, 255, 255);
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	21ff      	movs	r1, #255	; 0xff
 8001808:	2002      	movs	r0, #2
 800180a:	f000 f877 	bl	80018fc <Set_LED>
		Set_LED(3, 255, 255, 255);
 800180e:	23ff      	movs	r3, #255	; 0xff
 8001810:	22ff      	movs	r2, #255	; 0xff
 8001812:	21ff      	movs	r1, #255	; 0xff
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f871 	bl	80018fc <Set_LED>
		Set_LED(4, 255, 255, 255);
 800181a:	23ff      	movs	r3, #255	; 0xff
 800181c:	22ff      	movs	r2, #255	; 0xff
 800181e:	21ff      	movs	r1, #255	; 0xff
 8001820:	2004      	movs	r0, #4
 8001822:	f000 f86b 	bl	80018fc <Set_LED>
		Set_LED(5, 255, 255, 255);
 8001826:	23ff      	movs	r3, #255	; 0xff
 8001828:	22ff      	movs	r2, #255	; 0xff
 800182a:	21ff      	movs	r1, #255	; 0xff
 800182c:	2005      	movs	r0, #5
 800182e:	f000 f865 	bl	80018fc <Set_LED>
		Set_LED(6, 255, 255, 255);
 8001832:	23ff      	movs	r3, #255	; 0xff
 8001834:	22ff      	movs	r2, #255	; 0xff
 8001836:	21ff      	movs	r1, #255	; 0xff
 8001838:	2006      	movs	r0, #6
 800183a:	f000 f85f 	bl	80018fc <Set_LED>
		Set_LED(7, 255, 255, 255);
 800183e:	23ff      	movs	r3, #255	; 0xff
 8001840:	22ff      	movs	r2, #255	; 0xff
 8001842:	21ff      	movs	r1, #255	; 0xff
 8001844:	2007      	movs	r0, #7
 8001846:	f000 f859 	bl	80018fc <Set_LED>
		Set_LED(8, 255, 255, 255);
 800184a:	23ff      	movs	r3, #255	; 0xff
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	21ff      	movs	r1, #255	; 0xff
 8001850:	2008      	movs	r0, #8
 8001852:	f000 f853 	bl	80018fc <Set_LED>
		Set_LED(9, 0, 255, 255);
 8001856:	23ff      	movs	r3, #255	; 0xff
 8001858:	22ff      	movs	r2, #255	; 0xff
 800185a:	2100      	movs	r1, #0
 800185c:	2009      	movs	r0, #9
 800185e:	f000 f84d 	bl	80018fc <Set_LED>
		Set_Brightness(45);
 8001862:	202d      	movs	r0, #45	; 0x2d
 8001864:	f000 f878 	bl	8001958 <Set_Brightness>
		WS2812_Send();
 8001868:	f000 f8f8 	bl	8001a5c <WS2812_Send>
		HAL_TIM_Base_Start_IT(&htim2);
 800186c:	4820      	ldr	r0, [pc, #128]	; (80018f0 <HAL_I2C_SlaveRxCpltCallback+0x200>)
 800186e:	f005 fa37 	bl	8006ce0 <HAL_TIM_Base_Start_IT>
		TIM2->CNT = 0;
 8001872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	4912      	ldr	r1, [pc, #72]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x1ec>)
 8001880:	f002 fd38 	bl	80042f4 <HAL_I2C_Slave_Receive_IT>
}
 8001884:	e01c      	b.n	80018c0 <HAL_I2C_SlaveRxCpltCallback+0x1d0>
	} else if (received_command == 0x13) {
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b13      	cmp	r3, #19
 800188c:	d111      	bne.n	80018b2 <HAL_I2C_SlaveRxCpltCallback+0x1c2>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDSOFF flag, turning LEDstrip off\n\r", 45, HAL_MAX_DELAY);
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	222d      	movs	r2, #45	; 0x2d
 8001894:	4917      	ldr	r1, [pc, #92]	; (80018f4 <HAL_I2C_SlaveRxCpltCallback+0x204>)
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 8001898:	f006 ff56 	bl	8008748 <HAL_UART_Transmit>
		Set_Brightness(0);
 800189c:	2000      	movs	r0, #0
 800189e:	f000 f85b 	bl	8001958 <Set_Brightness>
		WS2812_Send();
 80018a2:	f000 f8db 	bl	8001a5c <WS2812_Send>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <HAL_I2C_SlaveRxCpltCallback+0x1d8>)
 80018aa:	480c      	ldr	r0, [pc, #48]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x1ec>)
 80018ac:	f002 fd22 	bl	80042f4 <HAL_I2C_Slave_Receive_IT>
}
 80018b0:	e006      	b.n	80018c0 <HAL_I2C_SlaveRxCpltCallback+0x1d0>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	2205      	movs	r2, #5
 80018b8:	490f      	ldr	r1, [pc, #60]	; (80018f8 <HAL_I2C_SlaveRxCpltCallback+0x208>)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_I2C_SlaveRxCpltCallback+0x1e0>)
 80018bc:	f006 ff44 	bl	8008748 <HAL_UART_Transmit>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000078 	.word	0x20000078
 80018cc:	0800aba0 	.word	0x0800aba0
 80018d0:	20000274 	.word	0x20000274
 80018d4:	2000007c 	.word	0x2000007c
 80018d8:	0800abd8 	.word	0x0800abd8
 80018dc:	200000f4 	.word	0x200000f4
 80018e0:	0800abdc 	.word	0x0800abdc
 80018e4:	0800abec 	.word	0x0800abec
 80018e8:	20000084 	.word	0x20000084
 80018ec:	0800ac24 	.word	0x0800ac24
 80018f0:	20000194 	.word	0x20000194
 80018f4:	0800ac50 	.word	0x0800ac50
 80018f8:	0800ac80 	.word	0x0800ac80

080018fc <Set_LED>:
//void TIM2_IRQHandler(void){
//	HAL_TIM_IRQHandler(&htim2);
//}

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <Set_LED+0x58>)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	b2d9      	uxtb	r1, r3
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <Set_LED+0x58>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	460a      	mov	r2, r1
 8001924:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	b2d9      	uxtb	r1, r3
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <Set_LED+0x58>)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	460a      	mov	r2, r1
 8001934:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2d9      	uxtb	r1, r3
 800193a:	4a06      	ldr	r2, [pc, #24]	; (8001954 <Set_LED+0x58>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	70da      	strb	r2, [r3, #3]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200002fc 	.word	0x200002fc

08001958 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0-45
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b2d      	cmp	r3, #45	; 0x2d
 8001964:	dd01      	ble.n	800196a <Set_Brightness+0x12>
 8001966:	232d      	movs	r3, #45	; 0x2d
 8001968:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e060      	b.n	8001a32 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8001970:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <Set_Brightness+0xf8>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001978:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <Set_Brightness+0xfc>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e04f      	b.n	8001a26 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7fe fdd5 	bl	8000548 <__aeabi_f2d>
 800199e:	a32a      	add	r3, pc, #168	; (adr r3, 8001a48 <Set_Brightness+0xf0>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fe28 	bl	80005f8 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <Set_Brightness+0x100>)
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8fb 	bl	8000bbc <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <Set_Brightness+0xf8>)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	441a      	add	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fda3 	bl	8000524 <__aeabi_i2d>
 80019de:	4604      	mov	r4, r0
 80019e0:	460d      	mov	r5, r1
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	ec43 2b10 	vmov	d0, r2, r3
 80019f0:	f008 f81a 	bl	8009a28 <tan>
 80019f4:	ec53 2b10 	vmov	r2, r3, d0
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe ff26 	bl	800084c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f8b8 	bl	8000b7c <__aeabi_d2uiz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b2d9      	uxtb	r1, r3
 8001a10:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <Set_Brightness+0xfc>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	441a      	add	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	3301      	adds	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	ddac      	ble.n	8001986 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	dd9b      	ble.n	8001970 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	53c8d4f1 	.word	0x53c8d4f1
 8001a4c:	400921fb 	.word	0x400921fb
 8001a50:	200002fc 	.word	0x200002fc
 8001a54:	20000324 	.word	0x20000324
 8001a58:	40668000 	.word	0x40668000

08001a5c <WS2812_Send>:

void WS2812_Send ()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e036      	b.n	8001ada <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001a6c:	4a2c      	ldr	r2, [pc, #176]	; (8001b20 <WS2812_Send+0xc4>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	041a      	lsls	r2, r3, #16
 8001a78:	4929      	ldr	r1, [pc, #164]	; (8001b20 <WS2812_Send+0xc4>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	789b      	ldrb	r3, [r3, #2]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4926      	ldr	r1, [pc, #152]	; (8001b20 <WS2812_Send+0xc4>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	78db      	ldrb	r3, [r3, #3]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001a94:	2317      	movs	r3, #23
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e019      	b.n	8001ace <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8001aac:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <WS2812_Send+0xc8>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	213c      	movs	r1, #60	; 0x3c
 8001ab2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ab6:	e004      	b.n	8001ac2 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <WS2812_Send+0xc8>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	211e      	movs	r1, #30
 8001abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	dae2      	bge.n	8001a9a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	ddc5      	ble.n	8001a6c <WS2812_Send+0x10>

	}

	//HAL_UART_Transmit(&huart2, (uint8_t*) pwmData, sizeof(pwmData), HAL_MAX_DELAY);

	for (int i=0; i<50; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	e00a      	b.n	8001afc <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <WS2812_Send+0xc8>)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2100      	movs	r1, #0
 8001aec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b31      	cmp	r3, #49	; 0x31
 8001b00:	ddf1      	ble.n	8001ae6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&TIM_HANDLE, TIM_CHANNEL, (uint32_t *)pwmData, sizeof(pwmData) / sizeof(uint16_t));
 8001b02:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <WS2812_Send+0xc8>)
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <WS2812_Send+0xcc>)
 8001b0c:	f005 f9f4 	bl	8006ef8 <HAL_TIM_PWM_Start_DMA>
	//while (!datasentflag){};
	datasentflag = 0;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <WS2812_Send+0xd0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000324 	.word	0x20000324
 8001b24:	2000034c 	.word	0x2000034c
 8001b28:	20000148 	.word	0x20000148
 8001b2c:	20000590 	.word	0x20000590

08001b30 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&TIM_HANDLE, TIM_CHANNEL);
 8001b38:	2104      	movs	r1, #4
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001b3c:	f005 fbd4 	bl	80072e8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000148 	.word	0x20000148
 8001b54:	20000590 	.word	0x20000590

08001b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x2a>
	HAL_UART_Transmit(&huart2, "halli ik \r\n", 11, HAL_MAX_DELAY);
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	220b      	movs	r2, #11
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b74:	f006 fde8 	bl	8008748 <HAL_UART_Transmit>
	Set_Brightness(0);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff feed 	bl	8001958 <Set_Brightness>
	WS2812_Send();
 8001b7e:	f7ff ff6d 	bl	8001a5c <WS2812_Send>
	}
//	HAL_TIM_Base_Start_IT(&htim2);
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	0800ac88 	.word	0x0800ac88
 8001b90:	20000274 	.word	0x20000274

08001b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <Error_Handler+0x8>
	...

08001ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x44>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x44>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x44>)
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_MspInit+0x44>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09e      	sub	sp, #120	; 0x78
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2254      	movs	r2, #84	; 0x54
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f007 fa89 	bl	8009120 <memset>
  if(hadc->Instance==ADC1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <HAL_ADC_MspInit+0xc0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d143      	bne.n	8001ca0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c22:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c30:	2307      	movs	r3, #7
 8001c32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fcfa 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001c52:	f7ff ff9f 	bl	8001b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_ADC_MspInit+0xc4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_ADC_MspInit+0xc4>)
 8001c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_ADC_MspInit+0xc4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_ADC_MspInit+0xc4>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_ADC_MspInit+0xc4>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_ADC_MspInit+0xc4>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = drukSensor_Pin;
 8001c86:	2310      	movs	r3, #16
 8001c88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c8a:	230b      	movs	r3, #11
 8001c8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(drukSensor_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 f886 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3778      	adds	r7, #120	; 0x78
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	50040000 	.word	0x50040000
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b09e      	sub	sp, #120	; 0x78
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	2254      	movs	r2, #84	; 0x54
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f007 fa25 	bl	8009120 <memset>
  if(hi2c->Instance==I2C1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <HAL_I2C_MspInit+0xb4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d13d      	bne.n	8001d5c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ce0:	2340      	movs	r3, #64	; 0x40
 8001ce2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 fca7 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cf8:	f7ff ff4c 	bl	8001b94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_I2C_MspInit+0xb8>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_I2C_MspInit+0xb8>)
 8001d02:	f043 0302 	orr.w	r3, r3, #2
 8001d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_I2C_MspInit+0xb8>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d14:	23c0      	movs	r3, #192	; 0xc0
 8001d16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d24:	2304      	movs	r3, #4
 8001d26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <HAL_I2C_MspInit+0xbc>)
 8001d30:	f002 f83c 	bl	8003dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_I2C_MspInit+0xb8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_I2C_MspInit+0xb8>)
 8001d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_I2C_MspInit+0xb8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	201f      	movs	r0, #31
 8001d52:	f001 fdae 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d56:	201f      	movs	r0, #31
 8001d58:	f001 fdc7 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3778      	adds	r7, #120	; 0x78
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40005400 	.word	0x40005400
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000400 	.word	0x48000400

08001d70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_TIM_PWM_MspInit+0x98>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d13e      	bne.n	8001e00 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_TIM_PWM_MspInit+0x9c>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_TIM_PWM_MspInit+0x9c>)
 8001d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_TIM_PWM_MspInit+0x9c>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_TIM_PWM_MspInit+0xa4>)
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001da2:	2207      	movs	r2, #7
 8001da4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001da8:	2210      	movs	r2, #16
 8001daa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001dd4:	480e      	ldr	r0, [pc, #56]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dd6:	f001 fda3 	bl	8003920 <HAL_DMA_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8001de0:	f7ff fed8 	bl	8001b94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_TIM_PWM_MspInit+0xa0>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2018      	movs	r0, #24
 8001df6:	f001 fd5c 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dfa:	2018      	movs	r0, #24
 8001dfc:	f001 fd75 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40012c00 	.word	0x40012c00
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	2000022c 	.word	0x2000022c
 8001e14:	40020030 	.word	0x40020030

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d114      	bne.n	8001e54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_TIM_Base_MspInit+0x78>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_TIM_Base_MspInit+0x78>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6593      	str	r3, [r2, #88]	; 0x58
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_TIM_Base_MspInit+0x78>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	201c      	movs	r0, #28
 8001e48:	f001 fd33 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e4c:	201c      	movs	r0, #28
 8001e4e:	f001 fd4c 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e52:	e018      	b.n	8001e86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_TIM_Base_MspInit+0x7c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d113      	bne.n	8001e86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_TIM_Base_MspInit+0x78>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_TIM_Base_MspInit+0x78>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_TIM_Base_MspInit+0x78>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2018      	movs	r0, #24
 8001e7c:	f001 fd19 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e80:	2018      	movs	r0, #24
 8001e82:	f001 fd32 	bl	80038ea <HAL_NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40014000 	.word	0x40014000

08001e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_TIM_MspPostInit+0xac>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d11e      	bne.n	8001ef8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f001 ff5b 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ef6:	e021      	b.n	8001f3c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d11c      	bne.n	8001f3c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	f001 ff38 	bl	8003dac <HAL_GPIO_Init>
}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b09e      	sub	sp, #120	; 0x78
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2254      	movs	r2, #84	; 0x54
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f007 f8d7 	bl	8009120 <memset>
  if(huart->Instance==USART2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_UART_MspInit+0xcc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d148      	bne.n	800200e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fb59 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f94:	f7ff fdfe 	bl	8001b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_UART_MspInit+0xd0>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_UART_MspInit+0xd0>)
 8001f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_UART_MspInit+0xd0>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_UART_MspInit+0xd0>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_UART_MspInit+0xd0>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_UART_MspInit+0xd0>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe6:	f001 fee1 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002004:	4619      	mov	r1, r3
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f001 fecf 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3778      	adds	r7, #120	; 0x78
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40004400 	.word	0x40004400
 800201c:	40021000 	.word	0x40021000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 f8f4 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <DMA1_Channel3_IRQHandler+0x10>)
 800207a:	f001 fdaa 	bl	8003bd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000022c 	.word	0x2000022c

08002088 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800208e:	f005 fa13 	bl	80074b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002092:	4803      	ldr	r0, [pc, #12]	; (80020a0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002094:	f005 fa10 	bl	80074b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000148 	.word	0x20000148
 80020a0:	200001e0 	.word	0x200001e0

080020a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM2_IRQHandler+0x10>)
 80020aa:	f005 fa05 	bl	80074b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000194 	.word	0x20000194

080020b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <I2C1_EV_IRQHandler+0x10>)
 80020be:	f002 f969 	bl	8004394 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200000f4 	.word	0x200000f4

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f007 f818 	bl	8009130 <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20010000 	.word	0x20010000
 800212c:	00000400 	.word	0x00000400
 8002130:	20000594 	.word	0x20000594
 8002134:	200006e8 	.word	0x200006e8

08002138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <SystemInit+0x20>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <SystemInit+0x20>)
 8002144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002194 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002160:	f7ff ffea 	bl	8002138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <LoopForever+0x6>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	; (800219c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <LoopForever+0xe>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	; (80021a8 <LoopForever+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f006 ffd7 	bl	800913c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218e:	f7fe ff2f 	bl	8000ff0 <main>

08002192 <LoopForever>:

LoopForever:
    b LoopForever
 8002192:	e7fe      	b.n	8002192 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002194:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80021a0:	0800aef8 	.word	0x0800aef8
  ldr r2, =_sbss
 80021a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80021a8:	200006e4 	.word	0x200006e4

080021ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC1_IRQHandler>

080021ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f001 fb6f 	bl	800389c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f80e 	bl	80021e0 <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	e001      	b.n	80021d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d0:	f7ff fce6 	bl	8001ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_InitTick+0x6c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_InitTick+0x70>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_InitTick+0x6c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fb7b 	bl	8003906 <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10f      	bne.n	8002236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d809      	bhi.n	8002230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f001 fb45 	bl	80038b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_InitTick+0x74>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e007      	b.n	8002240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e004      	b.n	8002240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e001      	b.n	8002240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008
 800227c:	20000598 	.word	0x20000598

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000598 	.word	0x20000598

08002298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff ffee 	bl	8002280 <HAL_GetTick>
 80022a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d005      	beq.n	80022be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_Delay+0x44>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022be:	bf00      	nop
 80022c0:	f7ff ffde 	bl	8002280 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8f7      	bhi.n	80022c0 <HAL_Delay+0x28>
  {
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000008 	.word	0x20000008

080022e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	609a      	str	r2, [r3, #8]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3360      	adds	r3, #96	; 0x60
 800235a:	461a      	mov	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <LL_ADC_SetOffset+0x44>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	4313      	orrs	r3, r2
 8002378:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	03fff000 	.word	0x03fff000

08002390 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3360      	adds	r3, #96	; 0x60
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3330      	adds	r3, #48	; 0x30
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	4413      	add	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	211f      	movs	r1, #31
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 011f 	and.w	r1, r3, #31
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	431a      	orrs	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3314      	adds	r3, #20
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	0e5b      	lsrs	r3, r3, #25
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0d1b      	lsrs	r3, r3, #20
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2107      	movs	r1, #7
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	0d1b      	lsrs	r3, r3, #20
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0318 	and.w	r3, r3, #24
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <LL_ADC_SetChannelSingleDiff+0x44>)
 80024ec:	40d9      	lsrs	r1, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	400b      	ands	r3, r1
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	431a      	orrs	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	0007ffff 	.word	0x0007ffff

08002510 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6093      	str	r3, [r2, #8]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002548:	d101      	bne.n	800254e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800256c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002570:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002598:	d101      	bne.n	800259e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e8:	f043 0202 	orr.w	r2, r3, #2
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <LL_ADC_IsEnabled+0x18>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <LL_ADC_IsEnabled+0x1a>
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d101      	bne.n	800263a <LL_ADC_IsDisableOngoing+0x18>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_ADC_IsDisableOngoing+0x1a>
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002684:	f043 0210 	orr.w	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d101      	bne.n	80026b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d101      	bne.n	80026fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e126      	b.n	8002974 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fa57 	bl	8001be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fef1 	bl	8002534 <LL_ADC_IsDeepPowerDownEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fed7 	bl	8002510 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff0c 	bl	8002584 <LL_ADC_IsInternalRegulatorEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fef0 	bl	800255c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b7f      	ldr	r3, [pc, #508]	; (800297c <HAL_ADC_Init+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a7f      	ldr	r2, [pc, #508]	; (8002980 <HAL_ADC_Init+0x274>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002790:	e002      	b.n	8002798 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b01      	subs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff feee 	bl	8002584 <LL_ADC_IsInternalRegulatorEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff62 	bl	8002698 <LL_ADC_REG_IsConversionOngoing>
 80027d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80bf 	bne.w	8002962 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80bb 	bne.w	8002962 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fefb 	bl	80025fc <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280c:	485d      	ldr	r0, [pc, #372]	; (8002984 <HAL_ADC_Init+0x278>)
 800280e:	f7ff fef5 	bl	80025fc <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4619      	mov	r1, r3
 800281e:	485a      	ldr	r0, [pc, #360]	; (8002988 <HAL_ADC_Init+0x27c>)
 8002820:	f7ff fd5e 	bl	80022e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7e5b      	ldrb	r3, [r3, #25]
 8002828:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800282e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002834:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800283a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002842:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	045b      	lsls	r3, r3, #17
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_ADC_Init+0x280>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	430b      	orrs	r3, r1
 800288e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff26 	bl	80026e6 <LL_ADC_INJ_IsConversionOngoing>
 800289a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d13d      	bne.n	800291e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d13a      	bne.n	800291e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c4:	f023 0302 	bic.w	r3, r3, #2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	69b9      	ldr	r1, [r7, #24]
 80028ce:	430b      	orrs	r3, r1
 80028d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d118      	bne.n	800290e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028fe:	430a      	orrs	r2, r1
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	e007      	b.n	800291e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10c      	bne.n	8002940 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f023 010f 	bic.w	r1, r3, #15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e007      	b.n	8002950 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020f 	bic.w	r2, r2, #15
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f023 0303 	bic.w	r3, r3, #3
 8002958:	f043 0201 	orr.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
 8002960:	e007      	b.n	8002972 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0210 	orr.w	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002972:	7ffb      	ldrb	r3, [r7, #31]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000000 	.word	0x20000000
 8002980:	053e2d63 	.word	0x053e2d63
 8002984:	50040000 	.word	0x50040000
 8002988:	50040300 	.word	0x50040300
 800298c:	fff0c007 	.word	0xfff0c007

08002990 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fe7b 	bl	8002698 <LL_ADC_REG_IsConversionOngoing>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d14f      	bne.n	8002a48 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_Start+0x26>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e04b      	b.n	8002a4e <HAL_ADC_Start+0xbe>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fdb6 	bl	8003530 <ADC_Enable>
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d137      	bne.n	8002a3e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d106      	bne.n	80029fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f023 0206 	bic.w	r2, r3, #6
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	221c      	movs	r2, #28
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fe06 	bl	8002648 <LL_ADC_REG_StartConversion>
 8002a3c:	e006      	b.n	8002a4c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a46:	e001      	b.n	8002a4c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_Stop+0x16>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e023      	b.n	8002ab4 <HAL_ADC_Stop+0x5e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a74:	2103      	movs	r1, #3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fc9e 	bl	80033b8 <ADC_ConversionStop>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d111      	bne.n	8002aaa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fdd8 	bl	800363c <ADC_Disable>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d102      	bne.n	8002ad4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e010      	b.n	8002af6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06f      	b.n	8002bd2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002af2:	2304      	movs	r3, #4
 8002af4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002af6:	f7ff fbc3 	bl	8002280 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002afc:	e021      	b.n	8002b42 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d01d      	beq.n	8002b42 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b06:	f7ff fbbb 	bl	8002280 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <HAL_ADC_PollForConversion+0x60>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d112      	bne.n	8002b42 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e047      	b.n	8002bd2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0d6      	beq.n	8002afe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fc46 	bl	80023f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01c      	beq.n	8002ba6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7e5b      	ldrb	r3, [r3, #25]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d118      	bne.n	8002ba6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d111      	bne.n	8002ba6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d104      	bne.n	8002bbe <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e008      	b.n	8002bd0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	220c      	movs	r2, #12
 8002bce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0b6      	sub	sp, #216	; 0xd8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x22>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e3bb      	b.n	800338e <HAL_ADC_ConfigChannel+0x79a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fd38 	bl	8002698 <LL_ADC_REG_IsConversionOngoing>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 83a0 	bne.w	8003370 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d824      	bhi.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	3b02      	subs	r3, #2
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d81b      	bhi.n	8002c82 <HAL_ADC_ConfigChannel+0x8e>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_ADC_ConfigChannel+0x5c>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c79 	.word	0x08002c79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c60:	230c      	movs	r3, #12
 8002c62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c66:	e010      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c68:	2312      	movs	r3, #18
 8002c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c6e:	e00c      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c70:	2318      	movs	r3, #24
 8002c72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c76:	e008      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c82:	2306      	movs	r3, #6
 8002c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002c98:	f7ff fbbe 	bl	8002418 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fcf9 	bl	8002698 <LL_ADC_REG_IsConversionOngoing>
 8002ca6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fd19 	bl	80026e6 <LL_ADC_INJ_IsConversionOngoing>
 8002cb4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 81a4 	bne.w	800300a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 819f 	bne.w	800300a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f7ff fbc9 	bl	8002470 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00a      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6919      	ldr	r1, [r3, #16]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d10:	f7ff fb1a 	bl	8002348 <LL_ADC_SetOffset>
 8002d14:	e179      	b.n	800300a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fb37 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x14e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fb2c 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	e01e      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x18c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fb21 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e004      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x1a4>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	e018      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1d6>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e004      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d106      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff faf0 	bl	80023bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fad4 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x214>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fac9 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	f003 021f 	and.w	r2, r3, #31
 8002e06:	e01e      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x252>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fabe 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e004      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x26a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	e018      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x29c>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e004      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fa8d 	bl	80023bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fa71 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x2da>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fa66 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	e01e      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x318>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fa5b 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x330>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	e014      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x35a>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e004      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d106      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa2e 	bl	80023bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2103      	movs	r1, #3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fa12 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x398>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2103      	movs	r1, #3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fa07 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	f003 021f 	and.w	r2, r3, #31
 8002f8a:	e017      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x3c8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2103      	movs	r1, #3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f9fc 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x3e0>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	e011      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x404>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e003      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	2103      	movs	r1, #3
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f9d9 	bl	80023bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff faf4 	bl	80025fc <LL_ADC_IsEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 8140 	bne.w	800329c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	461a      	mov	r2, r3
 800302a:	f7ff fa4d 	bl	80024c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a8f      	ldr	r2, [pc, #572]	; (8003270 <HAL_ADC_ConfigChannel+0x67c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 8131 	bne.w	800329c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x46e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	3301      	adds	r3, #1
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b09      	cmp	r3, #9
 8003058:	bf94      	ite	ls
 800305a:	2301      	movls	r3, #1
 800305c:	2300      	movhi	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e019      	b.n	8003096 <HAL_ADC_ConfigChannel+0x4a2>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003072:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e003      	b.n	8003086 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800307e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2b09      	cmp	r3, #9
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003096:	2b00      	cmp	r3, #0
 8003098:	d079      	beq.n	800318e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x4c2>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	069b      	lsls	r3, r3, #26
 80030b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b4:	e015      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x4ee>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80030c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	069b      	lsls	r3, r3, #26
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x50e>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	3301      	adds	r3, #1
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	e017      	b.n	8003132 <HAL_ADC_ConfigChannel+0x53e>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800311e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x564>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	3301      	adds	r3, #1
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	051b      	lsls	r3, r3, #20
 8003156:	e018      	b.n	800318a <HAL_ADC_ConfigChannel+0x596>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e003      	b.n	800317c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	f003 021f 	and.w	r2, r3, #31
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800318a:	430b      	orrs	r3, r1
 800318c:	e081      	b.n	8003292 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d107      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x5b6>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	3301      	adds	r3, #1
 80031a2:	069b      	lsls	r3, r3, #26
 80031a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a8:	e015      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x5e2>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e003      	b.n	80031ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	069b      	lsls	r3, r3, #26
 80031d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x602>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	e017      	b.n	8003226 <HAL_ADC_ConfigChannel+0x632>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	61bb      	str	r3, [r7, #24]
  return result;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x65e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	3301      	adds	r3, #1
 800323e:	f003 021f 	and.w	r2, r3, #31
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	051b      	lsls	r3, r3, #20
 800324c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003250:	e01e      	b.n	8003290 <HAL_ADC_ConfigChannel+0x69c>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	60fb      	str	r3, [r7, #12]
  return result;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d104      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e006      	b.n	800327c <HAL_ADC_ConfigChannel+0x688>
 800326e:	bf00      	nop
 8003270:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f003 021f 	and.w	r2, r3, #31
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	3b1e      	subs	r3, #30
 800328a:	051b      	lsls	r3, r3, #20
 800328c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003290:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003296:	4619      	mov	r1, r3
 8003298:	f7ff f8ea 	bl	8002470 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_ADC_ConfigChannel+0x7a4>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d06c      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a8:	483c      	ldr	r0, [pc, #240]	; (800339c <HAL_ADC_ConfigChannel+0x7a8>)
 80032aa:	f7ff f83f 	bl	800232c <LL_ADC_GetCommonPathInternalCh>
 80032ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <HAL_ADC_ConfigChannel+0x7ac>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d127      	bne.n	800330c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d121      	bne.n	800330c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <HAL_ADC_ConfigChannel+0x7b0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d157      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032da:	4619      	mov	r1, r3
 80032dc:	482f      	ldr	r0, [pc, #188]	; (800339c <HAL_ADC_ConfigChannel+0x7a8>)
 80032de:	f7ff f812 	bl	8002306 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	4a30      	ldr	r2, [pc, #192]	; (80033ac <HAL_ADC_ConfigChannel+0x7b8>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032fc:	e002      	b.n	8003304 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3b01      	subs	r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f9      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800330a:	e03a      	b.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d113      	bne.n	800333e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800331a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d12a      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800332c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003334:	4619      	mov	r1, r3
 8003336:	4819      	ldr	r0, [pc, #100]	; (800339c <HAL_ADC_ConfigChannel+0x7a8>)
 8003338:	f7fe ffe5 	bl	8002306 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800333c:	e021      	b.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11c      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800334c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003366:	4619      	mov	r1, r3
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <HAL_ADC_ConfigChannel+0x7a8>)
 800336a:	f7fe ffcc 	bl	8002306 <LL_ADC_SetCommonPathInternalCh>
 800336e:	e008      	b.n	8003382 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800338a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800338e:	4618      	mov	r0, r3
 8003390:	37d8      	adds	r7, #216	; 0xd8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	80080000 	.word	0x80080000
 800339c:	50040300 	.word	0x50040300
 80033a0:	c7520000 	.word	0xc7520000
 80033a4:	50040000 	.word	0x50040000
 80033a8:	20000000 	.word	0x20000000
 80033ac:	053e2d63 	.word	0x053e2d63
 80033b0:	cb840000 	.word	0xcb840000
 80033b4:	80000001 	.word	0x80000001

080033b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f962 	bl	8002698 <LL_ADC_REG_IsConversionOngoing>
 80033d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff f983 	bl	80026e6 <LL_ADC_INJ_IsConversionOngoing>
 80033e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d103      	bne.n	80033f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8098 	beq.w	8003520 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02a      	beq.n	8003454 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	7e5b      	ldrb	r3, [r3, #25]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d126      	bne.n	8003454 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7e1b      	ldrb	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d122      	bne.n	8003454 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800340e:	2301      	movs	r3, #1
 8003410:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003412:	e014      	b.n	800343e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4a45      	ldr	r2, [pc, #276]	; (800352c <ADC_ConversionStop+0x174>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d90d      	bls.n	8003438 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e074      	b.n	8003522 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d1e3      	bne.n	8003414 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2240      	movs	r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d014      	beq.n	8003484 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f91a 	bl	8002698 <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f8d7 	bl	8002622 <LL_ADC_IsDisableOngoing>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff f8f6 	bl	8002670 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d014      	beq.n	80034b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f929 	bl	80026e6 <LL_ADC_INJ_IsConversionOngoing>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f8bf 	bl	8002622 <LL_ADC_IsDisableOngoing>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f905 	bl	80026be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d005      	beq.n	80034c6 <ADC_ConversionStop+0x10e>
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d105      	bne.n	80034cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80034c0:	230c      	movs	r3, #12
 80034c2:	617b      	str	r3, [r7, #20]
        break;
 80034c4:	e005      	b.n	80034d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80034c6:	2308      	movs	r3, #8
 80034c8:	617b      	str	r3, [r7, #20]
        break;
 80034ca:	e002      	b.n	80034d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80034cc:	2304      	movs	r3, #4
 80034ce:	617b      	str	r3, [r7, #20]
        break;
 80034d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80034d2:	f7fe fed5 	bl	8002280 <HAL_GetTick>
 80034d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034d8:	e01b      	b.n	8003512 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80034da:	f7fe fed1 	bl	8002280 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d914      	bls.n	8003512 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e007      	b.n	8003522 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1dc      	bne.n	80034da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	a33fffff 	.word	0xa33fffff

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f85b 	bl	80025fc <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d169      	bne.n	8003620 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <ADC_Enable+0xfc>)
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e055      	b.n	8003622 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f816 	bl	80025ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003580:	482b      	ldr	r0, [pc, #172]	; (8003630 <ADC_Enable+0x100>)
 8003582:	f7fe fed3 	bl	800232c <LL_ADC_GetCommonPathInternalCh>
 8003586:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <ADC_Enable+0x104>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	4a28      	ldr	r2, [pc, #160]	; (8003638 <ADC_Enable+0x108>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035aa:	e002      	b.n	80035b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f9      	bne.n	80035ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b8:	f7fe fe62 	bl	8002280 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035be:	e028      	b.n	8003612 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f819 	bl	80025fc <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe ffe9 	bl	80025ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035da:	f7fe fe51 	bl	8002280 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d914      	bls.n	8003612 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00d      	beq.n	8003612 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f043 0210 	orr.w	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d1cf      	bne.n	80035c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	8000003f 	.word	0x8000003f
 8003630:	50040300 	.word	0x50040300
 8003634:	20000000 	.word	0x20000000
 8003638:	053e2d63 	.word	0x053e2d63

0800363c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe ffea 	bl	8002622 <LL_ADC_IsDisableOngoing>
 800364e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe ffd1 	bl	80025fc <LL_ADC_IsEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d047      	beq.n	80036f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d144      	bne.n	80036f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030d 	and.w	r3, r3, #13
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10c      	bne.n	800368e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe ffab 	bl	80025d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2203      	movs	r2, #3
 8003684:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003686:	f7fe fdfb 	bl	8002280 <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800368c:	e029      	b.n	80036e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e023      	b.n	80036f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036aa:	f7fe fde9 	bl	8002280 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d914      	bls.n	80036e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0210 	orr.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e007      	b.n	80036f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1dc      	bne.n	80036aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <__NVIC_SetPriorityGrouping>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	60d3      	str	r3, [r2, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_GetPriorityGrouping>:
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <__NVIC_GetPriorityGrouping+0x18>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 0307 	and.w	r3, r3, #7
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_EnableIRQ>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db0b      	blt.n	800378a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4907      	ldr	r1, [pc, #28]	; (8003798 <__NVIC_EnableIRQ+0x38>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2001      	movs	r0, #1
 8003782:	fa00 f202 	lsl.w	r2, r0, r2
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000e100 	.word	0xe000e100

0800379c <__NVIC_SetPriority>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	db0a      	blt.n	80037c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	490c      	ldr	r1, [pc, #48]	; (80037e8 <__NVIC_SetPriority+0x4c>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	440b      	add	r3, r1
 80037c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037c4:	e00a      	b.n	80037dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4908      	ldr	r1, [pc, #32]	; (80037ec <__NVIC_SetPriority+0x50>)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3b04      	subs	r3, #4
 80037d4:	0112      	lsls	r2, r2, #4
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	440b      	add	r3, r1
 80037da:	761a      	strb	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <NVIC_EncodePriority>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f1c3 0307 	rsb	r3, r3, #7
 800380a:	2b04      	cmp	r3, #4
 800380c:	bf28      	it	cs
 800380e:	2304      	movcs	r3, #4
 8003810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3304      	adds	r3, #4
 8003816:	2b06      	cmp	r3, #6
 8003818:	d902      	bls.n	8003820 <NVIC_EncodePriority+0x30>
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3b03      	subs	r3, #3
 800381e:	e000      	b.n	8003822 <NVIC_EncodePriority+0x32>
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	401a      	ands	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003838:	f04f 31ff 	mov.w	r1, #4294967295
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	43d9      	mvns	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	4313      	orrs	r3, r2
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <SysTick_Config>:
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003868:	d301      	bcc.n	800386e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800386a:	2301      	movs	r3, #1
 800386c:	e00f      	b.n	800388e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <SysTick_Config+0x40>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003876:	210f      	movs	r1, #15
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f7ff ff8e 	bl	800379c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SysTick_Config+0x40>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <SysTick_Config+0x40>)
 8003888:	2207      	movs	r2, #7
 800388a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000e010 	.word	0xe000e010

0800389c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff29 	bl	80036fc <__NVIC_SetPriorityGrouping>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038c4:	f7ff ff3e 	bl	8003744 <__NVIC_GetPriorityGrouping>
 80038c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7ff ff8e 	bl	80037f0 <NVIC_EncodePriority>
 80038d4:	4602      	mov	r2, r0
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff5d 	bl	800379c <__NVIC_SetPriority>
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff31 	bl	8003760 <__NVIC_EnableIRQ>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffa2 	bl	8003858 <SysTick_Config>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e098      	b.n	8003a64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_DMA_Init+0x150>)
 800393a:	429a      	cmp	r2, r3
 800393c:	d80f      	bhi.n	800395e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_DMA_Init+0x154>)
 8003946:	4413      	add	r3, r2
 8003948:	4a4b      	ldr	r2, [pc, #300]	; (8003a78 <HAL_DMA_Init+0x158>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	009a      	lsls	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a48      	ldr	r2, [pc, #288]	; (8003a7c <HAL_DMA_Init+0x15c>)
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
 800395c:	e00e      	b.n	800397c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <HAL_DMA_Init+0x160>)
 8003966:	4413      	add	r3, r2
 8003968:	4a43      	ldr	r2, [pc, #268]	; (8003a78 <HAL_DMA_Init+0x158>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <HAL_DMA_Init+0x164>)
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d6:	d039      	beq.n	8003a4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <HAL_DMA_Init+0x15c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d11a      	bne.n	8003a18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_DMA_Init+0x168>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f003 031c 	and.w	r3, r3, #28
 80039ee:	210f      	movs	r1, #15
 80039f0:	fa01 f303 	lsl.w	r3, r1, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	4924      	ldr	r1, [pc, #144]	; (8003a88 <HAL_DMA_Init+0x168>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039fc:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_DMA_Init+0x168>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f003 031c 	and.w	r3, r3, #28
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	491d      	ldr	r1, [pc, #116]	; (8003a88 <HAL_DMA_Init+0x168>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
 8003a16:	e019      	b.n	8003a4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <HAL_DMA_Init+0x16c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f003 031c 	and.w	r3, r3, #28
 8003a24:	210f      	movs	r1, #15
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	4917      	ldr	r1, [pc, #92]	; (8003a8c <HAL_DMA_Init+0x16c>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a32:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <HAL_DMA_Init+0x16c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f003 031c 	and.w	r3, r3, #28
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	4911      	ldr	r1, [pc, #68]	; (8003a8c <HAL_DMA_Init+0x16c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40020407 	.word	0x40020407
 8003a74:	bffdfff8 	.word	0xbffdfff8
 8003a78:	cccccccd 	.word	0xcccccccd
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	bffdfbf8 	.word	0xbffdfbf8
 8003a84:	40020400 	.word	0x40020400
 8003a88:	400200a8 	.word	0x400200a8
 8003a8c:	400204a8 	.word	0x400204a8

08003a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA_Start_IT+0x20>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e04b      	b.n	8003b48 <HAL_DMA_Start_IT+0xb8>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d13a      	bne.n	8003b3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f92f 	bl	8003d4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 020e 	orr.w	r2, r2, #14
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e00f      	b.n	8003b28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 020a 	orr.w	r2, r2, #10
 8003b26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e005      	b.n	8003b46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d005      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e029      	b.n	8003bc8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020e 	bic.w	r2, r2, #14
 8003b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 021c 	and.w	r2, r3, #28
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
    }
  }
  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f003 031c 	and.w	r3, r3, #28
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d026      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x7a>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d021      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0204 	bic.w	r2, r2, #4
 8003c24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f003 021c 	and.w	r2, r3, #28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2104      	movs	r1, #4
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d071      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c4a:	e06c      	b.n	8003d26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f003 031c 	and.w	r3, r3, #28
 8003c54:	2202      	movs	r2, #2
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02e      	beq.n	8003cbe <HAL_DMA_IRQHandler+0xec>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d029      	beq.n	8003cbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020a 	bic.w	r2, r2, #10
 8003c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f003 021c 	and.w	r2, r3, #28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d038      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cbc:	e033      	b.n	8003d26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 031c 	and.w	r3, r3, #28
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d02a      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x156>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d025      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 020e 	bic.w	r2, r2, #14
 8003cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	f003 021c 	and.w	r2, r3, #28
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
}
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d3e:	b2db      	uxtb	r3, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f003 021c 	and.w	r2, r3, #28
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2101      	movs	r1, #1
 8003d68:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d108      	bne.n	8003d90 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d8e:	e007      	b.n	8003da0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dba:	e148      	b.n	800404e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 813a 	beq.w	8004048 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d005      	beq.n	8003dec <HAL_GPIO_Init+0x40>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d130      	bne.n	8003e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e22:	2201      	movs	r2, #1
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 0201 	and.w	r2, r3, #1
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d017      	beq.n	8003e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d123      	bne.n	8003ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	08da      	lsrs	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3208      	adds	r2, #8
 8003e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	220f      	movs	r2, #15
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0203 	and.w	r2, r3, #3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8094 	beq.w	8004048 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f20:	4b52      	ldr	r3, [pc, #328]	; (800406c <HAL_GPIO_Init+0x2c0>)
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_GPIO_Init+0x2c0>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	; (800406c <HAL_GPIO_Init+0x2c0>)
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f38:	4a4d      	ldr	r2, [pc, #308]	; (8004070 <HAL_GPIO_Init+0x2c4>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1d4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a43      	ldr	r2, [pc, #268]	; (8004074 <HAL_GPIO_Init+0x2c8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1d0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a42      	ldr	r2, [pc, #264]	; (8004078 <HAL_GPIO_Init+0x2cc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1cc>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e004      	b.n	8003f82 <HAL_GPIO_Init+0x1d6>
 8003f78:	2307      	movs	r3, #7
 8003f7a:	e002      	b.n	8003f82 <HAL_GPIO_Init+0x1d6>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_GPIO_Init+0x1d6>
 8003f80:	2300      	movs	r3, #0
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	f002 0203 	and.w	r2, r2, #3
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	4093      	lsls	r3, r2
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f92:	4937      	ldr	r1, [pc, #220]	; (8004070 <HAL_GPIO_Init+0x2c4>)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3302      	adds	r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fee:	4a23      	ldr	r2, [pc, #140]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_GPIO_Init+0x2d0>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_GPIO_Init+0x2d0>)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f aeaf 	bne.w	8003dbc <HAL_GPIO_Init+0x10>
  }
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40021000 	.word	0x40021000
 8004070:	40010000 	.word	0x40010000
 8004074:	48000400 	.word	0x48000400
 8004078:	48000800 	.word	0x48000800
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e001      	b.n	80040a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]
 80040bc:	4613      	mov	r3, r2
 80040be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040c0:	787b      	ldrb	r3, [r7, #1]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e08d      	b.n	800420e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fdd2 	bl	8001cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	e006      	b.n	8004168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d108      	bne.n	8004182 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e007      	b.n	8004192 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69d9      	ldr	r1, [r3, #28]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1a      	ldr	r2, [r3, #32]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	d156      	bne.n	80042e0 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_I2C_Slave_Transmit_IT+0x28>
 800423c:	2302      	movs	r3, #2
 800423e:	e050      	b.n	80042e2 <HAL_I2C_Slave_Transmit_IT+0xca>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2221      	movs	r2, #33	; 0x21
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 800428e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004298:	d117      	bne.n	80042ca <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80042d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f001 f98c 	bl	80055f4 <I2C_Enable_IRQ>

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	ffff0000 	.word	0xffff0000
 80042f0:	08004485 	.word	0x08004485

080042f4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	d139      	bne.n	8004382 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_I2C_Slave_Receive_IT+0x28>
 8004318:	2302      	movs	r3, #2
 800431a:	e033      	b.n	8004384 <HAL_I2C_Slave_Receive_IT+0x90>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	; 0x22
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004348:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <HAL_I2C_Slave_Receive_IT+0x98>)
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800436a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8004374:	f248 0102 	movw	r1, #32770	; 0x8002
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f001 f93b 	bl	80055f4 <I2C_Enable_IRQ>

    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	ffff0000 	.word	0xffff0000
 8004390:	08004485 	.word	0x08004485

08004394 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
  }
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
 8004410:	4613      	mov	r3, r2
 8004412:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <I2C_Slave_ISR_IT+0x24>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e0e1      	b.n	800466c <I2C_Slave_ISR_IT+0x1e8>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fda2 	bl	8005010 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d04b      	beq.n	800456e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d046      	beq.n	800456e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d128      	bne.n	800453c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b28      	cmp	r3, #40	; 0x28
 80044f4:	d108      	bne.n	8004508 <I2C_Slave_ISR_IT+0x84>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044fc:	d104      	bne.n	8004508 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80044fe:	6939      	ldr	r1, [r7, #16]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fe97 	bl	8005234 <I2C_ITListenCplt>
 8004506:	e031      	b.n	800456c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b29      	cmp	r3, #41	; 0x29
 8004512:	d10e      	bne.n	8004532 <I2C_Slave_ISR_IT+0xae>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451a:	d00a      	beq.n	8004532 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2210      	movs	r2, #16
 8004522:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fff0 	bl	800550a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fc4b 	bl	8004dc6 <I2C_ITSlaveSeqCplt>
 8004530:	e01c      	b.n	800456c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2210      	movs	r2, #16
 8004538:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800453a:	e08f      	b.n	800465c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	f043 0204 	orr.w	r2, r3, #4
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <I2C_Slave_ISR_IT+0xda>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455c:	d17e      	bne.n	800465c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 feb9 	bl	80052dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800456a:	e077      	b.n	800465c <I2C_Slave_ISR_IT+0x1d8>
 800456c:	e076      	b.n	800465c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02f      	beq.n	80045d8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02a      	beq.n	80045d8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d018      	beq.n	80045be <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d14b      	bne.n	8004660 <I2C_Slave_ISR_IT+0x1dc>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ce:	d047      	beq.n	8004660 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fbf8 	bl	8004dc6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045d6:	e043      	b.n	8004660 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80045ec:	6939      	ldr	r1, [r7, #16]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fb28 	bl	8004c44 <I2C_ITAddrCplt>
 80045f4:	e035      	b.n	8004662 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d030      	beq.n	8004662 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004606:	2b00      	cmp	r3, #0
 8004608:	d02b      	beq.n	8004662 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d018      	beq.n	8004646 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
 8004644:	e00d      	b.n	8004662 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800464c:	d002      	beq.n	8004654 <I2C_Slave_ISR_IT+0x1d0>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fbb6 	bl	8004dc6 <I2C_ITSlaveSeqCplt>
 800465a:	e002      	b.n	8004662 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004660:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <I2C_Master_ISR_DMA+0x1a>
 800468a:	2302      	movs	r3, #2
 800468c:	e0d9      	b.n	8004842 <I2C_Master_ISR_DMA+0x1ce>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d016      	beq.n	80046ce <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d011      	beq.n	80046ce <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f043 0204 	orr.w	r2, r3, #4
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80046be:	2120      	movs	r1, #32
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 ff97 	bl	80055f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 ff1f 	bl	800550a <I2C_Flush_TXDR>
 80046cc:	e0b4      	b.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d071      	beq.n	80047bc <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d06c      	beq.n	80047bc <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d04e      	beq.n	800479a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004708:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	2bff      	cmp	r3, #255	; 0xff
 8004712:	d906      	bls.n	8004722 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800471a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e010      	b.n	8004744 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004734:	d003      	beq.n	800473e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e002      	b.n	8004744 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800473e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004742:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	b2da      	uxtb	r2, r3
 800474a:	8a79      	ldrh	r1, [r7, #18]
 800474c:	2300      	movs	r3, #0
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 ff1c 	bl	8005590 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b22      	cmp	r3, #34	; 0x22
 8004774:	d108      	bne.n	8004788 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004784:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004786:	e057      	b.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004796:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004798:	e04e      	b.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a8:	d003      	beq.n	80047b2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 face 	bl	8004d4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047b0:	e042      	b.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fd91 	bl	80052dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80047ba:	e03d      	b.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d028      	beq.n	8004818 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d023      	beq.n	8004818 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d119      	bne.n	800480e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047e8:	d025      	beq.n	8004836 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047f2:	d108      	bne.n	8004806 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004802:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004804:	e017      	b.n	8004836 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 faa0 	bl	8004d4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800480c:	e013      	b.n	8004836 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fd63 	bl	80052dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004816:	e00e      	b.n	8004836 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fb26 	bl	8004e80 <I2C_ITMasterCplt>
 8004834:	e000      	b.n	8004838 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004836:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004858:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <I2C_Mem_ISR_DMA+0x244>)
 800485a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <I2C_Mem_ISR_DMA+0x1e>
 8004866:	2302      	movs	r3, #2
 8004868:	e10e      	b.n	8004a88 <I2C_Mem_ISR_DMA+0x23c>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004882:	2b00      	cmp	r3, #0
 8004884:	d011      	beq.n	80048aa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800489a:	2120      	movs	r1, #32
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fea9 	bl	80055f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fe31 	bl	800550a <I2C_Flush_TXDR>
 80048a8:	e0e9      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	651a      	str	r2, [r3, #80]	; 0x50
 80048d0:	e0d5      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05f      	beq.n	800499c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d05a      	beq.n	800499c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048e6:	2101      	movs	r1, #1
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 ff07 	bl	80056fc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80048ee:	2110      	movs	r1, #16
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fe7f 	bl	80055f4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d048      	beq.n	8004992 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2bff      	cmp	r3, #255	; 0xff
 8004908:	d910      	bls.n	800492c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	22ff      	movs	r2, #255	; 0xff
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004914:	b299      	uxth	r1, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	b2da      	uxtb	r2, r3
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fe33 	bl	8005590 <I2C_TransferConfig>
 800492a:	e011      	b.n	8004950 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	b299      	uxth	r1, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	b2da      	uxtb	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fe20 	bl	8005590 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b22      	cmp	r3, #34	; 0x22
 800496c:	d108      	bne.n	8004980 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800497e:	e07e      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004990:	e075      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004992:	2140      	movs	r1, #64	; 0x40
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fca1 	bl	80052dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800499a:	e070      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d05d      	beq.n	8004a62 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d058      	beq.n	8004a62 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049b0:	2101      	movs	r1, #1
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fea2 	bl	80056fc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049b8:	2110      	movs	r1, #16
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fe1a 	bl	80055f4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b22      	cmp	r3, #34	; 0x22
 80049ca:	d101      	bne.n	80049d0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80049cc:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <I2C_Mem_ISR_DMA+0x248>)
 80049ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2bff      	cmp	r3, #255	; 0xff
 80049d8:	d910      	bls.n	80049fc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e4:	b299      	uxth	r1, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fdcb 	bl	8005590 <I2C_TransferConfig>
 80049fa:	e011      	b.n	8004a20 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fdb8 	bl	8005590 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b22      	cmp	r3, #34	; 0x22
 8004a3c:	d108      	bne.n	8004a50 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a4e:	e016      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a60:	e00d      	b.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fa01 	bl	8004e80 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	80002000 	.word	0x80002000
 8004a94:	80002400 	.word	0x80002400

08004a98 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <I2C_Slave_ISR_DMA+0x24>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e0bf      	b.n	8004c3c <I2C_Slave_ISR_DMA+0x1a4>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa98 	bl	8005010 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8095 	beq.w	8004c16 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808f 	beq.w	8004c16 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d07d      	beq.n	8004c08 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d128      	bne.n	8004ba8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b28      	cmp	r3, #40	; 0x28
 8004b60:	d108      	bne.n	8004b74 <I2C_Slave_ISR_DMA+0xdc>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b68:	d104      	bne.n	8004b74 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fb61 	bl	8005234 <I2C_ITListenCplt>
 8004b72:	e048      	b.n	8004c06 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b29      	cmp	r3, #41	; 0x29
 8004b7e:	d10e      	bne.n	8004b9e <I2C_Slave_ISR_DMA+0x106>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b86:	d00a      	beq.n	8004b9e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fcba 	bl	800550a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f915 	bl	8004dc6 <I2C_ITSlaveSeqCplt>
 8004b9c:	e033      	b.n	8004c06 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004ba6:	e034      	b.n	8004c12 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2210      	movs	r2, #16
 8004bae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <I2C_Slave_ISR_DMA+0x13a>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd0:	d11f      	bne.n	8004c12 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	2b21      	cmp	r3, #33	; 0x21
 8004bd6:	d002      	beq.n	8004bde <I2C_Slave_ISR_DMA+0x146>
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b29      	cmp	r3, #41	; 0x29
 8004bdc:	d103      	bne.n	8004be6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2221      	movs	r2, #33	; 0x21
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
 8004be4:	e008      	b.n	8004bf8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b22      	cmp	r3, #34	; 0x22
 8004bea:	d002      	beq.n	8004bf2 <I2C_Slave_ISR_DMA+0x15a>
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf0:	d102      	bne.n	8004bf8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2222      	movs	r2, #34	; 0x22
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fb6c 	bl	80052dc <I2C_ITError>
      if (treatdmanack == 1U)
 8004c04:	e005      	b.n	8004c12 <I2C_Slave_ISR_DMA+0x17a>
 8004c06:	e004      	b.n	8004c12 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c10:	e00f      	b.n	8004c32 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8004c12:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c14:	e00d      	b.n	8004c32 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f809 	bl	8004c44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c5a:	2b28      	cmp	r3, #40	; 0x28
 8004c5c:	d16a      	bne.n	8004d34 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d138      	bne.n	8004d14 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	09db      	lsrs	r3, r3, #7
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	89bb      	ldrh	r3, [r7, #12]
 8004caa:	4053      	eors	r3, r2
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f003 0306 	and.w	r3, r3, #6
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d11c      	bne.n	8004cf0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d13b      	bne.n	8004d44 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ce2:	89ba      	ldrh	r2, [r7, #12]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fb8b 	bl	8004404 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cee:	e029      	b.n	8004d44 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fcff 	bl	80056fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d06:	89ba      	ldrh	r2, [r7, #12]
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fb79 	bl	8004404 <HAL_I2C_AddrCallback>
}
 8004d12:	e017      	b.n	8004d44 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fcef 	bl	80056fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d26:	89ba      	ldrh	r2, [r7, #12]
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fb69 	bl	8004404 <HAL_I2C_AddrCallback>
}
 8004d32:	e007      	b.n	8004d44 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b21      	cmp	r3, #33	; 0x21
 8004d66:	d115      	bne.n	8004d94 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2211      	movs	r2, #17
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fcbc 	bl	80056fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fb1b 	bl	80043c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d92:	e014      	b.n	8004dbe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2212      	movs	r2, #18
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004da8:	2102      	movs	r1, #2
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fca6 	bl	80056fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fb0f 	bl	80043dc <HAL_I2C_MasterRxCpltCallback>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e00c      	b.n	8004e14 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b29      	cmp	r3, #41	; 0x29
 8004e1e:	d112      	bne.n	8004e46 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2228      	movs	r2, #40	; 0x28
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2221      	movs	r2, #33	; 0x21
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e2e:	2101      	movs	r1, #1
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fc63 	bl	80056fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fad6 	bl	80043f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e44:	e017      	b.n	8004e76 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e50:	d111      	bne.n	8004e76 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2228      	movs	r2, #40	; 0x28
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2222      	movs	r2, #34	; 0x22
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e60:	2102      	movs	r1, #2
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fc4a 	bl	80056fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fc fc3d 	bl	80016f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2220      	movs	r2, #32
 8004e94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b21      	cmp	r3, #33	; 0x21
 8004ea0:	d107      	bne.n	8004eb2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fc29 	bl	80056fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2211      	movs	r2, #17
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
 8004eb0:	e00c      	b.n	8004ecc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b22      	cmp	r3, #34	; 0x22
 8004ebc:	d106      	bne.n	8004ecc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fc1b 	bl	80056fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2212      	movs	r2, #18
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <I2C_ITMasterCplt+0x188>)
 8004ed8:	400b      	ands	r3, r1
 8004eda:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a49      	ldr	r2, [pc, #292]	; (800500c <I2C_ITMasterCplt+0x18c>)
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f043 0204 	orr.w	r2, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b60      	cmp	r3, #96	; 0x60
 8004f10:	d10a      	bne.n	8004f28 <I2C_ITMasterCplt+0xa8>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004f26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 faee 	bl	800550a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d002      	beq.n	8004f46 <I2C_ITMasterCplt+0xc6>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d006      	beq.n	8004f54 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f9c5 	bl	80052dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f52:	e054      	b.n	8004ffe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b21      	cmp	r3, #33	; 0x21
 8004f5e:	d124      	bne.n	8004faa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d10b      	bne.n	8004f92 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fa52 	bl	8004434 <HAL_I2C_MemTxCpltCallback>
}
 8004f90:	e035      	b.n	8004ffe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fa10 	bl	80043c8 <HAL_I2C_MasterTxCpltCallback>
}
 8004fa8:	e029      	b.n	8004ffe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b22      	cmp	r3, #34	; 0x22
 8004fb4:	d123      	bne.n	8004ffe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d10b      	bne.n	8004fe8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fa31 	bl	8004448 <HAL_I2C_MemRxCpltCallback>
}
 8004fe6:	e00a      	b.n	8004ffe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff f9ef 	bl	80043dc <HAL_I2C_MasterRxCpltCallback>
}
 8004ffe:	bf00      	nop
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	fe00e800 	.word	0xfe00e800
 800500c:	ffff0000 	.word	0xffff0000

08005010 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2220      	movs	r2, #32
 8005034:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d002      	beq.n	8005042 <I2C_ITSlaveCplt+0x32>
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b29      	cmp	r3, #41	; 0x29
 8005040:	d108      	bne.n	8005054 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005042:	f248 0101 	movw	r1, #32769	; 0x8001
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb58 	bl	80056fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2221      	movs	r2, #33	; 0x21
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
 8005052:	e019      	b.n	8005088 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b22      	cmp	r3, #34	; 0x22
 8005058:	d002      	beq.n	8005060 <I2C_ITSlaveCplt+0x50>
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b2a      	cmp	r3, #42	; 0x2a
 800505e:	d108      	bne.n	8005072 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005060:	f248 0102 	movw	r1, #32770	; 0x8002
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fb49 	bl	80056fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2222      	movs	r2, #34	; 0x22
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
 8005070:	e00a      	b.n	8005088 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b28      	cmp	r3, #40	; 0x28
 8005076:	d107      	bne.n	8005088 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005078:	f248 0103 	movw	r1, #32771	; 0x8003
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fb3d 	bl	80056fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005096:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b62      	ldr	r3, [pc, #392]	; (800522c <I2C_ITSlaveCplt+0x21c>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa2e 	bl	800550a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01f      	beq.n	8005110 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050de:	e017      	b.n	8005110 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d012      	beq.n	8005110 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f043 0204 	orr.w	r2, r3, #4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8a4 	bl	80052dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b28      	cmp	r3, #40	; 0x28
 800519e:	d141      	bne.n	8005224 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80051a0:	6979      	ldr	r1, [r7, #20]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f846 	bl	8005234 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a8:	e03c      	b.n	8005224 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b2:	d014      	beq.n	80051de <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fe06 	bl	8004dc6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <I2C_ITSlaveCplt+0x220>)
 80051be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff f922 	bl	8004420 <HAL_I2C_ListenCpltCallback>
}
 80051dc:	e022      	b.n	8005224 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b22      	cmp	r3, #34	; 0x22
 80051e8:	d10e      	bne.n	8005208 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fc fa75 	bl	80016f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005206:	e00d      	b.n	8005224 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff f8e6 	bl	80043f0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	fe00e800 	.word	0xfe00e800
 8005230:	ffff0000 	.word	0xffff0000

08005234 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <I2C_ITListenCplt+0xa4>)
 8005242:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d022      	beq.n	80052b0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d012      	beq.n	80052b0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f043 0204 	orr.w	r2, r3, #4
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa21 	bl	80056fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2210      	movs	r2, #16
 80052c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff f8a8 	bl	8004420 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	ffff0000 	.word	0xffff0000

080052dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ec:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a6d      	ldr	r2, [pc, #436]	; (80054b0 <I2C_ITError+0x1d4>)
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b28      	cmp	r3, #40	; 0x28
 8005312:	d005      	beq.n	8005320 <I2C_ITError+0x44>
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	2b29      	cmp	r3, #41	; 0x29
 8005318:	d002      	beq.n	8005320 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b2a      	cmp	r3, #42	; 0x2a
 800531e:	d10b      	bne.n	8005338 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005320:	2103      	movs	r1, #3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9ea 	bl	80056fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2228      	movs	r2, #40	; 0x28
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a60      	ldr	r2, [pc, #384]	; (80054b4 <I2C_ITError+0x1d8>)
 8005334:	635a      	str	r2, [r3, #52]	; 0x34
 8005336:	e030      	b.n	800539a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005338:	f248 0103 	movw	r1, #32771	; 0x8003
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f9dd 	bl	80056fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8e1 	bl	800550a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d01f      	beq.n	8005394 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b20      	cmp	r3, #32
 8005368:	d114      	bne.n	8005394 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b10      	cmp	r3, #16
 8005376:	d109      	bne.n	800538c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2210      	movs	r2, #16
 800537e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	f043 0204 	orr.w	r2, r3, #4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2220      	movs	r2, #32
 8005392:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d039      	beq.n	800541c <I2C_ITError+0x140>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b11      	cmp	r3, #17
 80053ac:	d002      	beq.n	80053b4 <I2C_ITError+0xd8>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b21      	cmp	r3, #33	; 0x21
 80053b2:	d133      	bne.n	800541c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c2:	d107      	bne.n	80053d4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fca9 	bl	8003d30 <HAL_DMA_GetState>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d017      	beq.n	8005414 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	4a33      	ldr	r2, [pc, #204]	; (80054b8 <I2C_ITError+0x1dc>)
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fba9 	bl	8003b50 <HAL_DMA_Abort_IT>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d04d      	beq.n	80054a0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800540e:	4610      	mov	r0, r2
 8005410:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005412:	e045      	b.n	80054a0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f851 	bl	80054bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800541a:	e041      	b.n	80054a0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d039      	beq.n	8005498 <I2C_ITError+0x1bc>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b12      	cmp	r3, #18
 8005428:	d002      	beq.n	8005430 <I2C_ITError+0x154>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b22      	cmp	r3, #34	; 0x22
 800542e:	d133      	bne.n	8005498 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d107      	bne.n	8005450 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800544e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fc6b 	bl	8003d30 <HAL_DMA_GetState>
 800545a:	4603      	mov	r3, r0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d017      	beq.n	8005490 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <I2C_ITError+0x1dc>)
 8005466:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fb6b 	bl	8003b50 <HAL_DMA_Abort_IT>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d011      	beq.n	80054a4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800548e:	e009      	b.n	80054a4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f813 	bl	80054bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005496:	e005      	b.n	80054a4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f80f 	bl	80054bc <I2C_TreatErrorCallback>
  }
}
 800549e:	e002      	b.n	80054a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054a4:	bf00      	nop
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	ffff0000 	.word	0xffff0000
 80054b4:	08004485 	.word	0x08004485
 80054b8:	08005553 	.word	0x08005553

080054bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d10e      	bne.n	80054ee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fe ffc2 	bl	8004470 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054ec:	e009      	b.n	8005502 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fe ffad 	bl	800445c <HAL_I2C_ErrorCallback>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d103      	bne.n	8005528 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2200      	movs	r2, #0
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d007      	beq.n	8005546 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	619a      	str	r2, [r3, #24]
  }
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	2200      	movs	r2, #0
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	2200      	movs	r2, #0
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff ff9b 	bl	80054bc <I2C_TreatErrorCallback>
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	817b      	strh	r3, [r7, #10]
 800559e:	4613      	mov	r3, r2
 80055a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055a8:	7a7b      	ldrb	r3, [r7, #9]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	0d5b      	lsrs	r3, r3, #21
 80055ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <I2C_TransferConfig+0x60>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	43db      	mvns	r3, r3
 80055d4:	ea02 0103 	and.w	r1, r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	03ff63ff 	.word	0x03ff63ff

080055f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	4a39      	ldr	r2, [pc, #228]	; (80056f0 <I2C_Enable_IRQ+0xfc>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d032      	beq.n	8005674 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005612:	4a38      	ldr	r2, [pc, #224]	; (80056f4 <I2C_Enable_IRQ+0x100>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02d      	beq.n	8005674 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800561c:	4a36      	ldr	r2, [pc, #216]	; (80056f8 <I2C_Enable_IRQ+0x104>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d028      	beq.n	8005674 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005626:	2b00      	cmp	r3, #0
 8005628:	da03      	bge.n	8005632 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005630:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005642:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005644:	887b      	ldrh	r3, [r7, #2]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005654:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	2b10      	cmp	r3, #16
 800565a:	d103      	bne.n	8005664 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005662:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b20      	cmp	r3, #32
 8005668:	d133      	bne.n	80056d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f043 0320 	orr.w	r3, r3, #32
 8005670:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005672:	e02e      	b.n	80056d2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005674:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005678:	2b00      	cmp	r3, #0
 800567a:	da03      	bge.n	8005684 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005682:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005684:	887b      	ldrh	r3, [r7, #2]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005694:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80056a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d103      	bne.n	80056b6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80056b4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d103      	bne.n	80056c4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d103      	bne.n	80056d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6819      	ldr	r1, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	430a      	orrs	r2, r1
 80056e0:	601a      	str	r2, [r3, #0]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	08004675 	.word	0x08004675
 80056f4:	08004a99 	.word	0x08004a99
 80056f8:	0800484d 	.word	0x0800484d

080056fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800570c:	887b      	ldrh	r3, [r7, #2]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00f      	beq.n	8005736 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800571c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800572a:	2b28      	cmp	r3, #40	; 0x28
 800572c:	d003      	beq.n	8005736 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005734:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005736:	887b      	ldrh	r3, [r7, #2]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005746:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005754:	2b28      	cmp	r3, #40	; 0x28
 8005756:	d003      	beq.n	8005760 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800575e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005764:	2b00      	cmp	r3, #0
 8005766:	da03      	bge.n	8005770 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800576e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	2b10      	cmp	r3, #16
 8005774:	d103      	bne.n	800577e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800577c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800577e:	887b      	ldrh	r3, [r7, #2]
 8005780:	2b20      	cmp	r3, #32
 8005782:	d103      	bne.n	800578c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f043 0320 	orr.w	r3, r3, #32
 800578a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d103      	bne.n	800579a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005798:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	43da      	mvns	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	400a      	ands	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d138      	bne.n	8005840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057d8:	2302      	movs	r3, #2
 80057da:	e032      	b.n	8005842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800580a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b20      	cmp	r3, #32
 8005862:	d139      	bne.n	80058d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800586e:	2302      	movs	r3, #2
 8005870:	e033      	b.n	80058da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	; 0x24
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f6:	6013      	str	r3, [r2, #0]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40007000 	.word	0x40007000

08005908 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <HAL_PWREx_GetVoltageRange+0x18>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40007000 	.word	0x40007000

08005924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005932:	d130      	bne.n	8005996 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005934:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800593c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005940:	d038      	beq.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800594a:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800594c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005950:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2232      	movs	r2, #50	; 0x32
 8005958:	fb02 f303 	mul.w	r3, r2, r3
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800595e:	fba2 2303 	umull	r2, r3, r2, r3
 8005962:	0c9b      	lsrs	r3, r3, #18
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005968:	e002      	b.n	8005970 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b01      	subs	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005970:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d102      	bne.n	8005984 <HAL_PWREx_ControlVoltageScaling+0x60>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f2      	bne.n	800596a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005990:	d110      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e00f      	b.n	80059b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d007      	beq.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059ac:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40007000 	.word	0x40007000
 80059c8:	20000000 	.word	0x20000000
 80059cc:	431bde83 	.word	0x431bde83

080059d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f000 bc02 	b.w	80061e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059e4:	4b96      	ldr	r3, [pc, #600]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 030c 	and.w	r3, r3, #12
 80059ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ee:	4b94      	ldr	r3, [pc, #592]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80e4 	beq.w	8005bce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_RCC_OscConfig+0x4c>
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	f040 808b 	bne.w	8005b2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	f040 8087 	bne.w	8005b2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a1c:	4b88      	ldr	r3, [pc, #544]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_OscConfig+0x64>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e3d9      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1a      	ldr	r2, [r3, #32]
 8005a38:	4b81      	ldr	r3, [pc, #516]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <HAL_RCC_OscConfig+0x7e>
 8005a44:	4b7e      	ldr	r3, [pc, #504]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a4c:	e005      	b.n	8005a5a <HAL_RCC_OscConfig+0x8a>
 8005a4e:	4b7c      	ldr	r3, [pc, #496]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d223      	bcs.n	8005aa6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fd8c 	bl	8006580 <RCC_SetFlashLatencyFromMSIRange>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e3ba      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a72:	4b73      	ldr	r3, [pc, #460]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a72      	ldr	r2, [pc, #456]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a78:	f043 0308 	orr.w	r3, r3, #8
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4b70      	ldr	r3, [pc, #448]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	496d      	ldr	r1, [pc, #436]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a90:	4b6b      	ldr	r3, [pc, #428]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	4968      	ldr	r1, [pc, #416]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	604b      	str	r3, [r1, #4]
 8005aa4:	e025      	b.n	8005af2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa6:	4b66      	ldr	r3, [pc, #408]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a65      	ldr	r2, [pc, #404]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005aac:	f043 0308 	orr.w	r3, r3, #8
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b63      	ldr	r3, [pc, #396]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	4960      	ldr	r1, [pc, #384]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac4:	4b5e      	ldr	r3, [pc, #376]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	495b      	ldr	r1, [pc, #364]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fd4c 	bl	8006580 <RCC_SetFlashLatencyFromMSIRange>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e37a      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af2:	f000 fc81 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	4950      	ldr	r1, [pc, #320]	; (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	4a4e      	ldr	r2, [pc, #312]	; (8005c48 <HAL_RCC_OscConfig+0x278>)
 8005b10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b12:	4b4e      	ldr	r3, [pc, #312]	; (8005c4c <HAL_RCC_OscConfig+0x27c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fc fb62 	bl	80021e0 <HAL_InitTick>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d052      	beq.n	8005bcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	e35e      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d032      	beq.n	8005b98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a42      	ldr	r2, [pc, #264]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b3e:	f7fc fb9f 	bl	8002280 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b46:	f7fc fb9b 	bl	8002280 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e347      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b58:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b64:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a35      	ldr	r2, [pc, #212]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	f043 0308 	orr.w	r3, r3, #8
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	4930      	ldr	r1, [pc, #192]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	492b      	ldr	r1, [pc, #172]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	604b      	str	r3, [r1, #4]
 8005b96:	e01a      	b.n	8005bce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ba4:	f7fc fb6c 	bl	8002280 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bac:	f7fc fb68 	bl	8002280 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e314      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x1dc>
 8005bca:	e000      	b.n	8005bce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d073      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_OscConfig+0x21c>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d10e      	bne.n	8005c04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d10b      	bne.n	8005c04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bec:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d063      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x2f0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d15f      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e2f1      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0c:	d106      	bne.n	8005c1c <HAL_RCC_OscConfig+0x24c>
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e025      	b.n	8005c68 <HAL_RCC_OscConfig+0x298>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c24:	d114      	bne.n	8005c50 <HAL_RCC_OscConfig+0x280>
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a02      	ldr	r2, [pc, #8]	; (8005c40 <HAL_RCC_OscConfig+0x270>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	e013      	b.n	8005c68 <HAL_RCC_OscConfig+0x298>
 8005c40:	40021000 	.word	0x40021000
 8005c44:	0800ac94 	.word	0x0800ac94
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	20000004 	.word	0x20000004
 8005c50:	4ba0      	ldr	r3, [pc, #640]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a9f      	ldr	r2, [pc, #636]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	4b9d      	ldr	r3, [pc, #628]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a9c      	ldr	r2, [pc, #624]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c70:	f7fc fb06 	bl	8002280 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c78:	f7fc fb02 	bl	8002280 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e2ae      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c8a:	4b92      	ldr	r3, [pc, #584]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x2a8>
 8005c96:	e014      	b.n	8005cc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fc faf2 	bl	8002280 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fc faee 	bl	8002280 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	; 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e29a      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cb2:	4b88      	ldr	r3, [pc, #544]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x2d0>
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d060      	beq.n	8005d90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x310>
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b0c      	cmp	r3, #12
 8005cd8:	d119      	bne.n	8005d0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d116      	bne.n	8005d0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce0:	4b7c      	ldr	r3, [pc, #496]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x328>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e277      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf8:	4b76      	ldr	r3, [pc, #472]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	4973      	ldr	r1, [pc, #460]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0c:	e040      	b.n	8005d90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d023      	beq.n	8005d5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d16:	4b6f      	ldr	r3, [pc, #444]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a6e      	ldr	r2, [pc, #440]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d22:	f7fc faad 	bl	8002280 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d2a:	f7fc faa9 	bl	8002280 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e255      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d3c:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d48:	4b62      	ldr	r3, [pc, #392]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	061b      	lsls	r3, r3, #24
 8005d56:	495f      	ldr	r1, [pc, #380]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	604b      	str	r3, [r1, #4]
 8005d5c:	e018      	b.n	8005d90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5e:	4b5d      	ldr	r3, [pc, #372]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5c      	ldr	r2, [pc, #368]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6a:	f7fc fa89 	bl	8002280 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d72:	f7fc fa85 	bl	8002280 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e231      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d84:	4b53      	ldr	r3, [pc, #332]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1f0      	bne.n	8005d72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d03c      	beq.n	8005e16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01c      	beq.n	8005dde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da4:	4b4b      	ldr	r3, [pc, #300]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005daa:	4a4a      	ldr	r2, [pc, #296]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fc fa64 	bl	8002280 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbc:	f7fc fa60 	bl	8002280 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e20c      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dce:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ef      	beq.n	8005dbc <HAL_RCC_OscConfig+0x3ec>
 8005ddc:	e01b      	b.n	8005e16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dde:	4b3d      	ldr	r3, [pc, #244]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de4:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dee:	f7fc fa47 	bl	8002280 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df6:	f7fc fa43 	bl	8002280 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1ef      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e08:	4b32      	ldr	r3, [pc, #200]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1ef      	bne.n	8005df6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80a6 	beq.w	8005f70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e24:	2300      	movs	r3, #0
 8005e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e28:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e34:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	4a26      	ldr	r2, [pc, #152]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e50:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <HAL_RCC_OscConfig+0x508>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d118      	bne.n	8005e8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ed8 <HAL_RCC_OscConfig+0x508>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <HAL_RCC_OscConfig+0x508>)
 8005e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e68:	f7fc fa0a 	bl	8002280 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e70:	f7fc fa06 	bl	8002280 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e1b2      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_RCC_OscConfig+0x508>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d108      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4d8>
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ea6:	e029      	b.n	8005efc <HAL_RCC_OscConfig+0x52c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d115      	bne.n	8005edc <HAL_RCC_OscConfig+0x50c>
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	4a07      	ldr	r2, [pc, #28]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ed0:	e014      	b.n	8005efc <HAL_RCC_OscConfig+0x52c>
 8005ed2:	bf00      	nop
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40007000 	.word	0x40007000
 8005edc:	4b9a      	ldr	r3, [pc, #616]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	4a99      	ldr	r2, [pc, #612]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eec:	4b96      	ldr	r3, [pc, #600]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	4a95      	ldr	r2, [pc, #596]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d016      	beq.n	8005f32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f04:	f7fc f9bc 	bl	8002280 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0c:	f7fc f9b8 	bl	8002280 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e162      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f22:	4b89      	ldr	r3, [pc, #548]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ed      	beq.n	8005f0c <HAL_RCC_OscConfig+0x53c>
 8005f30:	e015      	b.n	8005f5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fc f9a5 	bl	8002280 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f38:	e00a      	b.n	8005f50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3a:	f7fc f9a1 	bl	8002280 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e14b      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f50:	4b7d      	ldr	r3, [pc, #500]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ed      	bne.n	8005f3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5e:	7ffb      	ldrb	r3, [r7, #31]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d105      	bne.n	8005f70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f64:	4b78      	ldr	r3, [pc, #480]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	4a77      	ldr	r2, [pc, #476]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d03c      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01c      	beq.n	8005fbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f84:	4b70      	ldr	r3, [pc, #448]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f8a:	4a6f      	ldr	r2, [pc, #444]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f94:	f7fc f974 	bl	8002280 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f9c:	f7fc f970 	bl	8002280 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e11c      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fae:	4b66      	ldr	r3, [pc, #408]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ef      	beq.n	8005f9c <HAL_RCC_OscConfig+0x5cc>
 8005fbc:	e01b      	b.n	8005ff6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fbe:	4b62      	ldr	r3, [pc, #392]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fc4:	4a60      	ldr	r2, [pc, #384]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fce:	f7fc f957 	bl	8002280 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fd6:	f7fc f953 	bl	8002280 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0ff      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fe8:	4b57      	ldr	r3, [pc, #348]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8005fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1ef      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80f3 	beq.w	80061e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	2b02      	cmp	r3, #2
 8006006:	f040 80c9 	bne.w	800619c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800600a:	4b4f      	ldr	r3, [pc, #316]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0203 	and.w	r2, r3, #3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	429a      	cmp	r2, r3
 800601c:	d12c      	bne.n	8006078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	3b01      	subs	r3, #1
 800602a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d123      	bne.n	8006078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d11b      	bne.n	8006078 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d113      	bne.n	8006078 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	3b01      	subs	r3, #1
 800605e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d109      	bne.n	8006078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	3b01      	subs	r3, #1
 8006072:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d06b      	beq.n	8006150 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b0c      	cmp	r3, #12
 800607c:	d062      	beq.n	8006144 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800607e:	4b32      	ldr	r3, [pc, #200]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e0ac      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2d      	ldr	r2, [pc, #180]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006098:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800609a:	f7fc f8f1 	bl	8002280 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a2:	f7fc f8ed 	bl	8002280 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e099      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b4:	4b24      	ldr	r3, [pc, #144]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	4b21      	ldr	r3, [pc, #132]	; (800614c <HAL_RCC_OscConfig+0x77c>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060d0:	3a01      	subs	r2, #1
 80060d2:	0112      	lsls	r2, r2, #4
 80060d4:	4311      	orrs	r1, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060da:	0212      	lsls	r2, r2, #8
 80060dc:	4311      	orrs	r1, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060e2:	0852      	lsrs	r2, r2, #1
 80060e4:	3a01      	subs	r2, #1
 80060e6:	0552      	lsls	r2, r2, #21
 80060e8:	4311      	orrs	r1, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060ee:	0852      	lsrs	r2, r2, #1
 80060f0:	3a01      	subs	r2, #1
 80060f2:	0652      	lsls	r2, r2, #25
 80060f4:	4311      	orrs	r1, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060fa:	06d2      	lsls	r2, r2, #27
 80060fc:	430a      	orrs	r2, r1
 80060fe:	4912      	ldr	r1, [pc, #72]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006100:	4313      	orrs	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0f      	ldr	r2, [pc, #60]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 800610a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800610e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006110:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800611a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800611c:	f7fc f8b0 	bl	8002280 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006124:	f7fc f8ac 	bl	8002280 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e058      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006136:	4b04      	ldr	r3, [pc, #16]	; (8006148 <HAL_RCC_OscConfig+0x778>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006142:	e050      	b.n	80061e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e04f      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
 8006148:	40021000 	.word	0x40021000
 800614c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006150:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d144      	bne.n	80061e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800615c:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a23      	ldr	r2, [pc, #140]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 8006162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006166:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a20      	ldr	r2, [pc, #128]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 800616e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006172:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006174:	f7fc f884 	bl	8002280 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fc f880 	bl	8002280 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e02c      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618e:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0x7ac>
 800619a:	e024      	b.n	80061e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	d01f      	beq.n	80061e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a12      	ldr	r2, [pc, #72]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 80061a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ae:	f7fc f867 	bl	8002280 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b6:	f7fc f863 	bl	8002280 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e00f      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80061d4:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	4905      	ldr	r1, [pc, #20]	; (80061f0 <HAL_RCC_OscConfig+0x820>)
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCC_OscConfig+0x824>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60cb      	str	r3, [r1, #12]
 80061e0:	e001      	b.n	80061e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021000 	.word	0x40021000
 80061f4:	feeefffc 	.word	0xfeeefffc

080061f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0e7      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800620c:	4b75      	ldr	r3, [pc, #468]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d910      	bls.n	800623c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b72      	ldr	r3, [pc, #456]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 0207 	bic.w	r2, r3, #7
 8006222:	4970      	ldr	r1, [pc, #448]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b6e      	ldr	r3, [pc, #440]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d001      	beq.n	800623c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0cf      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	4b66      	ldr	r3, [pc, #408]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006254:	429a      	cmp	r2, r3
 8006256:	d908      	bls.n	800626a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b63      	ldr	r3, [pc, #396]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4960      	ldr	r1, [pc, #384]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d04c      	beq.n	8006310 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627e:	4b5a      	ldr	r3, [pc, #360]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d121      	bne.n	80062ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e0a6      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006296:	4b54      	ldr	r3, [pc, #336]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d115      	bne.n	80062ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e09a      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062ae:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e08e      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062be:	4b4a      	ldr	r3, [pc, #296]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e086      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062ce:	4b46      	ldr	r3, [pc, #280]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 0203 	bic.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4943      	ldr	r1, [pc, #268]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e0:	f7fb ffce 	bl	8002280 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e8:	f7fb ffca 	bl	8002280 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e06e      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	4b3a      	ldr	r3, [pc, #232]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 020c 	and.w	r2, r3, #12
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	429a      	cmp	r2, r3
 800630e:	d1eb      	bne.n	80062e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d010      	beq.n	800633e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006328:	429a      	cmp	r2, r3
 800632a:	d208      	bcs.n	800633e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800632c:	4b2e      	ldr	r3, [pc, #184]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	492b      	ldr	r1, [pc, #172]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800633e:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d210      	bcs.n	800636e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634c:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f023 0207 	bic.w	r2, r3, #7
 8006354:	4923      	ldr	r1, [pc, #140]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <HAL_RCC_ClockConfig+0x1ec>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d001      	beq.n	800636e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e036      	b.n	80063dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	4918      	ldr	r1, [pc, #96]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006388:	4313      	orrs	r3, r2
 800638a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d009      	beq.n	80063ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006398:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4910      	ldr	r1, [pc, #64]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063ac:	f000 f824 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <HAL_RCC_ClockConfig+0x1f0>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	490b      	ldr	r1, [pc, #44]	; (80063ec <HAL_RCC_ClockConfig+0x1f4>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
 80063c8:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <HAL_RCC_ClockConfig+0x1f8>)
 80063ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_RCC_ClockConfig+0x1fc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fb ff05 	bl	80021e0 <HAL_InitTick>
 80063d6:	4603      	mov	r3, r0
 80063d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80063da:	7afb      	ldrb	r3, [r7, #11]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40022000 	.word	0x40022000
 80063e8:	40021000 	.word	0x40021000
 80063ec:	0800ac94 	.word	0x0800ac94
 80063f0:	20000000 	.word	0x20000000
 80063f4:	20000004 	.word	0x20000004

080063f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b089      	sub	sp, #36	; 0x24
 80063fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
 800640e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x34>
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b0c      	cmp	r3, #12
 8006424:	d121      	bne.n	800646a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d11e      	bne.n	800646a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800642c:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006438:	4b31      	ldr	r3, [pc, #196]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 800643a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e005      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006454:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006468:	e00a      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b04      	cmp	r3, #4
 800646e:	d102      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006470:	4b25      	ldr	r3, [pc, #148]	; (8006508 <HAL_RCC_GetSysClockFreq+0x110>)
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	e004      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d101      	bne.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800647c:	4b23      	ldr	r3, [pc, #140]	; (800650c <HAL_RCC_GetSysClockFreq+0x114>)
 800647e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d134      	bne.n	80064f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006486:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d003      	beq.n	800649e <HAL_RCC_GetSysClockFreq+0xa6>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d003      	beq.n	80064a4 <HAL_RCC_GetSysClockFreq+0xac>
 800649c:	e005      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800649e:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <HAL_RCC_GetSysClockFreq+0x110>)
 80064a0:	617b      	str	r3, [r7, #20]
      break;
 80064a2:	e005      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064a4:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_RCC_GetSysClockFreq+0x114>)
 80064a6:	617b      	str	r3, [r7, #20]
      break;
 80064a8:	e002      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	617b      	str	r3, [r7, #20]
      break;
 80064ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	3301      	adds	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	fb03 f202 	mul.w	r2, r3, r2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	0e5b      	lsrs	r3, r3, #25
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	3301      	adds	r3, #1
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064f0:	69bb      	ldr	r3, [r7, #24]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3724      	adds	r7, #36	; 0x24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	0800acac 	.word	0x0800acac
 8006508:	00f42400 	.word	0x00f42400
 800650c:	007a1200 	.word	0x007a1200

08006510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <HAL_RCC_GetHCLKFreq+0x14>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000000 	.word	0x20000000

08006528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800652c:	f7ff fff0 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4904      	ldr	r1, [pc, #16]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40021000 	.word	0x40021000
 8006550:	0800aca4 	.word	0x0800aca4

08006554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006558:	f7ff ffda 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	0adb      	lsrs	r3, r3, #11
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4904      	ldr	r1, [pc, #16]	; (800657c <HAL_RCC_GetPCLK2Freq+0x28>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40021000 	.word	0x40021000
 800657c:	0800aca4 	.word	0x0800aca4

08006580 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800658c:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006598:	f7ff f9b6 	bl	8005908 <HAL_PWREx_GetVoltageRange>
 800659c:	6178      	str	r0, [r7, #20]
 800659e:	e014      	b.n	80065ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	4a24      	ldr	r2, [pc, #144]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6593      	str	r3, [r2, #88]	; 0x58
 80065ac:	4b22      	ldr	r3, [pc, #136]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065b8:	f7ff f9a6 	bl	8005908 <HAL_PWREx_GetVoltageRange>
 80065bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065be:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d10b      	bne.n	80065ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d919      	bls.n	800660c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2ba0      	cmp	r3, #160	; 0xa0
 80065dc:	d902      	bls.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065de:	2302      	movs	r3, #2
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e013      	b.n	800660c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065e4:	2301      	movs	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e010      	b.n	800660c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d902      	bls.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065f0:	2303      	movs	r3, #3
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	e00a      	b.n	800660c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b80      	cmp	r3, #128	; 0x80
 80065fa:	d102      	bne.n	8006602 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065fc:	2302      	movs	r3, #2
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e004      	b.n	800660c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b70      	cmp	r3, #112	; 0x70
 8006606:	d101      	bne.n	800660c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006608:	2301      	movs	r3, #1
 800660a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f023 0207 	bic.w	r2, r3, #7
 8006614:	4909      	ldr	r1, [pc, #36]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d001      	beq.n	800662e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000
 800663c:	40022000 	.word	0x40022000

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006648:	2300      	movs	r3, #0
 800664a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800664c:	2300      	movs	r3, #0
 800664e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006658:	2b00      	cmp	r3, #0
 800665a:	d031      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006664:	d01a      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006666:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800666a:	d814      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006674:	d10f      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006676:	4b5d      	ldr	r3, [pc, #372]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	4a5c      	ldr	r2, [pc, #368]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006680:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006682:	e00c      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	2100      	movs	r1, #0
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f9de 	bl	8006a4c <RCCEx_PLLSAI1_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006694:	e003      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	74fb      	strb	r3, [r7, #19]
      break;
 800669a:	e000      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800669c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669e:	7cfb      	ldrb	r3, [r7, #19]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a4:	4b51      	ldr	r3, [pc, #324]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	494e      	ldr	r1, [pc, #312]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066ba:	e001      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 809e 	beq.w	800680a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ce:	2300      	movs	r3, #0
 80066d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066d2:	4b46      	ldr	r3, [pc, #280]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e8:	4b40      	ldr	r3, [pc, #256]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ec:	4a3f      	ldr	r2, [pc, #252]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f2:	6593      	str	r3, [r2, #88]	; 0x58
 80066f4:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006700:	2301      	movs	r3, #1
 8006702:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006704:	4b3a      	ldr	r3, [pc, #232]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a39      	ldr	r2, [pc, #228]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800670a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006710:	f7fb fdb6 	bl	8002280 <HAL_GetTick>
 8006714:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006716:	e009      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006718:	f7fb fdb2 	bl	8002280 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d902      	bls.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	74fb      	strb	r3, [r7, #19]
        break;
 800672a:	e005      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800672c:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ef      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006738:	7cfb      	ldrb	r3, [r7, #19]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d15a      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800673e:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006748:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01e      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	429a      	cmp	r2, r3
 8006758:	d019      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006764:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006766:	4b21      	ldr	r3, [pc, #132]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676c:	4a1f      	ldr	r2, [pc, #124]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800676e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677c:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006786:	4a19      	ldr	r2, [pc, #100]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d016      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fb fd72 	bl	8002280 <HAL_GetTick>
 800679c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679e:	e00b      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a0:	f7fb fd6e 	bl	8002280 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d902      	bls.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	74fb      	strb	r3, [r7, #19]
            break;
 80067b6:	e006      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0ec      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80067c6:	7cfb      	ldrb	r3, [r7, #19]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10b      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	4904      	ldr	r1, [pc, #16]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067e2:	e009      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	74bb      	strb	r3, [r7, #18]
 80067e8:	e006      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067ea:	bf00      	nop
 80067ec:	40021000 	.word	0x40021000
 80067f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067f8:	7c7b      	ldrb	r3, [r7, #17]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d105      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067fe:	4b8a      	ldr	r3, [pc, #552]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	4a89      	ldr	r2, [pc, #548]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006816:	4b84      	ldr	r3, [pc, #528]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	f023 0203 	bic.w	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	4980      	ldr	r1, [pc, #512]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006838:	4b7b      	ldr	r3, [pc, #492]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	f023 020c 	bic.w	r2, r3, #12
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	4978      	ldr	r1, [pc, #480]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800685a:	4b73      	ldr	r3, [pc, #460]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	496f      	ldr	r1, [pc, #444]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800687c:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	4967      	ldr	r1, [pc, #412]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800689e:	4b62      	ldr	r3, [pc, #392]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	495e      	ldr	r1, [pc, #376]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068c0:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	4956      	ldr	r1, [pc, #344]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068e2:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	494d      	ldr	r1, [pc, #308]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d028      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006904:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	4945      	ldr	r1, [pc, #276]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006922:	d106      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006924:	4b40      	ldr	r3, [pc, #256]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a3f      	ldr	r2, [pc, #252]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692e:	60d3      	str	r3, [r2, #12]
 8006930:	e011      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800693a:	d10c      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	2101      	movs	r1, #1
 8006942:	4618      	mov	r0, r3
 8006944:	f000 f882 	bl	8006a4c <RCCEx_PLLSAI1_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800694c:	7cfb      	ldrb	r3, [r7, #19]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d028      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006962:	4b31      	ldr	r3, [pc, #196]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	492d      	ldr	r1, [pc, #180]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006980:	d106      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006982:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698c:	60d3      	str	r3, [r2, #12]
 800698e:	e011      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006998:	d10c      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f853 	bl	8006a4c <RCCEx_PLLSAI1_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069aa:	7cfb      	ldrb	r3, [r7, #19]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01c      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ce:	4916      	ldr	r1, [pc, #88]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069de:	d10c      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	2102      	movs	r1, #2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f830 	bl	8006a4c <RCCEx_PLLSAI1_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80069f6:	7cfb      	ldrb	r3, [r7, #19]
 80069f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a06:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a14:	4904      	ldr	r1, [pc, #16]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000

08006a2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006a36:	f043 0304 	orr.w	r3, r3, #4
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40021000 	.word	0x40021000

08006a4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a5a:	4b74      	ldr	r3, [pc, #464]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d018      	beq.n	8006a98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a66:	4b71      	ldr	r3, [pc, #452]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0203 	and.w	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10d      	bne.n	8006a92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
       ||
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a7e:	4b6b      	ldr	r3, [pc, #428]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d047      	beq.n	8006b22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
 8006a96:	e044      	b.n	8006b22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d018      	beq.n	8006ad2 <RCCEx_PLLSAI1_Config+0x86>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d825      	bhi.n	8006af0 <RCCEx_PLLSAI1_Config+0xa4>
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d002      	beq.n	8006aae <RCCEx_PLLSAI1_Config+0x62>
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d009      	beq.n	8006ac0 <RCCEx_PLLSAI1_Config+0x74>
 8006aac:	e020      	b.n	8006af0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006aae:	4b5f      	ldr	r3, [pc, #380]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11d      	bne.n	8006af6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006abe:	e01a      	b.n	8006af6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ac0:	4b5a      	ldr	r3, [pc, #360]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d116      	bne.n	8006afa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ad0:	e013      	b.n	8006afa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ad2:	4b56      	ldr	r3, [pc, #344]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10f      	bne.n	8006afe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ade:	4b53      	ldr	r3, [pc, #332]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aee:	e006      	b.n	8006afe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	e004      	b.n	8006b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006af6:	bf00      	nop
 8006af8:	e002      	b.n	8006b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006afa:	bf00      	nop
 8006afc:	e000      	b.n	8006b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006afe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b06:	4b49      	ldr	r3, [pc, #292]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6819      	ldr	r1, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	4943      	ldr	r1, [pc, #268]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d17c      	bne.n	8006c22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b28:	4b40      	ldr	r3, [pc, #256]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a3f      	ldr	r2, [pc, #252]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b34:	f7fb fba4 	bl	8002280 <HAL_GetTick>
 8006b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b3a:	e009      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b3c:	f7fb fba0 	bl	8002280 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d902      	bls.n	8006b50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b4e:	e005      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b50:	4b36      	ldr	r3, [pc, #216]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1ef      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d15f      	bne.n	8006c22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d110      	bne.n	8006b8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b68:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6892      	ldr	r2, [r2, #8]
 8006b78:	0211      	lsls	r1, r2, #8
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68d2      	ldr	r2, [r2, #12]
 8006b7e:	06d2      	lsls	r2, r2, #27
 8006b80:	430a      	orrs	r2, r1
 8006b82:	492a      	ldr	r1, [pc, #168]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	610b      	str	r3, [r1, #16]
 8006b88:	e027      	b.n	8006bda <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d112      	bne.n	8006bb6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b90:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6892      	ldr	r2, [r2, #8]
 8006ba0:	0211      	lsls	r1, r2, #8
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6912      	ldr	r2, [r2, #16]
 8006ba6:	0852      	lsrs	r2, r2, #1
 8006ba8:	3a01      	subs	r2, #1
 8006baa:	0552      	lsls	r2, r2, #21
 8006bac:	430a      	orrs	r2, r1
 8006bae:	491f      	ldr	r1, [pc, #124]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	610b      	str	r3, [r1, #16]
 8006bb4:	e011      	b.n	8006bda <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006bbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6892      	ldr	r2, [r2, #8]
 8006bc6:	0211      	lsls	r1, r2, #8
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6952      	ldr	r2, [r2, #20]
 8006bcc:	0852      	lsrs	r2, r2, #1
 8006bce:	3a01      	subs	r2, #1
 8006bd0:	0652      	lsls	r2, r2, #25
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	4915      	ldr	r1, [pc, #84]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006be4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fb fb4b 	bl	8002280 <HAL_GetTick>
 8006bea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bec:	e009      	b.n	8006c02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bee:	f7fb fb47 	bl	8002280 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d902      	bls.n	8006c02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	73fb      	strb	r3, [r7, #15]
          break;
 8006c00:	e005      	b.n	8006c0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d106      	bne.n	8006c22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	4903      	ldr	r1, [pc, #12]	; (8006c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40021000 	.word	0x40021000

08006c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e049      	b.n	8006cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fb f8de 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f001 f87e 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e03b      	b.n	8006d70 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0201 	orr.w	r2, r2, #1
 8006d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <HAL_TIM_Base_Start_IT+0x9c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_TIM_Base_Start_IT+0x4e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d22:	d004      	beq.n	8006d2e <HAL_TIM_Base_Start_IT+0x4e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d115      	bne.n	8006d5a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <HAL_TIM_Base_Start_IT+0xa4>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b06      	cmp	r3, #6
 8006d3e:	d015      	beq.n	8006d6c <HAL_TIM_Base_Start_IT+0x8c>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d46:	d011      	beq.n	8006d6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d58:	e008      	b.n	8006d6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e000      	b.n	8006d6e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	40012c00 	.word	0x40012c00
 8006d80:	40014000 	.word	0x40014000
 8006d84:	00010007 	.word	0x00010007

08006d88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e049      	b.n	8006e2e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f841 	bl	8006e36 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f000 ffd2 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e049      	b.n	8006ef0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa ff7d 	bl	8001d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f000 ff71 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e03c      	b.n	8006f9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d109      	bne.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x46>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e02f      	b.n	8006f9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d109      	bne.n	8006f58 <HAL_TIM_PWM_Start_DMA+0x60>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	bf0c      	ite	eq
 8006f50:	2301      	moveq	r3, #1
 8006f52:	2300      	movne	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e022      	b.n	8006f9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b0c      	cmp	r3, #12
 8006f5c:	d109      	bne.n	8006f72 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	e015      	b.n	8006f9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d109      	bne.n	8006f8c <HAL_TIM_PWM_Start_DMA+0x94>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e008      	b.n	8006f9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e18d      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e03c      	b.n	800703a <HAL_TIM_PWM_Start_DMA+0x142>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d109      	bne.n	8006fda <HAL_TIM_PWM_Start_DMA+0xe2>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	e02f      	b.n	800703a <HAL_TIM_PWM_Start_DMA+0x142>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d109      	bne.n	8006ff4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e022      	b.n	800703a <HAL_TIM_PWM_Start_DMA+0x142>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b0c      	cmp	r3, #12
 8006ff8:	d109      	bne.n	800700e <HAL_TIM_PWM_Start_DMA+0x116>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e015      	b.n	800703a <HAL_TIM_PWM_Start_DMA+0x142>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b10      	cmp	r3, #16
 8007012:	d109      	bne.n	8007028 <HAL_TIM_PWM_Start_DMA+0x130>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e008      	b.n	800703a <HAL_TIM_PWM_Start_DMA+0x142>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d034      	beq.n	80070a8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_TIM_PWM_Start_DMA+0x152>
 8007044:	887b      	ldrh	r3, [r7, #2]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e139      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_TIM_PWM_Start_DMA+0x166>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800705c:	e026      	b.n	80070ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d104      	bne.n	800706e <HAL_TIM_PWM_Start_DMA+0x176>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800706c:	e01e      	b.n	80070ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d104      	bne.n	800707e <HAL_TIM_PWM_Start_DMA+0x186>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800707c:	e016      	b.n	80070ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b0c      	cmp	r3, #12
 8007082:	d104      	bne.n	800708e <HAL_TIM_PWM_Start_DMA+0x196>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800708c:	e00e      	b.n	80070ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b10      	cmp	r3, #16
 8007092:	d104      	bne.n	800709e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800709c:	e006      	b.n	80070ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070a6:	e001      	b.n	80070ac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e10a      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b0c      	cmp	r3, #12
 80070b0:	f200 80ae 	bhi.w	8007210 <HAL_TIM_PWM_Start_DMA+0x318>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	08007211 	.word	0x08007211
 80070c4:	08007211 	.word	0x08007211
 80070c8:	08007211 	.word	0x08007211
 80070cc:	08007139 	.word	0x08007139
 80070d0:	08007211 	.word	0x08007211
 80070d4:	08007211 	.word	0x08007211
 80070d8:	08007211 	.word	0x08007211
 80070dc:	08007181 	.word	0x08007181
 80070e0:	08007211 	.word	0x08007211
 80070e4:	08007211 	.word	0x08007211
 80070e8:	08007211 	.word	0x08007211
 80070ec:	080071c9 	.word	0x080071c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	4a75      	ldr	r2, [pc, #468]	; (80072cc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	4a74      	ldr	r2, [pc, #464]	; (80072d0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	4a73      	ldr	r2, [pc, #460]	; (80072d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007106:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3334      	adds	r3, #52	; 0x34
 8007114:	461a      	mov	r2, r3
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	f7fc fcba 	bl	8003a90 <HAL_DMA_Start_IT>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e0cd      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007134:	60da      	str	r2, [r3, #12]
      break;
 8007136:	e06e      	b.n	8007216 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	4a63      	ldr	r2, [pc, #396]	; (80072cc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800713e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	4a62      	ldr	r2, [pc, #392]	; (80072d0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007146:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	4a61      	ldr	r2, [pc, #388]	; (80072d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800714e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3338      	adds	r3, #56	; 0x38
 800715c:	461a      	mov	r2, r3
 800715e:	887b      	ldrh	r3, [r7, #2]
 8007160:	f7fc fc96 	bl	8003a90 <HAL_DMA_Start_IT>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e0a9      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800717c:	60da      	str	r2, [r3, #12]
      break;
 800717e:	e04a      	b.n	8007216 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a51      	ldr	r2, [pc, #324]	; (80072cc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007186:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	4a50      	ldr	r2, [pc, #320]	; (80072d0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800718e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a4f      	ldr	r2, [pc, #316]	; (80072d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	333c      	adds	r3, #60	; 0x3c
 80071a4:	461a      	mov	r2, r3
 80071a6:	887b      	ldrh	r3, [r7, #2]
 80071a8:	f7fc fc72 	bl	8003a90 <HAL_DMA_Start_IT>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e085      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c4:	60da      	str	r2, [r3, #12]
      break;
 80071c6:	e026      	b.n	8007216 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	4a3f      	ldr	r2, [pc, #252]	; (80072cc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80071ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	4a3e      	ldr	r2, [pc, #248]	; (80072d0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	4a3d      	ldr	r2, [pc, #244]	; (80072d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80071de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3340      	adds	r3, #64	; 0x40
 80071ec:	461a      	mov	r2, r3
 80071ee:	887b      	ldrh	r3, [r7, #2]
 80071f0:	f7fc fc4e 	bl	8003a90 <HAL_DMA_Start_IT>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e061      	b.n	80072c2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800720c:	60da      	str	r2, [r3, #12]
      break;
 800720e:	e002      	b.n	8007216 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
      break;
 8007214:	bf00      	nop
  }

  if (status == HAL_OK)
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d151      	bne.n	80072c0 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2201      	movs	r2, #1
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f91f 	bl	8008468 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2a      	ldr	r2, [pc, #168]	; (80072d8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_TIM_PWM_Start_DMA+0x350>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a28      	ldr	r2, [pc, #160]	; (80072dc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIM_PWM_Start_DMA+0x350>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d101      	bne.n	800724c <HAL_TIM_PWM_Start_DMA+0x354>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <HAL_TIM_PWM_Start_DMA+0x356>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_TIM_PWM_Start_DMA+0x388>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d004      	beq.n	8007280 <HAL_TIM_PWM_Start_DMA+0x388>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d115      	bne.n	80072ac <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	4b17      	ldr	r3, [pc, #92]	; (80072e4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007288:	4013      	ands	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b06      	cmp	r3, #6
 8007290:	d015      	beq.n	80072be <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007298:	d011      	beq.n	80072be <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	e008      	b.n	80072be <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	08007c61 	.word	0x08007c61
 80072d0:	08007d09 	.word	0x08007d09
 80072d4:	08007bcf 	.word	0x08007bcf
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40014400 	.word	0x40014400
 80072e4:	00010007 	.word	0x00010007

080072e8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b0c      	cmp	r3, #12
 80072fa:	d855      	bhi.n	80073a8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80072fc:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007339 	.word	0x08007339
 8007308:	080073a9 	.word	0x080073a9
 800730c:	080073a9 	.word	0x080073a9
 8007310:	080073a9 	.word	0x080073a9
 8007314:	08007355 	.word	0x08007355
 8007318:	080073a9 	.word	0x080073a9
 800731c:	080073a9 	.word	0x080073a9
 8007320:	080073a9 	.word	0x080073a9
 8007324:	08007371 	.word	0x08007371
 8007328:	080073a9 	.word	0x080073a9
 800732c:	080073a9 	.word	0x080073a9
 8007330:	080073a9 	.word	0x080073a9
 8007334:	0800738d 	.word	0x0800738d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007346:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	4618      	mov	r0, r3
 800734e:	f7fc fbff 	bl	8003b50 <HAL_DMA_Abort_IT>
      break;
 8007352:	e02c      	b.n	80073ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007362:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	4618      	mov	r0, r3
 800736a:	f7fc fbf1 	bl	8003b50 <HAL_DMA_Abort_IT>
      break;
 800736e:	e01e      	b.n	80073ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800737e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4618      	mov	r0, r3
 8007386:	f7fc fbe3 	bl	8003b50 <HAL_DMA_Abort_IT>
      break;
 800738a:	e010      	b.n	80073ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800739a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fc fbd5 	bl	8003b50 <HAL_DMA_Abort_IT>
      break;
 80073a6:	e002      	b.n	80073ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
      break;
 80073ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d176      	bne.n	80074a2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2200      	movs	r2, #0
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 f853 	bl	8008468 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a39      	ldr	r2, [pc, #228]	; (80074ac <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a37      	ldr	r2, [pc, #220]	; (80074b0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a36      	ldr	r2, [pc, #216]	; (80074b4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d101      	bne.n	80073e4 <HAL_TIM_PWM_Stop_DMA+0xfc>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6a1a      	ldr	r2, [r3, #32]
 80073f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10f      	bne.n	800741a <HAL_TIM_PWM_Stop_DMA+0x132>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	f240 4344 	movw	r3, #1092	; 0x444
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d107      	bne.n	800741a <HAL_TIM_PWM_Stop_DMA+0x132>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007418:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	f241 1311 	movw	r3, #4369	; 0x1111
 8007424:	4013      	ands	r3, r2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10f      	bne.n	800744a <HAL_TIM_PWM_Stop_DMA+0x162>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	f240 4344 	movw	r3, #1092	; 0x444
 8007434:	4013      	ands	r3, r2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d107      	bne.n	800744a <HAL_TIM_PWM_Stop_DMA+0x162>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0201 	bic.w	r2, r2, #1
 8007448:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d104      	bne.n	800745a <HAL_TIM_PWM_Stop_DMA+0x172>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007458:	e023      	b.n	80074a2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d104      	bne.n	800746a <HAL_TIM_PWM_Stop_DMA+0x182>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007468:	e01b      	b.n	80074a2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d104      	bne.n	800747a <HAL_TIM_PWM_Stop_DMA+0x192>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007478:	e013      	b.n	80074a2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b0c      	cmp	r3, #12
 800747e:	d104      	bne.n	800748a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007488:	e00b      	b.n	80074a2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b10      	cmp	r3, #16
 800748e:	d104      	bne.n	800749a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007498:	e003      	b.n	80074a2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40012c00 	.word	0x40012c00
 80074b0:	40014000 	.word	0x40014000
 80074b4:	40014400 	.word	0x40014400

080074b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d020      	beq.n	800751c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01b      	beq.n	800751c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0202 	mvn.w	r2, #2
 80074ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fb3b 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fb2d 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fa fb0d 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d020      	beq.n	8007568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01b      	beq.n	8007568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0204 	mvn.w	r2, #4
 8007538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb15 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 8007554:	e005      	b.n	8007562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb07 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fa fae7 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d020      	beq.n	80075b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01b      	beq.n	80075b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0208 	mvn.w	r2, #8
 8007584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2204      	movs	r2, #4
 800758a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 faef 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 80075a0:	e005      	b.n	80075ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fae1 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fa fac1 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d020      	beq.n	8007600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01b      	beq.n	8007600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0210 	mvn.w	r2, #16
 80075d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2208      	movs	r2, #8
 80075d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fac9 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 80075ec:	e005      	b.n	80075fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fabb 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7fa fa9b 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00c      	beq.n	8007624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0201 	mvn.w	r2, #1
 800761c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fa fa9a 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f81e 	bl	8008684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00c      	beq.n	800766c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f816 	bl	8008698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00c      	beq.n	8007690 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa8b 	bl	8007ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0220 	mvn.w	r2, #32
 80076ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 ffde 	bl	8008670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_TIM_OC_ConfigChannel+0x1e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e066      	b.n	80077a8 <HAL_TIM_OC_ConfigChannel+0xec>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b14      	cmp	r3, #20
 80076e6:	d857      	bhi.n	8007798 <HAL_TIM_OC_ConfigChannel+0xdc>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007745 	.word	0x08007745
 80076f4:	08007799 	.word	0x08007799
 80076f8:	08007799 	.word	0x08007799
 80076fc:	08007799 	.word	0x08007799
 8007700:	08007753 	.word	0x08007753
 8007704:	08007799 	.word	0x08007799
 8007708:	08007799 	.word	0x08007799
 800770c:	08007799 	.word	0x08007799
 8007710:	08007761 	.word	0x08007761
 8007714:	08007799 	.word	0x08007799
 8007718:	08007799 	.word	0x08007799
 800771c:	08007799 	.word	0x08007799
 8007720:	0800776f 	.word	0x0800776f
 8007724:	08007799 	.word	0x08007799
 8007728:	08007799 	.word	0x08007799
 800772c:	08007799 	.word	0x08007799
 8007730:	0800777d 	.word	0x0800777d
 8007734:	08007799 	.word	0x08007799
 8007738:	08007799 	.word	0x08007799
 800773c:	08007799 	.word	0x08007799
 8007740:	0800778b 	.word	0x0800778b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fb74 	bl	8007e38 <TIM_OC1_SetConfig>
      break;
 8007750:	e025      	b.n	800779e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fbe9 	bl	8007f30 <TIM_OC2_SetConfig>
      break;
 800775e:	e01e      	b.n	800779e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fc5c 	bl	8008024 <TIM_OC3_SetConfig>
      break;
 800776c:	e017      	b.n	800779e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fccd 	bl	8008114 <TIM_OC4_SetConfig>
      break;
 800777a:	e010      	b.n	800779e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fd24 	bl	80081d0 <TIM_OC5_SetConfig>
      break;
 8007788:	e009      	b.n	800779e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fd75 	bl	8008280 <TIM_OC6_SetConfig>
      break;
 8007796:	e002      	b.n	800779e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	75fb      	strb	r3, [r7, #23]
      break;
 800779c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e0ff      	b.n	80079ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b14      	cmp	r3, #20
 80077da:	f200 80f0 	bhi.w	80079be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007839 	.word	0x08007839
 80077e8:	080079bf 	.word	0x080079bf
 80077ec:	080079bf 	.word	0x080079bf
 80077f0:	080079bf 	.word	0x080079bf
 80077f4:	08007879 	.word	0x08007879
 80077f8:	080079bf 	.word	0x080079bf
 80077fc:	080079bf 	.word	0x080079bf
 8007800:	080079bf 	.word	0x080079bf
 8007804:	080078bb 	.word	0x080078bb
 8007808:	080079bf 	.word	0x080079bf
 800780c:	080079bf 	.word	0x080079bf
 8007810:	080079bf 	.word	0x080079bf
 8007814:	080078fb 	.word	0x080078fb
 8007818:	080079bf 	.word	0x080079bf
 800781c:	080079bf 	.word	0x080079bf
 8007820:	080079bf 	.word	0x080079bf
 8007824:	0800793d 	.word	0x0800793d
 8007828:	080079bf 	.word	0x080079bf
 800782c:	080079bf 	.word	0x080079bf
 8007830:	080079bf 	.word	0x080079bf
 8007834:	0800797d 	.word	0x0800797d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fafa 	bl	8007e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0208 	orr.w	r2, r2, #8
 8007852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0204 	bic.w	r2, r2, #4
 8007862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6999      	ldr	r1, [r3, #24]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	619a      	str	r2, [r3, #24]
      break;
 8007876:	e0a5      	b.n	80079c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fb56 	bl	8007f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6999      	ldr	r1, [r3, #24]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	021a      	lsls	r2, r3, #8
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	619a      	str	r2, [r3, #24]
      break;
 80078b8:	e084      	b.n	80079c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fbaf 	bl	8008024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0208 	orr.w	r2, r2, #8
 80078d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0204 	bic.w	r2, r2, #4
 80078e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69d9      	ldr	r1, [r3, #28]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	61da      	str	r2, [r3, #28]
      break;
 80078f8:	e064      	b.n	80079c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fc07 	bl	8008114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69d9      	ldr	r1, [r3, #28]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	021a      	lsls	r2, r3, #8
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	61da      	str	r2, [r3, #28]
      break;
 800793a:	e043      	b.n	80079c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fc44 	bl	80081d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0208 	orr.w	r2, r2, #8
 8007956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0204 	bic.w	r2, r2, #4
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800797a:	e023      	b.n	80079c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fc7c 	bl	8008280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	021a      	lsls	r2, r3, #8
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079bc:	e002      	b.n	80079c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	75fb      	strb	r3, [r7, #23]
      break;
 80079c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop

080079d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_ConfigClockSource+0x1c>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e0b6      	b.n	8007b62 <HAL_TIM_ConfigClockSource+0x18a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a30:	d03e      	beq.n	8007ab0 <HAL_TIM_ConfigClockSource+0xd8>
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a36:	f200 8087 	bhi.w	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3e:	f000 8086 	beq.w	8007b4e <HAL_TIM_ConfigClockSource+0x176>
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a46:	d87f      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a48:	2b70      	cmp	r3, #112	; 0x70
 8007a4a:	d01a      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0xaa>
 8007a4c:	2b70      	cmp	r3, #112	; 0x70
 8007a4e:	d87b      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a50:	2b60      	cmp	r3, #96	; 0x60
 8007a52:	d050      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x11e>
 8007a54:	2b60      	cmp	r3, #96	; 0x60
 8007a56:	d877      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a58:	2b50      	cmp	r3, #80	; 0x50
 8007a5a:	d03c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xfe>
 8007a5c:	2b50      	cmp	r3, #80	; 0x50
 8007a5e:	d873      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d058      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x13e>
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d86f      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a68:	2b30      	cmp	r3, #48	; 0x30
 8007a6a:	d064      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15e>
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d86b      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d060      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15e>
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d867      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d05c      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15e>
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d05a      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15e>
 8007a80:	e062      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a92:	f000 fcc9 	bl	8008428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	609a      	str	r2, [r3, #8]
      break;
 8007aae:	e04f      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ac0:	f000 fcb2 	bl	8008428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ad2:	609a      	str	r2, [r3, #8]
      break;
 8007ad4:	e03c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f000 fc26 	bl	8008334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2150      	movs	r1, #80	; 0x50
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fc7f 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 8007af4:	e02c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b02:	461a      	mov	r2, r3
 8007b04:	f000 fc45 	bl	8008392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2160      	movs	r1, #96	; 0x60
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fc6f 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 8007b14:	e01c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 fc06 	bl	8008334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2140      	movs	r1, #64	; 0x40
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fc5f 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 8007b34:	e00c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f000 fc56 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 8007b46:	e003      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e000      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d107      	bne.n	8007bf6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf4:	e02a      	b.n	8007c4c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d107      	bne.n	8007c10 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2202      	movs	r2, #2
 8007c04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c0e:	e01d      	b.n	8007c4c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d107      	bne.n	8007c2a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c28:	e010      	b.n	8007c4c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d107      	bne.n	8007c44 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2208      	movs	r2, #8
 8007c38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c42:	e003      	b.n	8007c4c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ffb4 	bl	8007bba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	771a      	strb	r2, [r3, #28]
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d10b      	bne.n	8007c90 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d136      	bne.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c8e:	e031      	b.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d10b      	bne.n	8007cb2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d125      	bne.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cb0:	e020      	b.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d10b      	bne.n	8007cd4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d114      	bne.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cd2:	e00f      	b.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d10a      	bne.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7f9 ff1b 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d103      	bne.n	8007d28 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	771a      	strb	r2, [r3, #28]
 8007d26:	e019      	b.n	8007d5c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d103      	bne.n	8007d3a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2202      	movs	r2, #2
 8007d36:	771a      	strb	r2, [r3, #28]
 8007d38:	e010      	b.n	8007d5c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d103      	bne.n	8007d4c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2204      	movs	r2, #4
 8007d48:	771a      	strb	r2, [r3, #28]
 8007d4a:	e007      	b.n	8007d5c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d102      	bne.n	8007d5c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff ff18 	bl	8007b92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	771a      	strb	r2, [r3, #28]
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a2a      	ldr	r2, [pc, #168]	; (8007e2c <TIM_Base_SetConfig+0xbc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_Base_SetConfig+0x20>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d108      	bne.n	8007da2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a21      	ldr	r2, [pc, #132]	; (8007e2c <TIM_Base_SetConfig+0xbc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_Base_SetConfig+0x52>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db0:	d007      	beq.n	8007dc2 <TIM_Base_SetConfig+0x52>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <TIM_Base_SetConfig+0xc0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_Base_SetConfig+0x52>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <TIM_Base_SetConfig+0xc4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d108      	bne.n	8007dd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <TIM_Base_SetConfig+0xbc>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d007      	beq.n	8007e10 <TIM_Base_SetConfig+0xa0>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0b      	ldr	r2, [pc, #44]	; (8007e30 <TIM_Base_SetConfig+0xc0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_Base_SetConfig+0xa0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <TIM_Base_SetConfig+0xc4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d103      	bne.n	8007e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	615a      	str	r2, [r3, #20]
}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40012c00 	.word	0x40012c00
 8007e30:	40014000 	.word	0x40014000
 8007e34:	40014400 	.word	0x40014400

08007e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	f023 0201 	bic.w	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f023 0302 	bic.w	r3, r3, #2
 8007e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <TIM_OC1_SetConfig+0xec>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d007      	beq.n	8007ea8 <TIM_OC1_SetConfig+0x70>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a23      	ldr	r2, [pc, #140]	; (8007f28 <TIM_OC1_SetConfig+0xf0>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d003      	beq.n	8007ea8 <TIM_OC1_SetConfig+0x70>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a22      	ldr	r2, [pc, #136]	; (8007f2c <TIM_OC1_SetConfig+0xf4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d10c      	bne.n	8007ec2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f023 0308 	bic.w	r3, r3, #8
 8007eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f023 0304 	bic.w	r3, r3, #4
 8007ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <TIM_OC1_SetConfig+0xec>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <TIM_OC1_SetConfig+0xa2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <TIM_OC1_SetConfig+0xf0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_OC1_SetConfig+0xa2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <TIM_OC1_SetConfig+0xf4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d111      	bne.n	8007efe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400

08007f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	f023 0210 	bic.w	r2, r3, #16
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	021b      	lsls	r3, r3, #8
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f023 0320 	bic.w	r3, r3, #32
 8007f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a22      	ldr	r2, [pc, #136]	; (8008018 <TIM_OC2_SetConfig+0xe8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d10d      	bne.n	8007fb0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a19      	ldr	r2, [pc, #100]	; (8008018 <TIM_OC2_SetConfig+0xe8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <TIM_OC2_SetConfig+0x98>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a18      	ldr	r2, [pc, #96]	; (800801c <TIM_OC2_SetConfig+0xec>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_OC2_SetConfig+0x98>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a17      	ldr	r2, [pc, #92]	; (8008020 <TIM_OC2_SetConfig+0xf0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d113      	bne.n	8007ff0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	621a      	str	r2, [r3, #32]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40012c00 	.word	0x40012c00
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400

08008024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	021b      	lsls	r3, r3, #8
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a21      	ldr	r2, [pc, #132]	; (8008108 <TIM_OC3_SetConfig+0xe4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d10d      	bne.n	80080a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800808c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a18      	ldr	r2, [pc, #96]	; (8008108 <TIM_OC3_SetConfig+0xe4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_OC3_SetConfig+0x96>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a17      	ldr	r2, [pc, #92]	; (800810c <TIM_OC3_SetConfig+0xe8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_OC3_SetConfig+0x96>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a16      	ldr	r2, [pc, #88]	; (8008110 <TIM_OC3_SetConfig+0xec>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d113      	bne.n	80080e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	621a      	str	r2, [r3, #32]
}
 80080fc:	bf00      	nop
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	40012c00 	.word	0x40012c00
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400

08008114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a14      	ldr	r2, [pc, #80]	; (80081c4 <TIM_OC4_SetConfig+0xb0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d007      	beq.n	8008188 <TIM_OC4_SetConfig+0x74>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <TIM_OC4_SetConfig+0xb4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d003      	beq.n	8008188 <TIM_OC4_SetConfig+0x74>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a12      	ldr	r2, [pc, #72]	; (80081cc <TIM_OC4_SetConfig+0xb8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d109      	bne.n	800819c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800818e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	019b      	lsls	r3, r3, #6
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	621a      	str	r2, [r3, #32]
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40012c00 	.word	0x40012c00
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400

080081d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <TIM_OC5_SetConfig+0xa4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d007      	beq.n	800823a <TIM_OC5_SetConfig+0x6a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a12      	ldr	r2, [pc, #72]	; (8008278 <TIM_OC5_SetConfig+0xa8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d003      	beq.n	800823a <TIM_OC5_SetConfig+0x6a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a11      	ldr	r2, [pc, #68]	; (800827c <TIM_OC5_SetConfig+0xac>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d109      	bne.n	800824e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008240:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	621a      	str	r2, [r3, #32]
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40012c00 	.word	0x40012c00
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400

08008280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	051b      	lsls	r3, r3, #20
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a14      	ldr	r2, [pc, #80]	; (8008328 <TIM_OC6_SetConfig+0xa8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d007      	beq.n	80082ec <TIM_OC6_SetConfig+0x6c>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <TIM_OC6_SetConfig+0xac>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_OC6_SetConfig+0x6c>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a12      	ldr	r2, [pc, #72]	; (8008330 <TIM_OC6_SetConfig+0xb0>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d109      	bne.n	8008300 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	029b      	lsls	r3, r3, #10
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	621a      	str	r2, [r3, #32]
}
 800831a:	bf00      	nop
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40012c00 	.word	0x40012c00
 800832c:	40014000 	.word	0x40014000
 8008330:	40014400 	.word	0x40014400

08008334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f023 030a 	bic.w	r3, r3, #10
 8008370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008392:	b480      	push	{r7}
 8008394:	b087      	sub	sp, #28
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f023 0210 	bic.w	r2, r3, #16
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	031b      	lsls	r3, r3, #12
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	f043 0307 	orr.w	r3, r3, #7
 8008414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	609a      	str	r2, [r3, #8]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	021a      	lsls	r2, r3, #8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	431a      	orrs	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4313      	orrs	r3, r2
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	609a      	str	r2, [r3, #8]
}
 800845c:	bf00      	nop
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f003 031f 	and.w	r3, r3, #31
 800847a:	2201      	movs	r2, #1
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1a      	ldr	r2, [r3, #32]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	43db      	mvns	r3, r3
 800848a:	401a      	ands	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1a      	ldr	r2, [r3, #32]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	fa01 f303 	lsl.w	r3, r1, r3
 80084a0:	431a      	orrs	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e04f      	b.n	800856c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a21      	ldr	r2, [pc, #132]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d108      	bne.n	8008508 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a14      	ldr	r2, [pc, #80]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d009      	beq.n	8008540 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008534:	d004      	beq.n	8008540 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a10      	ldr	r2, [pc, #64]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10c      	bne.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	4313      	orrs	r3, r2
 8008550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40014000 	.word	0x40014000

08008580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008598:	2302      	movs	r3, #2
 800859a:	e060      	b.n	800865e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a14      	ldr	r2, [pc, #80]	; (800866c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d115      	bne.n	800864c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	051b      	lsls	r3, r3, #20
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40012c00 	.word	0x40012c00

08008670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e040      	b.n	8008740 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7f9 fc3c 	bl	8001f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2224      	movs	r2, #36	; 0x24
 80086d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fade 	bl	8008cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f8af 	bl	800885c <UART_SetConfig>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e01b      	b.n	8008740 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fb5d 	bl	8008df8 <UART_CheckIdleState>
 800873e:	4603      	mov	r3, r0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08a      	sub	sp, #40	; 0x28
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	4613      	mov	r3, r2
 8008756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875c:	2b20      	cmp	r3, #32
 800875e:	d178      	bne.n	8008852 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <HAL_UART_Transmit+0x24>
 8008766:	88fb      	ldrh	r3, [r7, #6]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e071      	b.n	8008854 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2221      	movs	r2, #33	; 0x21
 800877c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800877e:	f7f9 fd7f 	bl	8002280 <HAL_GetTick>
 8008782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	88fa      	ldrh	r2, [r7, #6]
 8008788:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879c:	d108      	bne.n	80087b0 <HAL_UART_Transmit+0x68>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	e003      	b.n	80087b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087b8:	e030      	b.n	800881c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2200      	movs	r2, #0
 80087c2:	2180      	movs	r1, #128	; 0x80
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fbbf 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d004      	beq.n	80087da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e03c      	b.n	8008854 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10b      	bne.n	80087f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	881a      	ldrh	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ec:	b292      	uxth	r2, r2
 80087ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	3302      	adds	r3, #2
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	e008      	b.n	800880a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	b292      	uxth	r2, r2
 8008802:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	3301      	adds	r3, #1
 8008808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1c8      	bne.n	80087ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	2140      	movs	r1, #64	; 0x40
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 fb88 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e005      	b.n	8008854 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2220      	movs	r2, #32
 800884c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800885c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008860:	b08a      	sub	sp, #40	; 0x28
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	431a      	orrs	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	4313      	orrs	r3, r2
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4bb4      	ldr	r3, [pc, #720]	; (8008b5c <UART_SetConfig+0x300>)
 800888c:	4013      	ands	r3, r2
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008894:	430b      	orrs	r3, r1
 8008896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4aa9      	ldr	r2, [pc, #676]	; (8008b60 <UART_SetConfig+0x304>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c4:	4313      	orrs	r3, r2
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d8:	430a      	orrs	r2, r1
 80088da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4aa0      	ldr	r2, [pc, #640]	; (8008b64 <UART_SetConfig+0x308>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d126      	bne.n	8008934 <UART_SetConfig+0xd8>
 80088e6:	4ba0      	ldr	r3, [pc, #640]	; (8008b68 <UART_SetConfig+0x30c>)
 80088e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d81b      	bhi.n	800892c <UART_SetConfig+0xd0>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0xa0>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	0800890d 	.word	0x0800890d
 8008900:	0800891d 	.word	0x0800891d
 8008904:	08008915 	.word	0x08008915
 8008908:	08008925 	.word	0x08008925
 800890c:	2301      	movs	r3, #1
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008912:	e080      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008914:	2302      	movs	r3, #2
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800891a:	e07c      	b.n	8008a16 <UART_SetConfig+0x1ba>
 800891c:	2304      	movs	r3, #4
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008922:	e078      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008924:	2308      	movs	r3, #8
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892a:	e074      	b.n	8008a16 <UART_SetConfig+0x1ba>
 800892c:	2310      	movs	r3, #16
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008932:	e070      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a8c      	ldr	r2, [pc, #560]	; (8008b6c <UART_SetConfig+0x310>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d138      	bne.n	80089b0 <UART_SetConfig+0x154>
 800893e:	4b8a      	ldr	r3, [pc, #552]	; (8008b68 <UART_SetConfig+0x30c>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	f003 030c 	and.w	r3, r3, #12
 8008948:	2b0c      	cmp	r3, #12
 800894a:	d82d      	bhi.n	80089a8 <UART_SetConfig+0x14c>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0xf8>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008989 	.word	0x08008989
 8008958:	080089a9 	.word	0x080089a9
 800895c:	080089a9 	.word	0x080089a9
 8008960:	080089a9 	.word	0x080089a9
 8008964:	08008999 	.word	0x08008999
 8008968:	080089a9 	.word	0x080089a9
 800896c:	080089a9 	.word	0x080089a9
 8008970:	080089a9 	.word	0x080089a9
 8008974:	08008991 	.word	0x08008991
 8008978:	080089a9 	.word	0x080089a9
 800897c:	080089a9 	.word	0x080089a9
 8008980:	080089a9 	.word	0x080089a9
 8008984:	080089a1 	.word	0x080089a1
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800898e:	e042      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008990:	2302      	movs	r3, #2
 8008992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008996:	e03e      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008998:	2304      	movs	r3, #4
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899e:	e03a      	b.n	8008a16 <UART_SetConfig+0x1ba>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e036      	b.n	8008a16 <UART_SetConfig+0x1ba>
 80089a8:	2310      	movs	r3, #16
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e032      	b.n	8008a16 <UART_SetConfig+0x1ba>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a6a      	ldr	r2, [pc, #424]	; (8008b60 <UART_SetConfig+0x304>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d12a      	bne.n	8008a10 <UART_SetConfig+0x1b4>
 80089ba:	4b6b      	ldr	r3, [pc, #428]	; (8008b68 <UART_SetConfig+0x30c>)
 80089bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c8:	d01a      	beq.n	8008a00 <UART_SetConfig+0x1a4>
 80089ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ce:	d81b      	bhi.n	8008a08 <UART_SetConfig+0x1ac>
 80089d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d4:	d00c      	beq.n	80089f0 <UART_SetConfig+0x194>
 80089d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089da:	d815      	bhi.n	8008a08 <UART_SetConfig+0x1ac>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <UART_SetConfig+0x18c>
 80089e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e4:	d008      	beq.n	80089f8 <UART_SetConfig+0x19c>
 80089e6:	e00f      	b.n	8008a08 <UART_SetConfig+0x1ac>
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ee:	e012      	b.n	8008a16 <UART_SetConfig+0x1ba>
 80089f0:	2302      	movs	r3, #2
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089f6:	e00e      	b.n	8008a16 <UART_SetConfig+0x1ba>
 80089f8:	2304      	movs	r3, #4
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089fe:	e00a      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008a00:	2308      	movs	r3, #8
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a06:	e006      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008a08:	2310      	movs	r3, #16
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0e:	e002      	b.n	8008a16 <UART_SetConfig+0x1ba>
 8008a10:	2310      	movs	r3, #16
 8008a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a51      	ldr	r2, [pc, #324]	; (8008b60 <UART_SetConfig+0x304>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d17a      	bne.n	8008b16 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d824      	bhi.n	8008a72 <UART_SetConfig+0x216>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <UART_SetConfig+0x1d4>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a55 	.word	0x08008a55
 8008a34:	08008a73 	.word	0x08008a73
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a73 	.word	0x08008a73
 8008a40:	08008a63 	.word	0x08008a63
 8008a44:	08008a73 	.word	0x08008a73
 8008a48:	08008a73 	.word	0x08008a73
 8008a4c:	08008a73 	.word	0x08008a73
 8008a50:	08008a6b 	.word	0x08008a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a54:	f7fd fd68 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8008a58:	61f8      	str	r0, [r7, #28]
        break;
 8008a5a:	e010      	b.n	8008a7e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a5c:	4b44      	ldr	r3, [pc, #272]	; (8008b70 <UART_SetConfig+0x314>)
 8008a5e:	61fb      	str	r3, [r7, #28]
        break;
 8008a60:	e00d      	b.n	8008a7e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a62:	f7fd fcc9 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8008a66:	61f8      	str	r0, [r7, #28]
        break;
 8008a68:	e009      	b.n	8008a7e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6e:	61fb      	str	r3, [r7, #28]
        break;
 8008a70:	e005      	b.n	8008a7e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8107 	beq.w	8008c94 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4413      	add	r3, r2
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d305      	bcc.n	8008aa2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d903      	bls.n	8008aaa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008aa8:	e0f4      	b.n	8008c94 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2200      	movs	r2, #0
 8008aae:	461c      	mov	r4, r3
 8008ab0:	4615      	mov	r5, r2
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	f04f 0300 	mov.w	r3, #0
 8008aba:	022b      	lsls	r3, r5, #8
 8008abc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ac0:	0222      	lsls	r2, r4, #8
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	6849      	ldr	r1, [r1, #4]
 8008ac6:	0849      	lsrs	r1, r1, #1
 8008ac8:	2000      	movs	r0, #0
 8008aca:	4688      	mov	r8, r1
 8008acc:	4681      	mov	r9, r0
 8008ace:	eb12 0a08 	adds.w	sl, r2, r8
 8008ad2:	eb43 0b09 	adc.w	fp, r3, r9
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae4:	4650      	mov	r0, sl
 8008ae6:	4659      	mov	r1, fp
 8008ae8:	f7f8 f8b8 	bl	8000c5c <__aeabi_uldivmod>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4613      	mov	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008afa:	d308      	bcc.n	8008b0e <UART_SetConfig+0x2b2>
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b02:	d204      	bcs.n	8008b0e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	e0c2      	b.n	8008c94 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b14:	e0be      	b.n	8008c94 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b1e:	d16a      	bne.n	8008bf6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d834      	bhi.n	8008b92 <UART_SetConfig+0x336>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <UART_SetConfig+0x2d4>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b55 	.word	0x08008b55
 8008b34:	08008b75 	.word	0x08008b75
 8008b38:	08008b7d 	.word	0x08008b7d
 8008b3c:	08008b93 	.word	0x08008b93
 8008b40:	08008b83 	.word	0x08008b83
 8008b44:	08008b93 	.word	0x08008b93
 8008b48:	08008b93 	.word	0x08008b93
 8008b4c:	08008b93 	.word	0x08008b93
 8008b50:	08008b8b 	.word	0x08008b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b54:	f7fd fce8 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8008b58:	61f8      	str	r0, [r7, #28]
        break;
 8008b5a:	e020      	b.n	8008b9e <UART_SetConfig+0x342>
 8008b5c:	efff69f3 	.word	0xefff69f3
 8008b60:	40008000 	.word	0x40008000
 8008b64:	40013800 	.word	0x40013800
 8008b68:	40021000 	.word	0x40021000
 8008b6c:	40004400 	.word	0x40004400
 8008b70:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b74:	f7fd fcee 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 8008b78:	61f8      	str	r0, [r7, #28]
        break;
 8008b7a:	e010      	b.n	8008b9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b7c:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <UART_SetConfig+0x454>)
 8008b7e:	61fb      	str	r3, [r7, #28]
        break;
 8008b80:	e00d      	b.n	8008b9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b82:	f7fd fc39 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8008b86:	61f8      	str	r0, [r7, #28]
        break;
 8008b88:	e009      	b.n	8008b9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b8e:	61fb      	str	r3, [r7, #28]
        break;
 8008b90:	e005      	b.n	8008b9e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d077      	beq.n	8008c94 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	005a      	lsls	r2, r3, #1
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	441a      	add	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b0f      	cmp	r3, #15
 8008bbe:	d916      	bls.n	8008bee <UART_SetConfig+0x392>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc6:	d212      	bcs.n	8008bee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f023 030f 	bic.w	r3, r3, #15
 8008bd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	8afb      	ldrh	r3, [r7, #22]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	8afa      	ldrh	r2, [r7, #22]
 8008bea:	60da      	str	r2, [r3, #12]
 8008bec:	e052      	b.n	8008c94 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bf4:	e04e      	b.n	8008c94 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	d827      	bhi.n	8008c4e <UART_SetConfig+0x3f2>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0x3a8>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c39 	.word	0x08008c39
 8008c10:	08008c4f 	.word	0x08008c4f
 8008c14:	08008c3f 	.word	0x08008c3f
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c4f 	.word	0x08008c4f
 8008c20:	08008c4f 	.word	0x08008c4f
 8008c24:	08008c47 	.word	0x08008c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c28:	f7fd fc7e 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8008c2c:	61f8      	str	r0, [r7, #28]
        break;
 8008c2e:	e014      	b.n	8008c5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c30:	f7fd fc90 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 8008c34:	61f8      	str	r0, [r7, #28]
        break;
 8008c36:	e010      	b.n	8008c5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c38:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <UART_SetConfig+0x454>)
 8008c3a:	61fb      	str	r3, [r7, #28]
        break;
 8008c3c:	e00d      	b.n	8008c5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3e:	f7fd fbdb 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8008c42:	61f8      	str	r0, [r7, #28]
        break;
 8008c44:	e009      	b.n	8008c5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4a:	61fb      	str	r3, [r7, #28]
        break;
 8008c4c:	e005      	b.n	8008c5a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c58:	bf00      	nop
    }

    if (pclk != 0U)
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d019      	beq.n	8008c94 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	085a      	lsrs	r2, r3, #1
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	441a      	add	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d909      	bls.n	8008c8e <UART_SetConfig+0x432>
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c80:	d205      	bcs.n	8008c8e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60da      	str	r2, [r3, #12]
 8008c8c:	e002      	b.n	8008c94 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ca0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3728      	adds	r7, #40	; 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cae:	bf00      	nop
 8008cb0:	00f42400 	.word	0x00f42400

08008cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01a      	beq.n	8008dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db2:	d10a      	bne.n	8008dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b098      	sub	sp, #96	; 0x60
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e08:	f7f9 fa3a 	bl	8002280 <HAL_GetTick>
 8008e0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d12e      	bne.n	8008e7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e24:	2200      	movs	r2, #0
 8008e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f88c 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d021      	beq.n	8008e7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e54:	647b      	str	r3, [r7, #68]	; 0x44
 8008e56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e6      	bne.n	8008e36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e062      	b.n	8008f40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d149      	bne.n	8008f1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e90:	2200      	movs	r2, #0
 8008e92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f856 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d03c      	beq.n	8008f1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e6      	bne.n	8008ea2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0301 	bic.w	r3, r3, #1
 8008eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ef4:	61fa      	str	r2, [r7, #28]
 8008ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	69b9      	ldr	r1, [r7, #24]
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	e841 2300 	strex	r3, r2, [r1]
 8008f00:	617b      	str	r3, [r7, #20]
   return(result);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e5      	bne.n	8008ed4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e011      	b.n	8008f40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3758      	adds	r7, #88	; 0x58
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f58:	e049      	b.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d045      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f62:	f7f9 f98d 	bl	8002280 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d302      	bcc.n	8008f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e048      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0304 	and.w	r3, r3, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d031      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d110      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f838 	bl	8009016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2208      	movs	r2, #8
 8008faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e029      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc8:	d111      	bne.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f81e 	bl	8009016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e00f      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	bf0c      	ite	eq
 8008ffe:	2301      	moveq	r3, #1
 8009000:	2300      	movne	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d0a6      	beq.n	8008f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009016:	b480      	push	{r7}
 8009018:	b095      	sub	sp, #84	; 0x54
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903c:	643b      	str	r3, [r7, #64]	; 0x40
 800903e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e6      	bne.n	800901e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3308      	adds	r3, #8
 8009056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	f023 0301 	bic.w	r3, r3, #1
 8009066:	64bb      	str	r3, [r7, #72]	; 0x48
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e5      	bne.n	8009050 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009088:	2b01      	cmp	r3, #1
 800908a:	d118      	bne.n	80090be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	60bb      	str	r3, [r7, #8]
   return(result);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f023 0310 	bic.w	r3, r3, #16
 80090a0:	647b      	str	r3, [r7, #68]	; 0x44
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090aa:	61bb      	str	r3, [r7, #24]
 80090ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	613b      	str	r3, [r7, #16]
   return(result);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e6      	bne.n	800908c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80090d2:	bf00      	nop
 80090d4:	3754      	adds	r7, #84	; 0x54
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
	...

080090e0 <siprintf>:
 80090e0:	b40e      	push	{r1, r2, r3}
 80090e2:	b500      	push	{lr}
 80090e4:	b09c      	sub	sp, #112	; 0x70
 80090e6:	ab1d      	add	r3, sp, #116	; 0x74
 80090e8:	9002      	str	r0, [sp, #8]
 80090ea:	9006      	str	r0, [sp, #24]
 80090ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090f0:	4809      	ldr	r0, [pc, #36]	; (8009118 <siprintf+0x38>)
 80090f2:	9107      	str	r1, [sp, #28]
 80090f4:	9104      	str	r1, [sp, #16]
 80090f6:	4909      	ldr	r1, [pc, #36]	; (800911c <siprintf+0x3c>)
 80090f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fc:	9105      	str	r1, [sp, #20]
 80090fe:	6800      	ldr	r0, [r0, #0]
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	a902      	add	r1, sp, #8
 8009104:	f000 f992 	bl	800942c <_svfiprintf_r>
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	b01c      	add	sp, #112	; 0x70
 8009110:	f85d eb04 	ldr.w	lr, [sp], #4
 8009114:	b003      	add	sp, #12
 8009116:	4770      	bx	lr
 8009118:	20000058 	.word	0x20000058
 800911c:	ffff0208 	.word	0xffff0208

08009120 <memset>:
 8009120:	4402      	add	r2, r0
 8009122:	4603      	mov	r3, r0
 8009124:	4293      	cmp	r3, r2
 8009126:	d100      	bne.n	800912a <memset+0xa>
 8009128:	4770      	bx	lr
 800912a:	f803 1b01 	strb.w	r1, [r3], #1
 800912e:	e7f9      	b.n	8009124 <memset+0x4>

08009130 <__errno>:
 8009130:	4b01      	ldr	r3, [pc, #4]	; (8009138 <__errno+0x8>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000058 	.word	0x20000058

0800913c <__libc_init_array>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4d0d      	ldr	r5, [pc, #52]	; (8009174 <__libc_init_array+0x38>)
 8009140:	4c0d      	ldr	r4, [pc, #52]	; (8009178 <__libc_init_array+0x3c>)
 8009142:	1b64      	subs	r4, r4, r5
 8009144:	10a4      	asrs	r4, r4, #2
 8009146:	2600      	movs	r6, #0
 8009148:	42a6      	cmp	r6, r4
 800914a:	d109      	bne.n	8009160 <__libc_init_array+0x24>
 800914c:	4d0b      	ldr	r5, [pc, #44]	; (800917c <__libc_init_array+0x40>)
 800914e:	4c0c      	ldr	r4, [pc, #48]	; (8009180 <__libc_init_array+0x44>)
 8009150:	f001 fd0a 	bl	800ab68 <_init>
 8009154:	1b64      	subs	r4, r4, r5
 8009156:	10a4      	asrs	r4, r4, #2
 8009158:	2600      	movs	r6, #0
 800915a:	42a6      	cmp	r6, r4
 800915c:	d105      	bne.n	800916a <__libc_init_array+0x2e>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	f855 3b04 	ldr.w	r3, [r5], #4
 8009164:	4798      	blx	r3
 8009166:	3601      	adds	r6, #1
 8009168:	e7ee      	b.n	8009148 <__libc_init_array+0xc>
 800916a:	f855 3b04 	ldr.w	r3, [r5], #4
 800916e:	4798      	blx	r3
 8009170:	3601      	adds	r6, #1
 8009172:	e7f2      	b.n	800915a <__libc_init_array+0x1e>
 8009174:	0800aef0 	.word	0x0800aef0
 8009178:	0800aef0 	.word	0x0800aef0
 800917c:	0800aef0 	.word	0x0800aef0
 8009180:	0800aef4 	.word	0x0800aef4

08009184 <__retarget_lock_acquire_recursive>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_release_recursive>:
 8009186:	4770      	bx	lr

08009188 <_free_r>:
 8009188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800918a:	2900      	cmp	r1, #0
 800918c:	d044      	beq.n	8009218 <_free_r+0x90>
 800918e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009192:	9001      	str	r0, [sp, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f1a1 0404 	sub.w	r4, r1, #4
 800919a:	bfb8      	it	lt
 800919c:	18e4      	addlt	r4, r4, r3
 800919e:	f000 f8df 	bl	8009360 <__malloc_lock>
 80091a2:	4a1e      	ldr	r2, [pc, #120]	; (800921c <_free_r+0x94>)
 80091a4:	9801      	ldr	r0, [sp, #4]
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	b933      	cbnz	r3, 80091b8 <_free_r+0x30>
 80091aa:	6063      	str	r3, [r4, #4]
 80091ac:	6014      	str	r4, [r2, #0]
 80091ae:	b003      	add	sp, #12
 80091b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091b4:	f000 b8da 	b.w	800936c <__malloc_unlock>
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	d908      	bls.n	80091ce <_free_r+0x46>
 80091bc:	6825      	ldr	r5, [r4, #0]
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	428b      	cmp	r3, r1
 80091c2:	bf01      	itttt	eq
 80091c4:	6819      	ldreq	r1, [r3, #0]
 80091c6:	685b      	ldreq	r3, [r3, #4]
 80091c8:	1949      	addeq	r1, r1, r5
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	e7ed      	b.n	80091aa <_free_r+0x22>
 80091ce:	461a      	mov	r2, r3
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	b10b      	cbz	r3, 80091d8 <_free_r+0x50>
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d9fa      	bls.n	80091ce <_free_r+0x46>
 80091d8:	6811      	ldr	r1, [r2, #0]
 80091da:	1855      	adds	r5, r2, r1
 80091dc:	42a5      	cmp	r5, r4
 80091de:	d10b      	bne.n	80091f8 <_free_r+0x70>
 80091e0:	6824      	ldr	r4, [r4, #0]
 80091e2:	4421      	add	r1, r4
 80091e4:	1854      	adds	r4, r2, r1
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	6011      	str	r1, [r2, #0]
 80091ea:	d1e0      	bne.n	80091ae <_free_r+0x26>
 80091ec:	681c      	ldr	r4, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	6053      	str	r3, [r2, #4]
 80091f2:	440c      	add	r4, r1
 80091f4:	6014      	str	r4, [r2, #0]
 80091f6:	e7da      	b.n	80091ae <_free_r+0x26>
 80091f8:	d902      	bls.n	8009200 <_free_r+0x78>
 80091fa:	230c      	movs	r3, #12
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	e7d6      	b.n	80091ae <_free_r+0x26>
 8009200:	6825      	ldr	r5, [r4, #0]
 8009202:	1961      	adds	r1, r4, r5
 8009204:	428b      	cmp	r3, r1
 8009206:	bf04      	itt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	6063      	str	r3, [r4, #4]
 800920e:	bf04      	itt	eq
 8009210:	1949      	addeq	r1, r1, r5
 8009212:	6021      	streq	r1, [r4, #0]
 8009214:	6054      	str	r4, [r2, #4]
 8009216:	e7ca      	b.n	80091ae <_free_r+0x26>
 8009218:	b003      	add	sp, #12
 800921a:	bd30      	pop	{r4, r5, pc}
 800921c:	200006dc 	.word	0x200006dc

08009220 <sbrk_aligned>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4e0e      	ldr	r6, [pc, #56]	; (800925c <sbrk_aligned+0x3c>)
 8009224:	460c      	mov	r4, r1
 8009226:	6831      	ldr	r1, [r6, #0]
 8009228:	4605      	mov	r5, r0
 800922a:	b911      	cbnz	r1, 8009232 <sbrk_aligned+0x12>
 800922c:	f000 fba6 	bl	800997c <_sbrk_r>
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	4621      	mov	r1, r4
 8009234:	4628      	mov	r0, r5
 8009236:	f000 fba1 	bl	800997c <_sbrk_r>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d00a      	beq.n	8009254 <sbrk_aligned+0x34>
 800923e:	1cc4      	adds	r4, r0, #3
 8009240:	f024 0403 	bic.w	r4, r4, #3
 8009244:	42a0      	cmp	r0, r4
 8009246:	d007      	beq.n	8009258 <sbrk_aligned+0x38>
 8009248:	1a21      	subs	r1, r4, r0
 800924a:	4628      	mov	r0, r5
 800924c:	f000 fb96 	bl	800997c <_sbrk_r>
 8009250:	3001      	adds	r0, #1
 8009252:	d101      	bne.n	8009258 <sbrk_aligned+0x38>
 8009254:	f04f 34ff 	mov.w	r4, #4294967295
 8009258:	4620      	mov	r0, r4
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	200006e0 	.word	0x200006e0

08009260 <_malloc_r>:
 8009260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009264:	1ccd      	adds	r5, r1, #3
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	2d00      	cmp	r5, #0
 8009274:	4607      	mov	r7, r0
 8009276:	db01      	blt.n	800927c <_malloc_r+0x1c>
 8009278:	42a9      	cmp	r1, r5
 800927a:	d905      	bls.n	8009288 <_malloc_r+0x28>
 800927c:	230c      	movs	r3, #12
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	2600      	movs	r6, #0
 8009282:	4630      	mov	r0, r6
 8009284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009288:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800935c <_malloc_r+0xfc>
 800928c:	f000 f868 	bl	8009360 <__malloc_lock>
 8009290:	f8d8 3000 	ldr.w	r3, [r8]
 8009294:	461c      	mov	r4, r3
 8009296:	bb5c      	cbnz	r4, 80092f0 <_malloc_r+0x90>
 8009298:	4629      	mov	r1, r5
 800929a:	4638      	mov	r0, r7
 800929c:	f7ff ffc0 	bl	8009220 <sbrk_aligned>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	4604      	mov	r4, r0
 80092a4:	d155      	bne.n	8009352 <_malloc_r+0xf2>
 80092a6:	f8d8 4000 	ldr.w	r4, [r8]
 80092aa:	4626      	mov	r6, r4
 80092ac:	2e00      	cmp	r6, #0
 80092ae:	d145      	bne.n	800933c <_malloc_r+0xdc>
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	d048      	beq.n	8009346 <_malloc_r+0xe6>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	4631      	mov	r1, r6
 80092b8:	4638      	mov	r0, r7
 80092ba:	eb04 0903 	add.w	r9, r4, r3
 80092be:	f000 fb5d 	bl	800997c <_sbrk_r>
 80092c2:	4581      	cmp	r9, r0
 80092c4:	d13f      	bne.n	8009346 <_malloc_r+0xe6>
 80092c6:	6821      	ldr	r1, [r4, #0]
 80092c8:	1a6d      	subs	r5, r5, r1
 80092ca:	4629      	mov	r1, r5
 80092cc:	4638      	mov	r0, r7
 80092ce:	f7ff ffa7 	bl	8009220 <sbrk_aligned>
 80092d2:	3001      	adds	r0, #1
 80092d4:	d037      	beq.n	8009346 <_malloc_r+0xe6>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	442b      	add	r3, r5
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	f8d8 3000 	ldr.w	r3, [r8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d038      	beq.n	8009356 <_malloc_r+0xf6>
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	42a2      	cmp	r2, r4
 80092e8:	d12b      	bne.n	8009342 <_malloc_r+0xe2>
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
 80092ee:	e00f      	b.n	8009310 <_malloc_r+0xb0>
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	1b52      	subs	r2, r2, r5
 80092f4:	d41f      	bmi.n	8009336 <_malloc_r+0xd6>
 80092f6:	2a0b      	cmp	r2, #11
 80092f8:	d917      	bls.n	800932a <_malloc_r+0xca>
 80092fa:	1961      	adds	r1, r4, r5
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	6025      	str	r5, [r4, #0]
 8009300:	bf18      	it	ne
 8009302:	6059      	strne	r1, [r3, #4]
 8009304:	6863      	ldr	r3, [r4, #4]
 8009306:	bf08      	it	eq
 8009308:	f8c8 1000 	streq.w	r1, [r8]
 800930c:	5162      	str	r2, [r4, r5]
 800930e:	604b      	str	r3, [r1, #4]
 8009310:	4638      	mov	r0, r7
 8009312:	f104 060b 	add.w	r6, r4, #11
 8009316:	f000 f829 	bl	800936c <__malloc_unlock>
 800931a:	f026 0607 	bic.w	r6, r6, #7
 800931e:	1d23      	adds	r3, r4, #4
 8009320:	1af2      	subs	r2, r6, r3
 8009322:	d0ae      	beq.n	8009282 <_malloc_r+0x22>
 8009324:	1b9b      	subs	r3, r3, r6
 8009326:	50a3      	str	r3, [r4, r2]
 8009328:	e7ab      	b.n	8009282 <_malloc_r+0x22>
 800932a:	42a3      	cmp	r3, r4
 800932c:	6862      	ldr	r2, [r4, #4]
 800932e:	d1dd      	bne.n	80092ec <_malloc_r+0x8c>
 8009330:	f8c8 2000 	str.w	r2, [r8]
 8009334:	e7ec      	b.n	8009310 <_malloc_r+0xb0>
 8009336:	4623      	mov	r3, r4
 8009338:	6864      	ldr	r4, [r4, #4]
 800933a:	e7ac      	b.n	8009296 <_malloc_r+0x36>
 800933c:	4634      	mov	r4, r6
 800933e:	6876      	ldr	r6, [r6, #4]
 8009340:	e7b4      	b.n	80092ac <_malloc_r+0x4c>
 8009342:	4613      	mov	r3, r2
 8009344:	e7cc      	b.n	80092e0 <_malloc_r+0x80>
 8009346:	230c      	movs	r3, #12
 8009348:	603b      	str	r3, [r7, #0]
 800934a:	4638      	mov	r0, r7
 800934c:	f000 f80e 	bl	800936c <__malloc_unlock>
 8009350:	e797      	b.n	8009282 <_malloc_r+0x22>
 8009352:	6025      	str	r5, [r4, #0]
 8009354:	e7dc      	b.n	8009310 <_malloc_r+0xb0>
 8009356:	605b      	str	r3, [r3, #4]
 8009358:	deff      	udf	#255	; 0xff
 800935a:	bf00      	nop
 800935c:	200006dc 	.word	0x200006dc

08009360 <__malloc_lock>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__malloc_lock+0x8>)
 8009362:	f7ff bf0f 	b.w	8009184 <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	200006d8 	.word	0x200006d8

0800936c <__malloc_unlock>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__malloc_unlock+0x8>)
 800936e:	f7ff bf0a 	b.w	8009186 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	200006d8 	.word	0x200006d8

08009378 <__ssputs_r>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	688e      	ldr	r6, [r1, #8]
 800937e:	461f      	mov	r7, r3
 8009380:	42be      	cmp	r6, r7
 8009382:	680b      	ldr	r3, [r1, #0]
 8009384:	4682      	mov	sl, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4690      	mov	r8, r2
 800938a:	d82c      	bhi.n	80093e6 <__ssputs_r+0x6e>
 800938c:	898a      	ldrh	r2, [r1, #12]
 800938e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009392:	d026      	beq.n	80093e2 <__ssputs_r+0x6a>
 8009394:	6965      	ldr	r5, [r4, #20]
 8009396:	6909      	ldr	r1, [r1, #16]
 8009398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800939c:	eba3 0901 	sub.w	r9, r3, r1
 80093a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093a4:	1c7b      	adds	r3, r7, #1
 80093a6:	444b      	add	r3, r9
 80093a8:	106d      	asrs	r5, r5, #1
 80093aa:	429d      	cmp	r5, r3
 80093ac:	bf38      	it	cc
 80093ae:	461d      	movcc	r5, r3
 80093b0:	0553      	lsls	r3, r2, #21
 80093b2:	d527      	bpl.n	8009404 <__ssputs_r+0x8c>
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7ff ff53 	bl	8009260 <_malloc_r>
 80093ba:	4606      	mov	r6, r0
 80093bc:	b360      	cbz	r0, 8009418 <__ssputs_r+0xa0>
 80093be:	6921      	ldr	r1, [r4, #16]
 80093c0:	464a      	mov	r2, r9
 80093c2:	f000 faeb 	bl	800999c <memcpy>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	6126      	str	r6, [r4, #16]
 80093d4:	6165      	str	r5, [r4, #20]
 80093d6:	444e      	add	r6, r9
 80093d8:	eba5 0509 	sub.w	r5, r5, r9
 80093dc:	6026      	str	r6, [r4, #0]
 80093de:	60a5      	str	r5, [r4, #8]
 80093e0:	463e      	mov	r6, r7
 80093e2:	42be      	cmp	r6, r7
 80093e4:	d900      	bls.n	80093e8 <__ssputs_r+0x70>
 80093e6:	463e      	mov	r6, r7
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	4632      	mov	r2, r6
 80093ec:	4641      	mov	r1, r8
 80093ee:	f000 faab 	bl	8009948 <memmove>
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	1b9b      	subs	r3, r3, r6
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	4433      	add	r3, r6
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	2000      	movs	r0, #0
 8009400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009404:	462a      	mov	r2, r5
 8009406:	f000 fad7 	bl	80099b8 <_realloc_r>
 800940a:	4606      	mov	r6, r0
 800940c:	2800      	cmp	r0, #0
 800940e:	d1e0      	bne.n	80093d2 <__ssputs_r+0x5a>
 8009410:	6921      	ldr	r1, [r4, #16]
 8009412:	4650      	mov	r0, sl
 8009414:	f7ff feb8 	bl	8009188 <_free_r>
 8009418:	230c      	movs	r3, #12
 800941a:	f8ca 3000 	str.w	r3, [sl]
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	f04f 30ff 	mov.w	r0, #4294967295
 800942a:	e7e9      	b.n	8009400 <__ssputs_r+0x88>

0800942c <_svfiprintf_r>:
 800942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	4698      	mov	r8, r3
 8009432:	898b      	ldrh	r3, [r1, #12]
 8009434:	061b      	lsls	r3, r3, #24
 8009436:	b09d      	sub	sp, #116	; 0x74
 8009438:	4607      	mov	r7, r0
 800943a:	460d      	mov	r5, r1
 800943c:	4614      	mov	r4, r2
 800943e:	d50e      	bpl.n	800945e <_svfiprintf_r+0x32>
 8009440:	690b      	ldr	r3, [r1, #16]
 8009442:	b963      	cbnz	r3, 800945e <_svfiprintf_r+0x32>
 8009444:	2140      	movs	r1, #64	; 0x40
 8009446:	f7ff ff0b 	bl	8009260 <_malloc_r>
 800944a:	6028      	str	r0, [r5, #0]
 800944c:	6128      	str	r0, [r5, #16]
 800944e:	b920      	cbnz	r0, 800945a <_svfiprintf_r+0x2e>
 8009450:	230c      	movs	r3, #12
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	e0d0      	b.n	80095fc <_svfiprintf_r+0x1d0>
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	616b      	str	r3, [r5, #20]
 800945e:	2300      	movs	r3, #0
 8009460:	9309      	str	r3, [sp, #36]	; 0x24
 8009462:	2320      	movs	r3, #32
 8009464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009468:	f8cd 800c 	str.w	r8, [sp, #12]
 800946c:	2330      	movs	r3, #48	; 0x30
 800946e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009614 <_svfiprintf_r+0x1e8>
 8009472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009476:	f04f 0901 	mov.w	r9, #1
 800947a:	4623      	mov	r3, r4
 800947c:	469a      	mov	sl, r3
 800947e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009482:	b10a      	cbz	r2, 8009488 <_svfiprintf_r+0x5c>
 8009484:	2a25      	cmp	r2, #37	; 0x25
 8009486:	d1f9      	bne.n	800947c <_svfiprintf_r+0x50>
 8009488:	ebba 0b04 	subs.w	fp, sl, r4
 800948c:	d00b      	beq.n	80094a6 <_svfiprintf_r+0x7a>
 800948e:	465b      	mov	r3, fp
 8009490:	4622      	mov	r2, r4
 8009492:	4629      	mov	r1, r5
 8009494:	4638      	mov	r0, r7
 8009496:	f7ff ff6f 	bl	8009378 <__ssputs_r>
 800949a:	3001      	adds	r0, #1
 800949c:	f000 80a9 	beq.w	80095f2 <_svfiprintf_r+0x1c6>
 80094a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a2:	445a      	add	r2, fp
 80094a4:	9209      	str	r2, [sp, #36]	; 0x24
 80094a6:	f89a 3000 	ldrb.w	r3, [sl]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80a1 	beq.w	80095f2 <_svfiprintf_r+0x1c6>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f04f 32ff 	mov.w	r2, #4294967295
 80094b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ba:	f10a 0a01 	add.w	sl, sl, #1
 80094be:	9304      	str	r3, [sp, #16]
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c6:	931a      	str	r3, [sp, #104]	; 0x68
 80094c8:	4654      	mov	r4, sl
 80094ca:	2205      	movs	r2, #5
 80094cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d0:	4850      	ldr	r0, [pc, #320]	; (8009614 <_svfiprintf_r+0x1e8>)
 80094d2:	f7f6 fe85 	bl	80001e0 <memchr>
 80094d6:	9a04      	ldr	r2, [sp, #16]
 80094d8:	b9d8      	cbnz	r0, 8009512 <_svfiprintf_r+0xe6>
 80094da:	06d0      	lsls	r0, r2, #27
 80094dc:	bf44      	itt	mi
 80094de:	2320      	movmi	r3, #32
 80094e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e4:	0711      	lsls	r1, r2, #28
 80094e6:	bf44      	itt	mi
 80094e8:	232b      	movmi	r3, #43	; 0x2b
 80094ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ee:	f89a 3000 	ldrb.w	r3, [sl]
 80094f2:	2b2a      	cmp	r3, #42	; 0x2a
 80094f4:	d015      	beq.n	8009522 <_svfiprintf_r+0xf6>
 80094f6:	9a07      	ldr	r2, [sp, #28]
 80094f8:	4654      	mov	r4, sl
 80094fa:	2000      	movs	r0, #0
 80094fc:	f04f 0c0a 	mov.w	ip, #10
 8009500:	4621      	mov	r1, r4
 8009502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009506:	3b30      	subs	r3, #48	; 0x30
 8009508:	2b09      	cmp	r3, #9
 800950a:	d94d      	bls.n	80095a8 <_svfiprintf_r+0x17c>
 800950c:	b1b0      	cbz	r0, 800953c <_svfiprintf_r+0x110>
 800950e:	9207      	str	r2, [sp, #28]
 8009510:	e014      	b.n	800953c <_svfiprintf_r+0x110>
 8009512:	eba0 0308 	sub.w	r3, r0, r8
 8009516:	fa09 f303 	lsl.w	r3, r9, r3
 800951a:	4313      	orrs	r3, r2
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	46a2      	mov	sl, r4
 8009520:	e7d2      	b.n	80094c8 <_svfiprintf_r+0x9c>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	1d19      	adds	r1, r3, #4
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	9103      	str	r1, [sp, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	bfbb      	ittet	lt
 800952e:	425b      	neglt	r3, r3
 8009530:	f042 0202 	orrlt.w	r2, r2, #2
 8009534:	9307      	strge	r3, [sp, #28]
 8009536:	9307      	strlt	r3, [sp, #28]
 8009538:	bfb8      	it	lt
 800953a:	9204      	strlt	r2, [sp, #16]
 800953c:	7823      	ldrb	r3, [r4, #0]
 800953e:	2b2e      	cmp	r3, #46	; 0x2e
 8009540:	d10c      	bne.n	800955c <_svfiprintf_r+0x130>
 8009542:	7863      	ldrb	r3, [r4, #1]
 8009544:	2b2a      	cmp	r3, #42	; 0x2a
 8009546:	d134      	bne.n	80095b2 <_svfiprintf_r+0x186>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9203      	str	r2, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfb8      	it	lt
 8009554:	f04f 33ff 	movlt.w	r3, #4294967295
 8009558:	3402      	adds	r4, #2
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009624 <_svfiprintf_r+0x1f8>
 8009560:	7821      	ldrb	r1, [r4, #0]
 8009562:	2203      	movs	r2, #3
 8009564:	4650      	mov	r0, sl
 8009566:	f7f6 fe3b 	bl	80001e0 <memchr>
 800956a:	b138      	cbz	r0, 800957c <_svfiprintf_r+0x150>
 800956c:	9b04      	ldr	r3, [sp, #16]
 800956e:	eba0 000a 	sub.w	r0, r0, sl
 8009572:	2240      	movs	r2, #64	; 0x40
 8009574:	4082      	lsls	r2, r0
 8009576:	4313      	orrs	r3, r2
 8009578:	3401      	adds	r4, #1
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009580:	4825      	ldr	r0, [pc, #148]	; (8009618 <_svfiprintf_r+0x1ec>)
 8009582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009586:	2206      	movs	r2, #6
 8009588:	f7f6 fe2a 	bl	80001e0 <memchr>
 800958c:	2800      	cmp	r0, #0
 800958e:	d038      	beq.n	8009602 <_svfiprintf_r+0x1d6>
 8009590:	4b22      	ldr	r3, [pc, #136]	; (800961c <_svfiprintf_r+0x1f0>)
 8009592:	bb1b      	cbnz	r3, 80095dc <_svfiprintf_r+0x1b0>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	3307      	adds	r3, #7
 8009598:	f023 0307 	bic.w	r3, r3, #7
 800959c:	3308      	adds	r3, #8
 800959e:	9303      	str	r3, [sp, #12]
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	4433      	add	r3, r6
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
 80095a6:	e768      	b.n	800947a <_svfiprintf_r+0x4e>
 80095a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ac:	460c      	mov	r4, r1
 80095ae:	2001      	movs	r0, #1
 80095b0:	e7a6      	b.n	8009500 <_svfiprintf_r+0xd4>
 80095b2:	2300      	movs	r3, #0
 80095b4:	3401      	adds	r4, #1
 80095b6:	9305      	str	r3, [sp, #20]
 80095b8:	4619      	mov	r1, r3
 80095ba:	f04f 0c0a 	mov.w	ip, #10
 80095be:	4620      	mov	r0, r4
 80095c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c4:	3a30      	subs	r2, #48	; 0x30
 80095c6:	2a09      	cmp	r2, #9
 80095c8:	d903      	bls.n	80095d2 <_svfiprintf_r+0x1a6>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0c6      	beq.n	800955c <_svfiprintf_r+0x130>
 80095ce:	9105      	str	r1, [sp, #20]
 80095d0:	e7c4      	b.n	800955c <_svfiprintf_r+0x130>
 80095d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d6:	4604      	mov	r4, r0
 80095d8:	2301      	movs	r3, #1
 80095da:	e7f0      	b.n	80095be <_svfiprintf_r+0x192>
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	462a      	mov	r2, r5
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <_svfiprintf_r+0x1f4>)
 80095e4:	a904      	add	r1, sp, #16
 80095e6:	4638      	mov	r0, r7
 80095e8:	f3af 8000 	nop.w
 80095ec:	1c42      	adds	r2, r0, #1
 80095ee:	4606      	mov	r6, r0
 80095f0:	d1d6      	bne.n	80095a0 <_svfiprintf_r+0x174>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	065b      	lsls	r3, r3, #25
 80095f6:	f53f af2d 	bmi.w	8009454 <_svfiprintf_r+0x28>
 80095fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095fc:	b01d      	add	sp, #116	; 0x74
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	ab03      	add	r3, sp, #12
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	462a      	mov	r2, r5
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <_svfiprintf_r+0x1f4>)
 800960a:	a904      	add	r1, sp, #16
 800960c:	4638      	mov	r0, r7
 800960e:	f000 f879 	bl	8009704 <_printf_i>
 8009612:	e7eb      	b.n	80095ec <_svfiprintf_r+0x1c0>
 8009614:	0800acdc 	.word	0x0800acdc
 8009618:	0800ace6 	.word	0x0800ace6
 800961c:	00000000 	.word	0x00000000
 8009620:	08009379 	.word	0x08009379
 8009624:	0800ace2 	.word	0x0800ace2

08009628 <_printf_common>:
 8009628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962c:	4616      	mov	r6, r2
 800962e:	4699      	mov	r9, r3
 8009630:	688a      	ldr	r2, [r1, #8]
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009638:	4293      	cmp	r3, r2
 800963a:	bfb8      	it	lt
 800963c:	4613      	movlt	r3, r2
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009644:	4607      	mov	r7, r0
 8009646:	460c      	mov	r4, r1
 8009648:	b10a      	cbz	r2, 800964e <_printf_common+0x26>
 800964a:	3301      	adds	r3, #1
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	0699      	lsls	r1, r3, #26
 8009652:	bf42      	ittt	mi
 8009654:	6833      	ldrmi	r3, [r6, #0]
 8009656:	3302      	addmi	r3, #2
 8009658:	6033      	strmi	r3, [r6, #0]
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	f015 0506 	ands.w	r5, r5, #6
 8009660:	d106      	bne.n	8009670 <_printf_common+0x48>
 8009662:	f104 0a19 	add.w	sl, r4, #25
 8009666:	68e3      	ldr	r3, [r4, #12]
 8009668:	6832      	ldr	r2, [r6, #0]
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	42ab      	cmp	r3, r5
 800966e:	dc26      	bgt.n	80096be <_printf_common+0x96>
 8009670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009674:	1e13      	subs	r3, r2, #0
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	bf18      	it	ne
 800967a:	2301      	movne	r3, #1
 800967c:	0692      	lsls	r2, r2, #26
 800967e:	d42b      	bmi.n	80096d8 <_printf_common+0xb0>
 8009680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009684:	4649      	mov	r1, r9
 8009686:	4638      	mov	r0, r7
 8009688:	47c0      	blx	r8
 800968a:	3001      	adds	r0, #1
 800968c:	d01e      	beq.n	80096cc <_printf_common+0xa4>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	6922      	ldr	r2, [r4, #16]
 8009692:	f003 0306 	and.w	r3, r3, #6
 8009696:	2b04      	cmp	r3, #4
 8009698:	bf02      	ittt	eq
 800969a:	68e5      	ldreq	r5, [r4, #12]
 800969c:	6833      	ldreq	r3, [r6, #0]
 800969e:	1aed      	subeq	r5, r5, r3
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	bf0c      	ite	eq
 80096a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096a8:	2500      	movne	r5, #0
 80096aa:	4293      	cmp	r3, r2
 80096ac:	bfc4      	itt	gt
 80096ae:	1a9b      	subgt	r3, r3, r2
 80096b0:	18ed      	addgt	r5, r5, r3
 80096b2:	2600      	movs	r6, #0
 80096b4:	341a      	adds	r4, #26
 80096b6:	42b5      	cmp	r5, r6
 80096b8:	d11a      	bne.n	80096f0 <_printf_common+0xc8>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e008      	b.n	80096d0 <_printf_common+0xa8>
 80096be:	2301      	movs	r3, #1
 80096c0:	4652      	mov	r2, sl
 80096c2:	4649      	mov	r1, r9
 80096c4:	4638      	mov	r0, r7
 80096c6:	47c0      	blx	r8
 80096c8:	3001      	adds	r0, #1
 80096ca:	d103      	bne.n	80096d4 <_printf_common+0xac>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d4:	3501      	adds	r5, #1
 80096d6:	e7c6      	b.n	8009666 <_printf_common+0x3e>
 80096d8:	18e1      	adds	r1, r4, r3
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	2030      	movs	r0, #48	; 0x30
 80096de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096e2:	4422      	add	r2, r4
 80096e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096ec:	3302      	adds	r3, #2
 80096ee:	e7c7      	b.n	8009680 <_printf_common+0x58>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4622      	mov	r2, r4
 80096f4:	4649      	mov	r1, r9
 80096f6:	4638      	mov	r0, r7
 80096f8:	47c0      	blx	r8
 80096fa:	3001      	adds	r0, #1
 80096fc:	d0e6      	beq.n	80096cc <_printf_common+0xa4>
 80096fe:	3601      	adds	r6, #1
 8009700:	e7d9      	b.n	80096b6 <_printf_common+0x8e>
	...

08009704 <_printf_i>:
 8009704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	7e0f      	ldrb	r7, [r1, #24]
 800970a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800970c:	2f78      	cmp	r7, #120	; 0x78
 800970e:	4691      	mov	r9, r2
 8009710:	4680      	mov	r8, r0
 8009712:	460c      	mov	r4, r1
 8009714:	469a      	mov	sl, r3
 8009716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800971a:	d807      	bhi.n	800972c <_printf_i+0x28>
 800971c:	2f62      	cmp	r7, #98	; 0x62
 800971e:	d80a      	bhi.n	8009736 <_printf_i+0x32>
 8009720:	2f00      	cmp	r7, #0
 8009722:	f000 80d4 	beq.w	80098ce <_printf_i+0x1ca>
 8009726:	2f58      	cmp	r7, #88	; 0x58
 8009728:	f000 80c0 	beq.w	80098ac <_printf_i+0x1a8>
 800972c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009734:	e03a      	b.n	80097ac <_printf_i+0xa8>
 8009736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800973a:	2b15      	cmp	r3, #21
 800973c:	d8f6      	bhi.n	800972c <_printf_i+0x28>
 800973e:	a101      	add	r1, pc, #4	; (adr r1, 8009744 <_printf_i+0x40>)
 8009740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009744:	0800979d 	.word	0x0800979d
 8009748:	080097b1 	.word	0x080097b1
 800974c:	0800972d 	.word	0x0800972d
 8009750:	0800972d 	.word	0x0800972d
 8009754:	0800972d 	.word	0x0800972d
 8009758:	0800972d 	.word	0x0800972d
 800975c:	080097b1 	.word	0x080097b1
 8009760:	0800972d 	.word	0x0800972d
 8009764:	0800972d 	.word	0x0800972d
 8009768:	0800972d 	.word	0x0800972d
 800976c:	0800972d 	.word	0x0800972d
 8009770:	080098b5 	.word	0x080098b5
 8009774:	080097dd 	.word	0x080097dd
 8009778:	0800986f 	.word	0x0800986f
 800977c:	0800972d 	.word	0x0800972d
 8009780:	0800972d 	.word	0x0800972d
 8009784:	080098d7 	.word	0x080098d7
 8009788:	0800972d 	.word	0x0800972d
 800978c:	080097dd 	.word	0x080097dd
 8009790:	0800972d 	.word	0x0800972d
 8009794:	0800972d 	.word	0x0800972d
 8009798:	08009877 	.word	0x08009877
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	602a      	str	r2, [r5, #0]
 80097a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097ac:	2301      	movs	r3, #1
 80097ae:	e09f      	b.n	80098f0 <_printf_i+0x1ec>
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	0607      	lsls	r7, r0, #24
 80097b6:	f103 0104 	add.w	r1, r3, #4
 80097ba:	6029      	str	r1, [r5, #0]
 80097bc:	d501      	bpl.n	80097c2 <_printf_i+0xbe>
 80097be:	681e      	ldr	r6, [r3, #0]
 80097c0:	e003      	b.n	80097ca <_printf_i+0xc6>
 80097c2:	0646      	lsls	r6, r0, #25
 80097c4:	d5fb      	bpl.n	80097be <_printf_i+0xba>
 80097c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	da03      	bge.n	80097d6 <_printf_i+0xd2>
 80097ce:	232d      	movs	r3, #45	; 0x2d
 80097d0:	4276      	negs	r6, r6
 80097d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d6:	485a      	ldr	r0, [pc, #360]	; (8009940 <_printf_i+0x23c>)
 80097d8:	230a      	movs	r3, #10
 80097da:	e012      	b.n	8009802 <_printf_i+0xfe>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	6820      	ldr	r0, [r4, #0]
 80097e0:	1d19      	adds	r1, r3, #4
 80097e2:	6029      	str	r1, [r5, #0]
 80097e4:	0605      	lsls	r5, r0, #24
 80097e6:	d501      	bpl.n	80097ec <_printf_i+0xe8>
 80097e8:	681e      	ldr	r6, [r3, #0]
 80097ea:	e002      	b.n	80097f2 <_printf_i+0xee>
 80097ec:	0641      	lsls	r1, r0, #25
 80097ee:	d5fb      	bpl.n	80097e8 <_printf_i+0xe4>
 80097f0:	881e      	ldrh	r6, [r3, #0]
 80097f2:	4853      	ldr	r0, [pc, #332]	; (8009940 <_printf_i+0x23c>)
 80097f4:	2f6f      	cmp	r7, #111	; 0x6f
 80097f6:	bf0c      	ite	eq
 80097f8:	2308      	moveq	r3, #8
 80097fa:	230a      	movne	r3, #10
 80097fc:	2100      	movs	r1, #0
 80097fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009802:	6865      	ldr	r5, [r4, #4]
 8009804:	60a5      	str	r5, [r4, #8]
 8009806:	2d00      	cmp	r5, #0
 8009808:	bfa2      	ittt	ge
 800980a:	6821      	ldrge	r1, [r4, #0]
 800980c:	f021 0104 	bicge.w	r1, r1, #4
 8009810:	6021      	strge	r1, [r4, #0]
 8009812:	b90e      	cbnz	r6, 8009818 <_printf_i+0x114>
 8009814:	2d00      	cmp	r5, #0
 8009816:	d04b      	beq.n	80098b0 <_printf_i+0x1ac>
 8009818:	4615      	mov	r5, r2
 800981a:	fbb6 f1f3 	udiv	r1, r6, r3
 800981e:	fb03 6711 	mls	r7, r3, r1, r6
 8009822:	5dc7      	ldrb	r7, [r0, r7]
 8009824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009828:	4637      	mov	r7, r6
 800982a:	42bb      	cmp	r3, r7
 800982c:	460e      	mov	r6, r1
 800982e:	d9f4      	bls.n	800981a <_printf_i+0x116>
 8009830:	2b08      	cmp	r3, #8
 8009832:	d10b      	bne.n	800984c <_printf_i+0x148>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	07de      	lsls	r6, r3, #31
 8009838:	d508      	bpl.n	800984c <_printf_i+0x148>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	6861      	ldr	r1, [r4, #4]
 800983e:	4299      	cmp	r1, r3
 8009840:	bfde      	ittt	le
 8009842:	2330      	movle	r3, #48	; 0x30
 8009844:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009848:	f105 35ff 	addle.w	r5, r5, #4294967295
 800984c:	1b52      	subs	r2, r2, r5
 800984e:	6122      	str	r2, [r4, #16]
 8009850:	f8cd a000 	str.w	sl, [sp]
 8009854:	464b      	mov	r3, r9
 8009856:	aa03      	add	r2, sp, #12
 8009858:	4621      	mov	r1, r4
 800985a:	4640      	mov	r0, r8
 800985c:	f7ff fee4 	bl	8009628 <_printf_common>
 8009860:	3001      	adds	r0, #1
 8009862:	d14a      	bne.n	80098fa <_printf_i+0x1f6>
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	b004      	add	sp, #16
 800986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	f043 0320 	orr.w	r3, r3, #32
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	4833      	ldr	r0, [pc, #204]	; (8009944 <_printf_i+0x240>)
 8009878:	2778      	movs	r7, #120	; 0x78
 800987a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	6829      	ldr	r1, [r5, #0]
 8009882:	061f      	lsls	r7, r3, #24
 8009884:	f851 6b04 	ldr.w	r6, [r1], #4
 8009888:	d402      	bmi.n	8009890 <_printf_i+0x18c>
 800988a:	065f      	lsls	r7, r3, #25
 800988c:	bf48      	it	mi
 800988e:	b2b6      	uxthmi	r6, r6
 8009890:	07df      	lsls	r7, r3, #31
 8009892:	bf48      	it	mi
 8009894:	f043 0320 	orrmi.w	r3, r3, #32
 8009898:	6029      	str	r1, [r5, #0]
 800989a:	bf48      	it	mi
 800989c:	6023      	strmi	r3, [r4, #0]
 800989e:	b91e      	cbnz	r6, 80098a8 <_printf_i+0x1a4>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	f023 0320 	bic.w	r3, r3, #32
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	2310      	movs	r3, #16
 80098aa:	e7a7      	b.n	80097fc <_printf_i+0xf8>
 80098ac:	4824      	ldr	r0, [pc, #144]	; (8009940 <_printf_i+0x23c>)
 80098ae:	e7e4      	b.n	800987a <_printf_i+0x176>
 80098b0:	4615      	mov	r5, r2
 80098b2:	e7bd      	b.n	8009830 <_printf_i+0x12c>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	6826      	ldr	r6, [r4, #0]
 80098b8:	6961      	ldr	r1, [r4, #20]
 80098ba:	1d18      	adds	r0, r3, #4
 80098bc:	6028      	str	r0, [r5, #0]
 80098be:	0635      	lsls	r5, r6, #24
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	d501      	bpl.n	80098c8 <_printf_i+0x1c4>
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	e002      	b.n	80098ce <_printf_i+0x1ca>
 80098c8:	0670      	lsls	r0, r6, #25
 80098ca:	d5fb      	bpl.n	80098c4 <_printf_i+0x1c0>
 80098cc:	8019      	strh	r1, [r3, #0]
 80098ce:	2300      	movs	r3, #0
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	4615      	mov	r5, r2
 80098d4:	e7bc      	b.n	8009850 <_printf_i+0x14c>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	1d1a      	adds	r2, r3, #4
 80098da:	602a      	str	r2, [r5, #0]
 80098dc:	681d      	ldr	r5, [r3, #0]
 80098de:	6862      	ldr	r2, [r4, #4]
 80098e0:	2100      	movs	r1, #0
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7f6 fc7c 	bl	80001e0 <memchr>
 80098e8:	b108      	cbz	r0, 80098ee <_printf_i+0x1ea>
 80098ea:	1b40      	subs	r0, r0, r5
 80098ec:	6060      	str	r0, [r4, #4]
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	2300      	movs	r3, #0
 80098f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f8:	e7aa      	b.n	8009850 <_printf_i+0x14c>
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	462a      	mov	r2, r5
 80098fe:	4649      	mov	r1, r9
 8009900:	4640      	mov	r0, r8
 8009902:	47d0      	blx	sl
 8009904:	3001      	adds	r0, #1
 8009906:	d0ad      	beq.n	8009864 <_printf_i+0x160>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	079b      	lsls	r3, r3, #30
 800990c:	d413      	bmi.n	8009936 <_printf_i+0x232>
 800990e:	68e0      	ldr	r0, [r4, #12]
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	4298      	cmp	r0, r3
 8009914:	bfb8      	it	lt
 8009916:	4618      	movlt	r0, r3
 8009918:	e7a6      	b.n	8009868 <_printf_i+0x164>
 800991a:	2301      	movs	r3, #1
 800991c:	4632      	mov	r2, r6
 800991e:	4649      	mov	r1, r9
 8009920:	4640      	mov	r0, r8
 8009922:	47d0      	blx	sl
 8009924:	3001      	adds	r0, #1
 8009926:	d09d      	beq.n	8009864 <_printf_i+0x160>
 8009928:	3501      	adds	r5, #1
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	9903      	ldr	r1, [sp, #12]
 800992e:	1a5b      	subs	r3, r3, r1
 8009930:	42ab      	cmp	r3, r5
 8009932:	dcf2      	bgt.n	800991a <_printf_i+0x216>
 8009934:	e7eb      	b.n	800990e <_printf_i+0x20a>
 8009936:	2500      	movs	r5, #0
 8009938:	f104 0619 	add.w	r6, r4, #25
 800993c:	e7f5      	b.n	800992a <_printf_i+0x226>
 800993e:	bf00      	nop
 8009940:	0800aced 	.word	0x0800aced
 8009944:	0800acfe 	.word	0x0800acfe

08009948 <memmove>:
 8009948:	4288      	cmp	r0, r1
 800994a:	b510      	push	{r4, lr}
 800994c:	eb01 0402 	add.w	r4, r1, r2
 8009950:	d902      	bls.n	8009958 <memmove+0x10>
 8009952:	4284      	cmp	r4, r0
 8009954:	4623      	mov	r3, r4
 8009956:	d807      	bhi.n	8009968 <memmove+0x20>
 8009958:	1e43      	subs	r3, r0, #1
 800995a:	42a1      	cmp	r1, r4
 800995c:	d008      	beq.n	8009970 <memmove+0x28>
 800995e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009966:	e7f8      	b.n	800995a <memmove+0x12>
 8009968:	4402      	add	r2, r0
 800996a:	4601      	mov	r1, r0
 800996c:	428a      	cmp	r2, r1
 800996e:	d100      	bne.n	8009972 <memmove+0x2a>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997a:	e7f7      	b.n	800996c <memmove+0x24>

0800997c <_sbrk_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	; (8009998 <_sbrk_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f8 fba0 	bl	80020cc <_sbrk>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_sbrk_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_sbrk_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	200006d4 	.word	0x200006d4

0800999c <memcpy>:
 800999c:	440a      	add	r2, r1
 800999e:	4291      	cmp	r1, r2
 80099a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099a4:	d100      	bne.n	80099a8 <memcpy+0xc>
 80099a6:	4770      	bx	lr
 80099a8:	b510      	push	{r4, lr}
 80099aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b2:	4291      	cmp	r1, r2
 80099b4:	d1f9      	bne.n	80099aa <memcpy+0xe>
 80099b6:	bd10      	pop	{r4, pc}

080099b8 <_realloc_r>:
 80099b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099bc:	4680      	mov	r8, r0
 80099be:	4614      	mov	r4, r2
 80099c0:	460e      	mov	r6, r1
 80099c2:	b921      	cbnz	r1, 80099ce <_realloc_r+0x16>
 80099c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	4611      	mov	r1, r2
 80099ca:	f7ff bc49 	b.w	8009260 <_malloc_r>
 80099ce:	b92a      	cbnz	r2, 80099dc <_realloc_r+0x24>
 80099d0:	f7ff fbda 	bl	8009188 <_free_r>
 80099d4:	4625      	mov	r5, r4
 80099d6:	4628      	mov	r0, r5
 80099d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099dc:	f000 f81b 	bl	8009a16 <_malloc_usable_size_r>
 80099e0:	4284      	cmp	r4, r0
 80099e2:	4607      	mov	r7, r0
 80099e4:	d802      	bhi.n	80099ec <_realloc_r+0x34>
 80099e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099ea:	d812      	bhi.n	8009a12 <_realloc_r+0x5a>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4640      	mov	r0, r8
 80099f0:	f7ff fc36 	bl	8009260 <_malloc_r>
 80099f4:	4605      	mov	r5, r0
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d0ed      	beq.n	80099d6 <_realloc_r+0x1e>
 80099fa:	42bc      	cmp	r4, r7
 80099fc:	4622      	mov	r2, r4
 80099fe:	4631      	mov	r1, r6
 8009a00:	bf28      	it	cs
 8009a02:	463a      	movcs	r2, r7
 8009a04:	f7ff ffca 	bl	800999c <memcpy>
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f7ff fbbc 	bl	8009188 <_free_r>
 8009a10:	e7e1      	b.n	80099d6 <_realloc_r+0x1e>
 8009a12:	4635      	mov	r5, r6
 8009a14:	e7df      	b.n	80099d6 <_realloc_r+0x1e>

08009a16 <_malloc_usable_size_r>:
 8009a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a1a:	1f18      	subs	r0, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfbc      	itt	lt
 8009a20:	580b      	ldrlt	r3, [r1, r0]
 8009a22:	18c0      	addlt	r0, r0, r3
 8009a24:	4770      	bx	lr
	...

08009a28 <tan>:
 8009a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a2a:	ec53 2b10 	vmov	r2, r3, d0
 8009a2e:	4816      	ldr	r0, [pc, #88]	; (8009a88 <tan+0x60>)
 8009a30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a34:	4281      	cmp	r1, r0
 8009a36:	dc07      	bgt.n	8009a48 <tan+0x20>
 8009a38:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8009a80 <tan+0x58>
 8009a3c:	2001      	movs	r0, #1
 8009a3e:	b005      	add	sp, #20
 8009a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a44:	f000 b824 	b.w	8009a90 <__kernel_tan>
 8009a48:	4810      	ldr	r0, [pc, #64]	; (8009a8c <tan+0x64>)
 8009a4a:	4281      	cmp	r1, r0
 8009a4c:	dd09      	ble.n	8009a62 <tan+0x3a>
 8009a4e:	ee10 0a10 	vmov	r0, s0
 8009a52:	4619      	mov	r1, r3
 8009a54:	f7f6 fc18 	bl	8000288 <__aeabi_dsub>
 8009a58:	ec41 0b10 	vmov	d0, r0, r1
 8009a5c:	b005      	add	sp, #20
 8009a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a62:	4668      	mov	r0, sp
 8009a64:	f000 fa20 	bl	8009ea8 <__ieee754_rem_pio2>
 8009a68:	0040      	lsls	r0, r0, #1
 8009a6a:	f000 0002 	and.w	r0, r0, #2
 8009a6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a72:	ed9d 0b00 	vldr	d0, [sp]
 8009a76:	f1c0 0001 	rsb	r0, r0, #1
 8009a7a:	f000 f809 	bl	8009a90 <__kernel_tan>
 8009a7e:	e7ed      	b.n	8009a5c <tan+0x34>
	...
 8009a88:	3fe921fb 	.word	0x3fe921fb
 8009a8c:	7fefffff 	.word	0x7fefffff

08009a90 <__kernel_tan>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	ed2d 8b06 	vpush	{d8-d10}
 8009a98:	ec5b ab10 	vmov	sl, fp, d0
 8009a9c:	4be0      	ldr	r3, [pc, #896]	; (8009e20 <__kernel_tan+0x390>)
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009aa4:	429f      	cmp	r7, r3
 8009aa6:	ec59 8b11 	vmov	r8, r9, d1
 8009aaa:	4606      	mov	r6, r0
 8009aac:	f8cd b000 	str.w	fp, [sp]
 8009ab0:	dc61      	bgt.n	8009b76 <__kernel_tan+0xe6>
 8009ab2:	ee10 0a10 	vmov	r0, s0
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	f7f7 f838 	bl	8000b2c <__aeabi_d2iz>
 8009abc:	4605      	mov	r5, r0
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f040 8083 	bne.w	8009bca <__kernel_tan+0x13a>
 8009ac4:	1c73      	adds	r3, r6, #1
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	433b      	orrs	r3, r7
 8009acc:	d112      	bne.n	8009af4 <__kernel_tan+0x64>
 8009ace:	ec4b ab10 	vmov	d0, sl, fp
 8009ad2:	f000 fbef 	bl	800a2b4 <fabs>
 8009ad6:	49d3      	ldr	r1, [pc, #844]	; (8009e24 <__kernel_tan+0x394>)
 8009ad8:	ec53 2b10 	vmov	r2, r3, d0
 8009adc:	2000      	movs	r0, #0
 8009ade:	f7f6 feb5 	bl	800084c <__aeabi_ddiv>
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	ec4b ab10 	vmov	d0, sl, fp
 8009aea:	b003      	add	sp, #12
 8009aec:	ecbd 8b06 	vpop	{d8-d10}
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	2e01      	cmp	r6, #1
 8009af6:	d0f6      	beq.n	8009ae6 <__kernel_tan+0x56>
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	4650      	mov	r0, sl
 8009afe:	4659      	mov	r1, fp
 8009b00:	f7f6 fbc4 	bl	800028c <__adddf3>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	460f      	mov	r7, r1
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	49c6      	ldr	r1, [pc, #792]	; (8009e28 <__kernel_tan+0x398>)
 8009b0e:	f7f6 fe9d 	bl	800084c <__aeabi_ddiv>
 8009b12:	e9cd 0100 	strd	r0, r1, [sp]
 8009b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b1a:	462e      	mov	r6, r5
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	462c      	mov	r4, r5
 8009b20:	4630      	mov	r0, r6
 8009b22:	461d      	mov	r5, r3
 8009b24:	4639      	mov	r1, r7
 8009b26:	465b      	mov	r3, fp
 8009b28:	f7f6 fbae 	bl	8000288 <__aeabi_dsub>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4640      	mov	r0, r8
 8009b32:	4649      	mov	r1, r9
 8009b34:	f7f6 fba8 	bl	8000288 <__aeabi_dsub>
 8009b38:	4632      	mov	r2, r6
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	f7f6 fd5c 	bl	80005f8 <__aeabi_dmul>
 8009b40:	4632      	mov	r2, r6
 8009b42:	4680      	mov	r8, r0
 8009b44:	4689      	mov	r9, r1
 8009b46:	462b      	mov	r3, r5
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 fd54 	bl	80005f8 <__aeabi_dmul>
 8009b50:	4bb4      	ldr	r3, [pc, #720]	; (8009e24 <__kernel_tan+0x394>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fb9a 	bl	800028c <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 fb94 	bl	800028c <__adddf3>
 8009b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b68:	f7f6 fd46 	bl	80005f8 <__aeabi_dmul>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	f7f6 fb8c 	bl	800028c <__adddf3>
 8009b74:	e7b5      	b.n	8009ae2 <__kernel_tan+0x52>
 8009b76:	4bad      	ldr	r3, [pc, #692]	; (8009e2c <__kernel_tan+0x39c>)
 8009b78:	429f      	cmp	r7, r3
 8009b7a:	dd26      	ble.n	8009bca <__kernel_tan+0x13a>
 8009b7c:	9b00      	ldr	r3, [sp, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da09      	bge.n	8009b96 <__kernel_tan+0x106>
 8009b82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b86:	469b      	mov	fp, r3
 8009b88:	ee10 aa10 	vmov	sl, s0
 8009b8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b90:	ee11 8a10 	vmov	r8, s2
 8009b94:	4699      	mov	r9, r3
 8009b96:	4652      	mov	r2, sl
 8009b98:	465b      	mov	r3, fp
 8009b9a:	a183      	add	r1, pc, #524	; (adr r1, 8009da8 <__kernel_tan+0x318>)
 8009b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba0:	f7f6 fb72 	bl	8000288 <__aeabi_dsub>
 8009ba4:	4642      	mov	r2, r8
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	a180      	add	r1, pc, #512	; (adr r1, 8009db0 <__kernel_tan+0x320>)
 8009bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb2:	f7f6 fb69 	bl	8000288 <__aeabi_dsub>
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	462b      	mov	r3, r5
 8009bba:	f7f6 fb67 	bl	800028c <__adddf3>
 8009bbe:	f04f 0800 	mov.w	r8, #0
 8009bc2:	4682      	mov	sl, r0
 8009bc4:	468b      	mov	fp, r1
 8009bc6:	f04f 0900 	mov.w	r9, #0
 8009bca:	4652      	mov	r2, sl
 8009bcc:	465b      	mov	r3, fp
 8009bce:	4650      	mov	r0, sl
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	f7f6 fd11 	bl	80005f8 <__aeabi_dmul>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	ec43 2b18 	vmov	d8, r2, r3
 8009bde:	f7f6 fd0b 	bl	80005f8 <__aeabi_dmul>
 8009be2:	ec53 2b18 	vmov	r2, r3, d8
 8009be6:	4604      	mov	r4, r0
 8009be8:	460d      	mov	r5, r1
 8009bea:	4650      	mov	r0, sl
 8009bec:	4659      	mov	r1, fp
 8009bee:	f7f6 fd03 	bl	80005f8 <__aeabi_dmul>
 8009bf2:	a371      	add	r3, pc, #452	; (adr r3, 8009db8 <__kernel_tan+0x328>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	ec41 0b19 	vmov	d9, r0, r1
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	a36e      	add	r3, pc, #440	; (adr r3, 8009dc0 <__kernel_tan+0x330>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 fb3f 	bl	800028c <__adddf3>
 8009c0e:	4622      	mov	r2, r4
 8009c10:	462b      	mov	r3, r5
 8009c12:	f7f6 fcf1 	bl	80005f8 <__aeabi_dmul>
 8009c16:	a36c      	add	r3, pc, #432	; (adr r3, 8009dc8 <__kernel_tan+0x338>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7f6 fb36 	bl	800028c <__adddf3>
 8009c20:	4622      	mov	r2, r4
 8009c22:	462b      	mov	r3, r5
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	a369      	add	r3, pc, #420	; (adr r3, 8009dd0 <__kernel_tan+0x340>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fb2d 	bl	800028c <__adddf3>
 8009c32:	4622      	mov	r2, r4
 8009c34:	462b      	mov	r3, r5
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	a367      	add	r3, pc, #412	; (adr r3, 8009dd8 <__kernel_tan+0x348>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fb24 	bl	800028c <__adddf3>
 8009c44:	4622      	mov	r2, r4
 8009c46:	462b      	mov	r3, r5
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	a364      	add	r3, pc, #400	; (adr r3, 8009de0 <__kernel_tan+0x350>)
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	f7f6 fb1b 	bl	800028c <__adddf3>
 8009c56:	ec53 2b18 	vmov	r2, r3, d8
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	a362      	add	r3, pc, #392	; (adr r3, 8009de8 <__kernel_tan+0x358>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	ec41 0b1a 	vmov	d10, r0, r1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	a35f      	add	r3, pc, #380	; (adr r3, 8009df0 <__kernel_tan+0x360>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fb09 	bl	800028c <__adddf3>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	f7f6 fcbb 	bl	80005f8 <__aeabi_dmul>
 8009c82:	a35d      	add	r3, pc, #372	; (adr r3, 8009df8 <__kernel_tan+0x368>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fb00 	bl	800028c <__adddf3>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	f7f6 fcb2 	bl	80005f8 <__aeabi_dmul>
 8009c94:	a35a      	add	r3, pc, #360	; (adr r3, 8009e00 <__kernel_tan+0x370>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 faf7 	bl	800028c <__adddf3>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	f7f6 fca9 	bl	80005f8 <__aeabi_dmul>
 8009ca6:	a358      	add	r3, pc, #352	; (adr r3, 8009e08 <__kernel_tan+0x378>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 faee 	bl	800028c <__adddf3>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	a355      	add	r3, pc, #340	; (adr r3, 8009e10 <__kernel_tan+0x380>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f7f6 fae5 	bl	800028c <__adddf3>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	ec51 0b1a 	vmov	r0, r1, d10
 8009cca:	f7f6 fadf 	bl	800028c <__adddf3>
 8009cce:	ec53 2b19 	vmov	r2, r3, d9
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	464b      	mov	r3, r9
 8009cda:	f7f6 fad7 	bl	800028c <__adddf3>
 8009cde:	ec53 2b18 	vmov	r2, r3, d8
 8009ce2:	f7f6 fc89 	bl	80005f8 <__aeabi_dmul>
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	464b      	mov	r3, r9
 8009cea:	f7f6 facf 	bl	800028c <__adddf3>
 8009cee:	a34a      	add	r3, pc, #296	; (adr r3, 8009e18 <__kernel_tan+0x388>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	ec51 0b19 	vmov	r0, r1, d9
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	4622      	mov	r2, r4
 8009d02:	462b      	mov	r3, r5
 8009d04:	f7f6 fac2 	bl	800028c <__adddf3>
 8009d08:	460b      	mov	r3, r1
 8009d0a:	ec41 0b18 	vmov	d8, r0, r1
 8009d0e:	4602      	mov	r2, r0
 8009d10:	4659      	mov	r1, fp
 8009d12:	4650      	mov	r0, sl
 8009d14:	f7f6 faba 	bl	800028c <__adddf3>
 8009d18:	4b44      	ldr	r3, [pc, #272]	; (8009e2c <__kernel_tan+0x39c>)
 8009d1a:	429f      	cmp	r7, r3
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	460d      	mov	r5, r1
 8009d20:	f340 8086 	ble.w	8009e30 <__kernel_tan+0x3a0>
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7f6 fbfd 	bl	8000524 <__aeabi_i2d>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	462b      	mov	r3, r5
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7f6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8009d3a:	4642      	mov	r2, r8
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	460f      	mov	r7, r1
 8009d40:	464b      	mov	r3, r9
 8009d42:	4620      	mov	r0, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	f7f6 faa1 	bl	800028c <__adddf3>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	f7f6 fd7b 	bl	800084c <__aeabi_ddiv>
 8009d56:	ec53 2b18 	vmov	r2, r3, d8
 8009d5a:	f7f6 fa95 	bl	8000288 <__aeabi_dsub>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7f6 fa8f 	bl	8000288 <__aeabi_dsub>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	f7f6 fa8d 	bl	800028c <__adddf3>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fa85 	bl	8000288 <__aeabi_dsub>
 8009d7e:	9b00      	ldr	r3, [sp, #0]
 8009d80:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8009d84:	f00a 0a02 	and.w	sl, sl, #2
 8009d88:	4604      	mov	r4, r0
 8009d8a:	f1ca 0001 	rsb	r0, sl, #1
 8009d8e:	460d      	mov	r5, r1
 8009d90:	f7f6 fbc8 	bl	8000524 <__aeabi_i2d>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7f6 fc2c 	bl	80005f8 <__aeabi_dmul>
 8009da0:	e69f      	b.n	8009ae2 <__kernel_tan+0x52>
 8009da2:	bf00      	nop
 8009da4:	f3af 8000 	nop.w
 8009da8:	54442d18 	.word	0x54442d18
 8009dac:	3fe921fb 	.word	0x3fe921fb
 8009db0:	33145c07 	.word	0x33145c07
 8009db4:	3c81a626 	.word	0x3c81a626
 8009db8:	74bf7ad4 	.word	0x74bf7ad4
 8009dbc:	3efb2a70 	.word	0x3efb2a70
 8009dc0:	32f0a7e9 	.word	0x32f0a7e9
 8009dc4:	3f12b80f 	.word	0x3f12b80f
 8009dc8:	1a8d1068 	.word	0x1a8d1068
 8009dcc:	3f3026f7 	.word	0x3f3026f7
 8009dd0:	fee08315 	.word	0xfee08315
 8009dd4:	3f57dbc8 	.word	0x3f57dbc8
 8009dd8:	e96e8493 	.word	0xe96e8493
 8009ddc:	3f8226e3 	.word	0x3f8226e3
 8009de0:	1bb341fe 	.word	0x1bb341fe
 8009de4:	3faba1ba 	.word	0x3faba1ba
 8009de8:	db605373 	.word	0xdb605373
 8009dec:	bef375cb 	.word	0xbef375cb
 8009df0:	a03792a6 	.word	0xa03792a6
 8009df4:	3f147e88 	.word	0x3f147e88
 8009df8:	f2f26501 	.word	0xf2f26501
 8009dfc:	3f4344d8 	.word	0x3f4344d8
 8009e00:	c9560328 	.word	0xc9560328
 8009e04:	3f6d6d22 	.word	0x3f6d6d22
 8009e08:	8406d637 	.word	0x8406d637
 8009e0c:	3f9664f4 	.word	0x3f9664f4
 8009e10:	1110fe7a 	.word	0x1110fe7a
 8009e14:	3fc11111 	.word	0x3fc11111
 8009e18:	55555563 	.word	0x55555563
 8009e1c:	3fd55555 	.word	0x3fd55555
 8009e20:	3e2fffff 	.word	0x3e2fffff
 8009e24:	3ff00000 	.word	0x3ff00000
 8009e28:	bff00000 	.word	0xbff00000
 8009e2c:	3fe59427 	.word	0x3fe59427
 8009e30:	2e01      	cmp	r6, #1
 8009e32:	d02f      	beq.n	8009e94 <__kernel_tan+0x404>
 8009e34:	460f      	mov	r7, r1
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	4917      	ldr	r1, [pc, #92]	; (8009e9c <__kernel_tan+0x40c>)
 8009e40:	f7f6 fd04 	bl	800084c <__aeabi_ddiv>
 8009e44:	2600      	movs	r6, #0
 8009e46:	e9cd 0100 	strd	r0, r1, [sp]
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	465b      	mov	r3, fp
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fa19 	bl	8000288 <__aeabi_dsub>
 8009e56:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	ec51 0b18 	vmov	r0, r1, d8
 8009e62:	f7f6 fa11 	bl	8000288 <__aeabi_dsub>
 8009e66:	4632      	mov	r2, r6
 8009e68:	462b      	mov	r3, r5
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	46b0      	mov	r8, r6
 8009e70:	460f      	mov	r7, r1
 8009e72:	4642      	mov	r2, r8
 8009e74:	462b      	mov	r3, r5
 8009e76:	4634      	mov	r4, r6
 8009e78:	4649      	mov	r1, r9
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	f7f6 fbbb 	bl	80005f8 <__aeabi_dmul>
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <__kernel_tan+0x410>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	f7f6 fa01 	bl	800028c <__adddf3>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4630      	mov	r0, r6
 8009e90:	4639      	mov	r1, r7
 8009e92:	e665      	b.n	8009b60 <__kernel_tan+0xd0>
 8009e94:	4682      	mov	sl, r0
 8009e96:	468b      	mov	fp, r1
 8009e98:	e625      	b.n	8009ae6 <__kernel_tan+0x56>
 8009e9a:	bf00      	nop
 8009e9c:	bff00000 	.word	0xbff00000
 8009ea0:	3ff00000 	.word	0x3ff00000
 8009ea4:	00000000 	.word	0x00000000

08009ea8 <__ieee754_rem_pio2>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	ed2d 8b02 	vpush	{d8}
 8009eb0:	ec55 4b10 	vmov	r4, r5, d0
 8009eb4:	4bca      	ldr	r3, [pc, #808]	; (800a1e0 <__ieee754_rem_pio2+0x338>)
 8009eb6:	b08b      	sub	sp, #44	; 0x2c
 8009eb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009ebc:	4598      	cmp	r8, r3
 8009ebe:	4682      	mov	sl, r0
 8009ec0:	9502      	str	r5, [sp, #8]
 8009ec2:	dc08      	bgt.n	8009ed6 <__ieee754_rem_pio2+0x2e>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	ed80 0b00 	vstr	d0, [r0]
 8009ecc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ed0:	f04f 0b00 	mov.w	fp, #0
 8009ed4:	e028      	b.n	8009f28 <__ieee754_rem_pio2+0x80>
 8009ed6:	4bc3      	ldr	r3, [pc, #780]	; (800a1e4 <__ieee754_rem_pio2+0x33c>)
 8009ed8:	4598      	cmp	r8, r3
 8009eda:	dc78      	bgt.n	8009fce <__ieee754_rem_pio2+0x126>
 8009edc:	9b02      	ldr	r3, [sp, #8]
 8009ede:	4ec2      	ldr	r6, [pc, #776]	; (800a1e8 <__ieee754_rem_pio2+0x340>)
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	ee10 0a10 	vmov	r0, s0
 8009ee6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	4629      	mov	r1, r5
 8009eee:	dd39      	ble.n	8009f64 <__ieee754_rem_pio2+0xbc>
 8009ef0:	f7f6 f9ca 	bl	8000288 <__aeabi_dsub>
 8009ef4:	45b0      	cmp	r8, r6
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
 8009efa:	d01b      	beq.n	8009f34 <__ieee754_rem_pio2+0x8c>
 8009efc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a1b0 <__ieee754_rem_pio2+0x308>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	f7f6 f9c1 	bl	8000288 <__aeabi_dsub>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	e9ca 2300 	strd	r2, r3, [sl]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 f9b9 	bl	8000288 <__aeabi_dsub>
 8009f16:	a3a6      	add	r3, pc, #664	; (adr r3, 800a1b0 <__ieee754_rem_pio2+0x308>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f9b4 	bl	8000288 <__aeabi_dsub>
 8009f20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f24:	f04f 0b01 	mov.w	fp, #1
 8009f28:	4658      	mov	r0, fp
 8009f2a:	b00b      	add	sp, #44	; 0x2c
 8009f2c:	ecbd 8b02 	vpop	{d8}
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1b8 <__ieee754_rem_pio2+0x310>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 f9a5 	bl	8000288 <__aeabi_dsub>
 8009f3e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1c0 <__ieee754_rem_pio2+0x318>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	f7f6 f99e 	bl	8000288 <__aeabi_dsub>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	e9ca 2300 	strd	r2, r3, [sl]
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 f996 	bl	8000288 <__aeabi_dsub>
 8009f5c:	a398      	add	r3, pc, #608	; (adr r3, 800a1c0 <__ieee754_rem_pio2+0x318>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	e7db      	b.n	8009f1c <__ieee754_rem_pio2+0x74>
 8009f64:	f7f6 f992 	bl	800028c <__adddf3>
 8009f68:	45b0      	cmp	r8, r6
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	d016      	beq.n	8009f9e <__ieee754_rem_pio2+0xf6>
 8009f70:	a38f      	add	r3, pc, #572	; (adr r3, 800a1b0 <__ieee754_rem_pio2+0x308>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f7f6 f989 	bl	800028c <__adddf3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9ca 2300 	strd	r2, r3, [sl]
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 f97f 	bl	8000288 <__aeabi_dsub>
 8009f8a:	a389      	add	r3, pc, #548	; (adr r3, 800a1b0 <__ieee754_rem_pio2+0x308>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 f97c 	bl	800028c <__adddf3>
 8009f94:	f04f 3bff 	mov.w	fp, #4294967295
 8009f98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f9c:	e7c4      	b.n	8009f28 <__ieee754_rem_pio2+0x80>
 8009f9e:	a386      	add	r3, pc, #536	; (adr r3, 800a1b8 <__ieee754_rem_pio2+0x310>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f972 	bl	800028c <__adddf3>
 8009fa8:	a385      	add	r3, pc, #532	; (adr r3, 800a1c0 <__ieee754_rem_pio2+0x318>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	4604      	mov	r4, r0
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	f7f6 f96b 	bl	800028c <__adddf3>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	e9ca 2300 	strd	r2, r3, [sl]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 f961 	bl	8000288 <__aeabi_dsub>
 8009fc6:	a37e      	add	r3, pc, #504	; (adr r3, 800a1c0 <__ieee754_rem_pio2+0x318>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	e7e0      	b.n	8009f90 <__ieee754_rem_pio2+0xe8>
 8009fce:	4b87      	ldr	r3, [pc, #540]	; (800a1ec <__ieee754_rem_pio2+0x344>)
 8009fd0:	4598      	cmp	r8, r3
 8009fd2:	f300 80d8 	bgt.w	800a186 <__ieee754_rem_pio2+0x2de>
 8009fd6:	f000 f96d 	bl	800a2b4 <fabs>
 8009fda:	ec55 4b10 	vmov	r4, r5, d0
 8009fde:	ee10 0a10 	vmov	r0, s0
 8009fe2:	a379      	add	r3, pc, #484	; (adr r3, 800a1c8 <__ieee754_rem_pio2+0x320>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 fb05 	bl	80005f8 <__aeabi_dmul>
 8009fee:	4b80      	ldr	r3, [pc, #512]	; (800a1f0 <__ieee754_rem_pio2+0x348>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7f6 f94b 	bl	800028c <__adddf3>
 8009ff6:	f7f6 fd99 	bl	8000b2c <__aeabi_d2iz>
 8009ffa:	4683      	mov	fp, r0
 8009ffc:	f7f6 fa92 	bl	8000524 <__aeabi_i2d>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	ec43 2b18 	vmov	d8, r2, r3
 800a008:	a367      	add	r3, pc, #412	; (adr r3, 800a1a8 <__ieee754_rem_pio2+0x300>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 faf3 	bl	80005f8 <__aeabi_dmul>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4620      	mov	r0, r4
 800a018:	4629      	mov	r1, r5
 800a01a:	f7f6 f935 	bl	8000288 <__aeabi_dsub>
 800a01e:	a364      	add	r3, pc, #400	; (adr r3, 800a1b0 <__ieee754_rem_pio2+0x308>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	ec51 0b18 	vmov	r0, r1, d8
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	f1bb 0f1f 	cmp.w	fp, #31
 800a034:	4604      	mov	r4, r0
 800a036:	460d      	mov	r5, r1
 800a038:	dc0d      	bgt.n	800a056 <__ieee754_rem_pio2+0x1ae>
 800a03a:	4b6e      	ldr	r3, [pc, #440]	; (800a1f4 <__ieee754_rem_pio2+0x34c>)
 800a03c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a044:	4543      	cmp	r3, r8
 800a046:	d006      	beq.n	800a056 <__ieee754_rem_pio2+0x1ae>
 800a048:	4622      	mov	r2, r4
 800a04a:	462b      	mov	r3, r5
 800a04c:	4630      	mov	r0, r6
 800a04e:	4639      	mov	r1, r7
 800a050:	f7f6 f91a 	bl	8000288 <__aeabi_dsub>
 800a054:	e00e      	b.n	800a074 <__ieee754_rem_pio2+0x1cc>
 800a056:	462b      	mov	r3, r5
 800a058:	4622      	mov	r2, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 f913 	bl	8000288 <__aeabi_dsub>
 800a062:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a06c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a070:	2b10      	cmp	r3, #16
 800a072:	dc02      	bgt.n	800a07a <__ieee754_rem_pio2+0x1d2>
 800a074:	e9ca 0100 	strd	r0, r1, [sl]
 800a078:	e039      	b.n	800a0ee <__ieee754_rem_pio2+0x246>
 800a07a:	a34f      	add	r3, pc, #316	; (adr r3, 800a1b8 <__ieee754_rem_pio2+0x310>)
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	ec51 0b18 	vmov	r0, r1, d8
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	4604      	mov	r4, r0
 800a08a:	460d      	mov	r5, r1
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4630      	mov	r0, r6
 800a092:	4639      	mov	r1, r7
 800a094:	f7f6 f8f8 	bl	8000288 <__aeabi_dsub>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4680      	mov	r8, r0
 800a09e:	4689      	mov	r9, r1
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 f8f0 	bl	8000288 <__aeabi_dsub>
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	f7f6 f8ec 	bl	8000288 <__aeabi_dsub>
 800a0b0:	a343      	add	r3, pc, #268	; (adr r3, 800a1c0 <__ieee754_rem_pio2+0x318>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	460d      	mov	r5, r1
 800a0ba:	ec51 0b18 	vmov	r0, r1, d8
 800a0be:	f7f6 fa9b 	bl	80005f8 <__aeabi_dmul>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	f7f6 f8df 	bl	8000288 <__aeabi_dsub>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 f8d7 	bl	8000288 <__aeabi_dsub>
 800a0da:	9a03      	ldr	r2, [sp, #12]
 800a0dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b31      	cmp	r3, #49	; 0x31
 800a0e4:	dc24      	bgt.n	800a130 <__ieee754_rem_pio2+0x288>
 800a0e6:	e9ca 0100 	strd	r0, r1, [sl]
 800a0ea:	4646      	mov	r6, r8
 800a0ec:	464f      	mov	r7, r9
 800a0ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	4642      	mov	r2, r8
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	f7f6 f8c5 	bl	8000288 <__aeabi_dsub>
 800a0fe:	462b      	mov	r3, r5
 800a100:	4622      	mov	r2, r4
 800a102:	f7f6 f8c1 	bl	8000288 <__aeabi_dsub>
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a10e:	f6bf af0b 	bge.w	8009f28 <__ieee754_rem_pio2+0x80>
 800a112:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a116:	f8ca 3004 	str.w	r3, [sl, #4]
 800a11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a11e:	f8ca 8000 	str.w	r8, [sl]
 800a122:	f8ca 0008 	str.w	r0, [sl, #8]
 800a126:	f8ca 300c 	str.w	r3, [sl, #12]
 800a12a:	f1cb 0b00 	rsb	fp, fp, #0
 800a12e:	e6fb      	b.n	8009f28 <__ieee754_rem_pio2+0x80>
 800a130:	a327      	add	r3, pc, #156	; (adr r3, 800a1d0 <__ieee754_rem_pio2+0x328>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	ec51 0b18 	vmov	r0, r1, d8
 800a13a:	f7f6 fa5d 	bl	80005f8 <__aeabi_dmul>
 800a13e:	4604      	mov	r4, r0
 800a140:	460d      	mov	r5, r1
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4640      	mov	r0, r8
 800a148:	4649      	mov	r1, r9
 800a14a:	f7f6 f89d 	bl	8000288 <__aeabi_dsub>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4606      	mov	r6, r0
 800a154:	460f      	mov	r7, r1
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	4622      	mov	r2, r4
 800a160:	462b      	mov	r3, r5
 800a162:	f7f6 f891 	bl	8000288 <__aeabi_dsub>
 800a166:	a31c      	add	r3, pc, #112	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x330>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	4604      	mov	r4, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	ec51 0b18 	vmov	r0, r1, d8
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	4622      	mov	r2, r4
 800a17a:	462b      	mov	r3, r5
 800a17c:	f7f6 f884 	bl	8000288 <__aeabi_dsub>
 800a180:	4604      	mov	r4, r0
 800a182:	460d      	mov	r5, r1
 800a184:	e760      	b.n	800a048 <__ieee754_rem_pio2+0x1a0>
 800a186:	4b1c      	ldr	r3, [pc, #112]	; (800a1f8 <__ieee754_rem_pio2+0x350>)
 800a188:	4598      	cmp	r8, r3
 800a18a:	dd37      	ble.n	800a1fc <__ieee754_rem_pio2+0x354>
 800a18c:	ee10 2a10 	vmov	r2, s0
 800a190:	462b      	mov	r3, r5
 800a192:	4620      	mov	r0, r4
 800a194:	4629      	mov	r1, r5
 800a196:	f7f6 f877 	bl	8000288 <__aeabi_dsub>
 800a19a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a19e:	e9ca 0100 	strd	r0, r1, [sl]
 800a1a2:	e695      	b.n	8009ed0 <__ieee754_rem_pio2+0x28>
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	54400000 	.word	0x54400000
 800a1ac:	3ff921fb 	.word	0x3ff921fb
 800a1b0:	1a626331 	.word	0x1a626331
 800a1b4:	3dd0b461 	.word	0x3dd0b461
 800a1b8:	1a600000 	.word	0x1a600000
 800a1bc:	3dd0b461 	.word	0x3dd0b461
 800a1c0:	2e037073 	.word	0x2e037073
 800a1c4:	3ba3198a 	.word	0x3ba3198a
 800a1c8:	6dc9c883 	.word	0x6dc9c883
 800a1cc:	3fe45f30 	.word	0x3fe45f30
 800a1d0:	2e000000 	.word	0x2e000000
 800a1d4:	3ba3198a 	.word	0x3ba3198a
 800a1d8:	252049c1 	.word	0x252049c1
 800a1dc:	397b839a 	.word	0x397b839a
 800a1e0:	3fe921fb 	.word	0x3fe921fb
 800a1e4:	4002d97b 	.word	0x4002d97b
 800a1e8:	3ff921fb 	.word	0x3ff921fb
 800a1ec:	413921fb 	.word	0x413921fb
 800a1f0:	3fe00000 	.word	0x3fe00000
 800a1f4:	0800ad10 	.word	0x0800ad10
 800a1f8:	7fefffff 	.word	0x7fefffff
 800a1fc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a200:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a204:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a208:	4620      	mov	r0, r4
 800a20a:	460d      	mov	r5, r1
 800a20c:	f7f6 fc8e 	bl	8000b2c <__aeabi_d2iz>
 800a210:	f7f6 f988 	bl	8000524 <__aeabi_i2d>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4620      	mov	r0, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a220:	f7f6 f832 	bl	8000288 <__aeabi_dsub>
 800a224:	4b21      	ldr	r3, [pc, #132]	; (800a2ac <__ieee754_rem_pio2+0x404>)
 800a226:	2200      	movs	r2, #0
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	460d      	mov	r5, r1
 800a22e:	4604      	mov	r4, r0
 800a230:	f7f6 fc7c 	bl	8000b2c <__aeabi_d2iz>
 800a234:	f7f6 f976 	bl	8000524 <__aeabi_i2d>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a244:	f7f6 f820 	bl	8000288 <__aeabi_dsub>
 800a248:	4b18      	ldr	r3, [pc, #96]	; (800a2ac <__ieee754_rem_pio2+0x404>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7f6 f9d4 	bl	80005f8 <__aeabi_dmul>
 800a250:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a254:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a258:	2703      	movs	r7, #3
 800a25a:	2400      	movs	r4, #0
 800a25c:	2500      	movs	r5, #0
 800a25e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a262:	4622      	mov	r2, r4
 800a264:	462b      	mov	r3, r5
 800a266:	46b9      	mov	r9, r7
 800a268:	3f01      	subs	r7, #1
 800a26a:	f7f6 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d1f5      	bne.n	800a25e <__ieee754_rem_pio2+0x3b6>
 800a272:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <__ieee754_rem_pio2+0x408>)
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	2302      	movs	r3, #2
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4632      	mov	r2, r6
 800a27c:	464b      	mov	r3, r9
 800a27e:	4651      	mov	r1, sl
 800a280:	a804      	add	r0, sp, #16
 800a282:	f000 f821 	bl	800a2c8 <__kernel_rem_pio2>
 800a286:	9b02      	ldr	r3, [sp, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	4683      	mov	fp, r0
 800a28c:	f6bf ae4c 	bge.w	8009f28 <__ieee754_rem_pio2+0x80>
 800a290:	e9da 2100 	ldrd	r2, r1, [sl]
 800a294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a298:	e9ca 2300 	strd	r2, r3, [sl]
 800a29c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a2a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a2a8:	e73f      	b.n	800a12a <__ieee754_rem_pio2+0x282>
 800a2aa:	bf00      	nop
 800a2ac:	41700000 	.word	0x41700000
 800a2b0:	0800ad90 	.word	0x0800ad90

0800a2b4 <fabs>:
 800a2b4:	ec51 0b10 	vmov	r0, r1, d0
 800a2b8:	ee10 2a10 	vmov	r2, s0
 800a2bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2c0:	ec43 2b10 	vmov	d0, r2, r3
 800a2c4:	4770      	bx	lr
	...

0800a2c8 <__kernel_rem_pio2>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	ed2d 8b02 	vpush	{d8}
 800a2d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a2d4:	f112 0f14 	cmn.w	r2, #20
 800a2d8:	9306      	str	r3, [sp, #24]
 800a2da:	9104      	str	r1, [sp, #16]
 800a2dc:	4bc2      	ldr	r3, [pc, #776]	; (800a5e8 <__kernel_rem_pio2+0x320>)
 800a2de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a2e0:	9009      	str	r0, [sp, #36]	; 0x24
 800a2e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	9b06      	ldr	r3, [sp, #24]
 800a2ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2ee:	bfa8      	it	ge
 800a2f0:	1ed4      	subge	r4, r2, #3
 800a2f2:	9305      	str	r3, [sp, #20]
 800a2f4:	bfb2      	itee	lt
 800a2f6:	2400      	movlt	r4, #0
 800a2f8:	2318      	movge	r3, #24
 800a2fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800a2fe:	f06f 0317 	mvn.w	r3, #23
 800a302:	fb04 3303 	mla	r3, r4, r3, r3
 800a306:	eb03 0a02 	add.w	sl, r3, r2
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	9a05      	ldr	r2, [sp, #20]
 800a30e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a5d8 <__kernel_rem_pio2+0x310>
 800a312:	eb03 0802 	add.w	r8, r3, r2
 800a316:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a318:	1aa7      	subs	r7, r4, r2
 800a31a:	ae20      	add	r6, sp, #128	; 0x80
 800a31c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a320:	2500      	movs	r5, #0
 800a322:	4545      	cmp	r5, r8
 800a324:	dd13      	ble.n	800a34e <__kernel_rem_pio2+0x86>
 800a326:	9b06      	ldr	r3, [sp, #24]
 800a328:	aa20      	add	r2, sp, #128	; 0x80
 800a32a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a32e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	9b00      	ldr	r3, [sp, #0]
 800a338:	4598      	cmp	r8, r3
 800a33a:	dc31      	bgt.n	800a3a0 <__kernel_rem_pio2+0xd8>
 800a33c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a5d8 <__kernel_rem_pio2+0x310>
 800a340:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a344:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a348:	462f      	mov	r7, r5
 800a34a:	2600      	movs	r6, #0
 800a34c:	e01b      	b.n	800a386 <__kernel_rem_pio2+0xbe>
 800a34e:	42ef      	cmn	r7, r5
 800a350:	d407      	bmi.n	800a362 <__kernel_rem_pio2+0x9a>
 800a352:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a356:	f7f6 f8e5 	bl	8000524 <__aeabi_i2d>
 800a35a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a35e:	3501      	adds	r5, #1
 800a360:	e7df      	b.n	800a322 <__kernel_rem_pio2+0x5a>
 800a362:	ec51 0b18 	vmov	r0, r1, d8
 800a366:	e7f8      	b.n	800a35a <__kernel_rem_pio2+0x92>
 800a368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a36c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37c:	f7f5 ff86 	bl	800028c <__adddf3>
 800a380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a384:	3601      	adds	r6, #1
 800a386:	9b05      	ldr	r3, [sp, #20]
 800a388:	429e      	cmp	r6, r3
 800a38a:	f1a7 0708 	sub.w	r7, r7, #8
 800a38e:	ddeb      	ble.n	800a368 <__kernel_rem_pio2+0xa0>
 800a390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a394:	f108 0801 	add.w	r8, r8, #1
 800a398:	ecab 7b02 	vstmia	fp!, {d7}
 800a39c:	3508      	adds	r5, #8
 800a39e:	e7ca      	b.n	800a336 <__kernel_rem_pio2+0x6e>
 800a3a0:	9b00      	ldr	r3, [sp, #0]
 800a3a2:	aa0c      	add	r2, sp, #48	; 0x30
 800a3a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3aa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a3ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a3b0:	9c00      	ldr	r4, [sp, #0]
 800a3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3b4:	00e3      	lsls	r3, r4, #3
 800a3b6:	9308      	str	r3, [sp, #32]
 800a3b8:	ab98      	add	r3, sp, #608	; 0x260
 800a3ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a3c2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a3c6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a3c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a3cc:	46c3      	mov	fp, r8
 800a3ce:	46a1      	mov	r9, r4
 800a3d0:	f1b9 0f00 	cmp.w	r9, #0
 800a3d4:	f1a5 0508 	sub.w	r5, r5, #8
 800a3d8:	dc77      	bgt.n	800a4ca <__kernel_rem_pio2+0x202>
 800a3da:	ec47 6b10 	vmov	d0, r6, r7
 800a3de:	4650      	mov	r0, sl
 800a3e0:	f000 fac2 	bl	800a968 <scalbn>
 800a3e4:	ec57 6b10 	vmov	r6, r7, d0
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a3ee:	ee10 0a10 	vmov	r0, s0
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 f900 	bl	80005f8 <__aeabi_dmul>
 800a3f8:	ec41 0b10 	vmov	d0, r0, r1
 800a3fc:	f000 fb34 	bl	800aa68 <floor>
 800a400:	4b7a      	ldr	r3, [pc, #488]	; (800a5ec <__kernel_rem_pio2+0x324>)
 800a402:	ec51 0b10 	vmov	r0, r1, d0
 800a406:	2200      	movs	r2, #0
 800a408:	f7f6 f8f6 	bl	80005f8 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f5 ff38 	bl	8000288 <__aeabi_dsub>
 800a418:	460f      	mov	r7, r1
 800a41a:	4606      	mov	r6, r0
 800a41c:	f7f6 fb86 	bl	8000b2c <__aeabi_d2iz>
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	f7f6 f87f 	bl	8000524 <__aeabi_i2d>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4630      	mov	r0, r6
 800a42c:	4639      	mov	r1, r7
 800a42e:	f7f5 ff2b 	bl	8000288 <__aeabi_dsub>
 800a432:	f1ba 0f00 	cmp.w	sl, #0
 800a436:	4606      	mov	r6, r0
 800a438:	460f      	mov	r7, r1
 800a43a:	dd6d      	ble.n	800a518 <__kernel_rem_pio2+0x250>
 800a43c:	1e61      	subs	r1, r4, #1
 800a43e:	ab0c      	add	r3, sp, #48	; 0x30
 800a440:	9d02      	ldr	r5, [sp, #8]
 800a442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a446:	f1ca 0018 	rsb	r0, sl, #24
 800a44a:	fa43 f200 	asr.w	r2, r3, r0
 800a44e:	4415      	add	r5, r2
 800a450:	4082      	lsls	r2, r0
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	aa0c      	add	r2, sp, #48	; 0x30
 800a456:	9502      	str	r5, [sp, #8]
 800a458:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a45c:	f1ca 0217 	rsb	r2, sl, #23
 800a460:	fa43 fb02 	asr.w	fp, r3, r2
 800a464:	f1bb 0f00 	cmp.w	fp, #0
 800a468:	dd65      	ble.n	800a536 <__kernel_rem_pio2+0x26e>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	2200      	movs	r2, #0
 800a46e:	3301      	adds	r3, #1
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	4615      	mov	r5, r2
 800a474:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a478:	4294      	cmp	r4, r2
 800a47a:	f300 809f 	bgt.w	800a5bc <__kernel_rem_pio2+0x2f4>
 800a47e:	f1ba 0f00 	cmp.w	sl, #0
 800a482:	dd07      	ble.n	800a494 <__kernel_rem_pio2+0x1cc>
 800a484:	f1ba 0f01 	cmp.w	sl, #1
 800a488:	f000 80c1 	beq.w	800a60e <__kernel_rem_pio2+0x346>
 800a48c:	f1ba 0f02 	cmp.w	sl, #2
 800a490:	f000 80c7 	beq.w	800a622 <__kernel_rem_pio2+0x35a>
 800a494:	f1bb 0f02 	cmp.w	fp, #2
 800a498:	d14d      	bne.n	800a536 <__kernel_rem_pio2+0x26e>
 800a49a:	4632      	mov	r2, r6
 800a49c:	463b      	mov	r3, r7
 800a49e:	4954      	ldr	r1, [pc, #336]	; (800a5f0 <__kernel_rem_pio2+0x328>)
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f7f5 fef1 	bl	8000288 <__aeabi_dsub>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	2d00      	cmp	r5, #0
 800a4ac:	d043      	beq.n	800a536 <__kernel_rem_pio2+0x26e>
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a5e0 <__kernel_rem_pio2+0x318>
 800a4b4:	f000 fa58 	bl	800a968 <scalbn>
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	ec53 2b10 	vmov	r2, r3, d0
 800a4c0:	f7f5 fee2 	bl	8000288 <__aeabi_dsub>
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	e035      	b.n	800a536 <__kernel_rem_pio2+0x26e>
 800a4ca:	4b4a      	ldr	r3, [pc, #296]	; (800a5f4 <__kernel_rem_pio2+0x32c>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	f7f6 fb29 	bl	8000b2c <__aeabi_d2iz>
 800a4da:	f7f6 f823 	bl	8000524 <__aeabi_i2d>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	ec43 2b18 	vmov	d8, r2, r3
 800a4e6:	4b44      	ldr	r3, [pc, #272]	; (800a5f8 <__kernel_rem_pio2+0x330>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	f7f5 fec7 	bl	8000288 <__aeabi_dsub>
 800a4fa:	f7f6 fb17 	bl	8000b2c <__aeabi_d2iz>
 800a4fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a502:	f84b 0b04 	str.w	r0, [fp], #4
 800a506:	ec51 0b18 	vmov	r0, r1, d8
 800a50a:	f7f5 febf 	bl	800028c <__adddf3>
 800a50e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	e75b      	b.n	800a3d0 <__kernel_rem_pio2+0x108>
 800a518:	d106      	bne.n	800a528 <__kernel_rem_pio2+0x260>
 800a51a:	1e63      	subs	r3, r4, #1
 800a51c:	aa0c      	add	r2, sp, #48	; 0x30
 800a51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a522:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a526:	e79d      	b.n	800a464 <__kernel_rem_pio2+0x19c>
 800a528:	4b34      	ldr	r3, [pc, #208]	; (800a5fc <__kernel_rem_pio2+0x334>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	f7f6 faea 	bl	8000b04 <__aeabi_dcmpge>
 800a530:	2800      	cmp	r0, #0
 800a532:	d140      	bne.n	800a5b6 <__kernel_rem_pio2+0x2ee>
 800a534:	4683      	mov	fp, r0
 800a536:	2200      	movs	r2, #0
 800a538:	2300      	movs	r3, #0
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a542:	2800      	cmp	r0, #0
 800a544:	f000 80c1 	beq.w	800a6ca <__kernel_rem_pio2+0x402>
 800a548:	1e65      	subs	r5, r4, #1
 800a54a:	462b      	mov	r3, r5
 800a54c:	2200      	movs	r2, #0
 800a54e:	9900      	ldr	r1, [sp, #0]
 800a550:	428b      	cmp	r3, r1
 800a552:	da6d      	bge.n	800a630 <__kernel_rem_pio2+0x368>
 800a554:	2a00      	cmp	r2, #0
 800a556:	f000 808a 	beq.w	800a66e <__kernel_rem_pio2+0x3a6>
 800a55a:	ab0c      	add	r3, sp, #48	; 0x30
 800a55c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a560:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 80ae 	beq.w	800a6c6 <__kernel_rem_pio2+0x3fe>
 800a56a:	4650      	mov	r0, sl
 800a56c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a5e0 <__kernel_rem_pio2+0x318>
 800a570:	f000 f9fa 	bl	800a968 <scalbn>
 800a574:	1c6b      	adds	r3, r5, #1
 800a576:	00da      	lsls	r2, r3, #3
 800a578:	9205      	str	r2, [sp, #20]
 800a57a:	ec57 6b10 	vmov	r6, r7, d0
 800a57e:	aa70      	add	r2, sp, #448	; 0x1c0
 800a580:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a5f4 <__kernel_rem_pio2+0x32c>
 800a584:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a588:	462c      	mov	r4, r5
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	2c00      	cmp	r4, #0
 800a590:	f280 80d4 	bge.w	800a73c <__kernel_rem_pio2+0x474>
 800a594:	462c      	mov	r4, r5
 800a596:	2c00      	cmp	r4, #0
 800a598:	f2c0 8102 	blt.w	800a7a0 <__kernel_rem_pio2+0x4d8>
 800a59c:	4b18      	ldr	r3, [pc, #96]	; (800a600 <__kernel_rem_pio2+0x338>)
 800a59e:	461e      	mov	r6, r3
 800a5a0:	ab70      	add	r3, sp, #448	; 0x1c0
 800a5a2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a5a6:	1b2b      	subs	r3, r5, r4
 800a5a8:	f04f 0900 	mov.w	r9, #0
 800a5ac:	f04f 0a00 	mov.w	sl, #0
 800a5b0:	2700      	movs	r7, #0
 800a5b2:	9306      	str	r3, [sp, #24]
 800a5b4:	e0e6      	b.n	800a784 <__kernel_rem_pio2+0x4bc>
 800a5b6:	f04f 0b02 	mov.w	fp, #2
 800a5ba:	e756      	b.n	800a46a <__kernel_rem_pio2+0x1a2>
 800a5bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c0:	bb05      	cbnz	r5, 800a604 <__kernel_rem_pio2+0x33c>
 800a5c2:	b123      	cbz	r3, 800a5ce <__kernel_rem_pio2+0x306>
 800a5c4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a5c8:	f8c8 3000 	str.w	r3, [r8]
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	f108 0804 	add.w	r8, r8, #4
 800a5d4:	461d      	mov	r5, r3
 800a5d6:	e74f      	b.n	800a478 <__kernel_rem_pio2+0x1b0>
	...
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	0800aed8 	.word	0x0800aed8
 800a5ec:	40200000 	.word	0x40200000
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	3e700000 	.word	0x3e700000
 800a5f8:	41700000 	.word	0x41700000
 800a5fc:	3fe00000 	.word	0x3fe00000
 800a600:	0800ae98 	.word	0x0800ae98
 800a604:	1acb      	subs	r3, r1, r3
 800a606:	f8c8 3000 	str.w	r3, [r8]
 800a60a:	462b      	mov	r3, r5
 800a60c:	e7df      	b.n	800a5ce <__kernel_rem_pio2+0x306>
 800a60e:	1e62      	subs	r2, r4, #1
 800a610:	ab0c      	add	r3, sp, #48	; 0x30
 800a612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a616:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a61a:	a90c      	add	r1, sp, #48	; 0x30
 800a61c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a620:	e738      	b.n	800a494 <__kernel_rem_pio2+0x1cc>
 800a622:	1e62      	subs	r2, r4, #1
 800a624:	ab0c      	add	r3, sp, #48	; 0x30
 800a626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a62e:	e7f4      	b.n	800a61a <__kernel_rem_pio2+0x352>
 800a630:	a90c      	add	r1, sp, #48	; 0x30
 800a632:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a636:	3b01      	subs	r3, #1
 800a638:	430a      	orrs	r2, r1
 800a63a:	e788      	b.n	800a54e <__kernel_rem_pio2+0x286>
 800a63c:	3301      	adds	r3, #1
 800a63e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a642:	2900      	cmp	r1, #0
 800a644:	d0fa      	beq.n	800a63c <__kernel_rem_pio2+0x374>
 800a646:	9a08      	ldr	r2, [sp, #32]
 800a648:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a64c:	446a      	add	r2, sp
 800a64e:	3a98      	subs	r2, #152	; 0x98
 800a650:	9208      	str	r2, [sp, #32]
 800a652:	9a06      	ldr	r2, [sp, #24]
 800a654:	a920      	add	r1, sp, #128	; 0x80
 800a656:	18a2      	adds	r2, r4, r2
 800a658:	18e3      	adds	r3, r4, r3
 800a65a:	f104 0801 	add.w	r8, r4, #1
 800a65e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a662:	9302      	str	r3, [sp, #8]
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	4543      	cmp	r3, r8
 800a668:	da04      	bge.n	800a674 <__kernel_rem_pio2+0x3ac>
 800a66a:	461c      	mov	r4, r3
 800a66c:	e6a2      	b.n	800a3b4 <__kernel_rem_pio2+0xec>
 800a66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a670:	2301      	movs	r3, #1
 800a672:	e7e4      	b.n	800a63e <__kernel_rem_pio2+0x376>
 800a674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a676:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a67a:	f7f5 ff53 	bl	8000524 <__aeabi_i2d>
 800a67e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a684:	46ab      	mov	fp, r5
 800a686:	461c      	mov	r4, r3
 800a688:	f04f 0900 	mov.w	r9, #0
 800a68c:	2600      	movs	r6, #0
 800a68e:	2700      	movs	r7, #0
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	4599      	cmp	r9, r3
 800a694:	dd06      	ble.n	800a6a4 <__kernel_rem_pio2+0x3dc>
 800a696:	9b08      	ldr	r3, [sp, #32]
 800a698:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a69c:	f108 0801 	add.w	r8, r8, #1
 800a6a0:	9308      	str	r3, [sp, #32]
 800a6a2:	e7df      	b.n	800a664 <__kernel_rem_pio2+0x39c>
 800a6a4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a6a8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a6ac:	f7f5 ffa4 	bl	80005f8 <__aeabi_dmul>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f5 fde8 	bl	800028c <__adddf3>
 800a6bc:	f109 0901 	add.w	r9, r9, #1
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	e7e4      	b.n	800a690 <__kernel_rem_pio2+0x3c8>
 800a6c6:	3d01      	subs	r5, #1
 800a6c8:	e747      	b.n	800a55a <__kernel_rem_pio2+0x292>
 800a6ca:	ec47 6b10 	vmov	d0, r6, r7
 800a6ce:	f1ca 0000 	rsb	r0, sl, #0
 800a6d2:	f000 f949 	bl	800a968 <scalbn>
 800a6d6:	ec57 6b10 	vmov	r6, r7, d0
 800a6da:	4ba0      	ldr	r3, [pc, #640]	; (800a95c <__kernel_rem_pio2+0x694>)
 800a6dc:	ee10 0a10 	vmov	r0, s0
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f6 fa0e 	bl	8000b04 <__aeabi_dcmpge>
 800a6e8:	b1f8      	cbz	r0, 800a72a <__kernel_rem_pio2+0x462>
 800a6ea:	4b9d      	ldr	r3, [pc, #628]	; (800a960 <__kernel_rem_pio2+0x698>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	f7f6 fa19 	bl	8000b2c <__aeabi_d2iz>
 800a6fa:	4680      	mov	r8, r0
 800a6fc:	f7f5 ff12 	bl	8000524 <__aeabi_i2d>
 800a700:	4b96      	ldr	r3, [pc, #600]	; (800a95c <__kernel_rem_pio2+0x694>)
 800a702:	2200      	movs	r2, #0
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	460b      	mov	r3, r1
 800a70a:	4602      	mov	r2, r0
 800a70c:	4639      	mov	r1, r7
 800a70e:	4630      	mov	r0, r6
 800a710:	f7f5 fdba 	bl	8000288 <__aeabi_dsub>
 800a714:	f7f6 fa0a 	bl	8000b2c <__aeabi_d2iz>
 800a718:	1c65      	adds	r5, r4, #1
 800a71a:	ab0c      	add	r3, sp, #48	; 0x30
 800a71c:	f10a 0a18 	add.w	sl, sl, #24
 800a720:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a724:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a728:	e71f      	b.n	800a56a <__kernel_rem_pio2+0x2a2>
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f6 f9fd 	bl	8000b2c <__aeabi_d2iz>
 800a732:	ab0c      	add	r3, sp, #48	; 0x30
 800a734:	4625      	mov	r5, r4
 800a736:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a73a:	e716      	b.n	800a56a <__kernel_rem_pio2+0x2a2>
 800a73c:	ab0c      	add	r3, sp, #48	; 0x30
 800a73e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a742:	f7f5 feef 	bl	8000524 <__aeabi_i2d>
 800a746:	4632      	mov	r2, r6
 800a748:	463b      	mov	r3, r7
 800a74a:	f7f5 ff55 	bl	80005f8 <__aeabi_dmul>
 800a74e:	4642      	mov	r2, r8
 800a750:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a754:	464b      	mov	r3, r9
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f5 ff4d 	bl	80005f8 <__aeabi_dmul>
 800a75e:	3c01      	subs	r4, #1
 800a760:	4606      	mov	r6, r0
 800a762:	460f      	mov	r7, r1
 800a764:	e713      	b.n	800a58e <__kernel_rem_pio2+0x2c6>
 800a766:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a76a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a76e:	f7f5 ff43 	bl	80005f8 <__aeabi_dmul>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4648      	mov	r0, r9
 800a778:	4651      	mov	r1, sl
 800a77a:	f7f5 fd87 	bl	800028c <__adddf3>
 800a77e:	3701      	adds	r7, #1
 800a780:	4681      	mov	r9, r0
 800a782:	468a      	mov	sl, r1
 800a784:	9b00      	ldr	r3, [sp, #0]
 800a786:	429f      	cmp	r7, r3
 800a788:	dc02      	bgt.n	800a790 <__kernel_rem_pio2+0x4c8>
 800a78a:	9b06      	ldr	r3, [sp, #24]
 800a78c:	429f      	cmp	r7, r3
 800a78e:	ddea      	ble.n	800a766 <__kernel_rem_pio2+0x49e>
 800a790:	9a06      	ldr	r2, [sp, #24]
 800a792:	ab48      	add	r3, sp, #288	; 0x120
 800a794:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800a798:	e9c6 9a00 	strd	r9, sl, [r6]
 800a79c:	3c01      	subs	r4, #1
 800a79e:	e6fa      	b.n	800a596 <__kernel_rem_pio2+0x2ce>
 800a7a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	dc0b      	bgt.n	800a7be <__kernel_rem_pio2+0x4f6>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	dc39      	bgt.n	800a81e <__kernel_rem_pio2+0x556>
 800a7aa:	d05d      	beq.n	800a868 <__kernel_rem_pio2+0x5a0>
 800a7ac:	9b02      	ldr	r3, [sp, #8]
 800a7ae:	f003 0007 	and.w	r0, r3, #7
 800a7b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a7b6:	ecbd 8b02 	vpop	{d8}
 800a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	d1f3      	bne.n	800a7ac <__kernel_rem_pio2+0x4e4>
 800a7c4:	9b05      	ldr	r3, [sp, #20]
 800a7c6:	9500      	str	r5, [sp, #0]
 800a7c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a7cc:	eb0d 0403 	add.w	r4, sp, r3
 800a7d0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800a7d4:	46a2      	mov	sl, r4
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f1aa 0a08 	sub.w	sl, sl, #8
 800a7de:	dc69      	bgt.n	800a8b4 <__kernel_rem_pio2+0x5ec>
 800a7e0:	46aa      	mov	sl, r5
 800a7e2:	f1ba 0f01 	cmp.w	sl, #1
 800a7e6:	f1a4 0408 	sub.w	r4, r4, #8
 800a7ea:	f300 8083 	bgt.w	800a8f4 <__kernel_rem_pio2+0x62c>
 800a7ee:	9c05      	ldr	r4, [sp, #20]
 800a7f0:	ab48      	add	r3, sp, #288	; 0x120
 800a7f2:	441c      	add	r4, r3
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	2d01      	cmp	r5, #1
 800a7fa:	f300 809a 	bgt.w	800a932 <__kernel_rem_pio2+0x66a>
 800a7fe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800a802:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a806:	f1bb 0f00 	cmp.w	fp, #0
 800a80a:	f040 8098 	bne.w	800a93e <__kernel_rem_pio2+0x676>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	e9c3 7800 	strd	r7, r8, [r3]
 800a814:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a818:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a81c:	e7c6      	b.n	800a7ac <__kernel_rem_pio2+0x4e4>
 800a81e:	9e05      	ldr	r6, [sp, #20]
 800a820:	ab48      	add	r3, sp, #288	; 0x120
 800a822:	441e      	add	r6, r3
 800a824:	462c      	mov	r4, r5
 800a826:	2000      	movs	r0, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	2c00      	cmp	r4, #0
 800a82c:	da33      	bge.n	800a896 <__kernel_rem_pio2+0x5ce>
 800a82e:	f1bb 0f00 	cmp.w	fp, #0
 800a832:	d036      	beq.n	800a8a2 <__kernel_rem_pio2+0x5da>
 800a834:	4602      	mov	r2, r0
 800a836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a83a:	9c04      	ldr	r4, [sp, #16]
 800a83c:	e9c4 2300 	strd	r2, r3, [r4]
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a848:	f7f5 fd1e 	bl	8000288 <__aeabi_dsub>
 800a84c:	ae4a      	add	r6, sp, #296	; 0x128
 800a84e:	2401      	movs	r4, #1
 800a850:	42a5      	cmp	r5, r4
 800a852:	da29      	bge.n	800a8a8 <__kernel_rem_pio2+0x5e0>
 800a854:	f1bb 0f00 	cmp.w	fp, #0
 800a858:	d002      	beq.n	800a860 <__kernel_rem_pio2+0x598>
 800a85a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a85e:	4619      	mov	r1, r3
 800a860:	9b04      	ldr	r3, [sp, #16]
 800a862:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a866:	e7a1      	b.n	800a7ac <__kernel_rem_pio2+0x4e4>
 800a868:	9c05      	ldr	r4, [sp, #20]
 800a86a:	ab48      	add	r3, sp, #288	; 0x120
 800a86c:	441c      	add	r4, r3
 800a86e:	2000      	movs	r0, #0
 800a870:	2100      	movs	r1, #0
 800a872:	2d00      	cmp	r5, #0
 800a874:	da09      	bge.n	800a88a <__kernel_rem_pio2+0x5c2>
 800a876:	f1bb 0f00 	cmp.w	fp, #0
 800a87a:	d002      	beq.n	800a882 <__kernel_rem_pio2+0x5ba>
 800a87c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a880:	4619      	mov	r1, r3
 800a882:	9b04      	ldr	r3, [sp, #16]
 800a884:	e9c3 0100 	strd	r0, r1, [r3]
 800a888:	e790      	b.n	800a7ac <__kernel_rem_pio2+0x4e4>
 800a88a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a88e:	f7f5 fcfd 	bl	800028c <__adddf3>
 800a892:	3d01      	subs	r5, #1
 800a894:	e7ed      	b.n	800a872 <__kernel_rem_pio2+0x5aa>
 800a896:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a89a:	f7f5 fcf7 	bl	800028c <__adddf3>
 800a89e:	3c01      	subs	r4, #1
 800a8a0:	e7c3      	b.n	800a82a <__kernel_rem_pio2+0x562>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	e7c8      	b.n	800a83a <__kernel_rem_pio2+0x572>
 800a8a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a8ac:	f7f5 fcee 	bl	800028c <__adddf3>
 800a8b0:	3401      	adds	r4, #1
 800a8b2:	e7cd      	b.n	800a850 <__kernel_rem_pio2+0x588>
 800a8b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a8b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a8bc:	9b00      	ldr	r3, [sp, #0]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	f7f5 fcdf 	bl	800028c <__adddf3>
 800a8ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	4649      	mov	r1, r9
 800a8da:	f7f5 fcd5 	bl	8000288 <__aeabi_dsub>
 800a8de:	4632      	mov	r2, r6
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	f7f5 fcd3 	bl	800028c <__adddf3>
 800a8e6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a8ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8ee:	ed8a 7b00 	vstr	d7, [sl]
 800a8f2:	e770      	b.n	800a7d6 <__kernel_rem_pio2+0x50e>
 800a8f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a8f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	4649      	mov	r1, r9
 800a904:	f7f5 fcc2 	bl	800028c <__adddf3>
 800a908:	e9cd 0100 	strd	r0, r1, [sp]
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	f7f5 fcb8 	bl	8000288 <__aeabi_dsub>
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	f7f5 fcb6 	bl	800028c <__adddf3>
 800a920:	ed9d 7b00 	vldr	d7, [sp]
 800a924:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a928:	ed84 7b00 	vstr	d7, [r4]
 800a92c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a930:	e757      	b.n	800a7e2 <__kernel_rem_pio2+0x51a>
 800a932:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a936:	f7f5 fca9 	bl	800028c <__adddf3>
 800a93a:	3d01      	subs	r5, #1
 800a93c:	e75c      	b.n	800a7f8 <__kernel_rem_pio2+0x530>
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	9a04      	ldr	r2, [sp, #16]
 800a942:	601f      	str	r7, [r3, #0]
 800a944:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a948:	605c      	str	r4, [r3, #4]
 800a94a:	609d      	str	r5, [r3, #8]
 800a94c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a950:	60d3      	str	r3, [r2, #12]
 800a952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a956:	6110      	str	r0, [r2, #16]
 800a958:	6153      	str	r3, [r2, #20]
 800a95a:	e727      	b.n	800a7ac <__kernel_rem_pio2+0x4e4>
 800a95c:	41700000 	.word	0x41700000
 800a960:	3e700000 	.word	0x3e700000
 800a964:	00000000 	.word	0x00000000

0800a968 <scalbn>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	ec55 4b10 	vmov	r4, r5, d0
 800a96e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a972:	4606      	mov	r6, r0
 800a974:	462b      	mov	r3, r5
 800a976:	b999      	cbnz	r1, 800a9a0 <scalbn+0x38>
 800a978:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a97c:	4323      	orrs	r3, r4
 800a97e:	d03f      	beq.n	800aa00 <scalbn+0x98>
 800a980:	4b35      	ldr	r3, [pc, #212]	; (800aa58 <scalbn+0xf0>)
 800a982:	4629      	mov	r1, r5
 800a984:	ee10 0a10 	vmov	r0, s0
 800a988:	2200      	movs	r2, #0
 800a98a:	f7f5 fe35 	bl	80005f8 <__aeabi_dmul>
 800a98e:	4b33      	ldr	r3, [pc, #204]	; (800aa5c <scalbn+0xf4>)
 800a990:	429e      	cmp	r6, r3
 800a992:	4604      	mov	r4, r0
 800a994:	460d      	mov	r5, r1
 800a996:	da10      	bge.n	800a9ba <scalbn+0x52>
 800a998:	a327      	add	r3, pc, #156	; (adr r3, 800aa38 <scalbn+0xd0>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	e01f      	b.n	800a9e0 <scalbn+0x78>
 800a9a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a9a4:	4291      	cmp	r1, r2
 800a9a6:	d10c      	bne.n	800a9c2 <scalbn+0x5a>
 800a9a8:	ee10 2a10 	vmov	r2, s0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f5 fc6c 	bl	800028c <__adddf3>
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	e022      	b.n	800aa00 <scalbn+0x98>
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a9c0:	3936      	subs	r1, #54	; 0x36
 800a9c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a9c6:	4296      	cmp	r6, r2
 800a9c8:	dd0d      	ble.n	800a9e6 <scalbn+0x7e>
 800a9ca:	2d00      	cmp	r5, #0
 800a9cc:	a11c      	add	r1, pc, #112	; (adr r1, 800aa40 <scalbn+0xd8>)
 800a9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d2:	da02      	bge.n	800a9da <scalbn+0x72>
 800a9d4:	a11c      	add	r1, pc, #112	; (adr r1, 800aa48 <scalbn+0xe0>)
 800a9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9da:	a319      	add	r3, pc, #100	; (adr r3, 800aa40 <scalbn+0xd8>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fe0a 	bl	80005f8 <__aeabi_dmul>
 800a9e4:	e7e6      	b.n	800a9b4 <scalbn+0x4c>
 800a9e6:	1872      	adds	r2, r6, r1
 800a9e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a9ec:	428a      	cmp	r2, r1
 800a9ee:	dcec      	bgt.n	800a9ca <scalbn+0x62>
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	dd08      	ble.n	800aa06 <scalbn+0x9e>
 800a9f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa00:	ec45 4b10 	vmov	d0, r4, r5
 800aa04:	bd70      	pop	{r4, r5, r6, pc}
 800aa06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa0a:	da08      	bge.n	800aa1e <scalbn+0xb6>
 800aa0c:	2d00      	cmp	r5, #0
 800aa0e:	a10a      	add	r1, pc, #40	; (adr r1, 800aa38 <scalbn+0xd0>)
 800aa10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa14:	dac0      	bge.n	800a998 <scalbn+0x30>
 800aa16:	a10e      	add	r1, pc, #56	; (adr r1, 800aa50 <scalbn+0xe8>)
 800aa18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa1c:	e7bc      	b.n	800a998 <scalbn+0x30>
 800aa1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa22:	3236      	adds	r2, #54	; 0x36
 800aa24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4b0c      	ldr	r3, [pc, #48]	; (800aa60 <scalbn+0xf8>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	e7d5      	b.n	800a9e0 <scalbn+0x78>
 800aa34:	f3af 8000 	nop.w
 800aa38:	c2f8f359 	.word	0xc2f8f359
 800aa3c:	01a56e1f 	.word	0x01a56e1f
 800aa40:	8800759c 	.word	0x8800759c
 800aa44:	7e37e43c 	.word	0x7e37e43c
 800aa48:	8800759c 	.word	0x8800759c
 800aa4c:	fe37e43c 	.word	0xfe37e43c
 800aa50:	c2f8f359 	.word	0xc2f8f359
 800aa54:	81a56e1f 	.word	0x81a56e1f
 800aa58:	43500000 	.word	0x43500000
 800aa5c:	ffff3cb0 	.word	0xffff3cb0
 800aa60:	3c900000 	.word	0x3c900000
 800aa64:	00000000 	.word	0x00000000

0800aa68 <floor>:
 800aa68:	ec51 0b10 	vmov	r0, r1, d0
 800aa6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800aa78:	2e13      	cmp	r6, #19
 800aa7a:	ee10 5a10 	vmov	r5, s0
 800aa7e:	ee10 8a10 	vmov	r8, s0
 800aa82:	460c      	mov	r4, r1
 800aa84:	dc31      	bgt.n	800aaea <floor+0x82>
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	da14      	bge.n	800aab4 <floor+0x4c>
 800aa8a:	a333      	add	r3, pc, #204	; (adr r3, 800ab58 <floor+0xf0>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f7f5 fbfc 	bl	800028c <__adddf3>
 800aa94:	2200      	movs	r2, #0
 800aa96:	2300      	movs	r3, #0
 800aa98:	f7f6 f83e 	bl	8000b18 <__aeabi_dcmpgt>
 800aa9c:	b138      	cbz	r0, 800aaae <floor+0x46>
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	da53      	bge.n	800ab4a <floor+0xe2>
 800aaa2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800aaa6:	4325      	orrs	r5, r4
 800aaa8:	d052      	beq.n	800ab50 <floor+0xe8>
 800aaaa:	4c2d      	ldr	r4, [pc, #180]	; (800ab60 <floor+0xf8>)
 800aaac:	2500      	movs	r5, #0
 800aaae:	4621      	mov	r1, r4
 800aab0:	4628      	mov	r0, r5
 800aab2:	e024      	b.n	800aafe <floor+0x96>
 800aab4:	4f2b      	ldr	r7, [pc, #172]	; (800ab64 <floor+0xfc>)
 800aab6:	4137      	asrs	r7, r6
 800aab8:	ea01 0307 	and.w	r3, r1, r7
 800aabc:	4303      	orrs	r3, r0
 800aabe:	d01e      	beq.n	800aafe <floor+0x96>
 800aac0:	a325      	add	r3, pc, #148	; (adr r3, 800ab58 <floor+0xf0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fbe1 	bl	800028c <__adddf3>
 800aaca:	2200      	movs	r2, #0
 800aacc:	2300      	movs	r3, #0
 800aace:	f7f6 f823 	bl	8000b18 <__aeabi_dcmpgt>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d0eb      	beq.n	800aaae <floor+0x46>
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	bfbe      	ittt	lt
 800aada:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aade:	4133      	asrlt	r3, r6
 800aae0:	18e4      	addlt	r4, r4, r3
 800aae2:	ea24 0407 	bic.w	r4, r4, r7
 800aae6:	2500      	movs	r5, #0
 800aae8:	e7e1      	b.n	800aaae <floor+0x46>
 800aaea:	2e33      	cmp	r6, #51	; 0x33
 800aaec:	dd0b      	ble.n	800ab06 <floor+0x9e>
 800aaee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aaf2:	d104      	bne.n	800aafe <floor+0x96>
 800aaf4:	ee10 2a10 	vmov	r2, s0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	f7f5 fbc7 	bl	800028c <__adddf3>
 800aafe:	ec41 0b10 	vmov	d0, r0, r1
 800ab02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab06:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ab0a:	f04f 37ff 	mov.w	r7, #4294967295
 800ab0e:	40df      	lsrs	r7, r3
 800ab10:	4238      	tst	r0, r7
 800ab12:	d0f4      	beq.n	800aafe <floor+0x96>
 800ab14:	a310      	add	r3, pc, #64	; (adr r3, 800ab58 <floor+0xf0>)
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	f7f5 fbb7 	bl	800028c <__adddf3>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2300      	movs	r3, #0
 800ab22:	f7f5 fff9 	bl	8000b18 <__aeabi_dcmpgt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d0c1      	beq.n	800aaae <floor+0x46>
 800ab2a:	2c00      	cmp	r4, #0
 800ab2c:	da0a      	bge.n	800ab44 <floor+0xdc>
 800ab2e:	2e14      	cmp	r6, #20
 800ab30:	d101      	bne.n	800ab36 <floor+0xce>
 800ab32:	3401      	adds	r4, #1
 800ab34:	e006      	b.n	800ab44 <floor+0xdc>
 800ab36:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	40b3      	lsls	r3, r6
 800ab3e:	441d      	add	r5, r3
 800ab40:	45a8      	cmp	r8, r5
 800ab42:	d8f6      	bhi.n	800ab32 <floor+0xca>
 800ab44:	ea25 0507 	bic.w	r5, r5, r7
 800ab48:	e7b1      	b.n	800aaae <floor+0x46>
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	462c      	mov	r4, r5
 800ab4e:	e7ae      	b.n	800aaae <floor+0x46>
 800ab50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ab54:	e7ab      	b.n	800aaae <floor+0x46>
 800ab56:	bf00      	nop
 800ab58:	8800759c 	.word	0x8800759c
 800ab5c:	7e37e43c 	.word	0x7e37e43c
 800ab60:	bff00000 	.word	0xbff00000
 800ab64:	000fffff 	.word	0x000fffff

0800ab68 <_init>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr

0800ab74 <_fini>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr
