
projectNucleo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800a960  0800a960  0001a960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed8  0800aed8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aee0  0800aee0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aee0  0800aee0  0001aee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aee4  0800aee4  0001aee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001e4  0800b0cc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800b0cc  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012288  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000284c  00000000  00000000  000324df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00034d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c46  00000000  00000000  00035d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fb7  00000000  00000000  0003695e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c2f  00000000  00000000  00059915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d493f  00000000  00000000  0006d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053ec  00000000  00000000  00141e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  00147270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a944 	.word	0x0800a944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a944 	.word	0x0800a944

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e020      	b.n	8000efa <calculate_crc+0x56>
		crc ^= data[i];
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	4053      	eors	r3, r2
 8000ec4:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	e010      	b.n	8000eee <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da06      	bge.n	8000ee2 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000ede:	75fb      	strb	r3, [r7, #23]
 8000ee0:	e002      	b.n	8000ee8 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d9eb      	bls.n	8000ecc <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3da      	bcc.n	8000eb8 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	733b      	strb	r3, [r7, #12]
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	889b      	ldrh	r3, [r3, #4]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	b299      	uxth	r1, r3
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	231e      	movs	r3, #30
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2302      	movs	r3, #2
 8000f42:	f002 fe33 	bl	8003bac <HAL_I2C_Master_Transmit>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <sht3x_send_command+0x42>
	}

	return true;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	460a      	mov	r2, r1
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	4613      	mov	r3, r2
 8000f68:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b29b      	uxth	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <sht3x_init+0x1e>
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <sht3x_init+0x74>)
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <sht3x_init+0x78>)
 8000f9e:	2138      	movs	r1, #56	; 0x38
 8000fa0:	4818      	ldr	r0, [pc, #96]	; (8001004 <sht3x_init+0x7c>)
 8000fa2:	f006 fe39 	bl	8007c18 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	889b      	ldrh	r3, [r3, #4]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	231e      	movs	r3, #30
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8000fc6:	f003 f8bd 	bl	8004144 <HAL_I2C_Mem_Read>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e00e      	b.n	8000ff2 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff62 	bl	8000ea4 <calculate_crc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <sht3x_init+0x68>
		return false;
 8000fec:	2300      	movs	r3, #0
 8000fee:	e000      	b.n	8000ff2 <sht3x_init+0x6a>
	}

	return true;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800a960 	.word	0x0800a960
 8001000:	0800ab10 	.word	0x0800ab10
 8001004:	0800a9a0 	.word	0x0800a9a0

08001008 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001014:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ff79 	bl	8000f10 <sht3x_send_command>

	HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 f814 	bl	800204c <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b299      	uxth	r1, r3
 8001030:	f107 0214 	add.w	r2, r7, #20
 8001034:	231e      	movs	r3, #30
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2306      	movs	r3, #6
 800103a:	f002 fecf 	bl	8003ddc <HAL_I2C_Master_Receive>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001044:	2300      	movs	r3, #0
 8001046:	e04f      	b.n	80010e8 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff28 	bl	8000ea4 <calculate_crc>
 8001054:	4603      	mov	r3, r0
 8001056:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	3303      	adds	r3, #3
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff1f 	bl	8000ea4 <calculate_crc>
 8001066:	4603      	mov	r3, r0
 8001068:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 800106a:	7dbb      	ldrb	r3, [r7, #22]
 800106c:	7ffa      	ldrb	r2, [r7, #31]
 800106e:	429a      	cmp	r2, r3
 8001070:	d103      	bne.n	800107a <sht3x_read_temperature_and_humidity+0x72>
 8001072:	7e7b      	ldrb	r3, [r7, #25]
 8001074:	7fba      	ldrb	r2, [r7, #30]
 8001076:	429a      	cmp	r2, r3
 8001078:	d001      	beq.n	800107e <sht3x_read_temperature_and_humidity+0x76>
		return false;
 800107a:	2300      	movs	r3, #0
 800107c:	e034      	b.n	80010e8 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 800107e:	7d3b      	ldrb	r3, [r7, #20]
 8001080:	7d7a      	ldrb	r2, [r7, #21]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff68 	bl	8000f5a <uint8_to_uint16>
 800108a:	4603      	mov	r3, r0
 800108c:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	7e3a      	ldrb	r2, [r7, #24]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff60 	bl	8000f5a <uint8_to_uint16>
 800109a:	4603      	mov	r3, r0
 800109c:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 800109e:	8bbb      	ldrh	r3, [r7, #28]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010f0 <sht3x_read_temperature_and_humidity+0xe8>
 80010ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010b0:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010f4 <sht3x_read_temperature_and_humidity+0xec>
 80010b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010f8 <sht3x_read_temperature_and_humidity+0xf0>
 80010bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 80010c6:	8b7b      	ldrh	r3, [r7, #26]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80010fc <sht3x_read_temperature_and_humidity+0xf4>
 80010d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010d8:	eddf 6a06 	vldr	s13, [pc, #24]	; 80010f4 <sht3x_read_temperature_and_humidity+0xec>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edc3 7a00 	vstr	s15, [r3]

	return true;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	432f0000 	.word	0x432f0000
 80010f4:	477fff00 	.word	0x477fff00
 80010f8:	42340000 	.word	0x42340000
 80010fc:	42c80000 	.word	0x42c80000

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af02      	add	r7, sp, #8
//	HAL_StatusTypeDef ret;

//	int16_t val;
//	float temp_c;

	sht3x_handle_t handle = {
 8001106:	4a64      	ldr	r2, [pc, #400]	; (8001298 <main+0x198>)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001110:	e883 0003 	stmia.w	r3, {r0, r1}
	    .i2c_handle = &hi2c3,
	    .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
	};

	if (!sht3x_init(&handle)) {
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff35 	bl	8000f88 <sht3x_init>
 800111e:	4603      	mov	r3, r0
 8001120:	f083 0301 	eor.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <main+0x30>
	    printf("SHT3x access failed.\n\r");
 800112a:	485c      	ldr	r0, [pc, #368]	; (800129c <main+0x19c>)
 800112c:	f007 facc 	bl	80086c8 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 ff17 	bl	8001f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f8da 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 fa4e 	bl	80015d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113c:	f000 fa1c 	bl	8001578 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001140:	f000 f99a 	bl	8001478 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001144:	f000 f9d8 	bl	80014f8 <MX_I2C3_Init>
  MX_ADC1_Init();
 8001148:	f000 f932 	bl	80013b0 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Transmit(&huart2, " - Nucleo 1 online - \n\r", 23, HAL_MAX_DELAY);
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2217      	movs	r2, #23
 8001152:	4953      	ldr	r1, [pc, #332]	; (80012a0 <main+0x1a0>)
 8001154:	4853      	ldr	r0, [pc, #332]	; (80012a4 <main+0x1a4>)
 8001156:	f006 f893 	bl	8007280 <HAL_UART_Transmit>
  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	4952      	ldr	r1, [pc, #328]	; (80012a8 <main+0x1a8>)
 800115e:	4853      	ldr	r0, [pc, #332]	; (80012ac <main+0x1ac>)
 8001160:	f002 ffa0 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>

  //initialisatie van de co2 sensor
  HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, (uint8_t[]) {0x20, 0x03}, 2, HAL_MAX_DELAY);
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <main+0x1b0>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	81bb      	strh	r3, [r7, #12]
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2302      	movs	r3, #2
 8001176:	21b0      	movs	r1, #176	; 0xb0
 8001178:	484e      	ldr	r0, [pc, #312]	; (80012b4 <main+0x1b4>)
 800117a:	f002 fd17 	bl	8003bac <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 800117e:	200a      	movs	r0, #10
 8001180:	f000 ff64 	bl	800204c <HAL_Delay>

  while (1)
  {
	  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	4948      	ldr	r1, [pc, #288]	; (80012a8 <main+0x1a8>)
 8001188:	4848      	ldr	r0, [pc, #288]	; (80012ac <main+0x1ac>)
 800118a:	f002 ff8b 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
	  /*
	   * Readout temperature and humidity using library functions and store them in corresponding buffers
	   */

	  sht3x_read_temperature_and_humidity(&handle, &temp, &humidity);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4a49      	ldr	r2, [pc, #292]	; (80012b8 <main+0x1b8>)
 8001194:	4949      	ldr	r1, [pc, #292]	; (80012bc <main+0x1bc>)
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff36 	bl	8001008 <sht3x_read_temperature_and_humidity>
	  sprintf(temperatureBuf, "%.1lf", temp);
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <main+0x1bc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9d1 	bl	8000548 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4945      	ldr	r1, [pc, #276]	; (80012c0 <main+0x1c0>)
 80011ac:	4845      	ldr	r0, [pc, #276]	; (80012c4 <main+0x1c4>)
 80011ae:	f007 fa9d 	bl	80086ec <siprintf>
	  sprintf(humidityBuf, "%.1lf", humidity);
 80011b2:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <main+0x1b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	493f      	ldr	r1, [pc, #252]	; (80012c0 <main+0x1c0>)
 80011c2:	4841      	ldr	r0, [pc, #260]	; (80012c8 <main+0x1c8>)
 80011c4:	f007 fa92 	bl	80086ec <siprintf>
	  HAL_Delay(10);
 80011c8:	200a      	movs	r0, #10
 80011ca:	f000 ff3f 	bl	800204c <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 80011ce:	483f      	ldr	r0, [pc, #252]	; (80012cc <main+0x1cc>)
 80011d0:	f001 fab8 	bl	8002744 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	483c      	ldr	r0, [pc, #240]	; (80012cc <main+0x1cc>)
 80011da:	f001 fb49 	bl	8002870 <HAL_ADC_PollForConversion>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10c      	bne.n	80011fe <main+0xfe>
		  HAL_ADC_Stop(&hadc1);
 80011e4:	4839      	ldr	r0, [pc, #228]	; (80012cc <main+0x1cc>)
 80011e6:	f001 fb10 	bl	800280a <HAL_ADC_Stop>
		  moisture = HAL_ADC_GetValue(&hadc1);
 80011ea:	4838      	ldr	r0, [pc, #224]	; (80012cc <main+0x1cc>)
 80011ec:	f001 fbcf 	bl	800298e <HAL_ADC_GetValue>
 80011f0:	ee07 0a90 	vmov	s15, r0
 80011f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <main+0x1d0>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	  }
	  sprintf(moistureBuf, "%d", (unsigned int)moisture);
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <main+0x1d0>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001208:	ee17 2a90 	vmov	r2, s15
 800120c:	4931      	ldr	r1, [pc, #196]	; (80012d4 <main+0x1d4>)
 800120e:	4832      	ldr	r0, [pc, #200]	; (80012d8 <main+0x1d8>)
 8001210:	f007 fa6c 	bl	80086ec <siprintf>
	  //HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);

		//char buf[50];       // Read data from SGP30 sensor
		uint8_t data[6]; // Data buffer to store sensor readings
		// Request measurement
		uint8_t command[] = {0x20, 0x08}; // Command for reading measurement data
 8001214:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001218:	803b      	strh	r3, [r7, #0]
		HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, command, sizeof(command), HAL_MAX_DELAY);
 800121a:	463a      	mov	r2, r7
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2302      	movs	r3, #2
 8001224:	21b0      	movs	r1, #176	; 0xb0
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <main+0x1b4>)
 8001228:	f002 fcc0 	bl	8003bac <HAL_I2C_Master_Transmit>
		// Wait for measurement to complete
		HAL_Delay(12);
 800122c:	200c      	movs	r0, #12
 800122e:	f000 ff0d 	bl	800204c <HAL_Delay>
		// Read measurement data
		HAL_I2C_Master_Receive(&hi2c3, (0x58 << 1) | 0x01, data, sizeof(data), HAL_MAX_DELAY);
 8001232:	1d3a      	adds	r2, r7, #4
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2306      	movs	r3, #6
 800123c:	21b1      	movs	r1, #177	; 0xb1
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <main+0x1b4>)
 8001240:	f002 fdcc 	bl	8003ddc <HAL_I2C_Master_Receive>
		// Process data to get CO2 and TVOC
		CO2 = (data[0] << 8) | data[1];
 8001244:	793b      	ldrb	r3, [r7, #4]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b21a      	sxth	r2, r3
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21b      	sxth	r3, r3
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <main+0x1dc>)
 8001256:	801a      	strh	r2, [r3, #0]
		TVOC = (data[3] << 8) | data[4];        // Print data to Serial port (UART)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	7a3b      	ldrb	r3, [r7, #8]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21b      	sxth	r3, r3
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <main+0x1e0>)
 800126a:	801a      	strh	r2, [r3, #0]
		//sprintf(buf, "CO2: %d TVOC: %d \r\n", CO2, TVOC);
		//HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
		if(CO2 < 999){
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <main+0x1dc>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001274:	4293      	cmp	r3, r2
 8001276:	d807      	bhi.n	8001288 <main+0x188>
			sprintf(co2Buf, "0%d", CO2);
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <main+0x1dc>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4919      	ldr	r1, [pc, #100]	; (80012e4 <main+0x1e4>)
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <main+0x1e8>)
 8001282:	f007 fa33 	bl	80086ec <siprintf>
 8001286:	e77d      	b.n	8001184 <main+0x84>
		}
		else {
			sprintf(co2Buf, "%d", CO2);
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <main+0x1dc>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4911      	ldr	r1, [pc, #68]	; (80012d4 <main+0x1d4>)
 8001290:	4815      	ldr	r0, [pc, #84]	; (80012e8 <main+0x1e8>)
 8001292:	f007 fa2b 	bl	80086ec <siprintf>
  {
 8001296:	e775      	b.n	8001184 <main+0x84>
 8001298:	0800a9f4 	.word	0x0800a9f4
 800129c:	0800a9b4 	.word	0x0800a9b4
 80012a0:	0800a9cc 	.word	0x0800a9cc
 80012a4:	2000030c 	.word	0x2000030c
 80012a8:	20000394 	.word	0x20000394
 80012ac:	20000264 	.word	0x20000264
 80012b0:	0800a9fc 	.word	0x0800a9fc
 80012b4:	200002b8 	.word	0x200002b8
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000000 	.word	0x20000000
 80012c0:	0800a9e4 	.word	0x0800a9e4
 80012c4:	20000398 	.word	0x20000398
 80012c8:	200003cc 	.word	0x200003cc
 80012cc:	20000200 	.word	0x20000200
 80012d0:	20000008 	.word	0x20000008
 80012d4:	0800a9ec 	.word	0x0800a9ec
 80012d8:	20000400 	.word	0x20000400
 80012dc:	2000000c 	.word	0x2000000c
 80012e0:	2000000e 	.word	0x2000000e
 80012e4:	0800a9f0 	.word	0x0800a9f0
 80012e8:	20000434 	.word	0x20000434

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b096      	sub	sp, #88	; 0x58
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2244      	movs	r2, #68	; 0x44
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fa59 	bl	80087b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800130e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001312:	f004 fde1 	bl	8005ed8 <HAL_PWREx_ControlVoltageScaling>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800131c:	f000 fafc 	bl	8001918 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001320:	f004 fdbc 	bl	8005e9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <SystemClock_Config+0xc0>)
 8001326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <SystemClock_Config+0xc0>)
 800132c:	f023 0318 	bic.w	r3, r3, #24
 8001330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001334:	2314      	movs	r3, #20
 8001336:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001344:	2360      	movs	r3, #96	; 0x60
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001348:	2302      	movs	r3, #2
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800134c:	2301      	movs	r3, #1
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001354:	2310      	movs	r3, #16
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001358:	2307      	movs	r3, #7
 800135a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4618      	mov	r0, r3
 800136a:	f004 fe0b 	bl	8005f84 <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001374:	f000 fad0 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2303      	movs	r3, #3
 800137e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2101      	movs	r1, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f005 fa0b 	bl	80067ac <HAL_RCC_ClockConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800139c:	f000 fabc 	bl	8001918 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013a0:	f005 fe1e 	bl	8006fe0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013a4:	bf00      	nop
 80013a6:	3758      	adds	r7, #88	; 0x58
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <MX_ADC1_Init+0xbc>)
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <MX_ADC1_Init+0xbc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <MX_ADC1_Init+0xbc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_ADC1_Init+0xbc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <MX_ADC1_Init+0xbc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_ADC1_Init+0xbc>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_ADC1_Init+0xbc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_ADC1_Init+0xbc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_ADC1_Init+0xbc>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_ADC1_Init+0xbc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_ADC1_Init+0xbc>)
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_ADC1_Init+0xbc>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_ADC1_Init+0xbc>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC1_Init+0xbc>)
 800141a:	2200      	movs	r2, #0
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_ADC1_Init+0xbc>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_ADC1_Init+0xbc>)
 8001428:	f001 f84a 	bl	80024c0 <HAL_ADC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001432:	f000 fa71 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_ADC1_Init+0xc4>)
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800143a:	2306      	movs	r3, #6
 800143c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001442:	237f      	movs	r3, #127	; 0x7f
 8001444:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001446:	2304      	movs	r3, #4
 8001448:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_ADC1_Init+0xbc>)
 8001454:	f001 faa8 	bl	80029a8 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800145e:	f000 fa5b 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000200 	.word	0x20000200
 8001470:	50040000 	.word	0x50040000
 8001474:	21800100 	.word	0x21800100

08001478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_I2C1_Init+0x74>)
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <MX_I2C1_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_I2C1_Init+0x74>)
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <MX_I2C1_Init+0x7c>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_I2C1_Init+0x74>)
 800148a:	2220      	movs	r2, #32
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_I2C1_Init+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_I2C1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MX_I2C1_Init+0x74>)
 80014b4:	f002 fade 	bl	8003a74 <HAL_I2C_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014be:	f000 fa2b 	bl	8001918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <MX_I2C1_Init+0x74>)
 80014c6:	f004 fc51 	bl	8005d6c <HAL_I2CEx_ConfigAnalogFilter>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 fa22 	bl	8001918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_I2C1_Init+0x74>)
 80014d8:	f004 fc93 	bl	8005e02 <HAL_I2CEx_ConfigDigitalFilter>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 fa19 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000264 	.word	0x20000264
 80014f0:	40005400 	.word	0x40005400
 80014f4:	00707cbb 	.word	0x00707cbb

080014f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_I2C3_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_I2C3_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_I2C3_Init+0x74>)
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <MX_I2C3_Init+0x7c>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_I2C3_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_I2C3_Init+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_I2C3_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_I2C3_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C3_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C3_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C3_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_I2C3_Init+0x74>)
 8001534:	f002 fa9e 	bl	8003a74 <HAL_I2C_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800153e:	f000 f9eb 	bl	8001918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <MX_I2C3_Init+0x74>)
 8001546:	f004 fc11 	bl	8005d6c <HAL_I2CEx_ConfigAnalogFilter>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001550:	f000 f9e2 	bl	8001918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_I2C3_Init+0x74>)
 8001558:	f004 fc53 	bl	8005e02 <HAL_I2CEx_ConfigDigitalFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f9d9 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002b8 	.word	0x200002b8
 8001570:	40005c00 	.word	0x40005c00
 8001574:	00707cbb 	.word	0x00707cbb

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_USART2_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015bc:	f005 fe12 	bl	80071e4 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f9a7 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000030c 	.word	0x2000030c
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <MX_GPIO_Init+0xd4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <MX_GPIO_Init+0xd4>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <MX_GPIO_Init+0xd4>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_GPIO_Init+0xd4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <MX_GPIO_Init+0xd4>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <MX_GPIO_Init+0xd4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <MX_GPIO_Init+0xd4>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <MX_GPIO_Init+0xd4>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_GPIO_Init+0xd4>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f002 fa00 	bl	8003a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2108      	movs	r1, #8
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <MX_GPIO_Init+0xd8>)
 800164a:	f002 f9fb 	bl	8003a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800164e:	2302      	movs	r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4619      	mov	r1, r3
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <MX_GPIO_Init+0xd8>)
 8001662:	f002 f885 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : output1_Pin */
  GPIO_InitStruct.Pin = output1_Pin;
 8001666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(output1_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f002 f875 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001686:	2308      	movs	r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_GPIO_Init+0xd8>)
 800169e:	f002 f867 	bl	8003770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400

080016b4 <HAL_I2C_SlaveRxCpltCallback>:
 * 0x01 - Request temperature data
 * 0x02 - Turn single LED ON
 * 0x03 - Turn single LED OFF
 * 0x04 - Request button data (Not in use)
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	//yete
	if (received_command == 0x01) {
 80016bc:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d132      	bne.n	800172a <HAL_I2C_SlaveRxCpltCallback+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received TEMP flag, returning temp: ", 36, HAL_MAX_DELAY);
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	2224      	movs	r2, #36	; 0x24
 80016ca:	4984      	ldr	r1, [pc, #528]	; (80018dc <HAL_I2C_SlaveRxCpltCallback+0x228>)
 80016cc:	4884      	ldr	r0, [pc, #528]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80016ce:	f005 fdd7 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, temperatureBuf, strlen(temperatureBuf), HAL_MAX_DELAY);
 80016d2:	4884      	ldr	r0, [pc, #528]	; (80018e4 <HAL_I2C_SlaveRxCpltCallback+0x230>)
 80016d4:	f7fe fdcc 	bl	8000270 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	4980      	ldr	r1, [pc, #512]	; (80018e4 <HAL_I2C_SlaveRxCpltCallback+0x230>)
 80016e2:	487f      	ldr	r0, [pc, #508]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80016e4:	f005 fdcc 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	2202      	movs	r2, #2
 80016ee:	497e      	ldr	r1, [pc, #504]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x234>)
 80016f0:	487b      	ldr	r0, [pc, #492]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80016f2:	f005 fdc5 	bl	8007280 <HAL_UART_Transmit>
	    if (HAL_I2C_Slave_Transmit_IT(&hi2c1, temperatureBuf, strlen(temperatureBuf)) != HAL_OK) {
 80016f6:	487b      	ldr	r0, [pc, #492]	; (80018e4 <HAL_I2C_SlaveRxCpltCallback+0x230>)
 80016f8:	f7fe fdba 	bl	8000270 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4978      	ldr	r1, [pc, #480]	; (80018e4 <HAL_I2C_SlaveRxCpltCallback+0x230>)
 8001704:	4879      	ldr	r0, [pc, #484]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 8001706:	f002 fc5f 	bl	8003fc8 <HAL_I2C_Slave_Transmit_IT>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_I2C_SlaveRxCpltCallback+0x6a>
	    	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	2228      	movs	r2, #40	; 0x28
 8001716:	4976      	ldr	r1, [pc, #472]	; (80018f0 <HAL_I2C_SlaveRxCpltCallback+0x23c>)
 8001718:	4871      	ldr	r0, [pc, #452]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800171a:	f005 fdb1 	bl	8007280 <HAL_UART_Transmit>
	    }
	    HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800171e:	2201      	movs	r2, #1
 8001720:	496d      	ldr	r1, [pc, #436]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 8001722:	4872      	ldr	r0, [pc, #456]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 8001724:	f002 fcbe 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
		//HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
	}
}
 8001728:	e0d2      	b.n	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
	} else if (received_command == 0x02) {
 800172a:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d10c      	bne.n	800174c <HAL_I2C_SlaveRxCpltCallback+0x98>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDON flag, turning LED ON\n\r", 37, HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2225      	movs	r2, #37	; 0x25
 8001738:	496e      	ldr	r1, [pc, #440]	; (80018f4 <HAL_I2C_SlaveRxCpltCallback+0x240>)
 800173a:	4869      	ldr	r0, [pc, #420]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800173c:	f005 fda0 	bl	8007280 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	4965      	ldr	r1, [pc, #404]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 8001744:	4869      	ldr	r0, [pc, #420]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 8001746:	f002 fcad 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
}
 800174a:	e0c1      	b.n	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
	} else if (received_command == 0x03) {
 800174c:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d10c      	bne.n	800176e <HAL_I2C_SlaveRxCpltCallback+0xba>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDOFF flag, turning LED OFF\n\r", 39, HAL_MAX_DELAY);
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	2227      	movs	r2, #39	; 0x27
 800175a:	4967      	ldr	r1, [pc, #412]	; (80018f8 <HAL_I2C_SlaveRxCpltCallback+0x244>)
 800175c:	4860      	ldr	r0, [pc, #384]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800175e:	f005 fd8f 	bl	8007280 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001762:	2201      	movs	r2, #1
 8001764:	495c      	ldr	r1, [pc, #368]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 8001766:	4861      	ldr	r0, [pc, #388]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 8001768:	f002 fc9c 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
}
 800176c:	e0b0      	b.n	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
	} else if (received_command == 0x04) {
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b04      	cmp	r3, #4
 8001774:	f000 80ac 	beq.w	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
	} else if (received_command == 0x05) {
 8001778:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d132      	bne.n	80017e6 <HAL_I2C_SlaveRxCpltCallback+0x132>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received HUMD flag, returning humidity: ", 40, HAL_MAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	2228      	movs	r2, #40	; 0x28
 8001786:	495d      	ldr	r1, [pc, #372]	; (80018fc <HAL_I2C_SlaveRxCpltCallback+0x248>)
 8001788:	4855      	ldr	r0, [pc, #340]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800178a:	f005 fd79 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, humidityBuf, strlen(humidityBuf), HAL_MAX_DELAY);
 800178e:	485c      	ldr	r0, [pc, #368]	; (8001900 <HAL_I2C_SlaveRxCpltCallback+0x24c>)
 8001790:	f7fe fd6e 	bl	8000270 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	4958      	ldr	r1, [pc, #352]	; (8001900 <HAL_I2C_SlaveRxCpltCallback+0x24c>)
 800179e:	4850      	ldr	r0, [pc, #320]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80017a0:	f005 fd6e 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	2202      	movs	r2, #2
 80017aa:	494f      	ldr	r1, [pc, #316]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x234>)
 80017ac:	484c      	ldr	r0, [pc, #304]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80017ae:	f005 fd67 	bl	8007280 <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, humidityBuf, strlen(humidityBuf)) != HAL_OK) {
 80017b2:	4853      	ldr	r0, [pc, #332]	; (8001900 <HAL_I2C_SlaveRxCpltCallback+0x24c>)
 80017b4:	f7fe fd5c 	bl	8000270 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	4950      	ldr	r1, [pc, #320]	; (8001900 <HAL_I2C_SlaveRxCpltCallback+0x24c>)
 80017c0:	484a      	ldr	r0, [pc, #296]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 80017c2:	f002 fc01 	bl	8003fc8 <HAL_I2C_Slave_Transmit_IT>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_I2C_SlaveRxCpltCallback+0x126>
		   	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	2228      	movs	r2, #40	; 0x28
 80017d2:	4947      	ldr	r1, [pc, #284]	; (80018f0 <HAL_I2C_SlaveRxCpltCallback+0x23c>)
 80017d4:	4842      	ldr	r0, [pc, #264]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80017d6:	f005 fd53 	bl	8007280 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	493e      	ldr	r1, [pc, #248]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 80017de:	4843      	ldr	r0, [pc, #268]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 80017e0:	f002 fc60 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
}
 80017e4:	e074      	b.n	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
	} else if (received_command == 0x06){
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d132      	bne.n	8001854 <HAL_I2C_SlaveRxCpltCallback+0x1a0>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received CO2 flag, returning CO2: ", 34, HAL_MAX_DELAY);
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	2222      	movs	r2, #34	; 0x22
 80017f4:	4943      	ldr	r1, [pc, #268]	; (8001904 <HAL_I2C_SlaveRxCpltCallback+0x250>)
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80017f8:	f005 fd42 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, co2Buf, strlen(co2Buf), HAL_MAX_DELAY);
 80017fc:	4842      	ldr	r0, [pc, #264]	; (8001908 <HAL_I2C_SlaveRxCpltCallback+0x254>)
 80017fe:	f7fe fd37 	bl	8000270 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	493f      	ldr	r1, [pc, #252]	; (8001908 <HAL_I2C_SlaveRxCpltCallback+0x254>)
 800180c:	4834      	ldr	r0, [pc, #208]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800180e:	f005 fd37 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	2202      	movs	r2, #2
 8001818:	4933      	ldr	r1, [pc, #204]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x234>)
 800181a:	4831      	ldr	r0, [pc, #196]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800181c:	f005 fd30 	bl	8007280 <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, co2Buf, strlen(co2Buf)) != HAL_OK) {
 8001820:	4839      	ldr	r0, [pc, #228]	; (8001908 <HAL_I2C_SlaveRxCpltCallback+0x254>)
 8001822:	f7fe fd25 	bl	8000270 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_I2C_SlaveRxCpltCallback+0x254>)
 800182e:	482f      	ldr	r0, [pc, #188]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 8001830:	f002 fbca 	bl	8003fc8 <HAL_I2C_Slave_Transmit_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_I2C_SlaveRxCpltCallback+0x194>
			HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	2228      	movs	r2, #40	; 0x28
 8001840:	492b      	ldr	r1, [pc, #172]	; (80018f0 <HAL_I2C_SlaveRxCpltCallback+0x23c>)
 8001842:	4827      	ldr	r0, [pc, #156]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 8001844:	f005 fd1c 	bl	8007280 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001848:	2201      	movs	r2, #1
 800184a:	4923      	ldr	r1, [pc, #140]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 800184c:	4827      	ldr	r0, [pc, #156]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 800184e:	f002 fc29 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
}
 8001852:	e03d      	b.n	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
	} else if (received_command == 0x07) {
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b07      	cmp	r3, #7
 800185a:	d132      	bne.n	80018c2 <HAL_I2C_SlaveRxCpltCallback+0x20e>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received MOIST flag, returning moisture: ", 41, HAL_MAX_DELAY);
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	2229      	movs	r2, #41	; 0x29
 8001862:	492a      	ldr	r1, [pc, #168]	; (800190c <HAL_I2C_SlaveRxCpltCallback+0x258>)
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 8001866:	f005 fd0b 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, moistureBuf, strlen(moistureBuf), HAL_MAX_DELAY);
 800186a:	4829      	ldr	r0, [pc, #164]	; (8001910 <HAL_I2C_SlaveRxCpltCallback+0x25c>)
 800186c:	f7fe fd00 	bl	8000270 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	4925      	ldr	r1, [pc, #148]	; (8001910 <HAL_I2C_SlaveRxCpltCallback+0x25c>)
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800187c:	f005 fd00 	bl	8007280 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	2202      	movs	r2, #2
 8001886:	4918      	ldr	r1, [pc, #96]	; (80018e8 <HAL_I2C_SlaveRxCpltCallback+0x234>)
 8001888:	4815      	ldr	r0, [pc, #84]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 800188a:	f005 fcf9 	bl	8007280 <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, moistureBuf, strlen(moistureBuf)) != HAL_OK) {
 800188e:	4820      	ldr	r0, [pc, #128]	; (8001910 <HAL_I2C_SlaveRxCpltCallback+0x25c>)
 8001890:	f7fe fcee 	bl	8000270 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	491d      	ldr	r1, [pc, #116]	; (8001910 <HAL_I2C_SlaveRxCpltCallback+0x25c>)
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 800189e:	f002 fb93 	bl	8003fc8 <HAL_I2C_Slave_Transmit_IT>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_I2C_SlaveRxCpltCallback+0x202>
		   	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	2228      	movs	r2, #40	; 0x28
 80018ae:	4910      	ldr	r1, [pc, #64]	; (80018f0 <HAL_I2C_SlaveRxCpltCallback+0x23c>)
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80018b2:	f005 fce5 	bl	8007280 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 80018b6:	2201      	movs	r2, #1
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <HAL_I2C_SlaveRxCpltCallback+0x224>)
 80018ba:	480c      	ldr	r0, [pc, #48]	; (80018ec <HAL_I2C_SlaveRxCpltCallback+0x238>)
 80018bc:	f002 fbf2 	bl	80040a4 <HAL_I2C_Slave_Receive_IT>
}
 80018c0:	e006      	b.n	80018d0 <HAL_I2C_SlaveRxCpltCallback+0x21c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	2205      	movs	r2, #5
 80018c8:	4912      	ldr	r1, [pc, #72]	; (8001914 <HAL_I2C_SlaveRxCpltCallback+0x260>)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_I2C_SlaveRxCpltCallback+0x22c>)
 80018cc:	f005 fcd8 	bl	8007280 <HAL_UART_Transmit>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000394 	.word	0x20000394
 80018dc:	0800aa00 	.word	0x0800aa00
 80018e0:	2000030c 	.word	0x2000030c
 80018e4:	20000398 	.word	0x20000398
 80018e8:	0800aa28 	.word	0x0800aa28
 80018ec:	20000264 	.word	0x20000264
 80018f0:	0800aa2c 	.word	0x0800aa2c
 80018f4:	0800aa3c 	.word	0x0800aa3c
 80018f8:	0800aa64 	.word	0x0800aa64
 80018fc:	0800aa8c 	.word	0x0800aa8c
 8001900:	200003cc 	.word	0x200003cc
 8001904:	0800aab8 	.word	0x0800aab8
 8001908:	20000434 	.word	0x20000434
 800190c:	0800aadc 	.word	0x0800aadc
 8001910:	20000400 	.word	0x20000400
 8001914:	0800ab08 	.word	0x0800ab08

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6613      	str	r3, [r2, #96]	; 0x60
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6593      	str	r3, [r2, #88]	; 0x58
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x44>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b09e      	sub	sp, #120	; 0x78
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2254      	movs	r2, #84	; 0x54
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f006 ff10 	bl	80087b2 <memset>
  if(hadc->Instance==ADC1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d143      	bne.n	8001a24 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800199c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019a6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019a8:	2301      	movs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019b0:	2308      	movs	r3, #8
 80019b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019b4:	2307      	movs	r3, #7
 80019b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019bc:	2302      	movs	r3, #2
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f005 f912 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80019d6:	f7ff ff9f 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 80019e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a0e:	230b      	movs	r3, #11
 8001a10:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f001 fea6 	bl	8003770 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3778      	adds	r7, #120	; 0x78
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	50040000 	.word	0x50040000
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0a2      	sub	sp, #136	; 0x88
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	2254      	movs	r2, #84	; 0x54
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 feac 	bl	80087b2 <memset>
  if(hi2c->Instance==I2C1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_I2C_MspInit+0x1a4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d148      	bne.n	8001af6 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f005 f8bf 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff ff4c 	bl	8001918 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a80:	4b56      	ldr	r3, [pc, #344]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a98:	23c0      	movs	r3, #192	; 0xc0
 8001a9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	484a      	ldr	r0, [pc, #296]	; (8001be0 <HAL_I2C_MspInit+0x1ac>)
 8001ab8:	f001 fe5a 	bl	8003770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac8:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	201f      	movs	r0, #31
 8001ada:	f001 fdc4 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ade:	201f      	movs	r0, #31
 8001ae0:	f001 fddd 	bl	800369e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2020      	movs	r0, #32
 8001aea:	f001 fdbc 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001aee:	2020      	movs	r0, #32
 8001af0:	f001 fdd5 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001af4:	e06c      	b.n	8001bd0 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <HAL_I2C_MspInit+0x1b0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d167      	bne.n	8001bd0 <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0a:	f107 0320 	add.w	r3, r7, #32
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f005 f870 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_MspInit+0xea>
      Error_Handler();
 8001b1a:	f7ff fefd 	bl	8001918 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b52:	2312      	movs	r3, #18
 8001b54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b60:	2304      	movs	r3, #4
 8001b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b70:	f001 fdfe 	bl	8003770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b74:	2310      	movs	r3, #16
 8001b76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b86:	2304      	movs	r3, #4
 8001b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b90:	4619      	mov	r1, r3
 8001b92:	4813      	ldr	r0, [pc, #76]	; (8001be0 <HAL_I2C_MspInit+0x1ac>)
 8001b94:	f001 fdec 	bl	8003770 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_I2C_MspInit+0x1a8>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2048      	movs	r0, #72	; 0x48
 8001bb6:	f001 fd56 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001bba:	2048      	movs	r0, #72	; 0x48
 8001bbc:	f001 fd6f 	bl	800369e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2049      	movs	r0, #73	; 0x49
 8001bc6:	f001 fd4e 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001bca:	2049      	movs	r0, #73	; 0x49
 8001bcc:	f001 fd67 	bl	800369e <HAL_NVIC_EnableIRQ>
}
 8001bd0:	bf00      	nop
 8001bd2:	3788      	adds	r7, #136	; 0x88
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	40005c00 	.word	0x40005c00

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09e      	sub	sp, #120	; 0x78
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2254      	movs	r2, #84	; 0x54
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f006 fdd2 	bl	80087b2 <memset>
  if(huart->Instance==USART2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_UART_MspInit+0xcc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d148      	bne.n	8001caa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4618      	mov	r0, r3
 8001c26:	f004 ffe5 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c30:	f7ff fe72 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_UART_MspInit+0xd0>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_UART_MspInit+0xd0>)
 8001c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_UART_MspInit+0xd0>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_UART_MspInit+0xd0>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_UART_MspInit+0xd0>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_UART_MspInit+0xd0>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c64:	2304      	movs	r3, #4
 8001c66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c74:	2307      	movs	r3, #7
 8001c76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c82:	f001 fd75 	bl	8003770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca6:	f001 fd63 	bl	8003770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3778      	adds	r7, #120	; 0x78
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40004400 	.word	0x40004400
 8001cb8:	40021000 	.word	0x40021000

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f980 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <I2C1_EV_IRQHandler+0x10>)
 8001d16:	f002 fb2f 	bl	8004378 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000264 	.word	0x20000264

08001d24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <I2C1_ER_IRQHandler+0x10>)
 8001d2a:	f002 fb3f 	bl	80043ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000264 	.word	0x20000264

08001d38 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <I2C3_EV_IRQHandler+0x10>)
 8001d3e:	f002 fb1b 	bl	8004378 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002b8 	.word	0x200002b8

08001d4c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <I2C3_ER_IRQHandler+0x10>)
 8001d52:	f002 fb2b 	bl	80043ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200002b8 	.word	0x200002b8

08001d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_kill>:

int _kill(int pid, int sig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7a:	f006 fd6d 	bl	8008858 <__errno>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2216      	movs	r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
  return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_exit>:

void _exit (int status)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffe7 	bl	8001d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da2:	e7fe      	b.n	8001da2 <_exit+0x12>

08001da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e00a      	b.n	8001dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db6:	f3af 8000 	nop.w
 8001dba:	4601      	mov	r1, r0
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf0      	blt.n	8001db6 <_read+0x12>
  }

  return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e009      	b.n	8001e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	60ba      	str	r2, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbf1      	blt.n	8001df0 <_write+0x12>
  }
  return len;
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_close>:

int _close(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_isatty>:

int _isatty(int file)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f006 fcd2 	bl	8008858 <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20010000 	.word	0x20010000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	20000468 	.word	0x20000468
 8001ee8:	200005c0 	.word	0x200005c0

08001eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f14:	f7ff ffea 	bl	8001eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	; (8001f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <LoopForever+0xe>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	; (8001f5c <LoopForever+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f006 fc91 	bl	8008864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f42:	f7ff f8dd 	bl	8001100 <main>

08001f46 <LoopForever>:

LoopForever:
    b LoopForever
 8001f46:	e7fe      	b.n	8001f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f54:	0800aee8 	.word	0x0800aee8
  ldr r2, =_sbss
 8001f58:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f5c:	200005bc 	.word	0x200005bc

08001f60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_IRQHandler>

08001f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f001 fb6f 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f80e 	bl	8001f94 <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	e001      	b.n	8001f88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f84:	f7ff fcce 	bl	8001924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f88:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_InitTick+0x6c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d023      	beq.n	8001ff0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_InitTick+0x70>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_InitTick+0x6c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fb7b 	bl	80036ba <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d809      	bhi.n	8001fe4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f001 fb45 	bl	8003666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_InitTick+0x74>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e007      	b.n	8001ff4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e004      	b.n	8001ff4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e001      	b.n	8001ff4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000018 	.word	0x20000018
 8002004:	20000010 	.word	0x20000010
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000018 	.word	0x20000018
 8002030:	2000046c 	.word	0x2000046c

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000046c 	.word	0x2000046c

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000018 	.word	0x20000018

08002094 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3360      	adds	r3, #96	; 0x60
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <LL_ADC_SetOffset+0x44>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	4313      	orrs	r3, r2
 800212c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	03fff000 	.word	0x03fff000

08002144 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3360      	adds	r3, #96	; 0x60
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3330      	adds	r3, #48	; 0x30
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	211f      	movs	r1, #31
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	401a      	ands	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	f003 011f 	and.w	r1, r3, #31
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	431a      	orrs	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3314      	adds	r3, #20
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	0d1b      	lsrs	r3, r3, #20
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2107      	movs	r1, #7
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	401a      	ands	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0d1b      	lsrs	r3, r3, #20
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	431a      	orrs	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0318 	and.w	r3, r3, #24
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a0:	40d9      	lsrs	r1, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	400b      	ands	r3, r1
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	431a      	orrs	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	0007ffff 	.word	0x0007ffff

080022c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6093      	str	r3, [r2, #8]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002324:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800234c:	d101      	bne.n	8002352 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239c:	f043 0202 	orr.w	r2, r3, #2
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_IsEnabled+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_IsEnabled+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d101      	bne.n	80023ee <LL_ADC_IsDisableOngoing+0x18>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_ADC_IsDisableOngoing+0x1a>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800240c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002438:	f043 0210 	orr.w	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b04      	cmp	r3, #4
 800245e:	d101      	bne.n	8002464 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002482:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e126      	b.n	8002728 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fa3f 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fef1 	bl	80022e8 <LL_ADC_IsDeepPowerDownEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fed7 	bl	80022c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff0c 	bl	8002338 <LL_ADC_IsInternalRegulatorEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d115      	bne.n	8002552 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fef0 	bl	8002310 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002530:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_ADC_Init+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	4a7f      	ldr	r2, [pc, #508]	; (8002734 <HAL_ADC_Init+0x274>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002544:	e002      	b.n	800254c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b01      	subs	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f9      	bne.n	8002546 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff feee 	bl	8002338 <LL_ADC_IsInternalRegulatorEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff62 	bl	800244c <LL_ADC_REG_IsConversionOngoing>
 8002588:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 80bf 	bne.w	8002716 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 80bb 	bne.w	8002716 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025a8:	f043 0202 	orr.w	r2, r3, #2
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fefb 	bl	80023b0 <LL_ADC_IsEnabled>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c0:	485d      	ldr	r0, [pc, #372]	; (8002738 <HAL_ADC_Init+0x278>)
 80025c2:	f7ff fef5 	bl	80023b0 <LL_ADC_IsEnabled>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4619      	mov	r1, r3
 80025d2:	485a      	ldr	r0, [pc, #360]	; (800273c <HAL_ADC_Init+0x27c>)
 80025d4:	f7ff fd5e 	bl	8002094 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7e5b      	ldrb	r3, [r3, #25]
 80025dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	3b01      	subs	r3, #1
 800260c:	045b      	lsls	r3, r3, #17
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_ADC_Init+0x280>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	430b      	orrs	r3, r1
 8002642:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff26 	bl	800249a <LL_ADC_INJ_IsConversionOngoing>
 800264e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d13d      	bne.n	80026d2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d13a      	bne.n	80026d2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002660:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002668:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	69b9      	ldr	r1, [r7, #24]
 8002682:	430b      	orrs	r3, r1
 8002684:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800268c:	2b01      	cmp	r3, #1
 800268e:	d118      	bne.n	80026c2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026b2:	430a      	orrs	r2, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	611a      	str	r2, [r3, #16]
 80026c0:	e007      	b.n	80026d2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10c      	bne.n	80026f4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f023 010f 	bic.w	r1, r3, #15
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	1e5a      	subs	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
 80026f2:	e007      	b.n	8002704 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 020f 	bic.w	r2, r2, #15
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f023 0303 	bic.w	r3, r3, #3
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
 8002714:	e007      	b.n	8002726 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002726:	7ffb      	ldrb	r3, [r7, #31]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000010 	.word	0x20000010
 8002734:	053e2d63 	.word	0x053e2d63
 8002738:	50040000 	.word	0x50040000
 800273c:	50040300 	.word	0x50040300
 8002740:	fff0c007 	.word	0xfff0c007

08002744 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fe7b 	bl	800244c <LL_ADC_REG_IsConversionOngoing>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d14f      	bne.n	80027fc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_Start+0x26>
 8002766:	2302      	movs	r3, #2
 8002768:	e04b      	b.n	8002802 <HAL_ADC_Start+0xbe>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fdb6 	bl	80032e4 <ADC_Enable>
 8002778:	4603      	mov	r3, r0
 800277a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d137      	bne.n	80027f2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f023 0206 	bic.w	r2, r3, #6
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	221c      	movs	r2, #28
 80027be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe06 	bl	80023fc <LL_ADC_REG_StartConversion>
 80027f0:	e006      	b.n	8002800 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027fa:	e001      	b.n	8002800 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_ADC_Stop+0x16>
 800281c:	2302      	movs	r3, #2
 800281e:	e023      	b.n	8002868 <HAL_ADC_Stop+0x5e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002828:	2103      	movs	r1, #3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fc9e 	bl	800316c <ADC_ConversionStop>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d111      	bne.n	800285e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fdd8 	bl	80033f0 <ADC_Disable>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b08      	cmp	r3, #8
 8002880:	d102      	bne.n	8002888 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002882:	2308      	movs	r3, #8
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e010      	b.n	80028aa <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f043 0220 	orr.w	r2, r3, #32
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06f      	b.n	8002986 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80028a6:	2304      	movs	r3, #4
 80028a8:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028aa:	f7ff fbc3 	bl	8002034 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028b0:	e021      	b.n	80028f6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d01d      	beq.n	80028f6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028ba:	f7ff fbbb 	bl	8002034 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <HAL_ADC_PollForConversion+0x60>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d112      	bne.n	80028f6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e047      	b.n	8002986 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0d6      	beq.n	80028b2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fc46 	bl	80021a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01c      	beq.n	800295a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e5b      	ldrb	r3, [r3, #25]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d118      	bne.n	800295a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b08      	cmp	r3, #8
 8002934:	d111      	bne.n	800295a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d104      	bne.n	8002972 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2208      	movs	r2, #8
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e008      	b.n	8002984 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	220c      	movs	r2, #12
 8002982:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0b6      	sub	sp, #216	; 0xd8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x22>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e3bb      	b.n	8003142 <HAL_ADC_ConfigChannel+0x79a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd38 	bl	800244c <LL_ADC_REG_IsConversionOngoing>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 83a0 	bne.w	8003124 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d824      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	3b02      	subs	r3, #2
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d81b      	bhi.n	8002a36 <HAL_ADC_ConfigChannel+0x8e>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <HAL_ADC_ConfigChannel+0x5c>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1d 	.word	0x08002a1d
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a2d 	.word	0x08002a2d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a14:	230c      	movs	r3, #12
 8002a16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a1a:	e010      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a22:	e00c      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a24:	2318      	movs	r3, #24
 8002a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a2a:	e008      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a36:	2306      	movs	r3, #6
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a3c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002a4c:	f7ff fbbe 	bl	80021cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fcf9 	bl	800244c <LL_ADC_REG_IsConversionOngoing>
 8002a5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fd19 	bl	800249a <LL_ADC_INJ_IsConversionOngoing>
 8002a68:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 81a4 	bne.w	8002dbe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 819f 	bne.w	8002dbe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fbc9 	bl	8002224 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00a      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6919      	ldr	r1, [r3, #16]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ac4:	f7ff fb1a 	bl	80020fc <LL_ADC_SetOffset>
 8002ac8:	e179      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fb37 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x14e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fb2c 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	e01e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x18c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fb21 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e004      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1a4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	e018      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1d6>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002b68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e004      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff faf0 	bl	8002170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fad4 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x214>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fac9 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	e01e      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x252>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fabe 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x26a>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	e018      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x29c>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fa8d 	bl	8002170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fa71 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x2da>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fa66 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	e01e      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x318>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2102      	movs	r1, #2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fa5b 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e004      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x330>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	e014      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x35a>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fa2e 	bl	8002170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2103      	movs	r1, #3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fa12 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2103      	movs	r1, #3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fa07 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	e017      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x3c8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2103      	movs	r1, #3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f9fc 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x3e0>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	e011      	b.n	8002dac <HAL_ADC_ConfigChannel+0x404>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d98:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e003      	b.n	8002dac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d106      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2103      	movs	r1, #3
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f9d9 	bl	8002170 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff faf4 	bl	80023b0 <LL_ADC_IsEnabled>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 8140 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f7ff fa4d 	bl	800227c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4a8f      	ldr	r2, [pc, #572]	; (8003024 <HAL_ADC_ConfigChannel+0x67c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	f040 8131 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x46e>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	0e9b      	lsrs	r3, r3, #26
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	bf94      	ite	ls
 8002e0e:	2301      	movls	r3, #1
 8002e10:	2300      	movhi	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	e019      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x4a2>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	e003      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d079      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x4c2>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	3301      	adds	r3, #1
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e68:	e015      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x4ee>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e003      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	069b      	lsls	r3, r3, #26
 8002e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x50e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	e017      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x53e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e003      	b.n	8002eda <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	ea42 0103 	orr.w	r1, r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x564>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0e9b      	lsrs	r3, r3, #26
 8002efc:	3301      	adds	r3, #1
 8002efe:	f003 021f 	and.w	r2, r3, #31
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	051b      	lsls	r3, r3, #20
 8002f0a:	e018      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x596>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 021f 	and.w	r2, r3, #31
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	e081      	b.n	8003046 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d107      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x5b6>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	3301      	adds	r3, #1
 8002f56:	069b      	lsls	r3, r3, #26
 8002f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f5c:	e015      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x5e2>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	069b      	lsls	r3, r3, #26
 8002f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x602>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	e017      	b.n	8002fda <HAL_ADC_ConfigChannel+0x632>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	61bb      	str	r3, [r7, #24]
  return result;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	e003      	b.n	8002fce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	ea42 0103 	orr.w	r1, r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x65e>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 021f 	and.w	r2, r3, #31
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b1e      	subs	r3, #30
 8002ffe:	051b      	lsls	r3, r3, #20
 8003000:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003004:	e01e      	b.n	8003044 <HAL_ADC_ConfigChannel+0x69c>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	60fb      	str	r3, [r7, #12]
  return result;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d104      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e006      	b.n	8003030 <HAL_ADC_ConfigChannel+0x688>
 8003022:	bf00      	nop
 8003024:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f003 021f 	and.w	r2, r3, #31
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	3b1e      	subs	r3, #30
 800303e:	051b      	lsls	r3, r3, #20
 8003040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003044:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304a:	4619      	mov	r1, r3
 800304c:	f7ff f8ea 	bl	8002224 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_ADC_ConfigChannel+0x7a4>)
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d06c      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800305c:	483c      	ldr	r0, [pc, #240]	; (8003150 <HAL_ADC_ConfigChannel+0x7a8>)
 800305e:	f7ff f83f 	bl	80020e0 <LL_ADC_GetCommonPathInternalCh>
 8003062:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a3a      	ldr	r2, [pc, #232]	; (8003154 <HAL_ADC_ConfigChannel+0x7ac>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d127      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d121      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a35      	ldr	r2, [pc, #212]	; (8003158 <HAL_ADC_ConfigChannel+0x7b0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d157      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800308a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800308e:	4619      	mov	r1, r3
 8003090:	482f      	ldr	r0, [pc, #188]	; (8003150 <HAL_ADC_ConfigChannel+0x7a8>)
 8003092:	f7ff f812 	bl	80020ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_ADC_ConfigChannel+0x7b4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	4a30      	ldr	r2, [pc, #192]	; (8003160 <HAL_ADC_ConfigChannel+0x7b8>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030b0:	e002      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f9      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030be:	e03a      	b.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <HAL_ADC_ConfigChannel+0x7bc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d113      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <HAL_ADC_ConfigChannel+0x7b0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d12a      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e8:	4619      	mov	r1, r3
 80030ea:	4819      	ldr	r0, [pc, #100]	; (8003150 <HAL_ADC_ConfigChannel+0x7a8>)
 80030ec:	f7fe ffe5 	bl	80020ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f0:	e021      	b.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_ADC_ConfigChannel+0x7c0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d11c      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_ADC_ConfigChannel+0x7b0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d111      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003116:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800311a:	4619      	mov	r1, r3
 800311c:	480c      	ldr	r0, [pc, #48]	; (8003150 <HAL_ADC_ConfigChannel+0x7a8>)
 800311e:	f7fe ffcc 	bl	80020ba <LL_ADC_SetCommonPathInternalCh>
 8003122:	e008      	b.n	8003136 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800313e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003142:	4618      	mov	r0, r3
 8003144:	37d8      	adds	r7, #216	; 0xd8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	80080000 	.word	0x80080000
 8003150:	50040300 	.word	0x50040300
 8003154:	c7520000 	.word	0xc7520000
 8003158:	50040000 	.word	0x50040000
 800315c:	20000010 	.word	0x20000010
 8003160:	053e2d63 	.word	0x053e2d63
 8003164:	cb840000 	.word	0xcb840000
 8003168:	80000001 	.word	0x80000001

0800316c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f962 	bl	800244c <LL_ADC_REG_IsConversionOngoing>
 8003188:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f983 	bl	800249a <LL_ADC_INJ_IsConversionOngoing>
 8003194:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8098 	beq.w	80032d4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02a      	beq.n	8003208 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7e5b      	ldrb	r3, [r3, #25]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d126      	bne.n	8003208 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7e1b      	ldrb	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d122      	bne.n	8003208 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031c6:	e014      	b.n	80031f2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <ADC_ConversionStop+0x174>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d90d      	bls.n	80031ec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f043 0210 	orr.w	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e074      	b.n	80032d6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d1e3      	bne.n	80031c8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d014      	beq.n	8003238 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f91a 	bl	800244c <LL_ADC_REG_IsConversionOngoing>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f8d7 	bl	80023d6 <LL_ADC_IsDisableOngoing>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f8f6 	bl	8002424 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d014      	beq.n	8003268 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f929 	bl	800249a <LL_ADC_INJ_IsConversionOngoing>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f8bf 	bl	80023d6 <LL_ADC_IsDisableOngoing>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f905 	bl	8002472 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d005      	beq.n	800327a <ADC_ConversionStop+0x10e>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d105      	bne.n	8003280 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003274:	230c      	movs	r3, #12
 8003276:	617b      	str	r3, [r7, #20]
        break;
 8003278:	e005      	b.n	8003286 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800327a:	2308      	movs	r3, #8
 800327c:	617b      	str	r3, [r7, #20]
        break;
 800327e:	e002      	b.n	8003286 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003280:	2304      	movs	r3, #4
 8003282:	617b      	str	r3, [r7, #20]
        break;
 8003284:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003286:	f7fe fed5 	bl	8002034 <HAL_GetTick>
 800328a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800328c:	e01b      	b.n	80032c6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800328e:	f7fe fed1 	bl	8002034 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b05      	cmp	r3, #5
 800329a:	d914      	bls.n	80032c6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1dc      	bne.n	800328e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	a33fffff 	.word	0xa33fffff

080032e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff f85b 	bl	80023b0 <LL_ADC_IsEnabled>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d169      	bne.n	80033d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <ADC_Enable+0xfc>)
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e055      	b.n	80033d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f816 	bl	8002360 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003334:	482b      	ldr	r0, [pc, #172]	; (80033e4 <ADC_Enable+0x100>)
 8003336:	f7fe fed3 	bl	80020e0 <LL_ADC_GetCommonPathInternalCh>
 800333a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800333c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <ADC_Enable+0x104>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	4a28      	ldr	r2, [pc, #160]	; (80033ec <ADC_Enable+0x108>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800335e:	e002      	b.n	8003366 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3b01      	subs	r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f9      	bne.n	8003360 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800336c:	f7fe fe62 	bl	8002034 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003372:	e028      	b.n	80033c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f819 	bl	80023b0 <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe ffe9 	bl	8002360 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800338e:	f7fe fe51 	bl	8002034 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d914      	bls.n	80033c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00d      	beq.n	80033c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e007      	b.n	80033d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d1cf      	bne.n	8003374 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	8000003f 	.word	0x8000003f
 80033e4:	50040300 	.word	0x50040300
 80033e8:	20000010 	.word	0x20000010
 80033ec:	053e2d63 	.word	0x053e2d63

080033f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe ffea 	bl	80023d6 <LL_ADC_IsDisableOngoing>
 8003402:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe ffd1 	bl	80023b0 <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d047      	beq.n	80034a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d144      	bne.n	80034a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030d 	and.w	r3, r3, #13
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10c      	bne.n	8003442 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe ffab 	bl	8002388 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2203      	movs	r2, #3
 8003438:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800343a:	f7fe fdfb 	bl	8002034 <HAL_GetTick>
 800343e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003440:	e029      	b.n	8003496 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0210 	orr.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e023      	b.n	80034a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800345e:	f7fe fde9 	bl	8002034 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d914      	bls.n	8003496 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f043 0210 	orr.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e007      	b.n	80034a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1dc      	bne.n	800345e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f7ff ff8e 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff29 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003678:	f7ff ff3e 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 800367c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ff8e 	bl	80035a4 <NVIC_EncodePriority>
 8003688:	4602      	mov	r2, r0
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff5d 	bl	8003550 <__NVIC_SetPriority>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff31 	bl	8003514 <__NVIC_EnableIRQ>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffa2 	bl	800360c <SysTick_Config>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d005      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e029      	b.n	800374a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 020e 	bic.w	r2, r2, #14
 8003704:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 021c 	and.w	r2, r3, #28
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
    }
  }
  return status;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003762:	b2db      	uxtb	r3, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800377e:	e148      	b.n	8003a12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 813a 	beq.w	8003a0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d005      	beq.n	80037b0 <HAL_GPIO_Init+0x40>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d130      	bne.n	8003812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037e6:	2201      	movs	r2, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 0201 	and.w	r2, r3, #1
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b03      	cmp	r3, #3
 800381c:	d017      	beq.n	800384e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d123      	bne.n	80038a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	08da      	lsrs	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3208      	adds	r2, #8
 8003862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	08da      	lsrs	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3208      	adds	r2, #8
 800389c:	6939      	ldr	r1, [r7, #16]
 800389e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8094 	beq.w	8003a0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e4:	4b52      	ldr	r3, [pc, #328]	; (8003a30 <HAL_GPIO_Init+0x2c0>)
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	4a51      	ldr	r2, [pc, #324]	; (8003a30 <HAL_GPIO_Init+0x2c0>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6613      	str	r3, [r2, #96]	; 0x60
 80038f0:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <HAL_GPIO_Init+0x2c0>)
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038fc:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <HAL_GPIO_Init+0x2c4>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003926:	d00d      	beq.n	8003944 <HAL_GPIO_Init+0x1d4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a43      	ldr	r2, [pc, #268]	; (8003a38 <HAL_GPIO_Init+0x2c8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <HAL_GPIO_Init+0x1d0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a42      	ldr	r2, [pc, #264]	; (8003a3c <HAL_GPIO_Init+0x2cc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_GPIO_Init+0x1cc>
 8003938:	2302      	movs	r3, #2
 800393a:	e004      	b.n	8003946 <HAL_GPIO_Init+0x1d6>
 800393c:	2307      	movs	r3, #7
 800393e:	e002      	b.n	8003946 <HAL_GPIO_Init+0x1d6>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_GPIO_Init+0x1d6>
 8003944:	2300      	movs	r3, #0
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	f002 0203 	and.w	r2, r2, #3
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	4093      	lsls	r3, r2
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003956:	4937      	ldr	r1, [pc, #220]	; (8003a34 <HAL_GPIO_Init+0x2c4>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003964:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003988:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800398e:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f47f aeaf 	bne.w	8003780 <HAL_GPIO_Init+0x10>
  }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800
 8003a40:	40010400 	.word	0x40010400

08003a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
 8003a50:	4613      	mov	r3, r2
 8003a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a54:	787b      	ldrb	r3, [r7, #1]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e08d      	b.n	8003ba2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd ffca 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e006      	b.n	8003afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d108      	bne.n	8003b16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	e007      	b.n	8003b26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	817b      	strh	r3, [r7, #10]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	f040 80fd 	bne.w	8003dc8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_I2C_Master_Transmit+0x30>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e0f6      	b.n	8003dca <HAL_I2C_Master_Transmit+0x21e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003be4:	f7fe fa26 	bl	8002034 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2319      	movs	r3, #25
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f001 fd69 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0e1      	b.n	8003dca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	893a      	ldrh	r2, [r7, #8]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2bff      	cmp	r3, #255	; 0xff
 8003c36:	d906      	bls.n	8003c46 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e007      	b.n	8003c56 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c54:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d024      	beq.n	8003ca8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	8979      	ldrh	r1, [r7, #10]
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <HAL_I2C_Master_Transmit+0x228>)
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f001 ff4f 	bl	8005b44 <I2C_TransferConfig>
 8003ca6:	e066      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	8979      	ldrh	r1, [r7, #10]
 8003cb0:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_I2C_Master_Transmit+0x228>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f001 ff44 	bl	8005b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cbc:	e05b      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 fd52 	bl	800576c <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e07b      	b.n	8003dca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d034      	beq.n	8003d76 <HAL_I2C_Master_Transmit+0x1ca>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d130      	bne.n	8003d76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f001 fcd5 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e04d      	b.n	8003dca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2bff      	cmp	r3, #255	; 0xff
 8003d36:	d90e      	bls.n	8003d56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	22ff      	movs	r2, #255	; 0xff
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	8979      	ldrh	r1, [r7, #10]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f001 fef8 	bl	8005b44 <I2C_TransferConfig>
 8003d54:	e00f      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f001 fee7 	bl	8005b44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d19e      	bne.n	8003cbe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	6a39      	ldr	r1, [r7, #32]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f001 fd38 	bl	80057fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e01a      	b.n	8003dca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_I2C_Master_Transmit+0x22c>)
 8003da8:	400b      	ands	r3, r1
 8003daa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	80002000 	.word	0x80002000
 8003dd8:	fe00e800 	.word	0xfe00e800

08003ddc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	460b      	mov	r3, r1
 8003dea:	817b      	strh	r3, [r7, #10]
 8003dec:	4613      	mov	r3, r2
 8003dee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	f040 80db 	bne.w	8003fb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_I2C_Master_Receive+0x30>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0d4      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1da>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e14:	f7fe f90e 	bl	8002034 <HAL_GetTick>
 8003e18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2319      	movs	r3, #25
 8003e20:	2201      	movs	r2, #1
 8003e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f001 fc51 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0bf      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2222      	movs	r2, #34	; 0x22
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2210      	movs	r2, #16
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2bff      	cmp	r3, #255	; 0xff
 8003e66:	d90e      	bls.n	8003e86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <HAL_I2C_Master_Receive+0x1e4>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f001 fe60 	bl	8005b44 <I2C_TransferConfig>
 8003e84:	e06d      	b.n	8003f62 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	8979      	ldrh	r1, [r7, #10]
 8003e98:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_I2C_Master_Receive+0x1e4>)
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f001 fe4f 	bl	8005b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ea6:	e05c      	b.n	8003f62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	6a39      	ldr	r1, [r7, #32]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f001 fce7 	bl	8005880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e07c      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d034      	beq.n	8003f62 <HAL_I2C_Master_Receive+0x186>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d130      	bne.n	8003f62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f001 fbdf 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e04d      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2bff      	cmp	r3, #255	; 0xff
 8003f22:	d90e      	bls.n	8003f42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	22ff      	movs	r2, #255	; 0xff
 8003f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	8979      	ldrh	r1, [r7, #10]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f001 fe02 	bl	8005b44 <I2C_TransferConfig>
 8003f40:	e00f      	b.n	8003f62 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	2300      	movs	r3, #0
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f001 fdf1 	bl	8005b44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d19d      	bne.n	8003ea8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	6a39      	ldr	r1, [r7, #32]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f001 fc42 	bl	80057fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e01a      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2220      	movs	r2, #32
 8003f86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_I2C_Master_Receive+0x1e8>)
 8003f94:	400b      	ands	r3, r1
 8003f96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	80002400 	.word	0x80002400
 8003fc4:	fe00e800 	.word	0xfe00e800

08003fc8 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d156      	bne.n	8004090 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2C_Slave_Transmit_IT+0x28>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e050      	b.n	8004092 <HAL_I2C_Slave_Transmit_IT+0xca>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2221      	movs	r2, #33	; 0x21
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800401c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004048:	d117      	bne.n	800407a <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8004082:	f248 0101 	movw	r1, #32769	; 0x8001
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f001 fd8e 	bl	8005ba8 <I2C_Enable_IRQ>

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	ffff0000 	.word	0xffff0000
 80040a0:	0800451f 	.word	0x0800451f

080040a4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d139      	bne.n	8004132 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_I2C_Slave_Receive_IT+0x28>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e033      	b.n	8004134 <HAL_I2C_Slave_Receive_IT+0x90>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040f8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	88fa      	ldrh	r2, [r7, #6]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a0a      	ldr	r2, [pc, #40]	; (800413c <HAL_I2C_Slave_Receive_IT+0x98>)
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800411a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8004124:	f248 0102 	movw	r1, #32770	; 0x8002
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f001 fd3d 	bl	8005ba8 <I2C_Enable_IRQ>

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	ffff0000 	.word	0xffff0000
 8004140:	0800451f 	.word	0x0800451f

08004144 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	f040 80fd 	bne.w	8004366 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_I2C_Mem_Read+0x34>
 8004172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0f1      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Mem_Read+0x4e>
 800418e:	2302      	movs	r3, #2
 8004190:	e0ea      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800419a:	f7fd ff4b 	bl	8002034 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2319      	movs	r3, #25
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f001 fa8e 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0d5      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2222      	movs	r2, #34	; 0x22
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e4:	88f8      	ldrh	r0, [r7, #6]
 80041e6:	893a      	ldrh	r2, [r7, #8]
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	4603      	mov	r3, r0
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fd71 	bl	8004cdc <I2C_RequestMemoryRead>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0ad      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2bff      	cmp	r3, #255	; 0xff
 8004214:	d90e      	bls.n	8004234 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	b2da      	uxtb	r2, r3
 8004222:	8979      	ldrh	r1, [r7, #10]
 8004224:	4b52      	ldr	r3, [pc, #328]	; (8004370 <HAL_I2C_Mem_Read+0x22c>)
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f001 fc89 	bl	8005b44 <I2C_TransferConfig>
 8004232:	e00f      	b.n	8004254 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	b2da      	uxtb	r2, r3
 8004244:	8979      	ldrh	r1, [r7, #10]
 8004246:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <HAL_I2C_Mem_Read+0x22c>)
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f001 fc78 	bl	8005b44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	2200      	movs	r2, #0
 800425c:	2104      	movs	r1, #4
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f001 fa35 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07c      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d034      	beq.n	8004314 <HAL_I2C_Mem_Read+0x1d0>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d130      	bne.n	8004314 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	2200      	movs	r2, #0
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f001 fa06 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e04d      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2bff      	cmp	r3, #255	; 0xff
 80042d4:	d90e      	bls.n	80042f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f001 fc29 	bl	8005b44 <I2C_TransferConfig>
 80042f2:	e00f      	b.n	8004314 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	b2da      	uxtb	r2, r3
 8004304:	8979      	ldrh	r1, [r7, #10]
 8004306:	2300      	movs	r3, #0
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f001 fc18 	bl	8005b44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d19a      	bne.n	8004254 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f001 fa69 	bl	80057fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e01a      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2220      	movs	r2, #32
 8004338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_I2C_Mem_Read+0x230>)
 8004346:	400b      	ands	r3, r1
 8004348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	80002400 	.word	0x80002400
 8004374:	fe00e800 	.word	0xfe00e800

08004378 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
  }
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00f      	beq.n	80043ee <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00f      	beq.n	8004418 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0208 	orr.w	r2, r3, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004416:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00f      	beq.n	8004442 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	f043 0202 	orr.w	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 030b 	and.w	r3, r3, #11
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 ffe1 	bl	800541c <I2C_ITError>
  }
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	70fb      	strb	r3, [r7, #3]
 80044aa:	4613      	mov	r3, r2
 80044ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <I2C_Slave_ISR_IT+0x24>
 800453e:	2302      	movs	r3, #2
 8004540:	e0e1      	b.n	8004706 <I2C_Slave_ISR_IT+0x1e8>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800455e:	6939      	ldr	r1, [r7, #16]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fdf5 	bl	8005150 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d04b      	beq.n	8004608 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004576:	2b00      	cmp	r3, #0
 8004578:	d046      	beq.n	8004608 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d128      	bne.n	80045d6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b28      	cmp	r3, #40	; 0x28
 800458e:	d108      	bne.n	80045a2 <I2C_Slave_ISR_IT+0x84>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004596:	d104      	bne.n	80045a2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004598:	6939      	ldr	r1, [r7, #16]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 feea 	bl	8005374 <I2C_ITListenCplt>
 80045a0:	e031      	b.n	8004606 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b29      	cmp	r3, #41	; 0x29
 80045ac:	d10e      	bne.n	80045cc <I2C_Slave_ISR_IT+0xae>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b4:	d00a      	beq.n	80045cc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2210      	movs	r2, #16
 80045bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f001 f843 	bl	800564a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fc9e 	bl	8004f06 <I2C_ITSlaveSeqCplt>
 80045ca:	e01c      	b.n	8004606 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80045d4:	e08f      	b.n	80046f6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <I2C_Slave_ISR_IT+0xda>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f6:	d17e      	bne.n	80046f6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	4619      	mov	r1, r3
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 ff0c 	bl	800541c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004604:	e077      	b.n	80046f6 <I2C_Slave_ISR_IT+0x1d8>
 8004606:	e076      	b.n	80046f6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02f      	beq.n	8004672 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02a      	beq.n	8004672 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14b      	bne.n	80046fa <I2C_Slave_ISR_IT+0x1dc>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004668:	d047      	beq.n	80046fa <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fc4b 	bl	8004f06 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004670:	e043      	b.n	80046fa <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004686:	6939      	ldr	r1, [r7, #16]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fb7b 	bl	8004d84 <I2C_ITAddrCplt>
 800468e:	e035      	b.n	80046fc <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d030      	beq.n	80046fc <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02b      	beq.n	80046fc <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d018      	beq.n	80046e0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
 80046de:	e00d      	b.n	80046fc <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e6:	d002      	beq.n	80046ee <I2C_Slave_ISR_IT+0x1d0>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fc09 	bl	8004f06 <I2C_ITSlaveSeqCplt>
 80046f4:	e002      	b.n	80046fc <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80046fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b088      	sub	sp, #32
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <I2C_Master_ISR_DMA+0x1a>
 8004724:	2302      	movs	r3, #2
 8004726:	e0d9      	b.n	80048dc <I2C_Master_ISR_DMA+0x1ce>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004758:	2120      	movs	r1, #32
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f001 fa24 	bl	8005ba8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 ff72 	bl	800564a <I2C_Flush_TXDR>
 8004766:	e0b4      	b.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d071      	beq.n	8004856 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004778:	2b00      	cmp	r3, #0
 800477a:	d06c      	beq.n	8004856 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04e      	beq.n	8004834 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2bff      	cmp	r3, #255	; 0xff
 80047ac:	d906      	bls.n	80047bc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	22ff      	movs	r2, #255	; 0xff
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80047b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e010      	b.n	80047de <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047ce:	d003      	beq.n	80047d8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e002      	b.n	80047de <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80047d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047dc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	8a79      	ldrh	r1, [r7, #18]
 80047e6:	2300      	movs	r3, #0
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f001 f9a9 	bl	8005b44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b22      	cmp	r3, #34	; 0x22
 800480e:	d108      	bne.n	8004822 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004820:	e057      	b.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004830:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004832:	e04e      	b.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004842:	d003      	beq.n	800484c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fb21 	bl	8004e8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800484a:	e042      	b.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fde4 	bl	800541c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004854:	e03d      	b.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d028      	beq.n	80048b2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004866:	2b00      	cmp	r3, #0
 8004868:	d023      	beq.n	80048b2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d119      	bne.n	80048a8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004882:	d025      	beq.n	80048d0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800488c:	d108      	bne.n	80048a0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800489c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800489e:	e017      	b.n	80048d0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 faf3 	bl	8004e8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80048a6:	e013      	b.n	80048d0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fdb6 	bl	800541c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048b0:	e00e      	b.n	80048d0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fb79 	bl	8004fc0 <I2C_ITMasterCplt>
 80048ce:	e000      	b.n	80048d2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80048d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80048f0:	4b8d      	ldr	r3, [pc, #564]	; (8004b28 <I2C_Mem_ISR_DMA+0x244>)
 80048f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <I2C_Mem_ISR_DMA+0x1e>
 80048fe:	2302      	movs	r3, #2
 8004900:	e10e      	b.n	8004b20 <I2C_Mem_ISR_DMA+0x23c>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d016      	beq.n	8004942 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2210      	movs	r2, #16
 8004924:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f043 0204 	orr.w	r2, r3, #4
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004932:	2120      	movs	r1, #32
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 f937 	bl	8005ba8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fe85 	bl	800564a <I2C_Flush_TXDR>
 8004940:	e0e9      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800495e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f04f 32ff 	mov.w	r2, #4294967295
 8004966:	651a      	str	r2, [r3, #80]	; 0x50
 8004968:	e0d5      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05f      	beq.n	8004a34 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800497a:	2b00      	cmp	r3, #0
 800497c:	d05a      	beq.n	8004a34 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800497e:	2101      	movs	r1, #1
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f995 	bl	8005cb0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004986:	2110      	movs	r1, #16
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f001 f90d 	bl	8005ba8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d048      	beq.n	8004a2a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2bff      	cmp	r3, #255	; 0xff
 80049a0:	d910      	bls.n	80049c4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	22ff      	movs	r2, #255	; 0xff
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ac:	b299      	uxth	r1, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f001 f8c1 	bl	8005b44 <I2C_TransferConfig>
 80049c2:	e011      	b.n	80049e8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	b299      	uxth	r1, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f001 f8ae 	bl	8005b44 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b22      	cmp	r3, #34	; 0x22
 8004a04:	d108      	bne.n	8004a18 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a16:	e07e      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a26:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a28:	e075      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a2a:	2140      	movs	r1, #64	; 0x40
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fcf5 	bl	800541c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004a32:	e070      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d05d      	beq.n	8004afa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d058      	beq.n	8004afa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a48:	2101      	movs	r1, #1
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f001 f930 	bl	8005cb0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a50:	2110      	movs	r1, #16
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f001 f8a8 	bl	8005ba8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b22      	cmp	r3, #34	; 0x22
 8004a62:	d101      	bne.n	8004a68 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <I2C_Mem_ISR_DMA+0x248>)
 8004a66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2bff      	cmp	r3, #255	; 0xff
 8004a70:	d910      	bls.n	8004a94 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	b299      	uxth	r1, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f001 f859 	bl	8005b44 <I2C_TransferConfig>
 8004a92:	e011      	b.n	8004ab8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	b299      	uxth	r1, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f001 f846 	bl	8005b44 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b22      	cmp	r3, #34	; 0x22
 8004ad4:	d108      	bne.n	8004ae8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ae6:	e016      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004af8:	e00d      	b.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fa55 	bl	8004fc0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	80002000 	.word	0x80002000
 8004b2c:	80002400 	.word	0x80002400

08004b30 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <I2C_Slave_ISR_DMA+0x24>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e0bf      	b.n	8004cd4 <I2C_Slave_ISR_DMA+0x1a4>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 faec 	bl	8005150 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8095 	beq.w	8004cae <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 808f 	beq.w	8004cae <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d07d      	beq.n	8004ca0 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004be4:	2301      	movs	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d128      	bne.n	8004c40 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b28      	cmp	r3, #40	; 0x28
 8004bf8:	d108      	bne.n	8004c0c <I2C_Slave_ISR_DMA+0xdc>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c00:	d104      	bne.n	8004c0c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fbb5 	bl	8005374 <I2C_ITListenCplt>
 8004c0a:	e048      	b.n	8004c9e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b29      	cmp	r3, #41	; 0x29
 8004c16:	d10e      	bne.n	8004c36 <I2C_Slave_ISR_DMA+0x106>
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c1e:	d00a      	beq.n	8004c36 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2210      	movs	r2, #16
 8004c26:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fd0e 	bl	800564a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f969 	bl	8004f06 <I2C_ITSlaveSeqCplt>
 8004c34:	e033      	b.n	8004c9e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004c3e:	e034      	b.n	8004caa <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2210      	movs	r2, #16
 8004c46:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <I2C_Slave_ISR_DMA+0x13a>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c68:	d11f      	bne.n	8004caa <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b21      	cmp	r3, #33	; 0x21
 8004c6e:	d002      	beq.n	8004c76 <I2C_Slave_ISR_DMA+0x146>
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b29      	cmp	r3, #41	; 0x29
 8004c74:	d103      	bne.n	8004c7e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c7c:	e008      	b.n	8004c90 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	2b22      	cmp	r3, #34	; 0x22
 8004c82:	d002      	beq.n	8004c8a <I2C_Slave_ISR_DMA+0x15a>
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b2a      	cmp	r3, #42	; 0x2a
 8004c88:	d102      	bne.n	8004c90 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2222      	movs	r2, #34	; 0x22
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	4619      	mov	r1, r3
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fbc0 	bl	800541c <I2C_ITError>
      if (treatdmanack == 1U)
 8004c9c:	e005      	b.n	8004caa <I2C_Slave_ISR_DMA+0x17a>
 8004c9e:	e004      	b.n	8004caa <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004ca8:	e00f      	b.n	8004cca <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8004caa:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004cac:	e00d      	b.n	8004cca <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f85d 	bl	8004d84 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	813b      	strh	r3, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	8979      	ldrh	r1, [r7, #10]
 8004cfc:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <I2C_RequestMemoryRead+0xa4>)
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 ff1e 	bl	8005b44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	69b9      	ldr	r1, [r7, #24]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fd2d 	bl	800576c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e02c      	b.n	8004d76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d105      	bne.n	8004d2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d2c:	e015      	b.n	8004d5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	69b9      	ldr	r1, [r7, #24]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fd13 	bl	800576c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e012      	b.n	8004d76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d50:	893b      	ldrh	r3, [r7, #8]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2140      	movs	r1, #64	; 0x40
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fcb2 	bl	80056ce <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	80002000 	.word	0x80002000

08004d84 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d9a:	2b28      	cmp	r3, #40	; 0x28
 8004d9c:	d16a      	bne.n	8004e74 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004dbc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004dd8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d138      	bne.n	8004e54 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004de2:	897b      	ldrh	r3, [r7, #10]
 8004de4:	09db      	lsrs	r3, r3, #7
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	89bb      	ldrh	r3, [r7, #12]
 8004dea:	4053      	eors	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f003 0306 	and.w	r3, r3, #6
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d11c      	bne.n	8004e30 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d13b      	bne.n	8004e84 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2208      	movs	r2, #8
 8004e18:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e22:	89ba      	ldrh	r2, [r7, #12]
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fb38 	bl	800449e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e2e:	e029      	b.n	8004e84 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 ff39 	bl	8005cb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e46:	89ba      	ldrh	r2, [r7, #12]
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fb26 	bl	800449e <HAL_I2C_AddrCallback>
}
 8004e52:	e017      	b.n	8004e84 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 ff29 	bl	8005cb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e66:	89ba      	ldrh	r2, [r7, #12]
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff fb16 	bl	800449e <HAL_I2C_AddrCallback>
}
 8004e72:	e007      	b.n	8004e84 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2208      	movs	r2, #8
 8004e7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b21      	cmp	r3, #33	; 0x21
 8004ea6:	d115      	bne.n	8004ed4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2211      	movs	r2, #17
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fef6 	bl	8005cb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fac8 	bl	8004462 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ed2:	e014      	b.n	8004efe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2212      	movs	r2, #18
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ee8:	2102      	movs	r1, #2
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fee0 	bl	8005cb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fabc 	bl	8004476 <HAL_I2C_MasterRxCpltCallback>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e00c      	b.n	8004f54 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f52:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b29      	cmp	r3, #41	; 0x29
 8004f5e:	d112      	bne.n	8004f86 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2228      	movs	r2, #40	; 0x28
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2221      	movs	r2, #33	; 0x21
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fe9d 	bl	8005cb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fa83 	bl	800448a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f84:	e017      	b.n	8004fb6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f90:	d111      	bne.n	8004fb6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2228      	movs	r2, #40	; 0x28
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2222      	movs	r2, #34	; 0x22
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fe84 	bl	8005cb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fc fb7f 	bl	80016b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b21      	cmp	r3, #33	; 0x21
 8004fe0:	d107      	bne.n	8004ff2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fe63 	bl	8005cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2211      	movs	r2, #17
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff0:	e00c      	b.n	800500c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b22      	cmp	r3, #34	; 0x22
 8004ffc:	d106      	bne.n	800500c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ffe:	2102      	movs	r1, #2
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fe55 	bl	8005cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2212      	movs	r2, #18
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b4c      	ldr	r3, [pc, #304]	; (8005148 <I2C_ITMasterCplt+0x188>)
 8005018:	400b      	ands	r3, r1
 800501a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a49      	ldr	r2, [pc, #292]	; (800514c <I2C_ITMasterCplt+0x18c>)
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b60      	cmp	r3, #96	; 0x60
 8005050:	d10a      	bne.n	8005068 <I2C_ITMasterCplt+0xa8>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	b2db      	uxtb	r3, r3
 8005064:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005066:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 faee 	bl	800564a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b60      	cmp	r3, #96	; 0x60
 800507e:	d002      	beq.n	8005086 <I2C_ITMasterCplt+0xc6>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f9c5 	bl	800541c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005092:	e054      	b.n	800513e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b21      	cmp	r3, #33	; 0x21
 800509e:	d124      	bne.n	80050ea <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d10b      	bne.n	80050d2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff f9ff 	bl	80044ce <HAL_I2C_MemTxCpltCallback>
}
 80050d0:	e035      	b.n	800513e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff f9bd 	bl	8004462 <HAL_I2C_MasterTxCpltCallback>
}
 80050e8:	e029      	b.n	800513e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b22      	cmp	r3, #34	; 0x22
 80050f4:	d123      	bne.n	800513e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d10b      	bne.n	8005128 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff f9de 	bl	80044e2 <HAL_I2C_MemRxCpltCallback>
}
 8005126:	e00a      	b.n	800513e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff f99c 	bl	8004476 <HAL_I2C_MasterRxCpltCallback>
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	fe00e800 	.word	0xfe00e800
 800514c:	ffff0000 	.word	0xffff0000

08005150 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2220      	movs	r2, #32
 8005174:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b21      	cmp	r3, #33	; 0x21
 800517a:	d002      	beq.n	8005182 <I2C_ITSlaveCplt+0x32>
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b29      	cmp	r3, #41	; 0x29
 8005180:	d108      	bne.n	8005194 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005182:	f248 0101 	movw	r1, #32769	; 0x8001
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fd92 	bl	8005cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2221      	movs	r2, #33	; 0x21
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
 8005192:	e019      	b.n	80051c8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	2b22      	cmp	r3, #34	; 0x22
 8005198:	d002      	beq.n	80051a0 <I2C_ITSlaveCplt+0x50>
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b2a      	cmp	r3, #42	; 0x2a
 800519e:	d108      	bne.n	80051b2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80051a0:	f248 0102 	movw	r1, #32770	; 0x8002
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fd83 	bl	8005cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2222      	movs	r2, #34	; 0x22
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
 80051b0:	e00a      	b.n	80051c8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b28      	cmp	r3, #40	; 0x28
 80051b6:	d107      	bne.n	80051c8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80051b8:	f248 0103 	movw	r1, #32771	; 0x8003
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fd77 	bl	8005cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b62      	ldr	r3, [pc, #392]	; (800536c <I2C_ITSlaveCplt+0x21c>)
 80051e4:	400b      	ands	r3, r1
 80051e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa2e 	bl	800564a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d013      	beq.n	8005220 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005206:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01f      	beq.n	8005250 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	b29a      	uxth	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800521e:	e017      	b.n	8005250 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d012      	beq.n	8005250 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005238:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d020      	beq.n	800529c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d010      	beq.n	80052ea <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8a4 	bl	800541c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b28      	cmp	r3, #40	; 0x28
 80052de:	d141      	bne.n	8005364 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f846 	bl	8005374 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052e8:	e03c      	b.n	8005364 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f2:	d014      	beq.n	800531e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fe06 	bl	8004f06 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <I2C_ITSlaveCplt+0x220>)
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff f8cf 	bl	80044ba <HAL_I2C_ListenCpltCallback>
}
 800531c:	e022      	b.n	8005364 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b22      	cmp	r3, #34	; 0x22
 8005328:	d10e      	bne.n	8005348 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7fc f9b7 	bl	80016b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005346:	e00d      	b.n	8005364 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff f893 	bl	800448a <HAL_I2C_SlaveTxCpltCallback>
}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	fe00e800 	.word	0xfe00e800
 8005370:	ffff0000 	.word	0xffff0000

08005374 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a25      	ldr	r2, [pc, #148]	; (8005418 <I2C_ITListenCplt+0xa4>)
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d022      	beq.n	80053f0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e8:	f043 0204 	orr.w	r2, r3, #4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80053f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fc5b 	bl	8005cb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff f855 	bl	80044ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	ffff0000 	.word	0xffff0000

0800541c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a6d      	ldr	r2, [pc, #436]	; (80055f0 <I2C_ITError+0x1d4>)
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b28      	cmp	r3, #40	; 0x28
 8005452:	d005      	beq.n	8005460 <I2C_ITError+0x44>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b29      	cmp	r3, #41	; 0x29
 8005458:	d002      	beq.n	8005460 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b2a      	cmp	r3, #42	; 0x2a
 800545e:	d10b      	bne.n	8005478 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005460:	2103      	movs	r1, #3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fc24 	bl	8005cb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2228      	movs	r2, #40	; 0x28
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a60      	ldr	r2, [pc, #384]	; (80055f4 <I2C_ITError+0x1d8>)
 8005474:	635a      	str	r2, [r3, #52]	; 0x34
 8005476:	e030      	b.n	80054da <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005478:	f248 0103 	movw	r1, #32771	; 0x8003
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fc17 	bl	8005cb0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f8e1 	bl	800564a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b60      	cmp	r3, #96	; 0x60
 8005492:	d01f      	beq.n	80054d4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d114      	bne.n	80054d4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d109      	bne.n	80054cc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2220      	movs	r2, #32
 80054d2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d039      	beq.n	800555c <I2C_ITError+0x140>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b11      	cmp	r3, #17
 80054ec:	d002      	beq.n	80054f4 <I2C_ITError+0xd8>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b21      	cmp	r3, #33	; 0x21
 80054f2:	d133      	bne.n	800555c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005502:	d107      	bne.n	8005514 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005512:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe f91b 	bl	8003754 <HAL_DMA_GetState>
 800551e:	4603      	mov	r3, r0
 8005520:	2b01      	cmp	r3, #1
 8005522:	d017      	beq.n	8005554 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	4a33      	ldr	r2, [pc, #204]	; (80055f8 <I2C_ITError+0x1dc>)
 800552a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe f8ca 	bl	80036d2 <HAL_DMA_Abort_IT>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d04d      	beq.n	80055e0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800554e:	4610      	mov	r0, r2
 8005550:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005552:	e045      	b.n	80055e0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f851 	bl	80055fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800555a:	e041      	b.n	80055e0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d039      	beq.n	80055d8 <I2C_ITError+0x1bc>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b12      	cmp	r3, #18
 8005568:	d002      	beq.n	8005570 <I2C_ITError+0x154>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b22      	cmp	r3, #34	; 0x22
 800556e:	d133      	bne.n	80055d8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557e:	d107      	bne.n	8005590 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800558e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe f8dd 	bl	8003754 <HAL_DMA_GetState>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d017      	beq.n	80055d0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <I2C_ITError+0x1dc>)
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe f88c 	bl	80036d2 <HAL_DMA_Abort_IT>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d011      	beq.n	80055e4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055ca:	4610      	mov	r0, r2
 80055cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ce:	e009      	b.n	80055e4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f813 	bl	80055fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055d6:	e005      	b.n	80055e4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f80f 	bl	80055fc <I2C_TreatErrorCallback>
  }
}
 80055de:	e002      	b.n	80055e6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055e0:	bf00      	nop
 80055e2:	e000      	b.n	80055e6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055e4:	bf00      	nop
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	ffff0000 	.word	0xffff0000
 80055f4:	0800451f 	.word	0x0800451f
 80055f8:	08005693 	.word	0x08005693

080055fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b60      	cmp	r3, #96	; 0x60
 800560e:	d10e      	bne.n	800562e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fe ff6f 	bl	800450a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800562c:	e009      	b.n	8005642 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fe ff5a 	bl	80044f6 <HAL_I2C_ErrorCallback>
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b02      	cmp	r3, #2
 800565e:	d103      	bne.n	8005668 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d007      	beq.n	8005686 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	619a      	str	r2, [r3, #24]
  }
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	2200      	movs	r2, #0
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff ff9b 	bl	80055fc <I2C_TreatErrorCallback>
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056de:	e031      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d02d      	beq.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e8:	f7fc fca4 	bl	8002034 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d122      	bne.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	429a      	cmp	r2, r3
 800571a:	d113      	bne.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e00f      	b.n	8005764 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	d0be      	beq.n	80056e0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005778:	e033      	b.n	80057e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f900 	bl	8005984 <I2C_IsErrorOccurred>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e031      	b.n	80057f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d025      	beq.n	80057e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fc fc4d 	bl	8002034 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d11a      	bne.n	80057e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d013      	beq.n	80057e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e007      	b.n	80057f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d1c4      	bne.n	800577a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005806:	e02f      	b.n	8005868 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f8b9 	bl	8005984 <I2C_IsErrorOccurred>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e02d      	b.n	8005878 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fc fc0a 	bl	8002034 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11a      	bne.n	8005868 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b20      	cmp	r3, #32
 800583e:	d013      	beq.n	8005868 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e007      	b.n	8005878 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b20      	cmp	r3, #32
 8005874:	d1c8      	bne.n	8005808 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800588c:	e06b      	b.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f876 	bl	8005984 <I2C_IsErrorOccurred>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e069      	b.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d138      	bne.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d105      	bne.n	80058ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e055      	b.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d107      	bne.n	80058e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2210      	movs	r2, #16
 80058de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2204      	movs	r2, #4
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
 80058e6:	e002      	b.n	80058ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2220      	movs	r2, #32
 80058f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005902:	400b      	ands	r3, r1
 8005904:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e029      	b.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fc fb87 	bl	8002034 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d116      	bne.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d00f      	beq.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e007      	b.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d18c      	bne.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	fe00e800 	.word	0xfe00e800

08005984 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d068      	beq.n	8005a82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2210      	movs	r2, #16
 80059b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059b8:	e049      	b.n	8005a4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d045      	beq.n	8005a4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059c2:	f7fc fb37 	bl	8002034 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d302      	bcc.n	80059d8 <I2C_IsErrorOccurred+0x54>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d13a      	bne.n	8005a4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fa:	d121      	bne.n	8005a40 <I2C_IsErrorOccurred+0xbc>
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a02:	d01d      	beq.n	8005a40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d01a      	beq.n	8005a40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a1a:	f7fc fb0b 	bl	8002034 <HAL_GetTick>
 8005a1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a20:	e00e      	b.n	8005a40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a22:	f7fc fb07 	bl	8002034 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b19      	cmp	r3, #25
 8005a2e:	d907      	bls.n	8005a40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f043 0320 	orr.w	r3, r3, #32
 8005a36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005a3e:	e006      	b.n	8005a4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d1e9      	bne.n	8005a22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d003      	beq.n	8005a64 <I2C_IsErrorOccurred+0xe0>
 8005a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0aa      	beq.n	80059ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2220      	movs	r2, #32
 8005a72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f043 0304 	orr.w	r3, r3, #4
 8005a7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f043 0308 	orr.w	r3, r3, #8
 8005abc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f043 0302 	orr.w	r3, r3, #2
 8005ade:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01c      	beq.n	8005b32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff fda6 	bl	800564a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6859      	ldr	r1, [r3, #4]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <I2C_IsErrorOccurred+0x1bc>)
 8005b0a:	400b      	ands	r3, r1
 8005b0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3728      	adds	r7, #40	; 0x28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	fe00e800 	.word	0xfe00e800

08005b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	817b      	strh	r3, [r7, #10]
 8005b52:	4613      	mov	r3, r2
 8005b54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b5c:	7a7b      	ldrb	r3, [r7, #9]
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	0d5b      	lsrs	r3, r3, #21
 8005b7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <I2C_TransferConfig+0x60>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	43db      	mvns	r3, r3
 8005b88:	ea02 0103 	and.w	r1, r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	03ff63ff 	.word	0x03ff63ff

08005ba8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbc:	4a39      	ldr	r2, [pc, #228]	; (8005ca4 <I2C_Enable_IRQ+0xfc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d032      	beq.n	8005c28 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005bc6:	4a38      	ldr	r2, [pc, #224]	; (8005ca8 <I2C_Enable_IRQ+0x100>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d02d      	beq.n	8005c28 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005bd0:	4a36      	ldr	r2, [pc, #216]	; (8005cac <I2C_Enable_IRQ+0x104>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d028      	beq.n	8005c28 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005bd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da03      	bge.n	8005be6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005be4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005bf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005bf8:	887b      	ldrh	r3, [r7, #2]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005c08:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c0a:	887b      	ldrh	r3, [r7, #2]
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d103      	bne.n	8005c18 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005c16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d133      	bne.n	8005c86 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0320 	orr.w	r3, r3, #32
 8005c24:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c26:	e02e      	b.n	8005c86 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da03      	bge.n	8005c38 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005c36:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005c48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c4a:	887b      	ldrh	r3, [r7, #2]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005c5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c5c:	887b      	ldrh	r3, [r7, #2]
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d103      	bne.n	8005c6a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005c68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c6a:	887b      	ldrh	r3, [r7, #2]
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d103      	bne.n	8005c78 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d103      	bne.n	8005c86 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6819      	ldr	r1, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	601a      	str	r2, [r3, #0]
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	0800470f 	.word	0x0800470f
 8005ca8:	08004b31 	.word	0x08004b31
 8005cac:	080048e5 	.word	0x080048e5

08005cb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cc0:	887b      	ldrh	r3, [r7, #2]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00f      	beq.n	8005cea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005cd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cde:	2b28      	cmp	r3, #40	; 0x28
 8005ce0:	d003      	beq.n	8005cea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005ce8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005cea:	887b      	ldrh	r3, [r7, #2]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005cfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d08:	2b28      	cmp	r3, #40	; 0x28
 8005d0a:	d003      	beq.n	8005d14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005d12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da03      	bge.n	8005d24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d103      	bne.n	8005d32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d32:	887b      	ldrh	r3, [r7, #2]
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d103      	bne.n	8005d40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f043 0320 	orr.w	r3, r3, #32
 8005d3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d40:	887b      	ldrh	r3, [r7, #2]
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d103      	bne.n	8005d4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	43da      	mvns	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d138      	bne.n	8005df4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e032      	b.n	8005df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2224      	movs	r2, #36	; 0x24
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6819      	ldr	r1, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d139      	bne.n	8005e8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e033      	b.n	8005e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2224      	movs	r2, #36	; 0x24
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e000      	b.n	8005e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40007000 	.word	0x40007000

08005ebc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40007000 	.word	0x40007000

08005ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee6:	d130      	bne.n	8005f4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ee8:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef4:	d038      	beq.n	8005f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ef6:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f06:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2232      	movs	r2, #50	; 0x32
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	0c9b      	lsrs	r3, r3, #18
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f1c:	e002      	b.n	8005f24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f24:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f30:	d102      	bne.n	8005f38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f2      	bne.n	8005f1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f44:	d110      	bne.n	8005f68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e00f      	b.n	8005f6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f56:	d007      	beq.n	8005f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f60:	4a05      	ldr	r2, [pc, #20]	; (8005f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40007000 	.word	0x40007000
 8005f7c:	20000010 	.word	0x20000010
 8005f80:	431bde83 	.word	0x431bde83

08005f84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f000 bc02 	b.w	800679c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f98:	4b96      	ldr	r3, [pc, #600]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fa2:	4b94      	ldr	r3, [pc, #592]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80e4 	beq.w	8006182 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x4c>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	f040 808b 	bne.w	80060de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	f040 8087 	bne.w	80060de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fd0:	4b88      	ldr	r3, [pc, #544]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x64>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e3d9      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	4b81      	ldr	r3, [pc, #516]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <HAL_RCC_OscConfig+0x7e>
 8005ff8:	4b7e      	ldr	r3, [pc, #504]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006000:	e005      	b.n	800600e <HAL_RCC_OscConfig+0x8a>
 8006002:	4b7c      	ldr	r3, [pc, #496]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600e:	4293      	cmp	r3, r2
 8006010:	d223      	bcs.n	800605a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fd8c 	bl	8006b34 <RCC_SetFlashLatencyFromMSIRange>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e3ba      	b.n	800679c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006026:	4b73      	ldr	r3, [pc, #460]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a72      	ldr	r2, [pc, #456]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800602c:	f043 0308 	orr.w	r3, r3, #8
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4b70      	ldr	r3, [pc, #448]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	496d      	ldr	r1, [pc, #436]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006044:	4b6b      	ldr	r3, [pc, #428]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	4968      	ldr	r1, [pc, #416]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006054:	4313      	orrs	r3, r2
 8006056:	604b      	str	r3, [r1, #4]
 8006058:	e025      	b.n	80060a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800605a:	4b66      	ldr	r3, [pc, #408]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a65      	ldr	r2, [pc, #404]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006060:	f043 0308 	orr.w	r3, r3, #8
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4b63      	ldr	r3, [pc, #396]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	4960      	ldr	r1, [pc, #384]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006078:	4b5e      	ldr	r3, [pc, #376]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	495b      	ldr	r1, [pc, #364]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006088:	4313      	orrs	r3, r2
 800608a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fd4c 	bl	8006b34 <RCC_SetFlashLatencyFromMSIRange>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e37a      	b.n	800679c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060a6:	f000 fc81 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b51      	ldr	r3, [pc, #324]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	091b      	lsrs	r3, r3, #4
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	4950      	ldr	r1, [pc, #320]	; (80061f8 <HAL_RCC_OscConfig+0x274>)
 80060b8:	5ccb      	ldrb	r3, [r1, r3]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	4a4e      	ldr	r2, [pc, #312]	; (80061fc <HAL_RCC_OscConfig+0x278>)
 80060c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060c6:	4b4e      	ldr	r3, [pc, #312]	; (8006200 <HAL_RCC_OscConfig+0x27c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fb ff62 	bl	8001f94 <HAL_InitTick>
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d052      	beq.n	8006180 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	e35e      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d032      	beq.n	800614c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060e6:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a42      	ldr	r2, [pc, #264]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060f2:	f7fb ff9f 	bl	8002034 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060fa:	f7fb ff9b 	bl	8002034 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e347      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006118:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a35      	ldr	r2, [pc, #212]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800611e:	f043 0308 	orr.w	r3, r3, #8
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4b33      	ldr	r3, [pc, #204]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	4930      	ldr	r1, [pc, #192]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	492b      	ldr	r1, [pc, #172]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006146:	4313      	orrs	r3, r2
 8006148:	604b      	str	r3, [r1, #4]
 800614a:	e01a      	b.n	8006182 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800614c:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a28      	ldr	r2, [pc, #160]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006158:	f7fb ff6c 	bl	8002034 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006160:	f7fb ff68 	bl	8002034 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e314      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006172:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x1dc>
 800617e:	e000      	b.n	8006182 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006180:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d073      	beq.n	8006276 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b08      	cmp	r3, #8
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_OscConfig+0x21c>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d10e      	bne.n	80061b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d10b      	bne.n	80061b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d063      	beq.n	8006274 <HAL_RCC_OscConfig+0x2f0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d15f      	bne.n	8006274 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e2f1      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d106      	bne.n	80061d0 <HAL_RCC_OscConfig+0x24c>
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a0b      	ldr	r2, [pc, #44]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e025      	b.n	800621c <HAL_RCC_OscConfig+0x298>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061d8:	d114      	bne.n	8006204 <HAL_RCC_OscConfig+0x280>
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a05      	ldr	r2, [pc, #20]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a02      	ldr	r2, [pc, #8]	; (80061f4 <HAL_RCC_OscConfig+0x270>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e013      	b.n	800621c <HAL_RCC_OscConfig+0x298>
 80061f4:	40021000 	.word	0x40021000
 80061f8:	0800ab1c 	.word	0x0800ab1c
 80061fc:	20000010 	.word	0x20000010
 8006200:	20000014 	.word	0x20000014
 8006204:	4ba0      	ldr	r3, [pc, #640]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a9f      	ldr	r2, [pc, #636]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800620a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	4b9d      	ldr	r3, [pc, #628]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a9c      	ldr	r2, [pc, #624]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800621a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d013      	beq.n	800624c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fb ff06 	bl	8002034 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800622c:	f7fb ff02 	bl	8002034 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b64      	cmp	r3, #100	; 0x64
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e2ae      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800623e:	4b92      	ldr	r3, [pc, #584]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x2a8>
 800624a:	e014      	b.n	8006276 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624c:	f7fb fef2 	bl	8002034 <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006252:	e008      	b.n	8006266 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006254:	f7fb feee 	bl	8002034 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b64      	cmp	r3, #100	; 0x64
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e29a      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006266:	4b88      	ldr	r3, [pc, #544]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f0      	bne.n	8006254 <HAL_RCC_OscConfig+0x2d0>
 8006272:	e000      	b.n	8006276 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d060      	beq.n	8006344 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d005      	beq.n	8006294 <HAL_RCC_OscConfig+0x310>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d119      	bne.n	80062c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d116      	bne.n	80062c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006294:	4b7c      	ldr	r3, [pc, #496]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCC_OscConfig+0x328>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e277      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ac:	4b76      	ldr	r3, [pc, #472]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	061b      	lsls	r3, r3, #24
 80062ba:	4973      	ldr	r1, [pc, #460]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c0:	e040      	b.n	8006344 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d023      	beq.n	8006312 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062ca:	4b6f      	ldr	r3, [pc, #444]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6e      	ldr	r2, [pc, #440]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80062d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d6:	f7fb fead 	bl	8002034 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062de:	f7fb fea9 	bl	8002034 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e255      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f0:	4b65      	ldr	r3, [pc, #404]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f0      	beq.n	80062de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fc:	4b62      	ldr	r3, [pc, #392]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	495f      	ldr	r1, [pc, #380]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]
 8006310:	e018      	b.n	8006344 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006312:	4b5d      	ldr	r3, [pc, #372]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5c      	ldr	r2, [pc, #368]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800631c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631e:	f7fb fe89 	bl	8002034 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006326:	f7fb fe85 	bl	8002034 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e231      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006338:	4b53      	ldr	r3, [pc, #332]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f0      	bne.n	8006326 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d03c      	beq.n	80063ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01c      	beq.n	8006392 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006358:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800635a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635e:	4a4a      	ldr	r2, [pc, #296]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fb fe64 	bl	8002034 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006370:	f7fb fe60 	bl	8002034 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e20c      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006382:	4b41      	ldr	r3, [pc, #260]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0ef      	beq.n	8006370 <HAL_RCC_OscConfig+0x3ec>
 8006390:	e01b      	b.n	80063ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006392:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006398:	4a3b      	ldr	r2, [pc, #236]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a2:	f7fb fe47 	bl	8002034 <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063aa:	f7fb fe43 	bl	8002034 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e1ef      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063bc:	4b32      	ldr	r3, [pc, #200]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ef      	bne.n	80063aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80a6 	beq.w	8006524 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d8:	2300      	movs	r3, #0
 80063da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063dc:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e8:	4b27      	ldr	r3, [pc, #156]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	4a26      	ldr	r2, [pc, #152]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80063ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f2:	6593      	str	r3, [r2, #88]	; 0x58
 80063f4:	4b24      	ldr	r3, [pc, #144]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006400:	2301      	movs	r3, #1
 8006402:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006404:	4b21      	ldr	r3, [pc, #132]	; (800648c <HAL_RCC_OscConfig+0x508>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d118      	bne.n	8006442 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006410:	4b1e      	ldr	r3, [pc, #120]	; (800648c <HAL_RCC_OscConfig+0x508>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <HAL_RCC_OscConfig+0x508>)
 8006416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800641c:	f7fb fe0a 	bl	8002034 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006424:	f7fb fe06 	bl	8002034 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e1b2      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <HAL_RCC_OscConfig+0x508>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d108      	bne.n	800645c <HAL_RCC_OscConfig+0x4d8>
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800645a:	e029      	b.n	80064b0 <HAL_RCC_OscConfig+0x52c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b05      	cmp	r3, #5
 8006462:	d115      	bne.n	8006490 <HAL_RCC_OscConfig+0x50c>
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	4a07      	ldr	r2, [pc, #28]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800646c:	f043 0304 	orr.w	r3, r3, #4
 8006470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	4a03      	ldr	r2, [pc, #12]	; (8006488 <HAL_RCC_OscConfig+0x504>)
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006484:	e014      	b.n	80064b0 <HAL_RCC_OscConfig+0x52c>
 8006486:	bf00      	nop
 8006488:	40021000 	.word	0x40021000
 800648c:	40007000 	.word	0x40007000
 8006490:	4b9a      	ldr	r3, [pc, #616]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	4a99      	ldr	r2, [pc, #612]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064a0:	4b96      	ldr	r3, [pc, #600]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	4a95      	ldr	r2, [pc, #596]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80064a8:	f023 0304 	bic.w	r3, r3, #4
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d016      	beq.n	80064e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b8:	f7fb fdbc 	bl	8002034 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064be:	e00a      	b.n	80064d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c0:	f7fb fdb8 	bl	8002034 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e162      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d6:	4b89      	ldr	r3, [pc, #548]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0ed      	beq.n	80064c0 <HAL_RCC_OscConfig+0x53c>
 80064e4:	e015      	b.n	8006512 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e6:	f7fb fda5 	bl	8002034 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064ec:	e00a      	b.n	8006504 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ee:	f7fb fda1 	bl	8002034 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e14b      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006504:	4b7d      	ldr	r3, [pc, #500]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ed      	bne.n	80064ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006512:	7ffb      	ldrb	r3, [r7, #31]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d105      	bne.n	8006524 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006518:	4b78      	ldr	r3, [pc, #480]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 800651a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651c:	4a77      	ldr	r2, [pc, #476]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 800651e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006522:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d03c      	beq.n	80065aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01c      	beq.n	8006572 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006538:	4b70      	ldr	r3, [pc, #448]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 800653a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800653e:	4a6f      	ldr	r2, [pc, #444]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fb fd74 	bl	8002034 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006550:	f7fb fd70 	bl	8002034 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e11c      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006562:	4b66      	ldr	r3, [pc, #408]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ef      	beq.n	8006550 <HAL_RCC_OscConfig+0x5cc>
 8006570:	e01b      	b.n	80065aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006572:	4b62      	ldr	r3, [pc, #392]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006578:	4a60      	ldr	r2, [pc, #384]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006582:	f7fb fd57 	bl	8002034 <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800658a:	f7fb fd53 	bl	8002034 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e0ff      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800659c:	4b57      	ldr	r3, [pc, #348]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 800659e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1ef      	bne.n	800658a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80f3 	beq.w	800679a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	f040 80c9 	bne.w	8006750 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80065be:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f003 0203 	and.w	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d12c      	bne.n	800662c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	3b01      	subs	r3, #1
 80065de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d123      	bne.n	800662c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d11b      	bne.n	800662c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006600:	429a      	cmp	r2, r3
 8006602:	d113      	bne.n	800662c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	3b01      	subs	r3, #1
 8006612:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d109      	bne.n	800662c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	3b01      	subs	r3, #1
 8006626:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006628:	429a      	cmp	r2, r3
 800662a:	d06b      	beq.n	8006704 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d062      	beq.n	80066f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006632:	4b32      	ldr	r3, [pc, #200]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e0ac      	b.n	800679c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2d      	ldr	r2, [pc, #180]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800664c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800664e:	f7fb fcf1 	bl	8002034 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006656:	f7fb fced 	bl	8002034 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e099      	b.n	800679c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006668:	4b24      	ldr	r3, [pc, #144]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f0      	bne.n	8006656 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	4b21      	ldr	r3, [pc, #132]	; (8006700 <HAL_RCC_OscConfig+0x77c>)
 800667a:	4013      	ands	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006684:	3a01      	subs	r2, #1
 8006686:	0112      	lsls	r2, r2, #4
 8006688:	4311      	orrs	r1, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800668e:	0212      	lsls	r2, r2, #8
 8006690:	4311      	orrs	r1, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006696:	0852      	lsrs	r2, r2, #1
 8006698:	3a01      	subs	r2, #1
 800669a:	0552      	lsls	r2, r2, #21
 800669c:	4311      	orrs	r1, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066a2:	0852      	lsrs	r2, r2, #1
 80066a4:	3a01      	subs	r2, #1
 80066a6:	0652      	lsls	r2, r2, #25
 80066a8:	4311      	orrs	r1, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066ae:	06d2      	lsls	r2, r2, #27
 80066b0:	430a      	orrs	r2, r1
 80066b2:	4912      	ldr	r1, [pc, #72]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80066b8:	4b10      	ldr	r3, [pc, #64]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a0f      	ldr	r2, [pc, #60]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80066be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80066ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066d0:	f7fb fcb0 	bl	8002034 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d8:	f7fb fcac 	bl	8002034 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e058      	b.n	800679c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ea:	4b04      	ldr	r3, [pc, #16]	; (80066fc <HAL_RCC_OscConfig+0x778>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f0      	beq.n	80066d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066f6:	e050      	b.n	800679a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e04f      	b.n	800679c <HAL_RCC_OscConfig+0x818>
 80066fc:	40021000 	.word	0x40021000
 8006700:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006704:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d144      	bne.n	800679a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006710:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 8006716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800671c:	4b21      	ldr	r3, [pc, #132]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 8006722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006728:	f7fb fc84 	bl	8002034 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006730:	f7fb fc80 	bl	8002034 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e02c      	b.n	800679c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x7ac>
 800674e:	e024      	b.n	800679a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b0c      	cmp	r3, #12
 8006754:	d01f      	beq.n	8006796 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006756:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a12      	ldr	r2, [pc, #72]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 800675c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb fc67 	bl	8002034 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800676a:	f7fb fc63 	bl	8002034 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e00f      	b.n	800679c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f0      	bne.n	800676a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	4905      	ldr	r1, [pc, #20]	; (80067a4 <HAL_RCC_OscConfig+0x820>)
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <HAL_RCC_OscConfig+0x824>)
 8006790:	4013      	ands	r3, r2
 8006792:	60cb      	str	r3, [r1, #12]
 8006794:	e001      	b.n	800679a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40021000 	.word	0x40021000
 80067a8:	feeefffc 	.word	0xfeeefffc

080067ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e0e7      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067c0:	4b75      	ldr	r3, [pc, #468]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d910      	bls.n	80067f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ce:	4b72      	ldr	r3, [pc, #456]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f023 0207 	bic.w	r2, r3, #7
 80067d6:	4970      	ldr	r1, [pc, #448]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067de:	4b6e      	ldr	r3, [pc, #440]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e0cf      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d010      	beq.n	800681e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	4b66      	ldr	r3, [pc, #408]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006808:	429a      	cmp	r2, r3
 800680a:	d908      	bls.n	800681e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800680c:	4b63      	ldr	r3, [pc, #396]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4960      	ldr	r1, [pc, #384]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d04c      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d107      	bne.n	8006842 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006832:	4b5a      	ldr	r3, [pc, #360]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d121      	bne.n	8006882 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0a6      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d107      	bne.n	800685a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800684a:	4b54      	ldr	r3, [pc, #336]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d115      	bne.n	8006882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e09a      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006862:	4b4e      	ldr	r3, [pc, #312]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e08e      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006872:	4b4a      	ldr	r3, [pc, #296]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e086      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006882:	4b46      	ldr	r3, [pc, #280]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f023 0203 	bic.w	r2, r3, #3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4943      	ldr	r1, [pc, #268]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006894:	f7fb fbce 	bl	8002034 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689a:	e00a      	b.n	80068b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800689c:	f7fb fbca 	bl	8002034 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e06e      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b2:	4b3a      	ldr	r3, [pc, #232]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 020c 	and.w	r2, r3, #12
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d1eb      	bne.n	800689c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068dc:	429a      	cmp	r2, r3
 80068de:	d208      	bcs.n	80068f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e0:	4b2e      	ldr	r3, [pc, #184]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	492b      	ldr	r1, [pc, #172]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068f2:	4b29      	ldr	r3, [pc, #164]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d210      	bcs.n	8006922 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f023 0207 	bic.w	r2, r3, #7
 8006908:	4923      	ldr	r1, [pc, #140]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	4313      	orrs	r3, r2
 800690e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006910:	4b21      	ldr	r3, [pc, #132]	; (8006998 <HAL_RCC_ClockConfig+0x1ec>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d001      	beq.n	8006922 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e036      	b.n	8006990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800692e:	4b1b      	ldr	r3, [pc, #108]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4918      	ldr	r1, [pc, #96]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 800693c:	4313      	orrs	r3, r2
 800693e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4910      	ldr	r1, [pc, #64]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 800695c:	4313      	orrs	r3, r2
 800695e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006960:	f000 f824 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 8006964:	4602      	mov	r2, r0
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <HAL_RCC_ClockConfig+0x1f0>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	490b      	ldr	r1, [pc, #44]	; (80069a0 <HAL_RCC_ClockConfig+0x1f4>)
 8006972:	5ccb      	ldrb	r3, [r1, r3]
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <HAL_RCC_ClockConfig+0x1f8>)
 800697e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006980:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <HAL_RCC_ClockConfig+0x1fc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7fb fb05 	bl	8001f94 <HAL_InitTick>
 800698a:	4603      	mov	r3, r0
 800698c:	72fb      	strb	r3, [r7, #11]

  return status;
 800698e:	7afb      	ldrb	r3, [r7, #11]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40022000 	.word	0x40022000
 800699c:	40021000 	.word	0x40021000
 80069a0:	0800ab1c 	.word	0x0800ab1c
 80069a4:	20000010 	.word	0x20000010
 80069a8:	20000014 	.word	0x20000014

080069ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b089      	sub	sp, #36	; 0x24
 80069b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	2300      	movs	r3, #0
 80069b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ba:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
 80069c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069c4:	4b3b      	ldr	r3, [pc, #236]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_RCC_GetSysClockFreq+0x34>
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b0c      	cmp	r3, #12
 80069d8:	d121      	bne.n	8006a1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d11e      	bne.n	8006a1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d107      	bne.n	80069fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069ec:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e005      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069fc:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a08:	4a2b      	ldr	r2, [pc, #172]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10d      	bne.n	8006a34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a1c:	e00a      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d102      	bne.n	8006a2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a24:	4b25      	ldr	r3, [pc, #148]	; (8006abc <HAL_RCC_GetSysClockFreq+0x110>)
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e004      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a30:	4b23      	ldr	r3, [pc, #140]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b0c      	cmp	r3, #12
 8006a38:	d134      	bne.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d003      	beq.n	8006a52 <HAL_RCC_GetSysClockFreq+0xa6>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0xac>
 8006a50:	e005      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a52:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <HAL_RCC_GetSysClockFreq+0x110>)
 8006a54:	617b      	str	r3, [r7, #20]
      break;
 8006a56:	e005      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a58:	4b19      	ldr	r3, [pc, #100]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a5a:	617b      	str	r3, [r7, #20]
      break;
 8006a5c:	e002      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	617b      	str	r3, [r7, #20]
      break;
 8006a62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a64:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	091b      	lsrs	r3, r3, #4
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	3301      	adds	r3, #1
 8006a70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	fb03 f202 	mul.w	r2, r3, r2
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	0e5b      	lsrs	r3, r3, #25
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	3301      	adds	r3, #1
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	0800ab34 	.word	0x0800ab34
 8006abc:	00f42400 	.word	0x00f42400
 8006ac0:	007a1200 	.word	0x007a1200

08006ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000010 	.word	0x20000010

08006adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ae0:	f7ff fff0 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	4904      	ldr	r1, [pc, #16]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006af2:	5ccb      	ldrb	r3, [r1, r3]
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800ab2c 	.word	0x0800ab2c

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b0c:	f7ff ffda 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0adb      	lsrs	r3, r3, #11
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4904      	ldr	r1, [pc, #16]	; (8006b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	0800ab2c 	.word	0x0800ab2c

08006b34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b40:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b4c:	f7ff f9b6 	bl	8005ebc <HAL_PWREx_GetVoltageRange>
 8006b50:	6178      	str	r0, [r7, #20]
 8006b52:	e014      	b.n	8006b7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	4a24      	ldr	r2, [pc, #144]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b60:	4b22      	ldr	r3, [pc, #136]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b6c:	f7ff f9a6 	bl	8005ebc <HAL_PWREx_GetVoltageRange>
 8006b70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	4a1d      	ldr	r2, [pc, #116]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b84:	d10b      	bne.n	8006b9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d919      	bls.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2ba0      	cmp	r3, #160	; 0xa0
 8006b90:	d902      	bls.n	8006b98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b92:	2302      	movs	r3, #2
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	e013      	b.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b98:	2301      	movs	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	e010      	b.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b80      	cmp	r3, #128	; 0x80
 8006ba2:	d902      	bls.n	8006baa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	e00a      	b.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b80      	cmp	r3, #128	; 0x80
 8006bae:	d102      	bne.n	8006bb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	e004      	b.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b70      	cmp	r3, #112	; 0x70
 8006bba:	d101      	bne.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f023 0207 	bic.w	r2, r3, #7
 8006bc8:	4909      	ldr	r1, [pc, #36]	; (8006bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d001      	beq.n	8006be2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	40022000 	.word	0x40022000

08006bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c00:	2300      	movs	r3, #0
 8006c02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d031      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c18:	d01a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006c1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c1e:	d814      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c28:	d10f      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006c2a:	4b5d      	ldr	r3, [pc, #372]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	4a5c      	ldr	r2, [pc, #368]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c36:	e00c      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f9de 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c48:	e003      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	74fb      	strb	r3, [r7, #19]
      break;
 8006c4e:	e000      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c52:	7cfb      	ldrb	r3, [r7, #19]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10b      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c58:	4b51      	ldr	r3, [pc, #324]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c66:	494e      	ldr	r1, [pc, #312]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c6e:	e001      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 809e 	beq.w	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c86:	4b46      	ldr	r3, [pc, #280]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00d      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9c:	4b40      	ldr	r3, [pc, #256]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca0:	4a3f      	ldr	r2, [pc, #252]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ca8:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb8:	4b3a      	ldr	r3, [pc, #232]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a39      	ldr	r2, [pc, #228]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cc4:	f7fb f9b6 	bl	8002034 <HAL_GetTick>
 8006cc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cca:	e009      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ccc:	f7fb f9b2 	bl	8002034 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d902      	bls.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	74fb      	strb	r3, [r7, #19]
        break;
 8006cde:	e005      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ce0:	4b30      	ldr	r3, [pc, #192]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0ef      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006cec:	7cfb      	ldrb	r3, [r7, #19]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d15a      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cf2:	4b2b      	ldr	r3, [pc, #172]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cfc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01e      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d019      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d0e:	4b24      	ldr	r3, [pc, #144]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d1a:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d2a:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d3a:	4a19      	ldr	r2, [pc, #100]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d016      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7fb f972 	bl	8002034 <HAL_GetTick>
 8006d50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d52:	e00b      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d54:	f7fb f96e 	bl	8002034 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d902      	bls.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	74fb      	strb	r3, [r7, #19]
            break;
 8006d6a:	e006      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0ec      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	4904      	ldr	r1, [pc, #16]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d96:	e009      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d98:	7cfb      	ldrb	r3, [r7, #19]
 8006d9a:	74bb      	strb	r3, [r7, #18]
 8006d9c:	e006      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006d9e:	bf00      	nop
 8006da0:	40021000 	.word	0x40021000
 8006da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	7cfb      	ldrb	r3, [r7, #19]
 8006daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dac:	7c7b      	ldrb	r3, [r7, #17]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d105      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db2:	4b8a      	ldr	r3, [pc, #552]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	4a89      	ldr	r2, [pc, #548]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dca:	4b84      	ldr	r3, [pc, #528]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd0:	f023 0203 	bic.w	r2, r3, #3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	4980      	ldr	r1, [pc, #512]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dec:	4b7b      	ldr	r3, [pc, #492]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df2:	f023 020c 	bic.w	r2, r3, #12
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	4978      	ldr	r1, [pc, #480]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e0e:	4b73      	ldr	r3, [pc, #460]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	496f      	ldr	r1, [pc, #444]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e30:	4b6a      	ldr	r3, [pc, #424]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	4967      	ldr	r1, [pc, #412]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e52:	4b62      	ldr	r3, [pc, #392]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	495e      	ldr	r1, [pc, #376]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e74:	4b59      	ldr	r3, [pc, #356]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	4956      	ldr	r1, [pc, #344]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e96:	4b51      	ldr	r3, [pc, #324]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	494d      	ldr	r1, [pc, #308]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d028      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eb8:	4b48      	ldr	r3, [pc, #288]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	4945      	ldr	r1, [pc, #276]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ed8:	4b40      	ldr	r3, [pc, #256]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a3f      	ldr	r2, [pc, #252]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ee2:	60d3      	str	r3, [r2, #12]
 8006ee4:	e011      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eee:	d10c      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f882 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f00:	7cfb      	ldrb	r3, [r7, #19]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006f06:	7cfb      	ldrb	r3, [r7, #19]
 8006f08:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d028      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f16:	4b31      	ldr	r3, [pc, #196]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f24:	492d      	ldr	r1, [pc, #180]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f34:	d106      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f36:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	4a28      	ldr	r2, [pc, #160]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f40:	60d3      	str	r3, [r2, #12]
 8006f42:	e011      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	2101      	movs	r1, #1
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f853 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f5e:	7cfb      	ldrb	r3, [r7, #19]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006f64:	7cfb      	ldrb	r3, [r7, #19]
 8006f66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01c      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f82:	4916      	ldr	r1, [pc, #88]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f92:	d10c      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3304      	adds	r3, #4
 8006f98:	2102      	movs	r1, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f830 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fa4:	7cfb      	ldrb	r3, [r7, #19]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006faa:	7cfb      	ldrb	r3, [r7, #19]
 8006fac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fba:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc8:	4904      	ldr	r1, [pc, #16]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006fd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40021000 	.word	0x40021000

08006fe0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	6013      	str	r3, [r2, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000

08007000 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800700e:	4b74      	ldr	r3, [pc, #464]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d018      	beq.n	800704c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800701a:	4b71      	ldr	r3, [pc, #452]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0203 	and.w	r2, r3, #3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d10d      	bne.n	8007046 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
       ||
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007032:	4b6b      	ldr	r3, [pc, #428]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
       ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d047      	beq.n	80070d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e044      	b.n	80070d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d018      	beq.n	8007086 <RCCEx_PLLSAI1_Config+0x86>
 8007054:	2b03      	cmp	r3, #3
 8007056:	d825      	bhi.n	80070a4 <RCCEx_PLLSAI1_Config+0xa4>
 8007058:	2b01      	cmp	r3, #1
 800705a:	d002      	beq.n	8007062 <RCCEx_PLLSAI1_Config+0x62>
 800705c:	2b02      	cmp	r3, #2
 800705e:	d009      	beq.n	8007074 <RCCEx_PLLSAI1_Config+0x74>
 8007060:	e020      	b.n	80070a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007062:	4b5f      	ldr	r3, [pc, #380]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d11d      	bne.n	80070aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007072:	e01a      	b.n	80070aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007074:	4b5a      	ldr	r3, [pc, #360]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800707c:	2b00      	cmp	r3, #0
 800707e:	d116      	bne.n	80070ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007084:	e013      	b.n	80070ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007086:	4b56      	ldr	r3, [pc, #344]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10f      	bne.n	80070b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007092:	4b53      	ldr	r3, [pc, #332]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070a2:	e006      	b.n	80070b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
      break;
 80070a8:	e004      	b.n	80070b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10d      	bne.n	80070d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80070ba:	4b49      	ldr	r3, [pc, #292]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	430b      	orrs	r3, r1
 80070d0:	4943      	ldr	r1, [pc, #268]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d17c      	bne.n	80071d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80070dc:	4b40      	ldr	r3, [pc, #256]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a3f      	ldr	r2, [pc, #252]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e8:	f7fa ffa4 	bl	8002034 <HAL_GetTick>
 80070ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070ee:	e009      	b.n	8007104 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070f0:	f7fa ffa0 	bl	8002034 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d902      	bls.n	8007104 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	73fb      	strb	r3, [r7, #15]
        break;
 8007102:	e005      	b.n	8007110 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007104:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1ef      	bne.n	80070f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d15f      	bne.n	80071d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d110      	bne.n	800713e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800711c:	4b30      	ldr	r3, [pc, #192]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007124:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6892      	ldr	r2, [r2, #8]
 800712c:	0211      	lsls	r1, r2, #8
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68d2      	ldr	r2, [r2, #12]
 8007132:	06d2      	lsls	r2, r2, #27
 8007134:	430a      	orrs	r2, r1
 8007136:	492a      	ldr	r1, [pc, #168]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	610b      	str	r3, [r1, #16]
 800713c:	e027      	b.n	800718e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d112      	bne.n	800716a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007144:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800714c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6892      	ldr	r2, [r2, #8]
 8007154:	0211      	lsls	r1, r2, #8
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6912      	ldr	r2, [r2, #16]
 800715a:	0852      	lsrs	r2, r2, #1
 800715c:	3a01      	subs	r2, #1
 800715e:	0552      	lsls	r2, r2, #21
 8007160:	430a      	orrs	r2, r1
 8007162:	491f      	ldr	r1, [pc, #124]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007164:	4313      	orrs	r3, r2
 8007166:	610b      	str	r3, [r1, #16]
 8007168:	e011      	b.n	800718e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800716a:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007172:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	0211      	lsls	r1, r2, #8
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6952      	ldr	r2, [r2, #20]
 8007180:	0852      	lsrs	r2, r2, #1
 8007182:	3a01      	subs	r2, #1
 8007184:	0652      	lsls	r2, r2, #25
 8007186:	430a      	orrs	r2, r1
 8007188:	4915      	ldr	r1, [pc, #84]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800718a:	4313      	orrs	r3, r2
 800718c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007194:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007198:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719a:	f7fa ff4b 	bl	8002034 <HAL_GetTick>
 800719e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071a0:	e009      	b.n	80071b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071a2:	f7fa ff47 	bl	8002034 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d902      	bls.n	80071b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	73fb      	strb	r3, [r7, #15]
          break;
 80071b4:	e005      	b.n	80071c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0ef      	beq.n	80071a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071c8:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	4903      	ldr	r1, [pc, #12]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40021000 	.word	0x40021000

080071e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e040      	b.n	8007278 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fa fcee 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2224      	movs	r2, #36	; 0x24
 8007210:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fade 	bl	80077ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8af 	bl	8007394 <UART_SetConfig>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e01b      	b.n	8007278 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fb5d 	bl	8007930 <UART_CheckIdleState>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007294:	2b20      	cmp	r3, #32
 8007296:	d178      	bne.n	800738a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_UART_Transmit+0x24>
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e071      	b.n	800738c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2221      	movs	r2, #33	; 0x21
 80072b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b6:	f7fa febd 	bl	8002034 <HAL_GetTick>
 80072ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d4:	d108      	bne.n	80072e8 <HAL_UART_Transmit+0x68>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e003      	b.n	80072f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072f0:	e030      	b.n	8007354 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fbbf 	bl	8007a80 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e03c      	b.n	800738c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007324:	b292      	uxth	r2, r2
 8007326:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	3302      	adds	r3, #2
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e008      	b.n	8007342 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b292      	uxth	r2, r2
 800733a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1c8      	bne.n	80072f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2200      	movs	r2, #0
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fb88 	bl	8007a80 <UART_WaitOnFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e005      	b.n	800738c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	e000      	b.n	800738c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800738a:	2302      	movs	r3, #2
  }
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007398:	b08a      	sub	sp, #40	; 0x28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	431a      	orrs	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4bb4      	ldr	r3, [pc, #720]	; (8007694 <UART_SetConfig+0x300>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4aa9      	ldr	r2, [pc, #676]	; (8007698 <UART_SetConfig+0x304>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fc:	4313      	orrs	r3, r2
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	430a      	orrs	r2, r1
 8007412:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4aa0      	ldr	r2, [pc, #640]	; (800769c <UART_SetConfig+0x308>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d126      	bne.n	800746c <UART_SetConfig+0xd8>
 800741e:	4ba0      	ldr	r3, [pc, #640]	; (80076a0 <UART_SetConfig+0x30c>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2b03      	cmp	r3, #3
 800742a:	d81b      	bhi.n	8007464 <UART_SetConfig+0xd0>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <UART_SetConfig+0xa0>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007445 	.word	0x08007445
 8007438:	08007455 	.word	0x08007455
 800743c:	0800744d 	.word	0x0800744d
 8007440:	0800745d 	.word	0x0800745d
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e080      	b.n	800754e <UART_SetConfig+0x1ba>
 800744c:	2302      	movs	r3, #2
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e07c      	b.n	800754e <UART_SetConfig+0x1ba>
 8007454:	2304      	movs	r3, #4
 8007456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745a:	e078      	b.n	800754e <UART_SetConfig+0x1ba>
 800745c:	2308      	movs	r3, #8
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007462:	e074      	b.n	800754e <UART_SetConfig+0x1ba>
 8007464:	2310      	movs	r3, #16
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746a:	e070      	b.n	800754e <UART_SetConfig+0x1ba>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a8c      	ldr	r2, [pc, #560]	; (80076a4 <UART_SetConfig+0x310>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d138      	bne.n	80074e8 <UART_SetConfig+0x154>
 8007476:	4b8a      	ldr	r3, [pc, #552]	; (80076a0 <UART_SetConfig+0x30c>)
 8007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747c:	f003 030c 	and.w	r3, r3, #12
 8007480:	2b0c      	cmp	r3, #12
 8007482:	d82d      	bhi.n	80074e0 <UART_SetConfig+0x14c>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0xf8>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074c1 	.word	0x080074c1
 8007490:	080074e1 	.word	0x080074e1
 8007494:	080074e1 	.word	0x080074e1
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074d1 	.word	0x080074d1
 80074a0:	080074e1 	.word	0x080074e1
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074d9 	.word	0x080074d9
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c6:	e042      	b.n	800754e <UART_SetConfig+0x1ba>
 80074c8:	2302      	movs	r3, #2
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ce:	e03e      	b.n	800754e <UART_SetConfig+0x1ba>
 80074d0:	2304      	movs	r3, #4
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d6:	e03a      	b.n	800754e <UART_SetConfig+0x1ba>
 80074d8:	2308      	movs	r3, #8
 80074da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074de:	e036      	b.n	800754e <UART_SetConfig+0x1ba>
 80074e0:	2310      	movs	r3, #16
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e6:	e032      	b.n	800754e <UART_SetConfig+0x1ba>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a6a      	ldr	r2, [pc, #424]	; (8007698 <UART_SetConfig+0x304>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d12a      	bne.n	8007548 <UART_SetConfig+0x1b4>
 80074f2:	4b6b      	ldr	r3, [pc, #428]	; (80076a0 <UART_SetConfig+0x30c>)
 80074f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007500:	d01a      	beq.n	8007538 <UART_SetConfig+0x1a4>
 8007502:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007506:	d81b      	bhi.n	8007540 <UART_SetConfig+0x1ac>
 8007508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750c:	d00c      	beq.n	8007528 <UART_SetConfig+0x194>
 800750e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007512:	d815      	bhi.n	8007540 <UART_SetConfig+0x1ac>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <UART_SetConfig+0x18c>
 8007518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751c:	d008      	beq.n	8007530 <UART_SetConfig+0x19c>
 800751e:	e00f      	b.n	8007540 <UART_SetConfig+0x1ac>
 8007520:	2300      	movs	r3, #0
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007526:	e012      	b.n	800754e <UART_SetConfig+0x1ba>
 8007528:	2302      	movs	r3, #2
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752e:	e00e      	b.n	800754e <UART_SetConfig+0x1ba>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007536:	e00a      	b.n	800754e <UART_SetConfig+0x1ba>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753e:	e006      	b.n	800754e <UART_SetConfig+0x1ba>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007546:	e002      	b.n	800754e <UART_SetConfig+0x1ba>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a51      	ldr	r2, [pc, #324]	; (8007698 <UART_SetConfig+0x304>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d17a      	bne.n	800764e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800755c:	2b08      	cmp	r3, #8
 800755e:	d824      	bhi.n	80075aa <UART_SetConfig+0x216>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <UART_SetConfig+0x1d4>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	0800758d 	.word	0x0800758d
 800756c:	080075ab 	.word	0x080075ab
 8007570:	08007595 	.word	0x08007595
 8007574:	080075ab 	.word	0x080075ab
 8007578:	0800759b 	.word	0x0800759b
 800757c:	080075ab 	.word	0x080075ab
 8007580:	080075ab 	.word	0x080075ab
 8007584:	080075ab 	.word	0x080075ab
 8007588:	080075a3 	.word	0x080075a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800758c:	f7ff faa6 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 8007590:	61f8      	str	r0, [r7, #28]
        break;
 8007592:	e010      	b.n	80075b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007594:	4b44      	ldr	r3, [pc, #272]	; (80076a8 <UART_SetConfig+0x314>)
 8007596:	61fb      	str	r3, [r7, #28]
        break;
 8007598:	e00d      	b.n	80075b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759a:	f7ff fa07 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 800759e:	61f8      	str	r0, [r7, #28]
        break;
 80075a0:	e009      	b.n	80075b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a6:	61fb      	str	r3, [r7, #28]
        break;
 80075a8:	e005      	b.n	80075b6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8107 	beq.w	80077cc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4413      	add	r3, r2
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d305      	bcc.n	80075da <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075e0:	e0f4      	b.n	80077cc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2200      	movs	r2, #0
 80075e6:	461c      	mov	r4, r3
 80075e8:	4615      	mov	r5, r2
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	022b      	lsls	r3, r5, #8
 80075f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075f8:	0222      	lsls	r2, r4, #8
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	6849      	ldr	r1, [r1, #4]
 80075fe:	0849      	lsrs	r1, r1, #1
 8007600:	2000      	movs	r0, #0
 8007602:	4688      	mov	r8, r1
 8007604:	4681      	mov	r9, r0
 8007606:	eb12 0a08 	adds.w	sl, r2, r8
 800760a:	eb43 0b09 	adc.w	fp, r3, r9
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	603b      	str	r3, [r7, #0]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800761c:	4650      	mov	r0, sl
 800761e:	4659      	mov	r1, fp
 8007620:	f7f9 fac2 	bl	8000ba8 <__aeabi_uldivmod>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4613      	mov	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007632:	d308      	bcc.n	8007646 <UART_SetConfig+0x2b2>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800763a:	d204      	bcs.n	8007646 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	60da      	str	r2, [r3, #12]
 8007644:	e0c2      	b.n	80077cc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800764c:	e0be      	b.n	80077cc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007656:	d16a      	bne.n	800772e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800765c:	2b08      	cmp	r3, #8
 800765e:	d834      	bhi.n	80076ca <UART_SetConfig+0x336>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <UART_SetConfig+0x2d4>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	0800768d 	.word	0x0800768d
 800766c:	080076ad 	.word	0x080076ad
 8007670:	080076b5 	.word	0x080076b5
 8007674:	080076cb 	.word	0x080076cb
 8007678:	080076bb 	.word	0x080076bb
 800767c:	080076cb 	.word	0x080076cb
 8007680:	080076cb 	.word	0x080076cb
 8007684:	080076cb 	.word	0x080076cb
 8007688:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800768c:	f7ff fa26 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 8007690:	61f8      	str	r0, [r7, #28]
        break;
 8007692:	e020      	b.n	80076d6 <UART_SetConfig+0x342>
 8007694:	efff69f3 	.word	0xefff69f3
 8007698:	40008000 	.word	0x40008000
 800769c:	40013800 	.word	0x40013800
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40004400 	.word	0x40004400
 80076a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ac:	f7ff fa2c 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 80076b0:	61f8      	str	r0, [r7, #28]
        break;
 80076b2:	e010      	b.n	80076d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b4:	4b4c      	ldr	r3, [pc, #304]	; (80077e8 <UART_SetConfig+0x454>)
 80076b6:	61fb      	str	r3, [r7, #28]
        break;
 80076b8:	e00d      	b.n	80076d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ba:	f7ff f977 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 80076be:	61f8      	str	r0, [r7, #28]
        break;
 80076c0:	e009      	b.n	80076d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	61fb      	str	r3, [r7, #28]
        break;
 80076c8:	e005      	b.n	80076d6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d077      	beq.n	80077cc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	005a      	lsls	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	441a      	add	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b0f      	cmp	r3, #15
 80076f6:	d916      	bls.n	8007726 <UART_SetConfig+0x392>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fe:	d212      	bcs.n	8007726 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f023 030f 	bic.w	r3, r3, #15
 8007708:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	b29b      	uxth	r3, r3
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	b29a      	uxth	r2, r3
 8007716:	8afb      	ldrh	r3, [r7, #22]
 8007718:	4313      	orrs	r3, r2
 800771a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	8afa      	ldrh	r2, [r7, #22]
 8007722:	60da      	str	r2, [r3, #12]
 8007724:	e052      	b.n	80077cc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800772c:	e04e      	b.n	80077cc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800772e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007732:	2b08      	cmp	r3, #8
 8007734:	d827      	bhi.n	8007786 <UART_SetConfig+0x3f2>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x3a8>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007761 	.word	0x08007761
 8007740:	08007769 	.word	0x08007769
 8007744:	08007771 	.word	0x08007771
 8007748:	08007787 	.word	0x08007787
 800774c:	08007777 	.word	0x08007777
 8007750:	08007787 	.word	0x08007787
 8007754:	08007787 	.word	0x08007787
 8007758:	08007787 	.word	0x08007787
 800775c:	0800777f 	.word	0x0800777f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007760:	f7ff f9bc 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 8007764:	61f8      	str	r0, [r7, #28]
        break;
 8007766:	e014      	b.n	8007792 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007768:	f7ff f9ce 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 800776c:	61f8      	str	r0, [r7, #28]
        break;
 800776e:	e010      	b.n	8007792 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007770:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <UART_SetConfig+0x454>)
 8007772:	61fb      	str	r3, [r7, #28]
        break;
 8007774:	e00d      	b.n	8007792 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007776:	f7ff f919 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 800777a:	61f8      	str	r0, [r7, #28]
        break;
 800777c:	e009      	b.n	8007792 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007782:	61fb      	str	r3, [r7, #28]
        break;
 8007784:	e005      	b.n	8007792 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007790:	bf00      	nop
    }

    if (pclk != 0U)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d019      	beq.n	80077cc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	085a      	lsrs	r2, r3, #1
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	441a      	add	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b0f      	cmp	r3, #15
 80077b0:	d909      	bls.n	80077c6 <UART_SetConfig+0x432>
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b8:	d205      	bcs.n	80077c6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	e002      	b.n	80077cc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3728      	adds	r7, #40	; 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e6:	bf00      	nop
 80077e8:	00f42400 	.word	0x00f42400

080077ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01a      	beq.n	8007902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ea:	d10a      	bne.n	8007902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  }
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b098      	sub	sp, #96	; 0x60
 8007934:	af02      	add	r7, sp, #8
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007940:	f7fa fb78 	bl	8002034 <HAL_GetTick>
 8007944:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b08      	cmp	r3, #8
 8007952:	d12e      	bne.n	80079b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795c:	2200      	movs	r2, #0
 800795e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f88c 	bl	8007a80 <UART_WaitOnFlagUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d021      	beq.n	80079b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007982:	653b      	str	r3, [r7, #80]	; 0x50
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800799a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e6      	bne.n	800796e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e062      	b.n	8007a78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d149      	bne.n	8007a54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c8:	2200      	movs	r2, #0
 80079ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f856 	bl	8007a80 <UART_WaitOnFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d03c      	beq.n	8007a54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	623b      	str	r3, [r7, #32]
   return(result);
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f8:	633b      	str	r3, [r7, #48]	; 0x30
 80079fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3308      	adds	r3, #8
 8007a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2c:	61fa      	str	r2, [r7, #28]
 8007a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	69b9      	ldr	r1, [r7, #24]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e5      	bne.n	8007a0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e011      	b.n	8007a78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3758      	adds	r7, #88	; 0x58
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a90:	e049      	b.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d045      	beq.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9a:	f7fa facb 	bl	8002034 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d302      	bcc.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e048      	b.n	8007b46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d031      	beq.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d110      	bne.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2208      	movs	r2, #8
 8007ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f838 	bl	8007b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e029      	b.n	8007b46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b00:	d111      	bne.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f81e 	bl	8007b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e00f      	b.n	8007b46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69da      	ldr	r2, [r3, #28]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	bf0c      	ite	eq
 8007b36:	2301      	moveq	r3, #1
 8007b38:	2300      	movne	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d0a6      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b095      	sub	sp, #84	; 0x54
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b74:	643b      	str	r3, [r7, #64]	; 0x40
 8007b76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e6      	bne.n	8007b56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d118      	bne.n	8007bf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f023 0310 	bic.w	r3, r3, #16
 8007bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be2:	61bb      	str	r3, [r7, #24]
 8007be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e6      	bne.n	8007bc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c0a:	bf00      	nop
 8007c0c:	3754      	adds	r7, #84	; 0x54
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <__assert_func>:
 8007c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <__assert_func+0x2c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4605      	mov	r5, r0
 8007c24:	68d8      	ldr	r0, [r3, #12]
 8007c26:	b14c      	cbz	r4, 8007c3c <__assert_func+0x24>
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <__assert_func+0x30>)
 8007c2a:	9100      	str	r1, [sp, #0]
 8007c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c30:	4906      	ldr	r1, [pc, #24]	; (8007c4c <__assert_func+0x34>)
 8007c32:	462b      	mov	r3, r5
 8007c34:	f000 fd18 	bl	8008668 <fiprintf>
 8007c38:	f000 fe3b 	bl	80088b2 <abort>
 8007c3c:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <__assert_func+0x38>)
 8007c3e:	461c      	mov	r4, r3
 8007c40:	e7f3      	b.n	8007c2a <__assert_func+0x12>
 8007c42:	bf00      	nop
 8007c44:	20000074 	.word	0x20000074
 8007c48:	0800ab64 	.word	0x0800ab64
 8007c4c:	0800ab71 	.word	0x0800ab71
 8007c50:	0800ab9f 	.word	0x0800ab9f

08007c54 <__cvt>:
 8007c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	ec55 4b10 	vmov	r4, r5, d0
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	460e      	mov	r6, r1
 8007c60:	4619      	mov	r1, r3
 8007c62:	462b      	mov	r3, r5
 8007c64:	bfbb      	ittet	lt
 8007c66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c6a:	461d      	movlt	r5, r3
 8007c6c:	2300      	movge	r3, #0
 8007c6e:	232d      	movlt	r3, #45	; 0x2d
 8007c70:	700b      	strb	r3, [r1, #0]
 8007c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c78:	4691      	mov	r9, r2
 8007c7a:	f023 0820 	bic.w	r8, r3, #32
 8007c7e:	bfbc      	itt	lt
 8007c80:	4622      	movlt	r2, r4
 8007c82:	4614      	movlt	r4, r2
 8007c84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c88:	d005      	beq.n	8007c96 <__cvt+0x42>
 8007c8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c8e:	d100      	bne.n	8007c92 <__cvt+0x3e>
 8007c90:	3601      	adds	r6, #1
 8007c92:	2102      	movs	r1, #2
 8007c94:	e000      	b.n	8007c98 <__cvt+0x44>
 8007c96:	2103      	movs	r1, #3
 8007c98:	ab03      	add	r3, sp, #12
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	ab02      	add	r3, sp, #8
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	ec45 4b10 	vmov	d0, r4, r5
 8007ca4:	4653      	mov	r3, sl
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	f000 fe92 	bl	80089d0 <_dtoa_r>
 8007cac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	d102      	bne.n	8007cba <__cvt+0x66>
 8007cb4:	f019 0f01 	tst.w	r9, #1
 8007cb8:	d022      	beq.n	8007d00 <__cvt+0xac>
 8007cba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cbe:	eb07 0906 	add.w	r9, r7, r6
 8007cc2:	d110      	bne.n	8007ce6 <__cvt+0x92>
 8007cc4:	783b      	ldrb	r3, [r7, #0]
 8007cc6:	2b30      	cmp	r3, #48	; 0x30
 8007cc8:	d10a      	bne.n	8007ce0 <__cvt+0x8c>
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd6:	b918      	cbnz	r0, 8007ce0 <__cvt+0x8c>
 8007cd8:	f1c6 0601 	rsb	r6, r6, #1
 8007cdc:	f8ca 6000 	str.w	r6, [sl]
 8007ce0:	f8da 3000 	ldr.w	r3, [sl]
 8007ce4:	4499      	add	r9, r3
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf2:	b108      	cbz	r0, 8007cf8 <__cvt+0xa4>
 8007cf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cf8:	2230      	movs	r2, #48	; 0x30
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	454b      	cmp	r3, r9
 8007cfe:	d307      	bcc.n	8007d10 <__cvt+0xbc>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d04:	1bdb      	subs	r3, r3, r7
 8007d06:	4638      	mov	r0, r7
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	b004      	add	sp, #16
 8007d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d10:	1c59      	adds	r1, r3, #1
 8007d12:	9103      	str	r1, [sp, #12]
 8007d14:	701a      	strb	r2, [r3, #0]
 8007d16:	e7f0      	b.n	8007cfa <__cvt+0xa6>

08007d18 <__exponent>:
 8007d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	bfb8      	it	lt
 8007d20:	4249      	neglt	r1, r1
 8007d22:	f803 2b02 	strb.w	r2, [r3], #2
 8007d26:	bfb4      	ite	lt
 8007d28:	222d      	movlt	r2, #45	; 0x2d
 8007d2a:	222b      	movge	r2, #43	; 0x2b
 8007d2c:	2909      	cmp	r1, #9
 8007d2e:	7042      	strb	r2, [r0, #1]
 8007d30:	dd2a      	ble.n	8007d88 <__exponent+0x70>
 8007d32:	f10d 0207 	add.w	r2, sp, #7
 8007d36:	4617      	mov	r7, r2
 8007d38:	260a      	movs	r6, #10
 8007d3a:	4694      	mov	ip, r2
 8007d3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d40:	fb06 1415 	mls	r4, r6, r5, r1
 8007d44:	3430      	adds	r4, #48	; 0x30
 8007d46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	2c63      	cmp	r4, #99	; 0x63
 8007d4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d52:	4629      	mov	r1, r5
 8007d54:	dcf1      	bgt.n	8007d3a <__exponent+0x22>
 8007d56:	3130      	adds	r1, #48	; 0x30
 8007d58:	f1ac 0402 	sub.w	r4, ip, #2
 8007d5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d60:	1c41      	adds	r1, r0, #1
 8007d62:	4622      	mov	r2, r4
 8007d64:	42ba      	cmp	r2, r7
 8007d66:	d30a      	bcc.n	8007d7e <__exponent+0x66>
 8007d68:	f10d 0209 	add.w	r2, sp, #9
 8007d6c:	eba2 020c 	sub.w	r2, r2, ip
 8007d70:	42bc      	cmp	r4, r7
 8007d72:	bf88      	it	hi
 8007d74:	2200      	movhi	r2, #0
 8007d76:	4413      	add	r3, r2
 8007d78:	1a18      	subs	r0, r3, r0
 8007d7a:	b003      	add	sp, #12
 8007d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d82:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d86:	e7ed      	b.n	8007d64 <__exponent+0x4c>
 8007d88:	2330      	movs	r3, #48	; 0x30
 8007d8a:	3130      	adds	r1, #48	; 0x30
 8007d8c:	7083      	strb	r3, [r0, #2]
 8007d8e:	70c1      	strb	r1, [r0, #3]
 8007d90:	1d03      	adds	r3, r0, #4
 8007d92:	e7f1      	b.n	8007d78 <__exponent+0x60>

08007d94 <_printf_float>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	ed2d 8b02 	vpush	{d8}
 8007d9c:	b08d      	sub	sp, #52	; 0x34
 8007d9e:	460c      	mov	r4, r1
 8007da0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007da4:	4616      	mov	r6, r2
 8007da6:	461f      	mov	r7, r3
 8007da8:	4605      	mov	r5, r0
 8007daa:	f000 fd0b 	bl	80087c4 <_localeconv_r>
 8007dae:	f8d0 a000 	ldr.w	sl, [r0]
 8007db2:	4650      	mov	r0, sl
 8007db4:	f7f8 fa5c 	bl	8000270 <strlen>
 8007db8:	2300      	movs	r3, #0
 8007dba:	930a      	str	r3, [sp, #40]	; 0x28
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	9305      	str	r3, [sp, #20]
 8007dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007dc8:	3307      	adds	r3, #7
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	f103 0208 	add.w	r2, r3, #8
 8007dd2:	f8c8 2000 	str.w	r2, [r8]
 8007dd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007de4:	ee08 0a10 	vmov	s16, r0
 8007de8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df0:	4b9e      	ldr	r3, [pc, #632]	; (800806c <_printf_float+0x2d8>)
 8007df2:	f04f 32ff 	mov.w	r2, #4294967295
 8007df6:	f7f8 fe99 	bl	8000b2c <__aeabi_dcmpun>
 8007dfa:	bb88      	cbnz	r0, 8007e60 <_printf_float+0xcc>
 8007dfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e00:	4b9a      	ldr	r3, [pc, #616]	; (800806c <_printf_float+0x2d8>)
 8007e02:	f04f 32ff 	mov.w	r2, #4294967295
 8007e06:	f7f8 fe73 	bl	8000af0 <__aeabi_dcmple>
 8007e0a:	bb48      	cbnz	r0, 8007e60 <_printf_float+0xcc>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fe62 	bl	8000adc <__aeabi_dcmplt>
 8007e18:	b110      	cbz	r0, 8007e20 <_printf_float+0x8c>
 8007e1a:	232d      	movs	r3, #45	; 0x2d
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e20:	4a93      	ldr	r2, [pc, #588]	; (8008070 <_printf_float+0x2dc>)
 8007e22:	4b94      	ldr	r3, [pc, #592]	; (8008074 <_printf_float+0x2e0>)
 8007e24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e28:	bf94      	ite	ls
 8007e2a:	4690      	movls	r8, r2
 8007e2c:	4698      	movhi	r8, r3
 8007e2e:	2303      	movs	r3, #3
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	f023 0304 	bic.w	r3, r3, #4
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	9700      	str	r7, [sp, #0]
 8007e40:	4633      	mov	r3, r6
 8007e42:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f9da 	bl	8008200 <_printf_common>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f040 8090 	bne.w	8007f72 <_printf_float+0x1de>
 8007e52:	f04f 30ff 	mov.w	r0, #4294967295
 8007e56:	b00d      	add	sp, #52	; 0x34
 8007e58:	ecbd 8b02 	vpop	{d8}
 8007e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e60:	4642      	mov	r2, r8
 8007e62:	464b      	mov	r3, r9
 8007e64:	4640      	mov	r0, r8
 8007e66:	4649      	mov	r1, r9
 8007e68:	f7f8 fe60 	bl	8000b2c <__aeabi_dcmpun>
 8007e6c:	b140      	cbz	r0, 8007e80 <_printf_float+0xec>
 8007e6e:	464b      	mov	r3, r9
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bfbc      	itt	lt
 8007e74:	232d      	movlt	r3, #45	; 0x2d
 8007e76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e7a:	4a7f      	ldr	r2, [pc, #508]	; (8008078 <_printf_float+0x2e4>)
 8007e7c:	4b7f      	ldr	r3, [pc, #508]	; (800807c <_printf_float+0x2e8>)
 8007e7e:	e7d1      	b.n	8007e24 <_printf_float+0x90>
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e86:	9206      	str	r2, [sp, #24]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	d13f      	bne.n	8007f0c <_printf_float+0x178>
 8007e8c:	2306      	movs	r3, #6
 8007e8e:	6063      	str	r3, [r4, #4]
 8007e90:	9b05      	ldr	r3, [sp, #20]
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9303      	str	r3, [sp, #12]
 8007e9c:	ab0a      	add	r3, sp, #40	; 0x28
 8007e9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ea2:	ab09      	add	r3, sp, #36	; 0x24
 8007ea4:	ec49 8b10 	vmov	d0, r8, r9
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f7ff fecf 	bl	8007c54 <__cvt>
 8007eb6:	9b06      	ldr	r3, [sp, #24]
 8007eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eba:	2b47      	cmp	r3, #71	; 0x47
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	d108      	bne.n	8007ed2 <_printf_float+0x13e>
 8007ec0:	1cc8      	adds	r0, r1, #3
 8007ec2:	db02      	blt.n	8007eca <_printf_float+0x136>
 8007ec4:	6863      	ldr	r3, [r4, #4]
 8007ec6:	4299      	cmp	r1, r3
 8007ec8:	dd41      	ble.n	8007f4e <_printf_float+0x1ba>
 8007eca:	f1ab 0302 	sub.w	r3, fp, #2
 8007ece:	fa5f fb83 	uxtb.w	fp, r3
 8007ed2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ed6:	d820      	bhi.n	8007f1a <_printf_float+0x186>
 8007ed8:	3901      	subs	r1, #1
 8007eda:	465a      	mov	r2, fp
 8007edc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ee0:	9109      	str	r1, [sp, #36]	; 0x24
 8007ee2:	f7ff ff19 	bl	8007d18 <__exponent>
 8007ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee8:	1813      	adds	r3, r2, r0
 8007eea:	2a01      	cmp	r2, #1
 8007eec:	4681      	mov	r9, r0
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	dc02      	bgt.n	8007ef8 <_printf_float+0x164>
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	07d2      	lsls	r2, r2, #31
 8007ef6:	d501      	bpl.n	8007efc <_printf_float+0x168>
 8007ef8:	3301      	adds	r3, #1
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d09c      	beq.n	8007e3e <_printf_float+0xaa>
 8007f04:	232d      	movs	r3, #45	; 0x2d
 8007f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f0a:	e798      	b.n	8007e3e <_printf_float+0xaa>
 8007f0c:	9a06      	ldr	r2, [sp, #24]
 8007f0e:	2a47      	cmp	r2, #71	; 0x47
 8007f10:	d1be      	bne.n	8007e90 <_printf_float+0xfc>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1bc      	bne.n	8007e90 <_printf_float+0xfc>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7b9      	b.n	8007e8e <_printf_float+0xfa>
 8007f1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f1e:	d118      	bne.n	8007f52 <_printf_float+0x1be>
 8007f20:	2900      	cmp	r1, #0
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	dd0b      	ble.n	8007f3e <_printf_float+0x1aa>
 8007f26:	6121      	str	r1, [r4, #16]
 8007f28:	b913      	cbnz	r3, 8007f30 <_printf_float+0x19c>
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	07d0      	lsls	r0, r2, #31
 8007f2e:	d502      	bpl.n	8007f36 <_printf_float+0x1a2>
 8007f30:	3301      	adds	r3, #1
 8007f32:	440b      	add	r3, r1
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f38:	f04f 0900 	mov.w	r9, #0
 8007f3c:	e7de      	b.n	8007efc <_printf_float+0x168>
 8007f3e:	b913      	cbnz	r3, 8007f46 <_printf_float+0x1b2>
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	07d2      	lsls	r2, r2, #31
 8007f44:	d501      	bpl.n	8007f4a <_printf_float+0x1b6>
 8007f46:	3302      	adds	r3, #2
 8007f48:	e7f4      	b.n	8007f34 <_printf_float+0x1a0>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e7f2      	b.n	8007f34 <_printf_float+0x1a0>
 8007f4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f54:	4299      	cmp	r1, r3
 8007f56:	db05      	blt.n	8007f64 <_printf_float+0x1d0>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	6121      	str	r1, [r4, #16]
 8007f5c:	07d8      	lsls	r0, r3, #31
 8007f5e:	d5ea      	bpl.n	8007f36 <_printf_float+0x1a2>
 8007f60:	1c4b      	adds	r3, r1, #1
 8007f62:	e7e7      	b.n	8007f34 <_printf_float+0x1a0>
 8007f64:	2900      	cmp	r1, #0
 8007f66:	bfd4      	ite	le
 8007f68:	f1c1 0202 	rsble	r2, r1, #2
 8007f6c:	2201      	movgt	r2, #1
 8007f6e:	4413      	add	r3, r2
 8007f70:	e7e0      	b.n	8007f34 <_printf_float+0x1a0>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	055a      	lsls	r2, r3, #21
 8007f76:	d407      	bmi.n	8007f88 <_printf_float+0x1f4>
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	4642      	mov	r2, r8
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	d12c      	bne.n	8007fe0 <_printf_float+0x24c>
 8007f86:	e764      	b.n	8007e52 <_printf_float+0xbe>
 8007f88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f8c:	f240 80e0 	bls.w	8008150 <_printf_float+0x3bc>
 8007f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f94:	2200      	movs	r2, #0
 8007f96:	2300      	movs	r3, #0
 8007f98:	f7f8 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d034      	beq.n	800800a <_printf_float+0x276>
 8007fa0:	4a37      	ldr	r2, [pc, #220]	; (8008080 <_printf_float+0x2ec>)
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af51 	beq.w	8007e52 <_printf_float+0xbe>
 8007fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	db02      	blt.n	8007fbe <_printf_float+0x22a>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07d8      	lsls	r0, r3, #31
 8007fbc:	d510      	bpl.n	8007fe0 <_printf_float+0x24c>
 8007fbe:	ee18 3a10 	vmov	r3, s16
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f af41 	beq.w	8007e52 <_printf_float+0xbe>
 8007fd0:	f04f 0800 	mov.w	r8, #0
 8007fd4:	f104 091a 	add.w	r9, r4, #26
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4543      	cmp	r3, r8
 8007fde:	dc09      	bgt.n	8007ff4 <_printf_float+0x260>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	079b      	lsls	r3, r3, #30
 8007fe4:	f100 8107 	bmi.w	80081f6 <_printf_float+0x462>
 8007fe8:	68e0      	ldr	r0, [r4, #12]
 8007fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fec:	4298      	cmp	r0, r3
 8007fee:	bfb8      	it	lt
 8007ff0:	4618      	movlt	r0, r3
 8007ff2:	e730      	b.n	8007e56 <_printf_float+0xc2>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	464a      	mov	r2, r9
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f af27 	beq.w	8007e52 <_printf_float+0xbe>
 8008004:	f108 0801 	add.w	r8, r8, #1
 8008008:	e7e6      	b.n	8007fd8 <_printf_float+0x244>
 800800a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	dc39      	bgt.n	8008084 <_printf_float+0x2f0>
 8008010:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <_printf_float+0x2ec>)
 8008012:	2301      	movs	r3, #1
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f af19 	beq.w	8007e52 <_printf_float+0xbe>
 8008020:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008024:	4313      	orrs	r3, r2
 8008026:	d102      	bne.n	800802e <_printf_float+0x29a>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	d5d8      	bpl.n	8007fe0 <_printf_float+0x24c>
 800802e:	ee18 3a10 	vmov	r3, s16
 8008032:	4652      	mov	r2, sl
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	f43f af09 	beq.w	8007e52 <_printf_float+0xbe>
 8008040:	f04f 0900 	mov.w	r9, #0
 8008044:	f104 0a1a 	add.w	sl, r4, #26
 8008048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804a:	425b      	negs	r3, r3
 800804c:	454b      	cmp	r3, r9
 800804e:	dc01      	bgt.n	8008054 <_printf_float+0x2c0>
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	e792      	b.n	8007f7a <_printf_float+0x1e6>
 8008054:	2301      	movs	r3, #1
 8008056:	4652      	mov	r2, sl
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f aef7 	beq.w	8007e52 <_printf_float+0xbe>
 8008064:	f109 0901 	add.w	r9, r9, #1
 8008068:	e7ee      	b.n	8008048 <_printf_float+0x2b4>
 800806a:	bf00      	nop
 800806c:	7fefffff 	.word	0x7fefffff
 8008070:	0800aba0 	.word	0x0800aba0
 8008074:	0800aba4 	.word	0x0800aba4
 8008078:	0800aba8 	.word	0x0800aba8
 800807c:	0800abac 	.word	0x0800abac
 8008080:	0800abb0 	.word	0x0800abb0
 8008084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008086:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008088:	429a      	cmp	r2, r3
 800808a:	bfa8      	it	ge
 800808c:	461a      	movge	r2, r3
 800808e:	2a00      	cmp	r2, #0
 8008090:	4691      	mov	r9, r2
 8008092:	dc37      	bgt.n	8008104 <_printf_float+0x370>
 8008094:	f04f 0b00 	mov.w	fp, #0
 8008098:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800809c:	f104 021a 	add.w	r2, r4, #26
 80080a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080a2:	9305      	str	r3, [sp, #20]
 80080a4:	eba3 0309 	sub.w	r3, r3, r9
 80080a8:	455b      	cmp	r3, fp
 80080aa:	dc33      	bgt.n	8008114 <_printf_float+0x380>
 80080ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b0:	429a      	cmp	r2, r3
 80080b2:	db3b      	blt.n	800812c <_printf_float+0x398>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	07da      	lsls	r2, r3, #31
 80080b8:	d438      	bmi.n	800812c <_printf_float+0x398>
 80080ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80080be:	eba2 0903 	sub.w	r9, r2, r3
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	4591      	cmp	r9, r2
 80080c8:	bfa8      	it	ge
 80080ca:	4691      	movge	r9, r2
 80080cc:	f1b9 0f00 	cmp.w	r9, #0
 80080d0:	dc35      	bgt.n	800813e <_printf_float+0x3aa>
 80080d2:	f04f 0800 	mov.w	r8, #0
 80080d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080da:	f104 0a1a 	add.w	sl, r4, #26
 80080de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	eba3 0309 	sub.w	r3, r3, r9
 80080e8:	4543      	cmp	r3, r8
 80080ea:	f77f af79 	ble.w	8007fe0 <_printf_float+0x24c>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4652      	mov	r2, sl
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	f43f aeaa 	beq.w	8007e52 <_printf_float+0xbe>
 80080fe:	f108 0801 	add.w	r8, r8, #1
 8008102:	e7ec      	b.n	80080de <_printf_float+0x34a>
 8008104:	4613      	mov	r3, r2
 8008106:	4631      	mov	r1, r6
 8008108:	4642      	mov	r2, r8
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	d1c0      	bne.n	8008094 <_printf_float+0x300>
 8008112:	e69e      	b.n	8007e52 <_printf_float+0xbe>
 8008114:	2301      	movs	r3, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	9205      	str	r2, [sp, #20]
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	f43f ae97 	beq.w	8007e52 <_printf_float+0xbe>
 8008124:	9a05      	ldr	r2, [sp, #20]
 8008126:	f10b 0b01 	add.w	fp, fp, #1
 800812a:	e7b9      	b.n	80080a0 <_printf_float+0x30c>
 800812c:	ee18 3a10 	vmov	r3, s16
 8008130:	4652      	mov	r2, sl
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	d1be      	bne.n	80080ba <_printf_float+0x326>
 800813c:	e689      	b.n	8007e52 <_printf_float+0xbe>
 800813e:	9a05      	ldr	r2, [sp, #20]
 8008140:	464b      	mov	r3, r9
 8008142:	4442      	add	r2, r8
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	d1c1      	bne.n	80080d2 <_printf_float+0x33e>
 800814e:	e680      	b.n	8007e52 <_printf_float+0xbe>
 8008150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008152:	2a01      	cmp	r2, #1
 8008154:	dc01      	bgt.n	800815a <_printf_float+0x3c6>
 8008156:	07db      	lsls	r3, r3, #31
 8008158:	d53a      	bpl.n	80081d0 <_printf_float+0x43c>
 800815a:	2301      	movs	r3, #1
 800815c:	4642      	mov	r2, r8
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	f43f ae74 	beq.w	8007e52 <_printf_float+0xbe>
 800816a:	ee18 3a10 	vmov	r3, s16
 800816e:	4652      	mov	r2, sl
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f ae6b 	beq.w	8007e52 <_printf_float+0xbe>
 800817c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008180:	2200      	movs	r2, #0
 8008182:	2300      	movs	r3, #0
 8008184:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008188:	f7f8 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800818c:	b9d8      	cbnz	r0, 80081c6 <_printf_float+0x432>
 800818e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008192:	f108 0201 	add.w	r2, r8, #1
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	d10e      	bne.n	80081be <_printf_float+0x42a>
 80081a0:	e657      	b.n	8007e52 <_printf_float+0xbe>
 80081a2:	2301      	movs	r3, #1
 80081a4:	4652      	mov	r2, sl
 80081a6:	4631      	mov	r1, r6
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b8      	blx	r7
 80081ac:	3001      	adds	r0, #1
 80081ae:	f43f ae50 	beq.w	8007e52 <_printf_float+0xbe>
 80081b2:	f108 0801 	add.w	r8, r8, #1
 80081b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4543      	cmp	r3, r8
 80081bc:	dcf1      	bgt.n	80081a2 <_printf_float+0x40e>
 80081be:	464b      	mov	r3, r9
 80081c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081c4:	e6da      	b.n	8007f7c <_printf_float+0x1e8>
 80081c6:	f04f 0800 	mov.w	r8, #0
 80081ca:	f104 0a1a 	add.w	sl, r4, #26
 80081ce:	e7f2      	b.n	80081b6 <_printf_float+0x422>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4642      	mov	r2, r8
 80081d4:	e7df      	b.n	8008196 <_printf_float+0x402>
 80081d6:	2301      	movs	r3, #1
 80081d8:	464a      	mov	r2, r9
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f ae36 	beq.w	8007e52 <_printf_float+0xbe>
 80081e6:	f108 0801 	add.w	r8, r8, #1
 80081ea:	68e3      	ldr	r3, [r4, #12]
 80081ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081ee:	1a5b      	subs	r3, r3, r1
 80081f0:	4543      	cmp	r3, r8
 80081f2:	dcf0      	bgt.n	80081d6 <_printf_float+0x442>
 80081f4:	e6f8      	b.n	8007fe8 <_printf_float+0x254>
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	f104 0919 	add.w	r9, r4, #25
 80081fe:	e7f4      	b.n	80081ea <_printf_float+0x456>

08008200 <_printf_common>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	4616      	mov	r6, r2
 8008206:	4699      	mov	r9, r3
 8008208:	688a      	ldr	r2, [r1, #8]
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008210:	4293      	cmp	r3, r2
 8008212:	bfb8      	it	lt
 8008214:	4613      	movlt	r3, r2
 8008216:	6033      	str	r3, [r6, #0]
 8008218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800821c:	4607      	mov	r7, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b10a      	cbz	r2, 8008226 <_printf_common+0x26>
 8008222:	3301      	adds	r3, #1
 8008224:	6033      	str	r3, [r6, #0]
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	0699      	lsls	r1, r3, #26
 800822a:	bf42      	ittt	mi
 800822c:	6833      	ldrmi	r3, [r6, #0]
 800822e:	3302      	addmi	r3, #2
 8008230:	6033      	strmi	r3, [r6, #0]
 8008232:	6825      	ldr	r5, [r4, #0]
 8008234:	f015 0506 	ands.w	r5, r5, #6
 8008238:	d106      	bne.n	8008248 <_printf_common+0x48>
 800823a:	f104 0a19 	add.w	sl, r4, #25
 800823e:	68e3      	ldr	r3, [r4, #12]
 8008240:	6832      	ldr	r2, [r6, #0]
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	42ab      	cmp	r3, r5
 8008246:	dc26      	bgt.n	8008296 <_printf_common+0x96>
 8008248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800824c:	1e13      	subs	r3, r2, #0
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	bf18      	it	ne
 8008252:	2301      	movne	r3, #1
 8008254:	0692      	lsls	r2, r2, #26
 8008256:	d42b      	bmi.n	80082b0 <_printf_common+0xb0>
 8008258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800825c:	4649      	mov	r1, r9
 800825e:	4638      	mov	r0, r7
 8008260:	47c0      	blx	r8
 8008262:	3001      	adds	r0, #1
 8008264:	d01e      	beq.n	80082a4 <_printf_common+0xa4>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	f003 0306 	and.w	r3, r3, #6
 800826e:	2b04      	cmp	r3, #4
 8008270:	bf02      	ittt	eq
 8008272:	68e5      	ldreq	r5, [r4, #12]
 8008274:	6833      	ldreq	r3, [r6, #0]
 8008276:	1aed      	subeq	r5, r5, r3
 8008278:	68a3      	ldr	r3, [r4, #8]
 800827a:	bf0c      	ite	eq
 800827c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008280:	2500      	movne	r5, #0
 8008282:	4293      	cmp	r3, r2
 8008284:	bfc4      	itt	gt
 8008286:	1a9b      	subgt	r3, r3, r2
 8008288:	18ed      	addgt	r5, r5, r3
 800828a:	2600      	movs	r6, #0
 800828c:	341a      	adds	r4, #26
 800828e:	42b5      	cmp	r5, r6
 8008290:	d11a      	bne.n	80082c8 <_printf_common+0xc8>
 8008292:	2000      	movs	r0, #0
 8008294:	e008      	b.n	80082a8 <_printf_common+0xa8>
 8008296:	2301      	movs	r3, #1
 8008298:	4652      	mov	r2, sl
 800829a:	4649      	mov	r1, r9
 800829c:	4638      	mov	r0, r7
 800829e:	47c0      	blx	r8
 80082a0:	3001      	adds	r0, #1
 80082a2:	d103      	bne.n	80082ac <_printf_common+0xac>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ac:	3501      	adds	r5, #1
 80082ae:	e7c6      	b.n	800823e <_printf_common+0x3e>
 80082b0:	18e1      	adds	r1, r4, r3
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	2030      	movs	r0, #48	; 0x30
 80082b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ba:	4422      	add	r2, r4
 80082bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c4:	3302      	adds	r3, #2
 80082c6:	e7c7      	b.n	8008258 <_printf_common+0x58>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4622      	mov	r2, r4
 80082cc:	4649      	mov	r1, r9
 80082ce:	4638      	mov	r0, r7
 80082d0:	47c0      	blx	r8
 80082d2:	3001      	adds	r0, #1
 80082d4:	d0e6      	beq.n	80082a4 <_printf_common+0xa4>
 80082d6:	3601      	adds	r6, #1
 80082d8:	e7d9      	b.n	800828e <_printf_common+0x8e>
	...

080082dc <_printf_i>:
 80082dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	7e0f      	ldrb	r7, [r1, #24]
 80082e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e4:	2f78      	cmp	r7, #120	; 0x78
 80082e6:	4691      	mov	r9, r2
 80082e8:	4680      	mov	r8, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	469a      	mov	sl, r3
 80082ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082f2:	d807      	bhi.n	8008304 <_printf_i+0x28>
 80082f4:	2f62      	cmp	r7, #98	; 0x62
 80082f6:	d80a      	bhi.n	800830e <_printf_i+0x32>
 80082f8:	2f00      	cmp	r7, #0
 80082fa:	f000 80d4 	beq.w	80084a6 <_printf_i+0x1ca>
 80082fe:	2f58      	cmp	r7, #88	; 0x58
 8008300:	f000 80c0 	beq.w	8008484 <_printf_i+0x1a8>
 8008304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800830c:	e03a      	b.n	8008384 <_printf_i+0xa8>
 800830e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008312:	2b15      	cmp	r3, #21
 8008314:	d8f6      	bhi.n	8008304 <_printf_i+0x28>
 8008316:	a101      	add	r1, pc, #4	; (adr r1, 800831c <_printf_i+0x40>)
 8008318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800831c:	08008375 	.word	0x08008375
 8008320:	08008389 	.word	0x08008389
 8008324:	08008305 	.word	0x08008305
 8008328:	08008305 	.word	0x08008305
 800832c:	08008305 	.word	0x08008305
 8008330:	08008305 	.word	0x08008305
 8008334:	08008389 	.word	0x08008389
 8008338:	08008305 	.word	0x08008305
 800833c:	08008305 	.word	0x08008305
 8008340:	08008305 	.word	0x08008305
 8008344:	08008305 	.word	0x08008305
 8008348:	0800848d 	.word	0x0800848d
 800834c:	080083b5 	.word	0x080083b5
 8008350:	08008447 	.word	0x08008447
 8008354:	08008305 	.word	0x08008305
 8008358:	08008305 	.word	0x08008305
 800835c:	080084af 	.word	0x080084af
 8008360:	08008305 	.word	0x08008305
 8008364:	080083b5 	.word	0x080083b5
 8008368:	08008305 	.word	0x08008305
 800836c:	08008305 	.word	0x08008305
 8008370:	0800844f 	.word	0x0800844f
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	1d1a      	adds	r2, r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	602a      	str	r2, [r5, #0]
 800837c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008384:	2301      	movs	r3, #1
 8008386:	e09f      	b.n	80084c8 <_printf_i+0x1ec>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	0607      	lsls	r7, r0, #24
 800838e:	f103 0104 	add.w	r1, r3, #4
 8008392:	6029      	str	r1, [r5, #0]
 8008394:	d501      	bpl.n	800839a <_printf_i+0xbe>
 8008396:	681e      	ldr	r6, [r3, #0]
 8008398:	e003      	b.n	80083a2 <_printf_i+0xc6>
 800839a:	0646      	lsls	r6, r0, #25
 800839c:	d5fb      	bpl.n	8008396 <_printf_i+0xba>
 800839e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	da03      	bge.n	80083ae <_printf_i+0xd2>
 80083a6:	232d      	movs	r3, #45	; 0x2d
 80083a8:	4276      	negs	r6, r6
 80083aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ae:	485a      	ldr	r0, [pc, #360]	; (8008518 <_printf_i+0x23c>)
 80083b0:	230a      	movs	r3, #10
 80083b2:	e012      	b.n	80083da <_printf_i+0xfe>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	6820      	ldr	r0, [r4, #0]
 80083b8:	1d19      	adds	r1, r3, #4
 80083ba:	6029      	str	r1, [r5, #0]
 80083bc:	0605      	lsls	r5, r0, #24
 80083be:	d501      	bpl.n	80083c4 <_printf_i+0xe8>
 80083c0:	681e      	ldr	r6, [r3, #0]
 80083c2:	e002      	b.n	80083ca <_printf_i+0xee>
 80083c4:	0641      	lsls	r1, r0, #25
 80083c6:	d5fb      	bpl.n	80083c0 <_printf_i+0xe4>
 80083c8:	881e      	ldrh	r6, [r3, #0]
 80083ca:	4853      	ldr	r0, [pc, #332]	; (8008518 <_printf_i+0x23c>)
 80083cc:	2f6f      	cmp	r7, #111	; 0x6f
 80083ce:	bf0c      	ite	eq
 80083d0:	2308      	moveq	r3, #8
 80083d2:	230a      	movne	r3, #10
 80083d4:	2100      	movs	r1, #0
 80083d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083da:	6865      	ldr	r5, [r4, #4]
 80083dc:	60a5      	str	r5, [r4, #8]
 80083de:	2d00      	cmp	r5, #0
 80083e0:	bfa2      	ittt	ge
 80083e2:	6821      	ldrge	r1, [r4, #0]
 80083e4:	f021 0104 	bicge.w	r1, r1, #4
 80083e8:	6021      	strge	r1, [r4, #0]
 80083ea:	b90e      	cbnz	r6, 80083f0 <_printf_i+0x114>
 80083ec:	2d00      	cmp	r5, #0
 80083ee:	d04b      	beq.n	8008488 <_printf_i+0x1ac>
 80083f0:	4615      	mov	r5, r2
 80083f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80083f6:	fb03 6711 	mls	r7, r3, r1, r6
 80083fa:	5dc7      	ldrb	r7, [r0, r7]
 80083fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008400:	4637      	mov	r7, r6
 8008402:	42bb      	cmp	r3, r7
 8008404:	460e      	mov	r6, r1
 8008406:	d9f4      	bls.n	80083f2 <_printf_i+0x116>
 8008408:	2b08      	cmp	r3, #8
 800840a:	d10b      	bne.n	8008424 <_printf_i+0x148>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07de      	lsls	r6, r3, #31
 8008410:	d508      	bpl.n	8008424 <_printf_i+0x148>
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	4299      	cmp	r1, r3
 8008418:	bfde      	ittt	le
 800841a:	2330      	movle	r3, #48	; 0x30
 800841c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008424:	1b52      	subs	r2, r2, r5
 8008426:	6122      	str	r2, [r4, #16]
 8008428:	f8cd a000 	str.w	sl, [sp]
 800842c:	464b      	mov	r3, r9
 800842e:	aa03      	add	r2, sp, #12
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff fee4 	bl	8008200 <_printf_common>
 8008438:	3001      	adds	r0, #1
 800843a:	d14a      	bne.n	80084d2 <_printf_i+0x1f6>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b004      	add	sp, #16
 8008442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	f043 0320 	orr.w	r3, r3, #32
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	4833      	ldr	r0, [pc, #204]	; (800851c <_printf_i+0x240>)
 8008450:	2778      	movs	r7, #120	; 0x78
 8008452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	6829      	ldr	r1, [r5, #0]
 800845a:	061f      	lsls	r7, r3, #24
 800845c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008460:	d402      	bmi.n	8008468 <_printf_i+0x18c>
 8008462:	065f      	lsls	r7, r3, #25
 8008464:	bf48      	it	mi
 8008466:	b2b6      	uxthmi	r6, r6
 8008468:	07df      	lsls	r7, r3, #31
 800846a:	bf48      	it	mi
 800846c:	f043 0320 	orrmi.w	r3, r3, #32
 8008470:	6029      	str	r1, [r5, #0]
 8008472:	bf48      	it	mi
 8008474:	6023      	strmi	r3, [r4, #0]
 8008476:	b91e      	cbnz	r6, 8008480 <_printf_i+0x1a4>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	f023 0320 	bic.w	r3, r3, #32
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	2310      	movs	r3, #16
 8008482:	e7a7      	b.n	80083d4 <_printf_i+0xf8>
 8008484:	4824      	ldr	r0, [pc, #144]	; (8008518 <_printf_i+0x23c>)
 8008486:	e7e4      	b.n	8008452 <_printf_i+0x176>
 8008488:	4615      	mov	r5, r2
 800848a:	e7bd      	b.n	8008408 <_printf_i+0x12c>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	6826      	ldr	r6, [r4, #0]
 8008490:	6961      	ldr	r1, [r4, #20]
 8008492:	1d18      	adds	r0, r3, #4
 8008494:	6028      	str	r0, [r5, #0]
 8008496:	0635      	lsls	r5, r6, #24
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	d501      	bpl.n	80084a0 <_printf_i+0x1c4>
 800849c:	6019      	str	r1, [r3, #0]
 800849e:	e002      	b.n	80084a6 <_printf_i+0x1ca>
 80084a0:	0670      	lsls	r0, r6, #25
 80084a2:	d5fb      	bpl.n	800849c <_printf_i+0x1c0>
 80084a4:	8019      	strh	r1, [r3, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	4615      	mov	r5, r2
 80084ac:	e7bc      	b.n	8008428 <_printf_i+0x14c>
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	1d1a      	adds	r2, r3, #4
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	681d      	ldr	r5, [r3, #0]
 80084b6:	6862      	ldr	r2, [r4, #4]
 80084b8:	2100      	movs	r1, #0
 80084ba:	4628      	mov	r0, r5
 80084bc:	f7f7 fe88 	bl	80001d0 <memchr>
 80084c0:	b108      	cbz	r0, 80084c6 <_printf_i+0x1ea>
 80084c2:	1b40      	subs	r0, r0, r5
 80084c4:	6060      	str	r0, [r4, #4]
 80084c6:	6863      	ldr	r3, [r4, #4]
 80084c8:	6123      	str	r3, [r4, #16]
 80084ca:	2300      	movs	r3, #0
 80084cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d0:	e7aa      	b.n	8008428 <_printf_i+0x14c>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	462a      	mov	r2, r5
 80084d6:	4649      	mov	r1, r9
 80084d8:	4640      	mov	r0, r8
 80084da:	47d0      	blx	sl
 80084dc:	3001      	adds	r0, #1
 80084de:	d0ad      	beq.n	800843c <_printf_i+0x160>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	079b      	lsls	r3, r3, #30
 80084e4:	d413      	bmi.n	800850e <_printf_i+0x232>
 80084e6:	68e0      	ldr	r0, [r4, #12]
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	4298      	cmp	r0, r3
 80084ec:	bfb8      	it	lt
 80084ee:	4618      	movlt	r0, r3
 80084f0:	e7a6      	b.n	8008440 <_printf_i+0x164>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4632      	mov	r2, r6
 80084f6:	4649      	mov	r1, r9
 80084f8:	4640      	mov	r0, r8
 80084fa:	47d0      	blx	sl
 80084fc:	3001      	adds	r0, #1
 80084fe:	d09d      	beq.n	800843c <_printf_i+0x160>
 8008500:	3501      	adds	r5, #1
 8008502:	68e3      	ldr	r3, [r4, #12]
 8008504:	9903      	ldr	r1, [sp, #12]
 8008506:	1a5b      	subs	r3, r3, r1
 8008508:	42ab      	cmp	r3, r5
 800850a:	dcf2      	bgt.n	80084f2 <_printf_i+0x216>
 800850c:	e7eb      	b.n	80084e6 <_printf_i+0x20a>
 800850e:	2500      	movs	r5, #0
 8008510:	f104 0619 	add.w	r6, r4, #25
 8008514:	e7f5      	b.n	8008502 <_printf_i+0x226>
 8008516:	bf00      	nop
 8008518:	0800abb2 	.word	0x0800abb2
 800851c:	0800abc3 	.word	0x0800abc3

08008520 <std>:
 8008520:	2300      	movs	r3, #0
 8008522:	b510      	push	{r4, lr}
 8008524:	4604      	mov	r4, r0
 8008526:	e9c0 3300 	strd	r3, r3, [r0]
 800852a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800852e:	6083      	str	r3, [r0, #8]
 8008530:	8181      	strh	r1, [r0, #12]
 8008532:	6643      	str	r3, [r0, #100]	; 0x64
 8008534:	81c2      	strh	r2, [r0, #14]
 8008536:	6183      	str	r3, [r0, #24]
 8008538:	4619      	mov	r1, r3
 800853a:	2208      	movs	r2, #8
 800853c:	305c      	adds	r0, #92	; 0x5c
 800853e:	f000 f938 	bl	80087b2 <memset>
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <std+0x58>)
 8008544:	6263      	str	r3, [r4, #36]	; 0x24
 8008546:	4b0d      	ldr	r3, [pc, #52]	; (800857c <std+0x5c>)
 8008548:	62a3      	str	r3, [r4, #40]	; 0x28
 800854a:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <std+0x60>)
 800854c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <std+0x64>)
 8008550:	6323      	str	r3, [r4, #48]	; 0x30
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <std+0x68>)
 8008554:	6224      	str	r4, [r4, #32]
 8008556:	429c      	cmp	r4, r3
 8008558:	d006      	beq.n	8008568 <std+0x48>
 800855a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800855e:	4294      	cmp	r4, r2
 8008560:	d002      	beq.n	8008568 <std+0x48>
 8008562:	33d0      	adds	r3, #208	; 0xd0
 8008564:	429c      	cmp	r4, r3
 8008566:	d105      	bne.n	8008574 <std+0x54>
 8008568:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008570:	f000 b99c 	b.w	80088ac <__retarget_lock_init_recursive>
 8008574:	bd10      	pop	{r4, pc}
 8008576:	bf00      	nop
 8008578:	0800872d 	.word	0x0800872d
 800857c:	0800874f 	.word	0x0800874f
 8008580:	08008787 	.word	0x08008787
 8008584:	080087ab 	.word	0x080087ab
 8008588:	20000470 	.word	0x20000470

0800858c <stdio_exit_handler>:
 800858c:	4a02      	ldr	r2, [pc, #8]	; (8008598 <stdio_exit_handler+0xc>)
 800858e:	4903      	ldr	r1, [pc, #12]	; (800859c <stdio_exit_handler+0x10>)
 8008590:	4803      	ldr	r0, [pc, #12]	; (80085a0 <stdio_exit_handler+0x14>)
 8008592:	f000 b87b 	b.w	800868c <_fwalk_sglue>
 8008596:	bf00      	nop
 8008598:	2000001c 	.word	0x2000001c
 800859c:	0800a4f1 	.word	0x0800a4f1
 80085a0:	20000028 	.word	0x20000028

080085a4 <cleanup_stdio>:
 80085a4:	6841      	ldr	r1, [r0, #4]
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <cleanup_stdio+0x34>)
 80085a8:	4299      	cmp	r1, r3
 80085aa:	b510      	push	{r4, lr}
 80085ac:	4604      	mov	r4, r0
 80085ae:	d001      	beq.n	80085b4 <cleanup_stdio+0x10>
 80085b0:	f001 ff9e 	bl	800a4f0 <_fflush_r>
 80085b4:	68a1      	ldr	r1, [r4, #8]
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <cleanup_stdio+0x38>)
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d002      	beq.n	80085c2 <cleanup_stdio+0x1e>
 80085bc:	4620      	mov	r0, r4
 80085be:	f001 ff97 	bl	800a4f0 <_fflush_r>
 80085c2:	68e1      	ldr	r1, [r4, #12]
 80085c4:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <cleanup_stdio+0x3c>)
 80085c6:	4299      	cmp	r1, r3
 80085c8:	d004      	beq.n	80085d4 <cleanup_stdio+0x30>
 80085ca:	4620      	mov	r0, r4
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	f001 bf8e 	b.w	800a4f0 <_fflush_r>
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	bf00      	nop
 80085d8:	20000470 	.word	0x20000470
 80085dc:	200004d8 	.word	0x200004d8
 80085e0:	20000540 	.word	0x20000540

080085e4 <global_stdio_init.part.0>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <global_stdio_init.part.0+0x30>)
 80085e8:	4c0b      	ldr	r4, [pc, #44]	; (8008618 <global_stdio_init.part.0+0x34>)
 80085ea:	4a0c      	ldr	r2, [pc, #48]	; (800861c <global_stdio_init.part.0+0x38>)
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	4620      	mov	r0, r4
 80085f0:	2200      	movs	r2, #0
 80085f2:	2104      	movs	r1, #4
 80085f4:	f7ff ff94 	bl	8008520 <std>
 80085f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085fc:	2201      	movs	r2, #1
 80085fe:	2109      	movs	r1, #9
 8008600:	f7ff ff8e 	bl	8008520 <std>
 8008604:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008608:	2202      	movs	r2, #2
 800860a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860e:	2112      	movs	r1, #18
 8008610:	f7ff bf86 	b.w	8008520 <std>
 8008614:	200005a8 	.word	0x200005a8
 8008618:	20000470 	.word	0x20000470
 800861c:	0800858d 	.word	0x0800858d

08008620 <__sfp_lock_acquire>:
 8008620:	4801      	ldr	r0, [pc, #4]	; (8008628 <__sfp_lock_acquire+0x8>)
 8008622:	f000 b944 	b.w	80088ae <__retarget_lock_acquire_recursive>
 8008626:	bf00      	nop
 8008628:	200005b1 	.word	0x200005b1

0800862c <__sfp_lock_release>:
 800862c:	4801      	ldr	r0, [pc, #4]	; (8008634 <__sfp_lock_release+0x8>)
 800862e:	f000 b93f 	b.w	80088b0 <__retarget_lock_release_recursive>
 8008632:	bf00      	nop
 8008634:	200005b1 	.word	0x200005b1

08008638 <__sinit>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	f7ff fff0 	bl	8008620 <__sfp_lock_acquire>
 8008640:	6a23      	ldr	r3, [r4, #32]
 8008642:	b11b      	cbz	r3, 800864c <__sinit+0x14>
 8008644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008648:	f7ff bff0 	b.w	800862c <__sfp_lock_release>
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <__sinit+0x28>)
 800864e:	6223      	str	r3, [r4, #32]
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <__sinit+0x2c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1f5      	bne.n	8008644 <__sinit+0xc>
 8008658:	f7ff ffc4 	bl	80085e4 <global_stdio_init.part.0>
 800865c:	e7f2      	b.n	8008644 <__sinit+0xc>
 800865e:	bf00      	nop
 8008660:	080085a5 	.word	0x080085a5
 8008664:	200005a8 	.word	0x200005a8

08008668 <fiprintf>:
 8008668:	b40e      	push	{r1, r2, r3}
 800866a:	b503      	push	{r0, r1, lr}
 800866c:	4601      	mov	r1, r0
 800866e:	ab03      	add	r3, sp, #12
 8008670:	4805      	ldr	r0, [pc, #20]	; (8008688 <fiprintf+0x20>)
 8008672:	f853 2b04 	ldr.w	r2, [r3], #4
 8008676:	6800      	ldr	r0, [r0, #0]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f001 fd99 	bl	800a1b0 <_vfiprintf_r>
 800867e:	b002      	add	sp, #8
 8008680:	f85d eb04 	ldr.w	lr, [sp], #4
 8008684:	b003      	add	sp, #12
 8008686:	4770      	bx	lr
 8008688:	20000074 	.word	0x20000074

0800868c <_fwalk_sglue>:
 800868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008690:	4607      	mov	r7, r0
 8008692:	4688      	mov	r8, r1
 8008694:	4614      	mov	r4, r2
 8008696:	2600      	movs	r6, #0
 8008698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800869c:	f1b9 0901 	subs.w	r9, r9, #1
 80086a0:	d505      	bpl.n	80086ae <_fwalk_sglue+0x22>
 80086a2:	6824      	ldr	r4, [r4, #0]
 80086a4:	2c00      	cmp	r4, #0
 80086a6:	d1f7      	bne.n	8008698 <_fwalk_sglue+0xc>
 80086a8:	4630      	mov	r0, r6
 80086aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ae:	89ab      	ldrh	r3, [r5, #12]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d907      	bls.n	80086c4 <_fwalk_sglue+0x38>
 80086b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086b8:	3301      	adds	r3, #1
 80086ba:	d003      	beq.n	80086c4 <_fwalk_sglue+0x38>
 80086bc:	4629      	mov	r1, r5
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	4306      	orrs	r6, r0
 80086c4:	3568      	adds	r5, #104	; 0x68
 80086c6:	e7e9      	b.n	800869c <_fwalk_sglue+0x10>

080086c8 <iprintf>:
 80086c8:	b40f      	push	{r0, r1, r2, r3}
 80086ca:	b507      	push	{r0, r1, r2, lr}
 80086cc:	4906      	ldr	r1, [pc, #24]	; (80086e8 <iprintf+0x20>)
 80086ce:	ab04      	add	r3, sp, #16
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d6:	6881      	ldr	r1, [r0, #8]
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	f001 fd69 	bl	800a1b0 <_vfiprintf_r>
 80086de:	b003      	add	sp, #12
 80086e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e4:	b004      	add	sp, #16
 80086e6:	4770      	bx	lr
 80086e8:	20000074 	.word	0x20000074

080086ec <siprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b500      	push	{lr}
 80086f0:	b09c      	sub	sp, #112	; 0x70
 80086f2:	ab1d      	add	r3, sp, #116	; 0x74
 80086f4:	9002      	str	r0, [sp, #8]
 80086f6:	9006      	str	r0, [sp, #24]
 80086f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086fc:	4809      	ldr	r0, [pc, #36]	; (8008724 <siprintf+0x38>)
 80086fe:	9107      	str	r1, [sp, #28]
 8008700:	9104      	str	r1, [sp, #16]
 8008702:	4909      	ldr	r1, [pc, #36]	; (8008728 <siprintf+0x3c>)
 8008704:	f853 2b04 	ldr.w	r2, [r3], #4
 8008708:	9105      	str	r1, [sp, #20]
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	a902      	add	r1, sp, #8
 8008710:	f001 fc26 	bl	8009f60 <_svfiprintf_r>
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	b01c      	add	sp, #112	; 0x70
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	20000074 	.word	0x20000074
 8008728:	ffff0208 	.word	0xffff0208

0800872c <__sread>:
 800872c:	b510      	push	{r4, lr}
 800872e:	460c      	mov	r4, r1
 8008730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008734:	f000 f86c 	bl	8008810 <_read_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	bfab      	itete	ge
 800873c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873e:	89a3      	ldrhlt	r3, [r4, #12]
 8008740:	181b      	addge	r3, r3, r0
 8008742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008746:	bfac      	ite	ge
 8008748:	6563      	strge	r3, [r4, #84]	; 0x54
 800874a:	81a3      	strhlt	r3, [r4, #12]
 800874c:	bd10      	pop	{r4, pc}

0800874e <__swrite>:
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	461f      	mov	r7, r3
 8008754:	898b      	ldrh	r3, [r1, #12]
 8008756:	05db      	lsls	r3, r3, #23
 8008758:	4605      	mov	r5, r0
 800875a:	460c      	mov	r4, r1
 800875c:	4616      	mov	r6, r2
 800875e:	d505      	bpl.n	800876c <__swrite+0x1e>
 8008760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008764:	2302      	movs	r3, #2
 8008766:	2200      	movs	r2, #0
 8008768:	f000 f840 	bl	80087ec <_lseek_r>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	4632      	mov	r2, r6
 800877a:	463b      	mov	r3, r7
 800877c:	4628      	mov	r0, r5
 800877e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008782:	f000 b857 	b.w	8008834 <_write_r>

08008786 <__sseek>:
 8008786:	b510      	push	{r4, lr}
 8008788:	460c      	mov	r4, r1
 800878a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878e:	f000 f82d 	bl	80087ec <_lseek_r>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	bf15      	itete	ne
 8008798:	6560      	strne	r0, [r4, #84]	; 0x54
 800879a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087a2:	81a3      	strheq	r3, [r4, #12]
 80087a4:	bf18      	it	ne
 80087a6:	81a3      	strhne	r3, [r4, #12]
 80087a8:	bd10      	pop	{r4, pc}

080087aa <__sclose>:
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 b80d 	b.w	80087cc <_close_r>

080087b2 <memset>:
 80087b2:	4402      	add	r2, r0
 80087b4:	4603      	mov	r3, r0
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d100      	bne.n	80087bc <memset+0xa>
 80087ba:	4770      	bx	lr
 80087bc:	f803 1b01 	strb.w	r1, [r3], #1
 80087c0:	e7f9      	b.n	80087b6 <memset+0x4>
	...

080087c4 <_localeconv_r>:
 80087c4:	4800      	ldr	r0, [pc, #0]	; (80087c8 <_localeconv_r+0x4>)
 80087c6:	4770      	bx	lr
 80087c8:	20000168 	.word	0x20000168

080087cc <_close_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d06      	ldr	r5, [pc, #24]	; (80087e8 <_close_r+0x1c>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	f7f9 fb1d 	bl	8001e16 <_close>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_close_r+0x1a>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_close_r+0x1a>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	200005ac 	.word	0x200005ac

080087ec <_lseek_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	; (800880c <_lseek_r+0x20>)
 80087f0:	4604      	mov	r4, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	602a      	str	r2, [r5, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f7f9 fb32 	bl	8001e64 <_lseek>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_lseek_r+0x1e>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_lseek_r+0x1e>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	200005ac 	.word	0x200005ac

08008810 <_read_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d07      	ldr	r5, [pc, #28]	; (8008830 <_read_r+0x20>)
 8008814:	4604      	mov	r4, r0
 8008816:	4608      	mov	r0, r1
 8008818:	4611      	mov	r1, r2
 800881a:	2200      	movs	r2, #0
 800881c:	602a      	str	r2, [r5, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	f7f9 fac0 	bl	8001da4 <_read>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_read_r+0x1e>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_read_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	200005ac 	.word	0x200005ac

08008834 <_write_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_write_r+0x20>)
 8008838:	4604      	mov	r4, r0
 800883a:	4608      	mov	r0, r1
 800883c:	4611      	mov	r1, r2
 800883e:	2200      	movs	r2, #0
 8008840:	602a      	str	r2, [r5, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f7f9 facb 	bl	8001dde <_write>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_write_r+0x1e>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_write_r+0x1e>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	200005ac 	.word	0x200005ac

08008858 <__errno>:
 8008858:	4b01      	ldr	r3, [pc, #4]	; (8008860 <__errno+0x8>)
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20000074 	.word	0x20000074

08008864 <__libc_init_array>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4d0d      	ldr	r5, [pc, #52]	; (800889c <__libc_init_array+0x38>)
 8008868:	4c0d      	ldr	r4, [pc, #52]	; (80088a0 <__libc_init_array+0x3c>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	2600      	movs	r6, #0
 8008870:	42a6      	cmp	r6, r4
 8008872:	d109      	bne.n	8008888 <__libc_init_array+0x24>
 8008874:	4d0b      	ldr	r5, [pc, #44]	; (80088a4 <__libc_init_array+0x40>)
 8008876:	4c0c      	ldr	r4, [pc, #48]	; (80088a8 <__libc_init_array+0x44>)
 8008878:	f002 f864 	bl	800a944 <_init>
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	2600      	movs	r6, #0
 8008882:	42a6      	cmp	r6, r4
 8008884:	d105      	bne.n	8008892 <__libc_init_array+0x2e>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	f855 3b04 	ldr.w	r3, [r5], #4
 800888c:	4798      	blx	r3
 800888e:	3601      	adds	r6, #1
 8008890:	e7ee      	b.n	8008870 <__libc_init_array+0xc>
 8008892:	f855 3b04 	ldr.w	r3, [r5], #4
 8008896:	4798      	blx	r3
 8008898:	3601      	adds	r6, #1
 800889a:	e7f2      	b.n	8008882 <__libc_init_array+0x1e>
 800889c:	0800aee0 	.word	0x0800aee0
 80088a0:	0800aee0 	.word	0x0800aee0
 80088a4:	0800aee0 	.word	0x0800aee0
 80088a8:	0800aee4 	.word	0x0800aee4

080088ac <__retarget_lock_init_recursive>:
 80088ac:	4770      	bx	lr

080088ae <__retarget_lock_acquire_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <__retarget_lock_release_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <abort>:
 80088b2:	b508      	push	{r3, lr}
 80088b4:	2006      	movs	r0, #6
 80088b6:	f001 ff1b 	bl	800a6f0 <raise>
 80088ba:	2001      	movs	r0, #1
 80088bc:	f7f9 fa68 	bl	8001d90 <_exit>

080088c0 <quorem>:
 80088c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	6903      	ldr	r3, [r0, #16]
 80088c6:	690c      	ldr	r4, [r1, #16]
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	4607      	mov	r7, r0
 80088cc:	db7e      	blt.n	80089cc <quorem+0x10c>
 80088ce:	3c01      	subs	r4, #1
 80088d0:	f101 0814 	add.w	r8, r1, #20
 80088d4:	f100 0514 	add.w	r5, r0, #20
 80088d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088e6:	3301      	adds	r3, #1
 80088e8:	429a      	cmp	r2, r3
 80088ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80088f6:	d331      	bcc.n	800895c <quorem+0x9c>
 80088f8:	f04f 0e00 	mov.w	lr, #0
 80088fc:	4640      	mov	r0, r8
 80088fe:	46ac      	mov	ip, r5
 8008900:	46f2      	mov	sl, lr
 8008902:	f850 2b04 	ldr.w	r2, [r0], #4
 8008906:	b293      	uxth	r3, r2
 8008908:	fb06 e303 	mla	r3, r6, r3, lr
 800890c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008910:	0c1a      	lsrs	r2, r3, #16
 8008912:	b29b      	uxth	r3, r3
 8008914:	ebaa 0303 	sub.w	r3, sl, r3
 8008918:	f8dc a000 	ldr.w	sl, [ip]
 800891c:	fa13 f38a 	uxtah	r3, r3, sl
 8008920:	fb06 220e 	mla	r2, r6, lr, r2
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	9b00      	ldr	r3, [sp, #0]
 8008928:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800892c:	b292      	uxth	r2, r2
 800892e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008932:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008936:	f8bd 3000 	ldrh.w	r3, [sp]
 800893a:	4581      	cmp	r9, r0
 800893c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008940:	f84c 3b04 	str.w	r3, [ip], #4
 8008944:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008948:	d2db      	bcs.n	8008902 <quorem+0x42>
 800894a:	f855 300b 	ldr.w	r3, [r5, fp]
 800894e:	b92b      	cbnz	r3, 800895c <quorem+0x9c>
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	3b04      	subs	r3, #4
 8008954:	429d      	cmp	r5, r3
 8008956:	461a      	mov	r2, r3
 8008958:	d32c      	bcc.n	80089b4 <quorem+0xf4>
 800895a:	613c      	str	r4, [r7, #16]
 800895c:	4638      	mov	r0, r7
 800895e:	f001 f9a5 	bl	8009cac <__mcmp>
 8008962:	2800      	cmp	r0, #0
 8008964:	db22      	blt.n	80089ac <quorem+0xec>
 8008966:	3601      	adds	r6, #1
 8008968:	4629      	mov	r1, r5
 800896a:	2000      	movs	r0, #0
 800896c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008970:	f8d1 c000 	ldr.w	ip, [r1]
 8008974:	b293      	uxth	r3, r2
 8008976:	1ac3      	subs	r3, r0, r3
 8008978:	0c12      	lsrs	r2, r2, #16
 800897a:	fa13 f38c 	uxtah	r3, r3, ip
 800897e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008982:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008986:	b29b      	uxth	r3, r3
 8008988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800898c:	45c1      	cmp	r9, r8
 800898e:	f841 3b04 	str.w	r3, [r1], #4
 8008992:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008996:	d2e9      	bcs.n	800896c <quorem+0xac>
 8008998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800899c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089a0:	b922      	cbnz	r2, 80089ac <quorem+0xec>
 80089a2:	3b04      	subs	r3, #4
 80089a4:	429d      	cmp	r5, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	d30a      	bcc.n	80089c0 <quorem+0x100>
 80089aa:	613c      	str	r4, [r7, #16]
 80089ac:	4630      	mov	r0, r6
 80089ae:	b003      	add	sp, #12
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	6812      	ldr	r2, [r2, #0]
 80089b6:	3b04      	subs	r3, #4
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d1ce      	bne.n	800895a <quorem+0x9a>
 80089bc:	3c01      	subs	r4, #1
 80089be:	e7c9      	b.n	8008954 <quorem+0x94>
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	3b04      	subs	r3, #4
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d1f0      	bne.n	80089aa <quorem+0xea>
 80089c8:	3c01      	subs	r4, #1
 80089ca:	e7eb      	b.n	80089a4 <quorem+0xe4>
 80089cc:	2000      	movs	r0, #0
 80089ce:	e7ee      	b.n	80089ae <quorem+0xee>

080089d0 <_dtoa_r>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	ed2d 8b04 	vpush	{d8-d9}
 80089d8:	69c5      	ldr	r5, [r0, #28]
 80089da:	b093      	sub	sp, #76	; 0x4c
 80089dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089e0:	ec57 6b10 	vmov	r6, r7, d0
 80089e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089e8:	9107      	str	r1, [sp, #28]
 80089ea:	4604      	mov	r4, r0
 80089ec:	920a      	str	r2, [sp, #40]	; 0x28
 80089ee:	930d      	str	r3, [sp, #52]	; 0x34
 80089f0:	b975      	cbnz	r5, 8008a10 <_dtoa_r+0x40>
 80089f2:	2010      	movs	r0, #16
 80089f4:	f000 fe2a 	bl	800964c <malloc>
 80089f8:	4602      	mov	r2, r0
 80089fa:	61e0      	str	r0, [r4, #28]
 80089fc:	b920      	cbnz	r0, 8008a08 <_dtoa_r+0x38>
 80089fe:	4bae      	ldr	r3, [pc, #696]	; (8008cb8 <_dtoa_r+0x2e8>)
 8008a00:	21ef      	movs	r1, #239	; 0xef
 8008a02:	48ae      	ldr	r0, [pc, #696]	; (8008cbc <_dtoa_r+0x2ec>)
 8008a04:	f7ff f908 	bl	8007c18 <__assert_func>
 8008a08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a0c:	6005      	str	r5, [r0, #0]
 8008a0e:	60c5      	str	r5, [r0, #12]
 8008a10:	69e3      	ldr	r3, [r4, #28]
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	b151      	cbz	r1, 8008a2c <_dtoa_r+0x5c>
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	604a      	str	r2, [r1, #4]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4093      	lsls	r3, r2
 8008a1e:	608b      	str	r3, [r1, #8]
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 ff07 	bl	8009834 <_Bfree>
 8008a26:	69e3      	ldr	r3, [r4, #28]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	1e3b      	subs	r3, r7, #0
 8008a2e:	bfbb      	ittet	lt
 8008a30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a34:	9303      	strlt	r3, [sp, #12]
 8008a36:	2300      	movge	r3, #0
 8008a38:	2201      	movlt	r2, #1
 8008a3a:	bfac      	ite	ge
 8008a3c:	f8c8 3000 	strge.w	r3, [r8]
 8008a40:	f8c8 2000 	strlt.w	r2, [r8]
 8008a44:	4b9e      	ldr	r3, [pc, #632]	; (8008cc0 <_dtoa_r+0x2f0>)
 8008a46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a4a:	ea33 0308 	bics.w	r3, r3, r8
 8008a4e:	d11b      	bne.n	8008a88 <_dtoa_r+0xb8>
 8008a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a52:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a5c:	4333      	orrs	r3, r6
 8008a5e:	f000 8593 	beq.w	8009588 <_dtoa_r+0xbb8>
 8008a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a64:	b963      	cbnz	r3, 8008a80 <_dtoa_r+0xb0>
 8008a66:	4b97      	ldr	r3, [pc, #604]	; (8008cc4 <_dtoa_r+0x2f4>)
 8008a68:	e027      	b.n	8008aba <_dtoa_r+0xea>
 8008a6a:	4b97      	ldr	r3, [pc, #604]	; (8008cc8 <_dtoa_r+0x2f8>)
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	9800      	ldr	r0, [sp, #0]
 8008a76:	b013      	add	sp, #76	; 0x4c
 8008a78:	ecbd 8b04 	vpop	{d8-d9}
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	4b90      	ldr	r3, [pc, #576]	; (8008cc4 <_dtoa_r+0x2f4>)
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	3303      	adds	r3, #3
 8008a86:	e7f3      	b.n	8008a70 <_dtoa_r+0xa0>
 8008a88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	ec51 0b17 	vmov	r0, r1, d7
 8008a92:	eeb0 8a47 	vmov.f32	s16, s14
 8008a96:	eef0 8a67 	vmov.f32	s17, s15
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f7f8 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	b160      	cbz	r0, 8008abe <_dtoa_r+0xee>
 8008aa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8568 	beq.w	8009582 <_dtoa_r+0xbb2>
 8008ab2:	4b86      	ldr	r3, [pc, #536]	; (8008ccc <_dtoa_r+0x2fc>)
 8008ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	e7da      	b.n	8008a74 <_dtoa_r+0xa4>
 8008abe:	aa10      	add	r2, sp, #64	; 0x40
 8008ac0:	a911      	add	r1, sp, #68	; 0x44
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ac8:	eef0 0a68 	vmov.f32	s1, s17
 8008acc:	f001 f994 	bl	8009df8 <__d2b>
 8008ad0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	d07f      	beq.n	8008bda <_dtoa_r+0x20a>
 8008ada:	ee18 3a90 	vmov	r3, s17
 8008ade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ae6:	ec51 0b18 	vmov	r0, r1, d8
 8008aea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008af2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008af6:	4619      	mov	r1, r3
 8008af8:	2200      	movs	r2, #0
 8008afa:	4b75      	ldr	r3, [pc, #468]	; (8008cd0 <_dtoa_r+0x300>)
 8008afc:	f7f7 fbc4 	bl	8000288 <__aeabi_dsub>
 8008b00:	a367      	add	r3, pc, #412	; (adr r3, 8008ca0 <_dtoa_r+0x2d0>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 fd77 	bl	80005f8 <__aeabi_dmul>
 8008b0a:	a367      	add	r3, pc, #412	; (adr r3, 8008ca8 <_dtoa_r+0x2d8>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fbbc 	bl	800028c <__adddf3>
 8008b14:	4606      	mov	r6, r0
 8008b16:	4628      	mov	r0, r5
 8008b18:	460f      	mov	r7, r1
 8008b1a:	f7f7 fd03 	bl	8000524 <__aeabi_i2d>
 8008b1e:	a364      	add	r3, pc, #400	; (adr r3, 8008cb0 <_dtoa_r+0x2e0>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fd68 	bl	80005f8 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	4639      	mov	r1, r7
 8008b30:	f7f7 fbac 	bl	800028c <__adddf3>
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	f7f8 f80e 	bl	8000b58 <__aeabi_d2iz>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4683      	mov	fp, r0
 8008b40:	2300      	movs	r3, #0
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 ffc9 	bl	8000adc <__aeabi_dcmplt>
 8008b4a:	b148      	cbz	r0, 8008b60 <_dtoa_r+0x190>
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	f7f7 fce9 	bl	8000524 <__aeabi_i2d>
 8008b52:	4632      	mov	r2, r6
 8008b54:	463b      	mov	r3, r7
 8008b56:	f7f7 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b5a:	b908      	cbnz	r0, 8008b60 <_dtoa_r+0x190>
 8008b5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b60:	f1bb 0f16 	cmp.w	fp, #22
 8008b64:	d857      	bhi.n	8008c16 <_dtoa_r+0x246>
 8008b66:	4b5b      	ldr	r3, [pc, #364]	; (8008cd4 <_dtoa_r+0x304>)
 8008b68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	ec51 0b18 	vmov	r0, r1, d8
 8008b74:	f7f7 ffb2 	bl	8000adc <__aeabi_dcmplt>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d04e      	beq.n	8008c1a <_dtoa_r+0x24a>
 8008b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b80:	2300      	movs	r3, #0
 8008b82:	930c      	str	r3, [sp, #48]	; 0x30
 8008b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b86:	1b5b      	subs	r3, r3, r5
 8008b88:	1e5a      	subs	r2, r3, #1
 8008b8a:	bf45      	ittet	mi
 8008b8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b90:	9305      	strmi	r3, [sp, #20]
 8008b92:	2300      	movpl	r3, #0
 8008b94:	2300      	movmi	r3, #0
 8008b96:	9206      	str	r2, [sp, #24]
 8008b98:	bf54      	ite	pl
 8008b9a:	9305      	strpl	r3, [sp, #20]
 8008b9c:	9306      	strmi	r3, [sp, #24]
 8008b9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ba2:	db3c      	blt.n	8008c1e <_dtoa_r+0x24e>
 8008ba4:	9b06      	ldr	r3, [sp, #24]
 8008ba6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008baa:	445b      	add	r3, fp
 8008bac:	9306      	str	r3, [sp, #24]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9308      	str	r3, [sp, #32]
 8008bb2:	9b07      	ldr	r3, [sp, #28]
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d868      	bhi.n	8008c8a <_dtoa_r+0x2ba>
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	bfc4      	itt	gt
 8008bbc:	3b04      	subgt	r3, #4
 8008bbe:	9307      	strgt	r3, [sp, #28]
 8008bc0:	9b07      	ldr	r3, [sp, #28]
 8008bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8008bc6:	bfcc      	ite	gt
 8008bc8:	2500      	movgt	r5, #0
 8008bca:	2501      	movle	r5, #1
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	f200 8085 	bhi.w	8008cdc <_dtoa_r+0x30c>
 8008bd2:	e8df f003 	tbb	[pc, r3]
 8008bd6:	3b2e      	.short	0x3b2e
 8008bd8:	5839      	.short	0x5839
 8008bda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bde:	441d      	add	r5, r3
 8008be0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008be4:	2b20      	cmp	r3, #32
 8008be6:	bfc1      	itttt	gt
 8008be8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bec:	fa08 f803 	lslgt.w	r8, r8, r3
 8008bf0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008bf4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008bf8:	bfd6      	itet	le
 8008bfa:	f1c3 0320 	rsble	r3, r3, #32
 8008bfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c02:	fa06 f003 	lslle.w	r0, r6, r3
 8008c06:	f7f7 fc7d 	bl	8000504 <__aeabi_ui2d>
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008c10:	3d01      	subs	r5, #1
 8008c12:	920e      	str	r2, [sp, #56]	; 0x38
 8008c14:	e76f      	b.n	8008af6 <_dtoa_r+0x126>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e7b3      	b.n	8008b82 <_dtoa_r+0x1b2>
 8008c1a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c1c:	e7b2      	b.n	8008b84 <_dtoa_r+0x1b4>
 8008c1e:	9b05      	ldr	r3, [sp, #20]
 8008c20:	eba3 030b 	sub.w	r3, r3, fp
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	f1cb 0300 	rsb	r3, fp, #0
 8008c2a:	9308      	str	r3, [sp, #32]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c30:	e7bf      	b.n	8008bb2 <_dtoa_r+0x1e2>
 8008c32:	2300      	movs	r3, #0
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc52      	bgt.n	8008ce2 <_dtoa_r+0x312>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	461a      	mov	r2, r3
 8008c44:	920a      	str	r2, [sp, #40]	; 0x28
 8008c46:	e00b      	b.n	8008c60 <_dtoa_r+0x290>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7f3      	b.n	8008c34 <_dtoa_r+0x264>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	445b      	add	r3, fp
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	3301      	adds	r3, #1
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	bfb8      	it	lt
 8008c5e:	2301      	movlt	r3, #1
 8008c60:	69e0      	ldr	r0, [r4, #28]
 8008c62:	2100      	movs	r1, #0
 8008c64:	2204      	movs	r2, #4
 8008c66:	f102 0614 	add.w	r6, r2, #20
 8008c6a:	429e      	cmp	r6, r3
 8008c6c:	d93d      	bls.n	8008cea <_dtoa_r+0x31a>
 8008c6e:	6041      	str	r1, [r0, #4]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fd9f 	bl	80097b4 <_Balloc>
 8008c76:	9000      	str	r0, [sp, #0]
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d139      	bne.n	8008cf0 <_dtoa_r+0x320>
 8008c7c:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <_dtoa_r+0x308>)
 8008c7e:	4602      	mov	r2, r0
 8008c80:	f240 11af 	movw	r1, #431	; 0x1af
 8008c84:	e6bd      	b.n	8008a02 <_dtoa_r+0x32>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e7e1      	b.n	8008c4e <_dtoa_r+0x27e>
 8008c8a:	2501      	movs	r5, #1
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9307      	str	r3, [sp, #28]
 8008c90:	9509      	str	r5, [sp, #36]	; 0x24
 8008c92:	f04f 33ff 	mov.w	r3, #4294967295
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2312      	movs	r3, #18
 8008c9e:	e7d1      	b.n	8008c44 <_dtoa_r+0x274>
 8008ca0:	636f4361 	.word	0x636f4361
 8008ca4:	3fd287a7 	.word	0x3fd287a7
 8008ca8:	8b60c8b3 	.word	0x8b60c8b3
 8008cac:	3fc68a28 	.word	0x3fc68a28
 8008cb0:	509f79fb 	.word	0x509f79fb
 8008cb4:	3fd34413 	.word	0x3fd34413
 8008cb8:	0800abe1 	.word	0x0800abe1
 8008cbc:	0800abf8 	.word	0x0800abf8
 8008cc0:	7ff00000 	.word	0x7ff00000
 8008cc4:	0800abdd 	.word	0x0800abdd
 8008cc8:	0800abd4 	.word	0x0800abd4
 8008ccc:	0800abb1 	.word	0x0800abb1
 8008cd0:	3ff80000 	.word	0x3ff80000
 8008cd4:	0800ace8 	.word	0x0800ace8
 8008cd8:	0800ac50 	.word	0x0800ac50
 8008cdc:	2301      	movs	r3, #1
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	e7d7      	b.n	8008c92 <_dtoa_r+0x2c2>
 8008ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	e7ba      	b.n	8008c60 <_dtoa_r+0x290>
 8008cea:	3101      	adds	r1, #1
 8008cec:	0052      	lsls	r2, r2, #1
 8008cee:	e7ba      	b.n	8008c66 <_dtoa_r+0x296>
 8008cf0:	69e3      	ldr	r3, [r4, #28]
 8008cf2:	9a00      	ldr	r2, [sp, #0]
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	2b0e      	cmp	r3, #14
 8008cfa:	f200 80a8 	bhi.w	8008e4e <_dtoa_r+0x47e>
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	f000 80a5 	beq.w	8008e4e <_dtoa_r+0x47e>
 8008d04:	f1bb 0f00 	cmp.w	fp, #0
 8008d08:	dd38      	ble.n	8008d7c <_dtoa_r+0x3ac>
 8008d0a:	4bc0      	ldr	r3, [pc, #768]	; (800900c <_dtoa_r+0x63c>)
 8008d0c:	f00b 020f 	and.w	r2, fp, #15
 8008d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008d18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008d1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008d20:	d019      	beq.n	8008d56 <_dtoa_r+0x386>
 8008d22:	4bbb      	ldr	r3, [pc, #748]	; (8009010 <_dtoa_r+0x640>)
 8008d24:	ec51 0b18 	vmov	r0, r1, d8
 8008d28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d2c:	f7f7 fd8e 	bl	800084c <__aeabi_ddiv>
 8008d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d34:	f008 080f 	and.w	r8, r8, #15
 8008d38:	2503      	movs	r5, #3
 8008d3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009010 <_dtoa_r+0x640>
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d10a      	bne.n	8008d5a <_dtoa_r+0x38a>
 8008d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	f7f7 fd7e 	bl	800084c <__aeabi_ddiv>
 8008d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d54:	e02b      	b.n	8008dae <_dtoa_r+0x3de>
 8008d56:	2502      	movs	r5, #2
 8008d58:	e7ef      	b.n	8008d3a <_dtoa_r+0x36a>
 8008d5a:	f018 0f01 	tst.w	r8, #1
 8008d5e:	d008      	beq.n	8008d72 <_dtoa_r+0x3a2>
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	4606      	mov	r6, r0
 8008d70:	460f      	mov	r7, r1
 8008d72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d76:	f109 0908 	add.w	r9, r9, #8
 8008d7a:	e7e0      	b.n	8008d3e <_dtoa_r+0x36e>
 8008d7c:	f000 809f 	beq.w	8008ebe <_dtoa_r+0x4ee>
 8008d80:	f1cb 0600 	rsb	r6, fp, #0
 8008d84:	4ba1      	ldr	r3, [pc, #644]	; (800900c <_dtoa_r+0x63c>)
 8008d86:	4fa2      	ldr	r7, [pc, #648]	; (8009010 <_dtoa_r+0x640>)
 8008d88:	f006 020f 	and.w	r2, r6, #15
 8008d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	ec51 0b18 	vmov	r0, r1, d8
 8008d98:	f7f7 fc2e 	bl	80005f8 <__aeabi_dmul>
 8008d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da0:	1136      	asrs	r6, r6, #4
 8008da2:	2300      	movs	r3, #0
 8008da4:	2502      	movs	r5, #2
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d17e      	bne.n	8008ea8 <_dtoa_r+0x4d8>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1d0      	bne.n	8008d50 <_dtoa_r+0x380>
 8008dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008db0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8084 	beq.w	8008ec2 <_dtoa_r+0x4f2>
 8008dba:	4b96      	ldr	r3, [pc, #600]	; (8009014 <_dtoa_r+0x644>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	f7f7 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d07b      	beq.n	8008ec2 <_dtoa_r+0x4f2>
 8008dca:	9b04      	ldr	r3, [sp, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d078      	beq.n	8008ec2 <_dtoa_r+0x4f2>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	dd39      	ble.n	8008e4a <_dtoa_r+0x47a>
 8008dd6:	4b90      	ldr	r3, [pc, #576]	; (8009018 <_dtoa_r+0x648>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fc0b 	bl	80005f8 <__aeabi_dmul>
 8008de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de6:	9e01      	ldr	r6, [sp, #4]
 8008de8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008dec:	3501      	adds	r5, #1
 8008dee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008df2:	4628      	mov	r0, r5
 8008df4:	f7f7 fb96 	bl	8000524 <__aeabi_i2d>
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	4b86      	ldr	r3, [pc, #536]	; (800901c <_dtoa_r+0x64c>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	f7f7 fa42 	bl	800028c <__adddf3>
 8008e08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	d158      	bne.n	8008ec8 <_dtoa_r+0x4f8>
 8008e16:	4b82      	ldr	r3, [pc, #520]	; (8009020 <_dtoa_r+0x650>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	f7f7 fa33 	bl	8000288 <__aeabi_dsub>
 8008e22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e26:	4680      	mov	r8, r0
 8008e28:	4689      	mov	r9, r1
 8008e2a:	f7f7 fe75 	bl	8000b18 <__aeabi_dcmpgt>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f040 8296 	bne.w	8009360 <_dtoa_r+0x990>
 8008e34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e38:	4640      	mov	r0, r8
 8008e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f7f7 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f040 8289 	bne.w	800935c <_dtoa_r+0x98c>
 8008e4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f2c0 814e 	blt.w	80090f2 <_dtoa_r+0x722>
 8008e56:	f1bb 0f0e 	cmp.w	fp, #14
 8008e5a:	f300 814a 	bgt.w	80090f2 <_dtoa_r+0x722>
 8008e5e:	4b6b      	ldr	r3, [pc, #428]	; (800900c <_dtoa_r+0x63c>)
 8008e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f280 80dc 	bge.w	8009028 <_dtoa_r+0x658>
 8008e70:	9b04      	ldr	r3, [sp, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f300 80d8 	bgt.w	8009028 <_dtoa_r+0x658>
 8008e78:	f040 826f 	bne.w	800935a <_dtoa_r+0x98a>
 8008e7c:	4b68      	ldr	r3, [pc, #416]	; (8009020 <_dtoa_r+0x650>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4640      	mov	r0, r8
 8008e82:	4649      	mov	r1, r9
 8008e84:	f7f7 fbb8 	bl	80005f8 <__aeabi_dmul>
 8008e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e8c:	f7f7 fe3a 	bl	8000b04 <__aeabi_dcmpge>
 8008e90:	9e04      	ldr	r6, [sp, #16]
 8008e92:	4637      	mov	r7, r6
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f040 8245 	bne.w	8009324 <_dtoa_r+0x954>
 8008e9a:	9d00      	ldr	r5, [sp, #0]
 8008e9c:	2331      	movs	r3, #49	; 0x31
 8008e9e:	f805 3b01 	strb.w	r3, [r5], #1
 8008ea2:	f10b 0b01 	add.w	fp, fp, #1
 8008ea6:	e241      	b.n	800932c <_dtoa_r+0x95c>
 8008ea8:	07f2      	lsls	r2, r6, #31
 8008eaa:	d505      	bpl.n	8008eb8 <_dtoa_r+0x4e8>
 8008eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb0:	f7f7 fba2 	bl	80005f8 <__aeabi_dmul>
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	1076      	asrs	r6, r6, #1
 8008eba:	3708      	adds	r7, #8
 8008ebc:	e773      	b.n	8008da6 <_dtoa_r+0x3d6>
 8008ebe:	2502      	movs	r5, #2
 8008ec0:	e775      	b.n	8008dae <_dtoa_r+0x3de>
 8008ec2:	9e04      	ldr	r6, [sp, #16]
 8008ec4:	465f      	mov	r7, fp
 8008ec6:	e792      	b.n	8008dee <_dtoa_r+0x41e>
 8008ec8:	9900      	ldr	r1, [sp, #0]
 8008eca:	4b50      	ldr	r3, [pc, #320]	; (800900c <_dtoa_r+0x63c>)
 8008ecc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ed0:	4431      	add	r1, r6
 8008ed2:	9102      	str	r1, [sp, #8]
 8008ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ed6:	eeb0 9a47 	vmov.f32	s18, s14
 8008eda:	eef0 9a67 	vmov.f32	s19, s15
 8008ede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ee6:	2900      	cmp	r1, #0
 8008ee8:	d044      	beq.n	8008f74 <_dtoa_r+0x5a4>
 8008eea:	494e      	ldr	r1, [pc, #312]	; (8009024 <_dtoa_r+0x654>)
 8008eec:	2000      	movs	r0, #0
 8008eee:	f7f7 fcad 	bl	800084c <__aeabi_ddiv>
 8008ef2:	ec53 2b19 	vmov	r2, r3, d9
 8008ef6:	f7f7 f9c7 	bl	8000288 <__aeabi_dsub>
 8008efa:	9d00      	ldr	r5, [sp, #0]
 8008efc:	ec41 0b19 	vmov	d9, r0, r1
 8008f00:	4649      	mov	r1, r9
 8008f02:	4640      	mov	r0, r8
 8008f04:	f7f7 fe28 	bl	8000b58 <__aeabi_d2iz>
 8008f08:	4606      	mov	r6, r0
 8008f0a:	f7f7 fb0b 	bl	8000524 <__aeabi_i2d>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4640      	mov	r0, r8
 8008f14:	4649      	mov	r1, r9
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	3630      	adds	r6, #48	; 0x30
 8008f1c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f20:	ec53 2b19 	vmov	r2, r3, d9
 8008f24:	4680      	mov	r8, r0
 8008f26:	4689      	mov	r9, r1
 8008f28:	f7f7 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d164      	bne.n	8008ffa <_dtoa_r+0x62a>
 8008f30:	4642      	mov	r2, r8
 8008f32:	464b      	mov	r3, r9
 8008f34:	4937      	ldr	r1, [pc, #220]	; (8009014 <_dtoa_r+0x644>)
 8008f36:	2000      	movs	r0, #0
 8008f38:	f7f7 f9a6 	bl	8000288 <__aeabi_dsub>
 8008f3c:	ec53 2b19 	vmov	r2, r3, d9
 8008f40:	f7f7 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f040 80b6 	bne.w	80090b6 <_dtoa_r+0x6e6>
 8008f4a:	9b02      	ldr	r3, [sp, #8]
 8008f4c:	429d      	cmp	r5, r3
 8008f4e:	f43f af7c 	beq.w	8008e4a <_dtoa_r+0x47a>
 8008f52:	4b31      	ldr	r3, [pc, #196]	; (8009018 <_dtoa_r+0x648>)
 8008f54:	ec51 0b19 	vmov	r0, r1, d9
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f7f7 fb4d 	bl	80005f8 <__aeabi_dmul>
 8008f5e:	4b2e      	ldr	r3, [pc, #184]	; (8009018 <_dtoa_r+0x648>)
 8008f60:	ec41 0b19 	vmov	d9, r0, r1
 8008f64:	2200      	movs	r2, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 fb45 	bl	80005f8 <__aeabi_dmul>
 8008f6e:	4680      	mov	r8, r0
 8008f70:	4689      	mov	r9, r1
 8008f72:	e7c5      	b.n	8008f00 <_dtoa_r+0x530>
 8008f74:	ec51 0b17 	vmov	r0, r1, d7
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	9b02      	ldr	r3, [sp, #8]
 8008f7e:	9d00      	ldr	r5, [sp, #0]
 8008f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f82:	ec41 0b19 	vmov	d9, r0, r1
 8008f86:	4649      	mov	r1, r9
 8008f88:	4640      	mov	r0, r8
 8008f8a:	f7f7 fde5 	bl	8000b58 <__aeabi_d2iz>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	f7f7 fac8 	bl	8000524 <__aeabi_i2d>
 8008f94:	3630      	adds	r6, #48	; 0x30
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	f7f7 f973 	bl	8000288 <__aeabi_dsub>
 8008fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fa6:	9b02      	ldr	r3, [sp, #8]
 8008fa8:	429d      	cmp	r5, r3
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	d124      	bne.n	8008ffe <_dtoa_r+0x62e>
 8008fb4:	4b1b      	ldr	r3, [pc, #108]	; (8009024 <_dtoa_r+0x654>)
 8008fb6:	ec51 0b19 	vmov	r0, r1, d9
 8008fba:	f7f7 f967 	bl	800028c <__adddf3>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f7f7 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d173      	bne.n	80090b6 <_dtoa_r+0x6e6>
 8008fce:	ec53 2b19 	vmov	r2, r3, d9
 8008fd2:	4914      	ldr	r1, [pc, #80]	; (8009024 <_dtoa_r+0x654>)
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f7f7 f957 	bl	8000288 <__aeabi_dsub>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	f7f7 fd7b 	bl	8000adc <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f af2f 	beq.w	8008e4a <_dtoa_r+0x47a>
 8008fec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fee:	1e6b      	subs	r3, r5, #1
 8008ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ff2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ff6:	2b30      	cmp	r3, #48	; 0x30
 8008ff8:	d0f8      	beq.n	8008fec <_dtoa_r+0x61c>
 8008ffa:	46bb      	mov	fp, r7
 8008ffc:	e04a      	b.n	8009094 <_dtoa_r+0x6c4>
 8008ffe:	4b06      	ldr	r3, [pc, #24]	; (8009018 <_dtoa_r+0x648>)
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	4680      	mov	r8, r0
 8009006:	4689      	mov	r9, r1
 8009008:	e7bd      	b.n	8008f86 <_dtoa_r+0x5b6>
 800900a:	bf00      	nop
 800900c:	0800ace8 	.word	0x0800ace8
 8009010:	0800acc0 	.word	0x0800acc0
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	40240000 	.word	0x40240000
 800901c:	401c0000 	.word	0x401c0000
 8009020:	40140000 	.word	0x40140000
 8009024:	3fe00000 	.word	0x3fe00000
 8009028:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800902c:	9d00      	ldr	r5, [sp, #0]
 800902e:	4642      	mov	r2, r8
 8009030:	464b      	mov	r3, r9
 8009032:	4630      	mov	r0, r6
 8009034:	4639      	mov	r1, r7
 8009036:	f7f7 fc09 	bl	800084c <__aeabi_ddiv>
 800903a:	f7f7 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800903e:	9001      	str	r0, [sp, #4]
 8009040:	f7f7 fa70 	bl	8000524 <__aeabi_i2d>
 8009044:	4642      	mov	r2, r8
 8009046:	464b      	mov	r3, r9
 8009048:	f7f7 fad6 	bl	80005f8 <__aeabi_dmul>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	9e01      	ldr	r6, [sp, #4]
 800905a:	9f04      	ldr	r7, [sp, #16]
 800905c:	3630      	adds	r6, #48	; 0x30
 800905e:	f805 6b01 	strb.w	r6, [r5], #1
 8009062:	9e00      	ldr	r6, [sp, #0]
 8009064:	1bae      	subs	r6, r5, r6
 8009066:	42b7      	cmp	r7, r6
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	d134      	bne.n	80090d8 <_dtoa_r+0x708>
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	4642      	mov	r2, r8
 8009074:	464b      	mov	r3, r9
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	f7f7 fd4d 	bl	8000b18 <__aeabi_dcmpgt>
 800907e:	b9c8      	cbnz	r0, 80090b4 <_dtoa_r+0x6e4>
 8009080:	4642      	mov	r2, r8
 8009082:	464b      	mov	r3, r9
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800908c:	b110      	cbz	r0, 8009094 <_dtoa_r+0x6c4>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	07db      	lsls	r3, r3, #31
 8009092:	d40f      	bmi.n	80090b4 <_dtoa_r+0x6e4>
 8009094:	4651      	mov	r1, sl
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fbcc 	bl	8009834 <_Bfree>
 800909c:	2300      	movs	r3, #0
 800909e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090a0:	702b      	strb	r3, [r5, #0]
 80090a2:	f10b 0301 	add.w	r3, fp, #1
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f43f ace2 	beq.w	8008a74 <_dtoa_r+0xa4>
 80090b0:	601d      	str	r5, [r3, #0]
 80090b2:	e4df      	b.n	8008a74 <_dtoa_r+0xa4>
 80090b4:	465f      	mov	r7, fp
 80090b6:	462b      	mov	r3, r5
 80090b8:	461d      	mov	r5, r3
 80090ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090be:	2a39      	cmp	r2, #57	; 0x39
 80090c0:	d106      	bne.n	80090d0 <_dtoa_r+0x700>
 80090c2:	9a00      	ldr	r2, [sp, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d1f7      	bne.n	80090b8 <_dtoa_r+0x6e8>
 80090c8:	9900      	ldr	r1, [sp, #0]
 80090ca:	2230      	movs	r2, #48	; 0x30
 80090cc:	3701      	adds	r7, #1
 80090ce:	700a      	strb	r2, [r1, #0]
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	3201      	adds	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	e790      	b.n	8008ffa <_dtoa_r+0x62a>
 80090d8:	4ba3      	ldr	r3, [pc, #652]	; (8009368 <_dtoa_r+0x998>)
 80090da:	2200      	movs	r2, #0
 80090dc:	f7f7 fa8c 	bl	80005f8 <__aeabi_dmul>
 80090e0:	2200      	movs	r2, #0
 80090e2:	2300      	movs	r3, #0
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	f7f7 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d09e      	beq.n	800902e <_dtoa_r+0x65e>
 80090f0:	e7d0      	b.n	8009094 <_dtoa_r+0x6c4>
 80090f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	f000 80ca 	beq.w	800928e <_dtoa_r+0x8be>
 80090fa:	9a07      	ldr	r2, [sp, #28]
 80090fc:	2a01      	cmp	r2, #1
 80090fe:	f300 80ad 	bgt.w	800925c <_dtoa_r+0x88c>
 8009102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009104:	2a00      	cmp	r2, #0
 8009106:	f000 80a5 	beq.w	8009254 <_dtoa_r+0x884>
 800910a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800910e:	9e08      	ldr	r6, [sp, #32]
 8009110:	9d05      	ldr	r5, [sp, #20]
 8009112:	9a05      	ldr	r2, [sp, #20]
 8009114:	441a      	add	r2, r3
 8009116:	9205      	str	r2, [sp, #20]
 8009118:	9a06      	ldr	r2, [sp, #24]
 800911a:	2101      	movs	r1, #1
 800911c:	441a      	add	r2, r3
 800911e:	4620      	mov	r0, r4
 8009120:	9206      	str	r2, [sp, #24]
 8009122:	f000 fc3d 	bl	80099a0 <__i2b>
 8009126:	4607      	mov	r7, r0
 8009128:	b165      	cbz	r5, 8009144 <_dtoa_r+0x774>
 800912a:	9b06      	ldr	r3, [sp, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	dd09      	ble.n	8009144 <_dtoa_r+0x774>
 8009130:	42ab      	cmp	r3, r5
 8009132:	9a05      	ldr	r2, [sp, #20]
 8009134:	bfa8      	it	ge
 8009136:	462b      	movge	r3, r5
 8009138:	1ad2      	subs	r2, r2, r3
 800913a:	9205      	str	r2, [sp, #20]
 800913c:	9a06      	ldr	r2, [sp, #24]
 800913e:	1aed      	subs	r5, r5, r3
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	9306      	str	r3, [sp, #24]
 8009144:	9b08      	ldr	r3, [sp, #32]
 8009146:	b1f3      	cbz	r3, 8009186 <_dtoa_r+0x7b6>
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 80a3 	beq.w	8009296 <_dtoa_r+0x8c6>
 8009150:	2e00      	cmp	r6, #0
 8009152:	dd10      	ble.n	8009176 <_dtoa_r+0x7a6>
 8009154:	4639      	mov	r1, r7
 8009156:	4632      	mov	r2, r6
 8009158:	4620      	mov	r0, r4
 800915a:	f000 fce1 	bl	8009b20 <__pow5mult>
 800915e:	4652      	mov	r2, sl
 8009160:	4601      	mov	r1, r0
 8009162:	4607      	mov	r7, r0
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fc31 	bl	80099cc <__multiply>
 800916a:	4651      	mov	r1, sl
 800916c:	4680      	mov	r8, r0
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fb60 	bl	8009834 <_Bfree>
 8009174:	46c2      	mov	sl, r8
 8009176:	9b08      	ldr	r3, [sp, #32]
 8009178:	1b9a      	subs	r2, r3, r6
 800917a:	d004      	beq.n	8009186 <_dtoa_r+0x7b6>
 800917c:	4651      	mov	r1, sl
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fcce 	bl	8009b20 <__pow5mult>
 8009184:	4682      	mov	sl, r0
 8009186:	2101      	movs	r1, #1
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fc09 	bl	80099a0 <__i2b>
 800918e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	4606      	mov	r6, r0
 8009194:	f340 8081 	ble.w	800929a <_dtoa_r+0x8ca>
 8009198:	461a      	mov	r2, r3
 800919a:	4601      	mov	r1, r0
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fcbf 	bl	8009b20 <__pow5mult>
 80091a2:	9b07      	ldr	r3, [sp, #28]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	4606      	mov	r6, r0
 80091a8:	dd7a      	ble.n	80092a0 <_dtoa_r+0x8d0>
 80091aa:	f04f 0800 	mov.w	r8, #0
 80091ae:	6933      	ldr	r3, [r6, #16]
 80091b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091b4:	6918      	ldr	r0, [r3, #16]
 80091b6:	f000 fba5 	bl	8009904 <__hi0bits>
 80091ba:	f1c0 0020 	rsb	r0, r0, #32
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	4418      	add	r0, r3
 80091c2:	f010 001f 	ands.w	r0, r0, #31
 80091c6:	f000 8094 	beq.w	80092f2 <_dtoa_r+0x922>
 80091ca:	f1c0 0320 	rsb	r3, r0, #32
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	f340 8085 	ble.w	80092de <_dtoa_r+0x90e>
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	f1c0 001c 	rsb	r0, r0, #28
 80091da:	4403      	add	r3, r0
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	4403      	add	r3, r0
 80091e2:	4405      	add	r5, r0
 80091e4:	9306      	str	r3, [sp, #24]
 80091e6:	9b05      	ldr	r3, [sp, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd05      	ble.n	80091f8 <_dtoa_r+0x828>
 80091ec:	4651      	mov	r1, sl
 80091ee:	461a      	mov	r2, r3
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fcef 	bl	8009bd4 <__lshift>
 80091f6:	4682      	mov	sl, r0
 80091f8:	9b06      	ldr	r3, [sp, #24]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dd05      	ble.n	800920a <_dtoa_r+0x83a>
 80091fe:	4631      	mov	r1, r6
 8009200:	461a      	mov	r2, r3
 8009202:	4620      	mov	r0, r4
 8009204:	f000 fce6 	bl	8009bd4 <__lshift>
 8009208:	4606      	mov	r6, r0
 800920a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800920c:	2b00      	cmp	r3, #0
 800920e:	d072      	beq.n	80092f6 <_dtoa_r+0x926>
 8009210:	4631      	mov	r1, r6
 8009212:	4650      	mov	r0, sl
 8009214:	f000 fd4a 	bl	8009cac <__mcmp>
 8009218:	2800      	cmp	r0, #0
 800921a:	da6c      	bge.n	80092f6 <_dtoa_r+0x926>
 800921c:	2300      	movs	r3, #0
 800921e:	4651      	mov	r1, sl
 8009220:	220a      	movs	r2, #10
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fb28 	bl	8009878 <__multadd>
 8009228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800922e:	4682      	mov	sl, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 81b0 	beq.w	8009596 <_dtoa_r+0xbc6>
 8009236:	2300      	movs	r3, #0
 8009238:	4639      	mov	r1, r7
 800923a:	220a      	movs	r2, #10
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fb1b 	bl	8009878 <__multadd>
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	4607      	mov	r7, r0
 8009248:	f300 8096 	bgt.w	8009378 <_dtoa_r+0x9a8>
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	2b02      	cmp	r3, #2
 8009250:	dc59      	bgt.n	8009306 <_dtoa_r+0x936>
 8009252:	e091      	b.n	8009378 <_dtoa_r+0x9a8>
 8009254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800925a:	e758      	b.n	800910e <_dtoa_r+0x73e>
 800925c:	9b04      	ldr	r3, [sp, #16]
 800925e:	1e5e      	subs	r6, r3, #1
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	42b3      	cmp	r3, r6
 8009264:	bfbf      	itttt	lt
 8009266:	9b08      	ldrlt	r3, [sp, #32]
 8009268:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800926a:	9608      	strlt	r6, [sp, #32]
 800926c:	1af3      	sublt	r3, r6, r3
 800926e:	bfb4      	ite	lt
 8009270:	18d2      	addlt	r2, r2, r3
 8009272:	1b9e      	subge	r6, r3, r6
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	bfbc      	itt	lt
 8009278:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800927a:	2600      	movlt	r6, #0
 800927c:	2b00      	cmp	r3, #0
 800927e:	bfb7      	itett	lt
 8009280:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009284:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009288:	1a9d      	sublt	r5, r3, r2
 800928a:	2300      	movlt	r3, #0
 800928c:	e741      	b.n	8009112 <_dtoa_r+0x742>
 800928e:	9e08      	ldr	r6, [sp, #32]
 8009290:	9d05      	ldr	r5, [sp, #20]
 8009292:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009294:	e748      	b.n	8009128 <_dtoa_r+0x758>
 8009296:	9a08      	ldr	r2, [sp, #32]
 8009298:	e770      	b.n	800917c <_dtoa_r+0x7ac>
 800929a:	9b07      	ldr	r3, [sp, #28]
 800929c:	2b01      	cmp	r3, #1
 800929e:	dc19      	bgt.n	80092d4 <_dtoa_r+0x904>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	b9bb      	cbnz	r3, 80092d4 <_dtoa_r+0x904>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092aa:	b99b      	cbnz	r3, 80092d4 <_dtoa_r+0x904>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092b2:	0d1b      	lsrs	r3, r3, #20
 80092b4:	051b      	lsls	r3, r3, #20
 80092b6:	b183      	cbz	r3, 80092da <_dtoa_r+0x90a>
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	3301      	adds	r3, #1
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	9b06      	ldr	r3, [sp, #24]
 80092c0:	3301      	adds	r3, #1
 80092c2:	9306      	str	r3, [sp, #24]
 80092c4:	f04f 0801 	mov.w	r8, #1
 80092c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f47f af6f 	bne.w	80091ae <_dtoa_r+0x7de>
 80092d0:	2001      	movs	r0, #1
 80092d2:	e774      	b.n	80091be <_dtoa_r+0x7ee>
 80092d4:	f04f 0800 	mov.w	r8, #0
 80092d8:	e7f6      	b.n	80092c8 <_dtoa_r+0x8f8>
 80092da:	4698      	mov	r8, r3
 80092dc:	e7f4      	b.n	80092c8 <_dtoa_r+0x8f8>
 80092de:	d082      	beq.n	80091e6 <_dtoa_r+0x816>
 80092e0:	9a05      	ldr	r2, [sp, #20]
 80092e2:	331c      	adds	r3, #28
 80092e4:	441a      	add	r2, r3
 80092e6:	9205      	str	r2, [sp, #20]
 80092e8:	9a06      	ldr	r2, [sp, #24]
 80092ea:	441a      	add	r2, r3
 80092ec:	441d      	add	r5, r3
 80092ee:	9206      	str	r2, [sp, #24]
 80092f0:	e779      	b.n	80091e6 <_dtoa_r+0x816>
 80092f2:	4603      	mov	r3, r0
 80092f4:	e7f4      	b.n	80092e0 <_dtoa_r+0x910>
 80092f6:	9b04      	ldr	r3, [sp, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	dc37      	bgt.n	800936c <_dtoa_r+0x99c>
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	dd34      	ble.n	800936c <_dtoa_r+0x99c>
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	b963      	cbnz	r3, 8009324 <_dtoa_r+0x954>
 800930a:	4631      	mov	r1, r6
 800930c:	2205      	movs	r2, #5
 800930e:	4620      	mov	r0, r4
 8009310:	f000 fab2 	bl	8009878 <__multadd>
 8009314:	4601      	mov	r1, r0
 8009316:	4606      	mov	r6, r0
 8009318:	4650      	mov	r0, sl
 800931a:	f000 fcc7 	bl	8009cac <__mcmp>
 800931e:	2800      	cmp	r0, #0
 8009320:	f73f adbb 	bgt.w	8008e9a <_dtoa_r+0x4ca>
 8009324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009326:	9d00      	ldr	r5, [sp, #0]
 8009328:	ea6f 0b03 	mvn.w	fp, r3
 800932c:	f04f 0800 	mov.w	r8, #0
 8009330:	4631      	mov	r1, r6
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fa7e 	bl	8009834 <_Bfree>
 8009338:	2f00      	cmp	r7, #0
 800933a:	f43f aeab 	beq.w	8009094 <_dtoa_r+0x6c4>
 800933e:	f1b8 0f00 	cmp.w	r8, #0
 8009342:	d005      	beq.n	8009350 <_dtoa_r+0x980>
 8009344:	45b8      	cmp	r8, r7
 8009346:	d003      	beq.n	8009350 <_dtoa_r+0x980>
 8009348:	4641      	mov	r1, r8
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fa72 	bl	8009834 <_Bfree>
 8009350:	4639      	mov	r1, r7
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fa6e 	bl	8009834 <_Bfree>
 8009358:	e69c      	b.n	8009094 <_dtoa_r+0x6c4>
 800935a:	2600      	movs	r6, #0
 800935c:	4637      	mov	r7, r6
 800935e:	e7e1      	b.n	8009324 <_dtoa_r+0x954>
 8009360:	46bb      	mov	fp, r7
 8009362:	4637      	mov	r7, r6
 8009364:	e599      	b.n	8008e9a <_dtoa_r+0x4ca>
 8009366:	bf00      	nop
 8009368:	40240000 	.word	0x40240000
 800936c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80c8 	beq.w	8009504 <_dtoa_r+0xb34>
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	2d00      	cmp	r5, #0
 800937a:	dd05      	ble.n	8009388 <_dtoa_r+0x9b8>
 800937c:	4639      	mov	r1, r7
 800937e:	462a      	mov	r2, r5
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fc27 	bl	8009bd4 <__lshift>
 8009386:	4607      	mov	r7, r0
 8009388:	f1b8 0f00 	cmp.w	r8, #0
 800938c:	d05b      	beq.n	8009446 <_dtoa_r+0xa76>
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fa0f 	bl	80097b4 <_Balloc>
 8009396:	4605      	mov	r5, r0
 8009398:	b928      	cbnz	r0, 80093a6 <_dtoa_r+0x9d6>
 800939a:	4b83      	ldr	r3, [pc, #524]	; (80095a8 <_dtoa_r+0xbd8>)
 800939c:	4602      	mov	r2, r0
 800939e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80093a2:	f7ff bb2e 	b.w	8008a02 <_dtoa_r+0x32>
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	3202      	adds	r2, #2
 80093aa:	0092      	lsls	r2, r2, #2
 80093ac:	f107 010c 	add.w	r1, r7, #12
 80093b0:	300c      	adds	r0, #12
 80093b2:	f001 f9c9 	bl	800a748 <memcpy>
 80093b6:	2201      	movs	r2, #1
 80093b8:	4629      	mov	r1, r5
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fc0a 	bl	8009bd4 <__lshift>
 80093c0:	9b00      	ldr	r3, [sp, #0]
 80093c2:	3301      	adds	r3, #1
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ca:	4413      	add	r3, r2
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	46b8      	mov	r8, r7
 80093d6:	9306      	str	r3, [sp, #24]
 80093d8:	4607      	mov	r7, r0
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	4631      	mov	r1, r6
 80093de:	3b01      	subs	r3, #1
 80093e0:	4650      	mov	r0, sl
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	f7ff fa6c 	bl	80088c0 <quorem>
 80093e8:	4641      	mov	r1, r8
 80093ea:	9002      	str	r0, [sp, #8]
 80093ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093f0:	4650      	mov	r0, sl
 80093f2:	f000 fc5b 	bl	8009cac <__mcmp>
 80093f6:	463a      	mov	r2, r7
 80093f8:	9005      	str	r0, [sp, #20]
 80093fa:	4631      	mov	r1, r6
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fc71 	bl	8009ce4 <__mdiff>
 8009402:	68c2      	ldr	r2, [r0, #12]
 8009404:	4605      	mov	r5, r0
 8009406:	bb02      	cbnz	r2, 800944a <_dtoa_r+0xa7a>
 8009408:	4601      	mov	r1, r0
 800940a:	4650      	mov	r0, sl
 800940c:	f000 fc4e 	bl	8009cac <__mcmp>
 8009410:	4602      	mov	r2, r0
 8009412:	4629      	mov	r1, r5
 8009414:	4620      	mov	r0, r4
 8009416:	9209      	str	r2, [sp, #36]	; 0x24
 8009418:	f000 fa0c 	bl	8009834 <_Bfree>
 800941c:	9b07      	ldr	r3, [sp, #28]
 800941e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009420:	9d04      	ldr	r5, [sp, #16]
 8009422:	ea43 0102 	orr.w	r1, r3, r2
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	4319      	orrs	r1, r3
 800942a:	d110      	bne.n	800944e <_dtoa_r+0xa7e>
 800942c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009430:	d029      	beq.n	8009486 <_dtoa_r+0xab6>
 8009432:	9b05      	ldr	r3, [sp, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	dd02      	ble.n	800943e <_dtoa_r+0xa6e>
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	f883 9000 	strb.w	r9, [r3]
 8009444:	e774      	b.n	8009330 <_dtoa_r+0x960>
 8009446:	4638      	mov	r0, r7
 8009448:	e7ba      	b.n	80093c0 <_dtoa_r+0x9f0>
 800944a:	2201      	movs	r2, #1
 800944c:	e7e1      	b.n	8009412 <_dtoa_r+0xa42>
 800944e:	9b05      	ldr	r3, [sp, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	db04      	blt.n	800945e <_dtoa_r+0xa8e>
 8009454:	9907      	ldr	r1, [sp, #28]
 8009456:	430b      	orrs	r3, r1
 8009458:	9906      	ldr	r1, [sp, #24]
 800945a:	430b      	orrs	r3, r1
 800945c:	d120      	bne.n	80094a0 <_dtoa_r+0xad0>
 800945e:	2a00      	cmp	r2, #0
 8009460:	dded      	ble.n	800943e <_dtoa_r+0xa6e>
 8009462:	4651      	mov	r1, sl
 8009464:	2201      	movs	r2, #1
 8009466:	4620      	mov	r0, r4
 8009468:	f000 fbb4 	bl	8009bd4 <__lshift>
 800946c:	4631      	mov	r1, r6
 800946e:	4682      	mov	sl, r0
 8009470:	f000 fc1c 	bl	8009cac <__mcmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	dc03      	bgt.n	8009480 <_dtoa_r+0xab0>
 8009478:	d1e1      	bne.n	800943e <_dtoa_r+0xa6e>
 800947a:	f019 0f01 	tst.w	r9, #1
 800947e:	d0de      	beq.n	800943e <_dtoa_r+0xa6e>
 8009480:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009484:	d1d8      	bne.n	8009438 <_dtoa_r+0xa68>
 8009486:	9a01      	ldr	r2, [sp, #4]
 8009488:	2339      	movs	r3, #57	; 0x39
 800948a:	7013      	strb	r3, [r2, #0]
 800948c:	462b      	mov	r3, r5
 800948e:	461d      	mov	r5, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009496:	2a39      	cmp	r2, #57	; 0x39
 8009498:	d06c      	beq.n	8009574 <_dtoa_r+0xba4>
 800949a:	3201      	adds	r2, #1
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e747      	b.n	8009330 <_dtoa_r+0x960>
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	dd07      	ble.n	80094b4 <_dtoa_r+0xae4>
 80094a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094a8:	d0ed      	beq.n	8009486 <_dtoa_r+0xab6>
 80094aa:	9a01      	ldr	r2, [sp, #4]
 80094ac:	f109 0301 	add.w	r3, r9, #1
 80094b0:	7013      	strb	r3, [r2, #0]
 80094b2:	e73d      	b.n	8009330 <_dtoa_r+0x960>
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	9a08      	ldr	r2, [sp, #32]
 80094b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80094bc:	4293      	cmp	r3, r2
 80094be:	d043      	beq.n	8009548 <_dtoa_r+0xb78>
 80094c0:	4651      	mov	r1, sl
 80094c2:	2300      	movs	r3, #0
 80094c4:	220a      	movs	r2, #10
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 f9d6 	bl	8009878 <__multadd>
 80094cc:	45b8      	cmp	r8, r7
 80094ce:	4682      	mov	sl, r0
 80094d0:	f04f 0300 	mov.w	r3, #0
 80094d4:	f04f 020a 	mov.w	r2, #10
 80094d8:	4641      	mov	r1, r8
 80094da:	4620      	mov	r0, r4
 80094dc:	d107      	bne.n	80094ee <_dtoa_r+0xb1e>
 80094de:	f000 f9cb 	bl	8009878 <__multadd>
 80094e2:	4680      	mov	r8, r0
 80094e4:	4607      	mov	r7, r0
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	e775      	b.n	80093da <_dtoa_r+0xa0a>
 80094ee:	f000 f9c3 	bl	8009878 <__multadd>
 80094f2:	4639      	mov	r1, r7
 80094f4:	4680      	mov	r8, r0
 80094f6:	2300      	movs	r3, #0
 80094f8:	220a      	movs	r2, #10
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f9bc 	bl	8009878 <__multadd>
 8009500:	4607      	mov	r7, r0
 8009502:	e7f0      	b.n	80094e6 <_dtoa_r+0xb16>
 8009504:	9b04      	ldr	r3, [sp, #16]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	9d00      	ldr	r5, [sp, #0]
 800950a:	4631      	mov	r1, r6
 800950c:	4650      	mov	r0, sl
 800950e:	f7ff f9d7 	bl	80088c0 <quorem>
 8009512:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	f805 9b01 	strb.w	r9, [r5], #1
 800951c:	1aea      	subs	r2, r5, r3
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	4293      	cmp	r3, r2
 8009522:	dd07      	ble.n	8009534 <_dtoa_r+0xb64>
 8009524:	4651      	mov	r1, sl
 8009526:	2300      	movs	r3, #0
 8009528:	220a      	movs	r2, #10
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f9a4 	bl	8009878 <__multadd>
 8009530:	4682      	mov	sl, r0
 8009532:	e7ea      	b.n	800950a <_dtoa_r+0xb3a>
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	bfc8      	it	gt
 800953a:	461d      	movgt	r5, r3
 800953c:	9b00      	ldr	r3, [sp, #0]
 800953e:	bfd8      	it	le
 8009540:	2501      	movle	r5, #1
 8009542:	441d      	add	r5, r3
 8009544:	f04f 0800 	mov.w	r8, #0
 8009548:	4651      	mov	r1, sl
 800954a:	2201      	movs	r2, #1
 800954c:	4620      	mov	r0, r4
 800954e:	f000 fb41 	bl	8009bd4 <__lshift>
 8009552:	4631      	mov	r1, r6
 8009554:	4682      	mov	sl, r0
 8009556:	f000 fba9 	bl	8009cac <__mcmp>
 800955a:	2800      	cmp	r0, #0
 800955c:	dc96      	bgt.n	800948c <_dtoa_r+0xabc>
 800955e:	d102      	bne.n	8009566 <_dtoa_r+0xb96>
 8009560:	f019 0f01 	tst.w	r9, #1
 8009564:	d192      	bne.n	800948c <_dtoa_r+0xabc>
 8009566:	462b      	mov	r3, r5
 8009568:	461d      	mov	r5, r3
 800956a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800956e:	2a30      	cmp	r2, #48	; 0x30
 8009570:	d0fa      	beq.n	8009568 <_dtoa_r+0xb98>
 8009572:	e6dd      	b.n	8009330 <_dtoa_r+0x960>
 8009574:	9a00      	ldr	r2, [sp, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d189      	bne.n	800948e <_dtoa_r+0xabe>
 800957a:	f10b 0b01 	add.w	fp, fp, #1
 800957e:	2331      	movs	r3, #49	; 0x31
 8009580:	e796      	b.n	80094b0 <_dtoa_r+0xae0>
 8009582:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <_dtoa_r+0xbdc>)
 8009584:	f7ff ba99 	b.w	8008aba <_dtoa_r+0xea>
 8009588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800958a:	2b00      	cmp	r3, #0
 800958c:	f47f aa6d 	bne.w	8008a6a <_dtoa_r+0x9a>
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <_dtoa_r+0xbe0>)
 8009592:	f7ff ba92 	b.w	8008aba <_dtoa_r+0xea>
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	dcb5      	bgt.n	8009508 <_dtoa_r+0xb38>
 800959c:	9b07      	ldr	r3, [sp, #28]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	f73f aeb1 	bgt.w	8009306 <_dtoa_r+0x936>
 80095a4:	e7b0      	b.n	8009508 <_dtoa_r+0xb38>
 80095a6:	bf00      	nop
 80095a8:	0800ac50 	.word	0x0800ac50
 80095ac:	0800abb0 	.word	0x0800abb0
 80095b0:	0800abd4 	.word	0x0800abd4

080095b4 <_free_r>:
 80095b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d044      	beq.n	8009644 <_free_r+0x90>
 80095ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095be:	9001      	str	r0, [sp, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f1a1 0404 	sub.w	r4, r1, #4
 80095c6:	bfb8      	it	lt
 80095c8:	18e4      	addlt	r4, r4, r3
 80095ca:	f000 f8e7 	bl	800979c <__malloc_lock>
 80095ce:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <_free_r+0x94>)
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	b933      	cbnz	r3, 80095e4 <_free_r+0x30>
 80095d6:	6063      	str	r3, [r4, #4]
 80095d8:	6014      	str	r4, [r2, #0]
 80095da:	b003      	add	sp, #12
 80095dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095e0:	f000 b8e2 	b.w	80097a8 <__malloc_unlock>
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	d908      	bls.n	80095fa <_free_r+0x46>
 80095e8:	6825      	ldr	r5, [r4, #0]
 80095ea:	1961      	adds	r1, r4, r5
 80095ec:	428b      	cmp	r3, r1
 80095ee:	bf01      	itttt	eq
 80095f0:	6819      	ldreq	r1, [r3, #0]
 80095f2:	685b      	ldreq	r3, [r3, #4]
 80095f4:	1949      	addeq	r1, r1, r5
 80095f6:	6021      	streq	r1, [r4, #0]
 80095f8:	e7ed      	b.n	80095d6 <_free_r+0x22>
 80095fa:	461a      	mov	r2, r3
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	b10b      	cbz	r3, 8009604 <_free_r+0x50>
 8009600:	42a3      	cmp	r3, r4
 8009602:	d9fa      	bls.n	80095fa <_free_r+0x46>
 8009604:	6811      	ldr	r1, [r2, #0]
 8009606:	1855      	adds	r5, r2, r1
 8009608:	42a5      	cmp	r5, r4
 800960a:	d10b      	bne.n	8009624 <_free_r+0x70>
 800960c:	6824      	ldr	r4, [r4, #0]
 800960e:	4421      	add	r1, r4
 8009610:	1854      	adds	r4, r2, r1
 8009612:	42a3      	cmp	r3, r4
 8009614:	6011      	str	r1, [r2, #0]
 8009616:	d1e0      	bne.n	80095da <_free_r+0x26>
 8009618:	681c      	ldr	r4, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	6053      	str	r3, [r2, #4]
 800961e:	440c      	add	r4, r1
 8009620:	6014      	str	r4, [r2, #0]
 8009622:	e7da      	b.n	80095da <_free_r+0x26>
 8009624:	d902      	bls.n	800962c <_free_r+0x78>
 8009626:	230c      	movs	r3, #12
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	e7d6      	b.n	80095da <_free_r+0x26>
 800962c:	6825      	ldr	r5, [r4, #0]
 800962e:	1961      	adds	r1, r4, r5
 8009630:	428b      	cmp	r3, r1
 8009632:	bf04      	itt	eq
 8009634:	6819      	ldreq	r1, [r3, #0]
 8009636:	685b      	ldreq	r3, [r3, #4]
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	bf04      	itt	eq
 800963c:	1949      	addeq	r1, r1, r5
 800963e:	6021      	streq	r1, [r4, #0]
 8009640:	6054      	str	r4, [r2, #4]
 8009642:	e7ca      	b.n	80095da <_free_r+0x26>
 8009644:	b003      	add	sp, #12
 8009646:	bd30      	pop	{r4, r5, pc}
 8009648:	200005b4 	.word	0x200005b4

0800964c <malloc>:
 800964c:	4b02      	ldr	r3, [pc, #8]	; (8009658 <malloc+0xc>)
 800964e:	4601      	mov	r1, r0
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	f000 b823 	b.w	800969c <_malloc_r>
 8009656:	bf00      	nop
 8009658:	20000074 	.word	0x20000074

0800965c <sbrk_aligned>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	4e0e      	ldr	r6, [pc, #56]	; (8009698 <sbrk_aligned+0x3c>)
 8009660:	460c      	mov	r4, r1
 8009662:	6831      	ldr	r1, [r6, #0]
 8009664:	4605      	mov	r5, r0
 8009666:	b911      	cbnz	r1, 800966e <sbrk_aligned+0x12>
 8009668:	f001 f85e 	bl	800a728 <_sbrk_r>
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f001 f859 	bl	800a728 <_sbrk_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d00a      	beq.n	8009690 <sbrk_aligned+0x34>
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d007      	beq.n	8009694 <sbrk_aligned+0x38>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4628      	mov	r0, r5
 8009688:	f001 f84e 	bl	800a728 <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d101      	bne.n	8009694 <sbrk_aligned+0x38>
 8009690:	f04f 34ff 	mov.w	r4, #4294967295
 8009694:	4620      	mov	r0, r4
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	200005b8 	.word	0x200005b8

0800969c <_malloc_r>:
 800969c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	1ccd      	adds	r5, r1, #3
 80096a2:	f025 0503 	bic.w	r5, r5, #3
 80096a6:	3508      	adds	r5, #8
 80096a8:	2d0c      	cmp	r5, #12
 80096aa:	bf38      	it	cc
 80096ac:	250c      	movcc	r5, #12
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	4607      	mov	r7, r0
 80096b2:	db01      	blt.n	80096b8 <_malloc_r+0x1c>
 80096b4:	42a9      	cmp	r1, r5
 80096b6:	d905      	bls.n	80096c4 <_malloc_r+0x28>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	2600      	movs	r6, #0
 80096be:	4630      	mov	r0, r6
 80096c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009798 <_malloc_r+0xfc>
 80096c8:	f000 f868 	bl	800979c <__malloc_lock>
 80096cc:	f8d8 3000 	ldr.w	r3, [r8]
 80096d0:	461c      	mov	r4, r3
 80096d2:	bb5c      	cbnz	r4, 800972c <_malloc_r+0x90>
 80096d4:	4629      	mov	r1, r5
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ffc0 	bl	800965c <sbrk_aligned>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	4604      	mov	r4, r0
 80096e0:	d155      	bne.n	800978e <_malloc_r+0xf2>
 80096e2:	f8d8 4000 	ldr.w	r4, [r8]
 80096e6:	4626      	mov	r6, r4
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	d145      	bne.n	8009778 <_malloc_r+0xdc>
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	d048      	beq.n	8009782 <_malloc_r+0xe6>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	4631      	mov	r1, r6
 80096f4:	4638      	mov	r0, r7
 80096f6:	eb04 0903 	add.w	r9, r4, r3
 80096fa:	f001 f815 	bl	800a728 <_sbrk_r>
 80096fe:	4581      	cmp	r9, r0
 8009700:	d13f      	bne.n	8009782 <_malloc_r+0xe6>
 8009702:	6821      	ldr	r1, [r4, #0]
 8009704:	1a6d      	subs	r5, r5, r1
 8009706:	4629      	mov	r1, r5
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa7 	bl	800965c <sbrk_aligned>
 800970e:	3001      	adds	r0, #1
 8009710:	d037      	beq.n	8009782 <_malloc_r+0xe6>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	442b      	add	r3, r5
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	f8d8 3000 	ldr.w	r3, [r8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d038      	beq.n	8009792 <_malloc_r+0xf6>
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	42a2      	cmp	r2, r4
 8009724:	d12b      	bne.n	800977e <_malloc_r+0xe2>
 8009726:	2200      	movs	r2, #0
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	e00f      	b.n	800974c <_malloc_r+0xb0>
 800972c:	6822      	ldr	r2, [r4, #0]
 800972e:	1b52      	subs	r2, r2, r5
 8009730:	d41f      	bmi.n	8009772 <_malloc_r+0xd6>
 8009732:	2a0b      	cmp	r2, #11
 8009734:	d917      	bls.n	8009766 <_malloc_r+0xca>
 8009736:	1961      	adds	r1, r4, r5
 8009738:	42a3      	cmp	r3, r4
 800973a:	6025      	str	r5, [r4, #0]
 800973c:	bf18      	it	ne
 800973e:	6059      	strne	r1, [r3, #4]
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	bf08      	it	eq
 8009744:	f8c8 1000 	streq.w	r1, [r8]
 8009748:	5162      	str	r2, [r4, r5]
 800974a:	604b      	str	r3, [r1, #4]
 800974c:	4638      	mov	r0, r7
 800974e:	f104 060b 	add.w	r6, r4, #11
 8009752:	f000 f829 	bl	80097a8 <__malloc_unlock>
 8009756:	f026 0607 	bic.w	r6, r6, #7
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	1af2      	subs	r2, r6, r3
 800975e:	d0ae      	beq.n	80096be <_malloc_r+0x22>
 8009760:	1b9b      	subs	r3, r3, r6
 8009762:	50a3      	str	r3, [r4, r2]
 8009764:	e7ab      	b.n	80096be <_malloc_r+0x22>
 8009766:	42a3      	cmp	r3, r4
 8009768:	6862      	ldr	r2, [r4, #4]
 800976a:	d1dd      	bne.n	8009728 <_malloc_r+0x8c>
 800976c:	f8c8 2000 	str.w	r2, [r8]
 8009770:	e7ec      	b.n	800974c <_malloc_r+0xb0>
 8009772:	4623      	mov	r3, r4
 8009774:	6864      	ldr	r4, [r4, #4]
 8009776:	e7ac      	b.n	80096d2 <_malloc_r+0x36>
 8009778:	4634      	mov	r4, r6
 800977a:	6876      	ldr	r6, [r6, #4]
 800977c:	e7b4      	b.n	80096e8 <_malloc_r+0x4c>
 800977e:	4613      	mov	r3, r2
 8009780:	e7cc      	b.n	800971c <_malloc_r+0x80>
 8009782:	230c      	movs	r3, #12
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4638      	mov	r0, r7
 8009788:	f000 f80e 	bl	80097a8 <__malloc_unlock>
 800978c:	e797      	b.n	80096be <_malloc_r+0x22>
 800978e:	6025      	str	r5, [r4, #0]
 8009790:	e7dc      	b.n	800974c <_malloc_r+0xb0>
 8009792:	605b      	str	r3, [r3, #4]
 8009794:	deff      	udf	#255	; 0xff
 8009796:	bf00      	nop
 8009798:	200005b4 	.word	0x200005b4

0800979c <__malloc_lock>:
 800979c:	4801      	ldr	r0, [pc, #4]	; (80097a4 <__malloc_lock+0x8>)
 800979e:	f7ff b886 	b.w	80088ae <__retarget_lock_acquire_recursive>
 80097a2:	bf00      	nop
 80097a4:	200005b0 	.word	0x200005b0

080097a8 <__malloc_unlock>:
 80097a8:	4801      	ldr	r0, [pc, #4]	; (80097b0 <__malloc_unlock+0x8>)
 80097aa:	f7ff b881 	b.w	80088b0 <__retarget_lock_release_recursive>
 80097ae:	bf00      	nop
 80097b0:	200005b0 	.word	0x200005b0

080097b4 <_Balloc>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	69c6      	ldr	r6, [r0, #28]
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	b976      	cbnz	r6, 80097dc <_Balloc+0x28>
 80097be:	2010      	movs	r0, #16
 80097c0:	f7ff ff44 	bl	800964c <malloc>
 80097c4:	4602      	mov	r2, r0
 80097c6:	61e0      	str	r0, [r4, #28]
 80097c8:	b920      	cbnz	r0, 80097d4 <_Balloc+0x20>
 80097ca:	4b18      	ldr	r3, [pc, #96]	; (800982c <_Balloc+0x78>)
 80097cc:	4818      	ldr	r0, [pc, #96]	; (8009830 <_Balloc+0x7c>)
 80097ce:	216b      	movs	r1, #107	; 0x6b
 80097d0:	f7fe fa22 	bl	8007c18 <__assert_func>
 80097d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097d8:	6006      	str	r6, [r0, #0]
 80097da:	60c6      	str	r6, [r0, #12]
 80097dc:	69e6      	ldr	r6, [r4, #28]
 80097de:	68f3      	ldr	r3, [r6, #12]
 80097e0:	b183      	cbz	r3, 8009804 <_Balloc+0x50>
 80097e2:	69e3      	ldr	r3, [r4, #28]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097ea:	b9b8      	cbnz	r0, 800981c <_Balloc+0x68>
 80097ec:	2101      	movs	r1, #1
 80097ee:	fa01 f605 	lsl.w	r6, r1, r5
 80097f2:	1d72      	adds	r2, r6, #5
 80097f4:	0092      	lsls	r2, r2, #2
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 ffb4 	bl	800a764 <_calloc_r>
 80097fc:	b160      	cbz	r0, 8009818 <_Balloc+0x64>
 80097fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009802:	e00e      	b.n	8009822 <_Balloc+0x6e>
 8009804:	2221      	movs	r2, #33	; 0x21
 8009806:	2104      	movs	r1, #4
 8009808:	4620      	mov	r0, r4
 800980a:	f000 ffab 	bl	800a764 <_calloc_r>
 800980e:	69e3      	ldr	r3, [r4, #28]
 8009810:	60f0      	str	r0, [r6, #12]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e4      	bne.n	80097e2 <_Balloc+0x2e>
 8009818:	2000      	movs	r0, #0
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	6802      	ldr	r2, [r0, #0]
 800981e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009822:	2300      	movs	r3, #0
 8009824:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009828:	e7f7      	b.n	800981a <_Balloc+0x66>
 800982a:	bf00      	nop
 800982c:	0800abe1 	.word	0x0800abe1
 8009830:	0800ac61 	.word	0x0800ac61

08009834 <_Bfree>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	69c6      	ldr	r6, [r0, #28]
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b976      	cbnz	r6, 800985c <_Bfree+0x28>
 800983e:	2010      	movs	r0, #16
 8009840:	f7ff ff04 	bl	800964c <malloc>
 8009844:	4602      	mov	r2, r0
 8009846:	61e8      	str	r0, [r5, #28]
 8009848:	b920      	cbnz	r0, 8009854 <_Bfree+0x20>
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <_Bfree+0x3c>)
 800984c:	4809      	ldr	r0, [pc, #36]	; (8009874 <_Bfree+0x40>)
 800984e:	218f      	movs	r1, #143	; 0x8f
 8009850:	f7fe f9e2 	bl	8007c18 <__assert_func>
 8009854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009858:	6006      	str	r6, [r0, #0]
 800985a:	60c6      	str	r6, [r0, #12]
 800985c:	b13c      	cbz	r4, 800986e <_Bfree+0x3a>
 800985e:	69eb      	ldr	r3, [r5, #28]
 8009860:	6862      	ldr	r2, [r4, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009868:	6021      	str	r1, [r4, #0]
 800986a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	0800abe1 	.word	0x0800abe1
 8009874:	0800ac61 	.word	0x0800ac61

08009878 <__multadd>:
 8009878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987c:	690d      	ldr	r5, [r1, #16]
 800987e:	4607      	mov	r7, r0
 8009880:	460c      	mov	r4, r1
 8009882:	461e      	mov	r6, r3
 8009884:	f101 0c14 	add.w	ip, r1, #20
 8009888:	2000      	movs	r0, #0
 800988a:	f8dc 3000 	ldr.w	r3, [ip]
 800988e:	b299      	uxth	r1, r3
 8009890:	fb02 6101 	mla	r1, r2, r1, r6
 8009894:	0c1e      	lsrs	r6, r3, #16
 8009896:	0c0b      	lsrs	r3, r1, #16
 8009898:	fb02 3306 	mla	r3, r2, r6, r3
 800989c:	b289      	uxth	r1, r1
 800989e:	3001      	adds	r0, #1
 80098a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098a4:	4285      	cmp	r5, r0
 80098a6:	f84c 1b04 	str.w	r1, [ip], #4
 80098aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098ae:	dcec      	bgt.n	800988a <__multadd+0x12>
 80098b0:	b30e      	cbz	r6, 80098f6 <__multadd+0x7e>
 80098b2:	68a3      	ldr	r3, [r4, #8]
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	dc19      	bgt.n	80098ec <__multadd+0x74>
 80098b8:	6861      	ldr	r1, [r4, #4]
 80098ba:	4638      	mov	r0, r7
 80098bc:	3101      	adds	r1, #1
 80098be:	f7ff ff79 	bl	80097b4 <_Balloc>
 80098c2:	4680      	mov	r8, r0
 80098c4:	b928      	cbnz	r0, 80098d2 <__multadd+0x5a>
 80098c6:	4602      	mov	r2, r0
 80098c8:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <__multadd+0x84>)
 80098ca:	480d      	ldr	r0, [pc, #52]	; (8009900 <__multadd+0x88>)
 80098cc:	21ba      	movs	r1, #186	; 0xba
 80098ce:	f7fe f9a3 	bl	8007c18 <__assert_func>
 80098d2:	6922      	ldr	r2, [r4, #16]
 80098d4:	3202      	adds	r2, #2
 80098d6:	f104 010c 	add.w	r1, r4, #12
 80098da:	0092      	lsls	r2, r2, #2
 80098dc:	300c      	adds	r0, #12
 80098de:	f000 ff33 	bl	800a748 <memcpy>
 80098e2:	4621      	mov	r1, r4
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7ff ffa5 	bl	8009834 <_Bfree>
 80098ea:	4644      	mov	r4, r8
 80098ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098f0:	3501      	adds	r5, #1
 80098f2:	615e      	str	r6, [r3, #20]
 80098f4:	6125      	str	r5, [r4, #16]
 80098f6:	4620      	mov	r0, r4
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	0800ac50 	.word	0x0800ac50
 8009900:	0800ac61 	.word	0x0800ac61

08009904 <__hi0bits>:
 8009904:	0c03      	lsrs	r3, r0, #16
 8009906:	041b      	lsls	r3, r3, #16
 8009908:	b9d3      	cbnz	r3, 8009940 <__hi0bits+0x3c>
 800990a:	0400      	lsls	r0, r0, #16
 800990c:	2310      	movs	r3, #16
 800990e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009912:	bf04      	itt	eq
 8009914:	0200      	lsleq	r0, r0, #8
 8009916:	3308      	addeq	r3, #8
 8009918:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800991c:	bf04      	itt	eq
 800991e:	0100      	lsleq	r0, r0, #4
 8009920:	3304      	addeq	r3, #4
 8009922:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009926:	bf04      	itt	eq
 8009928:	0080      	lsleq	r0, r0, #2
 800992a:	3302      	addeq	r3, #2
 800992c:	2800      	cmp	r0, #0
 800992e:	db05      	blt.n	800993c <__hi0bits+0x38>
 8009930:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009934:	f103 0301 	add.w	r3, r3, #1
 8009938:	bf08      	it	eq
 800993a:	2320      	moveq	r3, #32
 800993c:	4618      	mov	r0, r3
 800993e:	4770      	bx	lr
 8009940:	2300      	movs	r3, #0
 8009942:	e7e4      	b.n	800990e <__hi0bits+0xa>

08009944 <__lo0bits>:
 8009944:	6803      	ldr	r3, [r0, #0]
 8009946:	f013 0207 	ands.w	r2, r3, #7
 800994a:	d00c      	beq.n	8009966 <__lo0bits+0x22>
 800994c:	07d9      	lsls	r1, r3, #31
 800994e:	d422      	bmi.n	8009996 <__lo0bits+0x52>
 8009950:	079a      	lsls	r2, r3, #30
 8009952:	bf49      	itett	mi
 8009954:	085b      	lsrmi	r3, r3, #1
 8009956:	089b      	lsrpl	r3, r3, #2
 8009958:	6003      	strmi	r3, [r0, #0]
 800995a:	2201      	movmi	r2, #1
 800995c:	bf5c      	itt	pl
 800995e:	6003      	strpl	r3, [r0, #0]
 8009960:	2202      	movpl	r2, #2
 8009962:	4610      	mov	r0, r2
 8009964:	4770      	bx	lr
 8009966:	b299      	uxth	r1, r3
 8009968:	b909      	cbnz	r1, 800996e <__lo0bits+0x2a>
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	2210      	movs	r2, #16
 800996e:	b2d9      	uxtb	r1, r3
 8009970:	b909      	cbnz	r1, 8009976 <__lo0bits+0x32>
 8009972:	3208      	adds	r2, #8
 8009974:	0a1b      	lsrs	r3, r3, #8
 8009976:	0719      	lsls	r1, r3, #28
 8009978:	bf04      	itt	eq
 800997a:	091b      	lsreq	r3, r3, #4
 800997c:	3204      	addeq	r2, #4
 800997e:	0799      	lsls	r1, r3, #30
 8009980:	bf04      	itt	eq
 8009982:	089b      	lsreq	r3, r3, #2
 8009984:	3202      	addeq	r2, #2
 8009986:	07d9      	lsls	r1, r3, #31
 8009988:	d403      	bmi.n	8009992 <__lo0bits+0x4e>
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	f102 0201 	add.w	r2, r2, #1
 8009990:	d003      	beq.n	800999a <__lo0bits+0x56>
 8009992:	6003      	str	r3, [r0, #0]
 8009994:	e7e5      	b.n	8009962 <__lo0bits+0x1e>
 8009996:	2200      	movs	r2, #0
 8009998:	e7e3      	b.n	8009962 <__lo0bits+0x1e>
 800999a:	2220      	movs	r2, #32
 800999c:	e7e1      	b.n	8009962 <__lo0bits+0x1e>
	...

080099a0 <__i2b>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	460c      	mov	r4, r1
 80099a4:	2101      	movs	r1, #1
 80099a6:	f7ff ff05 	bl	80097b4 <_Balloc>
 80099aa:	4602      	mov	r2, r0
 80099ac:	b928      	cbnz	r0, 80099ba <__i2b+0x1a>
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <__i2b+0x24>)
 80099b0:	4805      	ldr	r0, [pc, #20]	; (80099c8 <__i2b+0x28>)
 80099b2:	f240 1145 	movw	r1, #325	; 0x145
 80099b6:	f7fe f92f 	bl	8007c18 <__assert_func>
 80099ba:	2301      	movs	r3, #1
 80099bc:	6144      	str	r4, [r0, #20]
 80099be:	6103      	str	r3, [r0, #16]
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	bf00      	nop
 80099c4:	0800ac50 	.word	0x0800ac50
 80099c8:	0800ac61 	.word	0x0800ac61

080099cc <__multiply>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	4691      	mov	r9, r2
 80099d2:	690a      	ldr	r2, [r1, #16]
 80099d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	bfb8      	it	lt
 80099dc:	460b      	movlt	r3, r1
 80099de:	460c      	mov	r4, r1
 80099e0:	bfbc      	itt	lt
 80099e2:	464c      	movlt	r4, r9
 80099e4:	4699      	movlt	r9, r3
 80099e6:	6927      	ldr	r7, [r4, #16]
 80099e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099ec:	68a3      	ldr	r3, [r4, #8]
 80099ee:	6861      	ldr	r1, [r4, #4]
 80099f0:	eb07 060a 	add.w	r6, r7, sl
 80099f4:	42b3      	cmp	r3, r6
 80099f6:	b085      	sub	sp, #20
 80099f8:	bfb8      	it	lt
 80099fa:	3101      	addlt	r1, #1
 80099fc:	f7ff feda 	bl	80097b4 <_Balloc>
 8009a00:	b930      	cbnz	r0, 8009a10 <__multiply+0x44>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b44      	ldr	r3, [pc, #272]	; (8009b18 <__multiply+0x14c>)
 8009a06:	4845      	ldr	r0, [pc, #276]	; (8009b1c <__multiply+0x150>)
 8009a08:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009a0c:	f7fe f904 	bl	8007c18 <__assert_func>
 8009a10:	f100 0514 	add.w	r5, r0, #20
 8009a14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a18:	462b      	mov	r3, r5
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4543      	cmp	r3, r8
 8009a1e:	d321      	bcc.n	8009a64 <__multiply+0x98>
 8009a20:	f104 0314 	add.w	r3, r4, #20
 8009a24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a28:	f109 0314 	add.w	r3, r9, #20
 8009a2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a30:	9202      	str	r2, [sp, #8]
 8009a32:	1b3a      	subs	r2, r7, r4
 8009a34:	3a15      	subs	r2, #21
 8009a36:	f022 0203 	bic.w	r2, r2, #3
 8009a3a:	3204      	adds	r2, #4
 8009a3c:	f104 0115 	add.w	r1, r4, #21
 8009a40:	428f      	cmp	r7, r1
 8009a42:	bf38      	it	cc
 8009a44:	2204      	movcc	r2, #4
 8009a46:	9201      	str	r2, [sp, #4]
 8009a48:	9a02      	ldr	r2, [sp, #8]
 8009a4a:	9303      	str	r3, [sp, #12]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d80c      	bhi.n	8009a6a <__multiply+0x9e>
 8009a50:	2e00      	cmp	r6, #0
 8009a52:	dd03      	ble.n	8009a5c <__multiply+0x90>
 8009a54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05b      	beq.n	8009b14 <__multiply+0x148>
 8009a5c:	6106      	str	r6, [r0, #16]
 8009a5e:	b005      	add	sp, #20
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	f843 2b04 	str.w	r2, [r3], #4
 8009a68:	e7d8      	b.n	8009a1c <__multiply+0x50>
 8009a6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a6e:	f1ba 0f00 	cmp.w	sl, #0
 8009a72:	d024      	beq.n	8009abe <__multiply+0xf2>
 8009a74:	f104 0e14 	add.w	lr, r4, #20
 8009a78:	46a9      	mov	r9, r5
 8009a7a:	f04f 0c00 	mov.w	ip, #0
 8009a7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a82:	f8d9 1000 	ldr.w	r1, [r9]
 8009a86:	fa1f fb82 	uxth.w	fp, r2
 8009a8a:	b289      	uxth	r1, r1
 8009a8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a94:	f8d9 2000 	ldr.w	r2, [r9]
 8009a98:	4461      	add	r1, ip
 8009a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009aa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aa6:	b289      	uxth	r1, r1
 8009aa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009aac:	4577      	cmp	r7, lr
 8009aae:	f849 1b04 	str.w	r1, [r9], #4
 8009ab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ab6:	d8e2      	bhi.n	8009a7e <__multiply+0xb2>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	f845 c002 	str.w	ip, [r5, r2]
 8009abe:	9a03      	ldr	r2, [sp, #12]
 8009ac0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	f1b9 0f00 	cmp.w	r9, #0
 8009aca:	d021      	beq.n	8009b10 <__multiply+0x144>
 8009acc:	6829      	ldr	r1, [r5, #0]
 8009ace:	f104 0c14 	add.w	ip, r4, #20
 8009ad2:	46ae      	mov	lr, r5
 8009ad4:	f04f 0a00 	mov.w	sl, #0
 8009ad8:	f8bc b000 	ldrh.w	fp, [ip]
 8009adc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ae0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ae4:	4452      	add	r2, sl
 8009ae6:	b289      	uxth	r1, r1
 8009ae8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009aec:	f84e 1b04 	str.w	r1, [lr], #4
 8009af0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009af4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009af8:	f8be 1000 	ldrh.w	r1, [lr]
 8009afc:	fb09 110a 	mla	r1, r9, sl, r1
 8009b00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009b04:	4567      	cmp	r7, ip
 8009b06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b0a:	d8e5      	bhi.n	8009ad8 <__multiply+0x10c>
 8009b0c:	9a01      	ldr	r2, [sp, #4]
 8009b0e:	50a9      	str	r1, [r5, r2]
 8009b10:	3504      	adds	r5, #4
 8009b12:	e799      	b.n	8009a48 <__multiply+0x7c>
 8009b14:	3e01      	subs	r6, #1
 8009b16:	e79b      	b.n	8009a50 <__multiply+0x84>
 8009b18:	0800ac50 	.word	0x0800ac50
 8009b1c:	0800ac61 	.word	0x0800ac61

08009b20 <__pow5mult>:
 8009b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b24:	4615      	mov	r5, r2
 8009b26:	f012 0203 	ands.w	r2, r2, #3
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460f      	mov	r7, r1
 8009b2e:	d007      	beq.n	8009b40 <__pow5mult+0x20>
 8009b30:	4c25      	ldr	r4, [pc, #148]	; (8009bc8 <__pow5mult+0xa8>)
 8009b32:	3a01      	subs	r2, #1
 8009b34:	2300      	movs	r3, #0
 8009b36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b3a:	f7ff fe9d 	bl	8009878 <__multadd>
 8009b3e:	4607      	mov	r7, r0
 8009b40:	10ad      	asrs	r5, r5, #2
 8009b42:	d03d      	beq.n	8009bc0 <__pow5mult+0xa0>
 8009b44:	69f4      	ldr	r4, [r6, #28]
 8009b46:	b97c      	cbnz	r4, 8009b68 <__pow5mult+0x48>
 8009b48:	2010      	movs	r0, #16
 8009b4a:	f7ff fd7f 	bl	800964c <malloc>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	61f0      	str	r0, [r6, #28]
 8009b52:	b928      	cbnz	r0, 8009b60 <__pow5mult+0x40>
 8009b54:	4b1d      	ldr	r3, [pc, #116]	; (8009bcc <__pow5mult+0xac>)
 8009b56:	481e      	ldr	r0, [pc, #120]	; (8009bd0 <__pow5mult+0xb0>)
 8009b58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009b5c:	f7fe f85c 	bl	8007c18 <__assert_func>
 8009b60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b64:	6004      	str	r4, [r0, #0]
 8009b66:	60c4      	str	r4, [r0, #12]
 8009b68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009b6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b70:	b94c      	cbnz	r4, 8009b86 <__pow5mult+0x66>
 8009b72:	f240 2171 	movw	r1, #625	; 0x271
 8009b76:	4630      	mov	r0, r6
 8009b78:	f7ff ff12 	bl	80099a0 <__i2b>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b82:	4604      	mov	r4, r0
 8009b84:	6003      	str	r3, [r0, #0]
 8009b86:	f04f 0900 	mov.w	r9, #0
 8009b8a:	07eb      	lsls	r3, r5, #31
 8009b8c:	d50a      	bpl.n	8009ba4 <__pow5mult+0x84>
 8009b8e:	4639      	mov	r1, r7
 8009b90:	4622      	mov	r2, r4
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff ff1a 	bl	80099cc <__multiply>
 8009b98:	4639      	mov	r1, r7
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7ff fe49 	bl	8009834 <_Bfree>
 8009ba2:	4647      	mov	r7, r8
 8009ba4:	106d      	asrs	r5, r5, #1
 8009ba6:	d00b      	beq.n	8009bc0 <__pow5mult+0xa0>
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	b938      	cbnz	r0, 8009bbc <__pow5mult+0x9c>
 8009bac:	4622      	mov	r2, r4
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f7ff ff0b 	bl	80099cc <__multiply>
 8009bb6:	6020      	str	r0, [r4, #0]
 8009bb8:	f8c0 9000 	str.w	r9, [r0]
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	e7e4      	b.n	8009b8a <__pow5mult+0x6a>
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	bf00      	nop
 8009bc8:	0800adb0 	.word	0x0800adb0
 8009bcc:	0800abe1 	.word	0x0800abe1
 8009bd0:	0800ac61 	.word	0x0800ac61

08009bd4 <__lshift>:
 8009bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6849      	ldr	r1, [r1, #4]
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	4607      	mov	r7, r0
 8009be6:	4691      	mov	r9, r2
 8009be8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bec:	f108 0601 	add.w	r6, r8, #1
 8009bf0:	42b3      	cmp	r3, r6
 8009bf2:	db0b      	blt.n	8009c0c <__lshift+0x38>
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7ff fddd 	bl	80097b4 <_Balloc>
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	b948      	cbnz	r0, 8009c12 <__lshift+0x3e>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <__lshift+0xd0>)
 8009c02:	4829      	ldr	r0, [pc, #164]	; (8009ca8 <__lshift+0xd4>)
 8009c04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c08:	f7fe f806 	bl	8007c18 <__assert_func>
 8009c0c:	3101      	adds	r1, #1
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	e7ee      	b.n	8009bf0 <__lshift+0x1c>
 8009c12:	2300      	movs	r3, #0
 8009c14:	f100 0114 	add.w	r1, r0, #20
 8009c18:	f100 0210 	add.w	r2, r0, #16
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	4553      	cmp	r3, sl
 8009c20:	db33      	blt.n	8009c8a <__lshift+0xb6>
 8009c22:	6920      	ldr	r0, [r4, #16]
 8009c24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c28:	f104 0314 	add.w	r3, r4, #20
 8009c2c:	f019 091f 	ands.w	r9, r9, #31
 8009c30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c38:	d02b      	beq.n	8009c92 <__lshift+0xbe>
 8009c3a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c3e:	468a      	mov	sl, r1
 8009c40:	2200      	movs	r2, #0
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	fa00 f009 	lsl.w	r0, r0, r9
 8009c48:	4310      	orrs	r0, r2
 8009c4a:	f84a 0b04 	str.w	r0, [sl], #4
 8009c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c52:	459c      	cmp	ip, r3
 8009c54:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c58:	d8f3      	bhi.n	8009c42 <__lshift+0x6e>
 8009c5a:	ebac 0304 	sub.w	r3, ip, r4
 8009c5e:	3b15      	subs	r3, #21
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	3304      	adds	r3, #4
 8009c66:	f104 0015 	add.w	r0, r4, #21
 8009c6a:	4584      	cmp	ip, r0
 8009c6c:	bf38      	it	cc
 8009c6e:	2304      	movcc	r3, #4
 8009c70:	50ca      	str	r2, [r1, r3]
 8009c72:	b10a      	cbz	r2, 8009c78 <__lshift+0xa4>
 8009c74:	f108 0602 	add.w	r6, r8, #2
 8009c78:	3e01      	subs	r6, #1
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	612e      	str	r6, [r5, #16]
 8009c7e:	4621      	mov	r1, r4
 8009c80:	f7ff fdd8 	bl	8009834 <_Bfree>
 8009c84:	4628      	mov	r0, r5
 8009c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c8e:	3301      	adds	r3, #1
 8009c90:	e7c5      	b.n	8009c1e <__lshift+0x4a>
 8009c92:	3904      	subs	r1, #4
 8009c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c98:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c9c:	459c      	cmp	ip, r3
 8009c9e:	d8f9      	bhi.n	8009c94 <__lshift+0xc0>
 8009ca0:	e7ea      	b.n	8009c78 <__lshift+0xa4>
 8009ca2:	bf00      	nop
 8009ca4:	0800ac50 	.word	0x0800ac50
 8009ca8:	0800ac61 	.word	0x0800ac61

08009cac <__mcmp>:
 8009cac:	b530      	push	{r4, r5, lr}
 8009cae:	6902      	ldr	r2, [r0, #16]
 8009cb0:	690c      	ldr	r4, [r1, #16]
 8009cb2:	1b12      	subs	r2, r2, r4
 8009cb4:	d10e      	bne.n	8009cd4 <__mcmp+0x28>
 8009cb6:	f100 0314 	add.w	r3, r0, #20
 8009cba:	3114      	adds	r1, #20
 8009cbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ccc:	42a5      	cmp	r5, r4
 8009cce:	d003      	beq.n	8009cd8 <__mcmp+0x2c>
 8009cd0:	d305      	bcc.n	8009cde <__mcmp+0x32>
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	bd30      	pop	{r4, r5, pc}
 8009cd8:	4283      	cmp	r3, r0
 8009cda:	d3f3      	bcc.n	8009cc4 <__mcmp+0x18>
 8009cdc:	e7fa      	b.n	8009cd4 <__mcmp+0x28>
 8009cde:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce2:	e7f7      	b.n	8009cd4 <__mcmp+0x28>

08009ce4 <__mdiff>:
 8009ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	4606      	mov	r6, r0
 8009cec:	4611      	mov	r1, r2
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4690      	mov	r8, r2
 8009cf2:	f7ff ffdb 	bl	8009cac <__mcmp>
 8009cf6:	1e05      	subs	r5, r0, #0
 8009cf8:	d110      	bne.n	8009d1c <__mdiff+0x38>
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7ff fd59 	bl	80097b4 <_Balloc>
 8009d02:	b930      	cbnz	r0, 8009d12 <__mdiff+0x2e>
 8009d04:	4b3a      	ldr	r3, [pc, #232]	; (8009df0 <__mdiff+0x10c>)
 8009d06:	4602      	mov	r2, r0
 8009d08:	f240 2137 	movw	r1, #567	; 0x237
 8009d0c:	4839      	ldr	r0, [pc, #228]	; (8009df4 <__mdiff+0x110>)
 8009d0e:	f7fd ff83 	bl	8007c18 <__assert_func>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	bfa4      	itt	ge
 8009d1e:	4643      	movge	r3, r8
 8009d20:	46a0      	movge	r8, r4
 8009d22:	4630      	mov	r0, r6
 8009d24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d28:	bfa6      	itte	ge
 8009d2a:	461c      	movge	r4, r3
 8009d2c:	2500      	movge	r5, #0
 8009d2e:	2501      	movlt	r5, #1
 8009d30:	f7ff fd40 	bl	80097b4 <_Balloc>
 8009d34:	b920      	cbnz	r0, 8009d40 <__mdiff+0x5c>
 8009d36:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <__mdiff+0x10c>)
 8009d38:	4602      	mov	r2, r0
 8009d3a:	f240 2145 	movw	r1, #581	; 0x245
 8009d3e:	e7e5      	b.n	8009d0c <__mdiff+0x28>
 8009d40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d44:	6926      	ldr	r6, [r4, #16]
 8009d46:	60c5      	str	r5, [r0, #12]
 8009d48:	f104 0914 	add.w	r9, r4, #20
 8009d4c:	f108 0514 	add.w	r5, r8, #20
 8009d50:	f100 0e14 	add.w	lr, r0, #20
 8009d54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d5c:	f108 0210 	add.w	r2, r8, #16
 8009d60:	46f2      	mov	sl, lr
 8009d62:	2100      	movs	r1, #0
 8009d64:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d6c:	fa11 f88b 	uxtah	r8, r1, fp
 8009d70:	b299      	uxth	r1, r3
 8009d72:	0c1b      	lsrs	r3, r3, #16
 8009d74:	eba8 0801 	sub.w	r8, r8, r1
 8009d78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d80:	fa1f f888 	uxth.w	r8, r8
 8009d84:	1419      	asrs	r1, r3, #16
 8009d86:	454e      	cmp	r6, r9
 8009d88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d8c:	f84a 3b04 	str.w	r3, [sl], #4
 8009d90:	d8e8      	bhi.n	8009d64 <__mdiff+0x80>
 8009d92:	1b33      	subs	r3, r6, r4
 8009d94:	3b15      	subs	r3, #21
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	3415      	adds	r4, #21
 8009d9e:	42a6      	cmp	r6, r4
 8009da0:	bf38      	it	cc
 8009da2:	2304      	movcc	r3, #4
 8009da4:	441d      	add	r5, r3
 8009da6:	4473      	add	r3, lr
 8009da8:	469e      	mov	lr, r3
 8009daa:	462e      	mov	r6, r5
 8009dac:	4566      	cmp	r6, ip
 8009dae:	d30e      	bcc.n	8009dce <__mdiff+0xea>
 8009db0:	f10c 0203 	add.w	r2, ip, #3
 8009db4:	1b52      	subs	r2, r2, r5
 8009db6:	f022 0203 	bic.w	r2, r2, #3
 8009dba:	3d03      	subs	r5, #3
 8009dbc:	45ac      	cmp	ip, r5
 8009dbe:	bf38      	it	cc
 8009dc0:	2200      	movcc	r2, #0
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009dc8:	b17a      	cbz	r2, 8009dea <__mdiff+0x106>
 8009dca:	6107      	str	r7, [r0, #16]
 8009dcc:	e7a4      	b.n	8009d18 <__mdiff+0x34>
 8009dce:	f856 8b04 	ldr.w	r8, [r6], #4
 8009dd2:	fa11 f288 	uxtah	r2, r1, r8
 8009dd6:	1414      	asrs	r4, r2, #16
 8009dd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ddc:	b292      	uxth	r2, r2
 8009dde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009de2:	f84e 2b04 	str.w	r2, [lr], #4
 8009de6:	1421      	asrs	r1, r4, #16
 8009de8:	e7e0      	b.n	8009dac <__mdiff+0xc8>
 8009dea:	3f01      	subs	r7, #1
 8009dec:	e7ea      	b.n	8009dc4 <__mdiff+0xe0>
 8009dee:	bf00      	nop
 8009df0:	0800ac50 	.word	0x0800ac50
 8009df4:	0800ac61 	.word	0x0800ac61

08009df8 <__d2b>:
 8009df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	2101      	movs	r1, #1
 8009e00:	ec59 8b10 	vmov	r8, r9, d0
 8009e04:	4616      	mov	r6, r2
 8009e06:	f7ff fcd5 	bl	80097b4 <_Balloc>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	b930      	cbnz	r0, 8009e1c <__d2b+0x24>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	4b24      	ldr	r3, [pc, #144]	; (8009ea4 <__d2b+0xac>)
 8009e12:	4825      	ldr	r0, [pc, #148]	; (8009ea8 <__d2b+0xb0>)
 8009e14:	f240 310f 	movw	r1, #783	; 0x30f
 8009e18:	f7fd fefe 	bl	8007c18 <__assert_func>
 8009e1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e24:	bb2d      	cbnz	r5, 8009e72 <__d2b+0x7a>
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	f1b8 0300 	subs.w	r3, r8, #0
 8009e2c:	d026      	beq.n	8009e7c <__d2b+0x84>
 8009e2e:	4668      	mov	r0, sp
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	f7ff fd87 	bl	8009944 <__lo0bits>
 8009e36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e3a:	b1e8      	cbz	r0, 8009e78 <__d2b+0x80>
 8009e3c:	f1c0 0320 	rsb	r3, r0, #32
 8009e40:	fa02 f303 	lsl.w	r3, r2, r3
 8009e44:	430b      	orrs	r3, r1
 8009e46:	40c2      	lsrs	r2, r0
 8009e48:	6163      	str	r3, [r4, #20]
 8009e4a:	9201      	str	r2, [sp, #4]
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	61a3      	str	r3, [r4, #24]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bf14      	ite	ne
 8009e54:	2202      	movne	r2, #2
 8009e56:	2201      	moveq	r2, #1
 8009e58:	6122      	str	r2, [r4, #16]
 8009e5a:	b1bd      	cbz	r5, 8009e8c <__d2b+0x94>
 8009e5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e60:	4405      	add	r5, r0
 8009e62:	603d      	str	r5, [r7, #0]
 8009e64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e68:	6030      	str	r0, [r6, #0]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	b003      	add	sp, #12
 8009e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e76:	e7d6      	b.n	8009e26 <__d2b+0x2e>
 8009e78:	6161      	str	r1, [r4, #20]
 8009e7a:	e7e7      	b.n	8009e4c <__d2b+0x54>
 8009e7c:	a801      	add	r0, sp, #4
 8009e7e:	f7ff fd61 	bl	8009944 <__lo0bits>
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	6163      	str	r3, [r4, #20]
 8009e86:	3020      	adds	r0, #32
 8009e88:	2201      	movs	r2, #1
 8009e8a:	e7e5      	b.n	8009e58 <__d2b+0x60>
 8009e8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e94:	6038      	str	r0, [r7, #0]
 8009e96:	6918      	ldr	r0, [r3, #16]
 8009e98:	f7ff fd34 	bl	8009904 <__hi0bits>
 8009e9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ea0:	e7e2      	b.n	8009e68 <__d2b+0x70>
 8009ea2:	bf00      	nop
 8009ea4:	0800ac50 	.word	0x0800ac50
 8009ea8:	0800ac61 	.word	0x0800ac61

08009eac <__ssputs_r>:
 8009eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb0:	688e      	ldr	r6, [r1, #8]
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	42be      	cmp	r6, r7
 8009eb6:	680b      	ldr	r3, [r1, #0]
 8009eb8:	4682      	mov	sl, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4690      	mov	r8, r2
 8009ebe:	d82c      	bhi.n	8009f1a <__ssputs_r+0x6e>
 8009ec0:	898a      	ldrh	r2, [r1, #12]
 8009ec2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ec6:	d026      	beq.n	8009f16 <__ssputs_r+0x6a>
 8009ec8:	6965      	ldr	r5, [r4, #20]
 8009eca:	6909      	ldr	r1, [r1, #16]
 8009ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ed0:	eba3 0901 	sub.w	r9, r3, r1
 8009ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ed8:	1c7b      	adds	r3, r7, #1
 8009eda:	444b      	add	r3, r9
 8009edc:	106d      	asrs	r5, r5, #1
 8009ede:	429d      	cmp	r5, r3
 8009ee0:	bf38      	it	cc
 8009ee2:	461d      	movcc	r5, r3
 8009ee4:	0553      	lsls	r3, r2, #21
 8009ee6:	d527      	bpl.n	8009f38 <__ssputs_r+0x8c>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f7ff fbd7 	bl	800969c <_malloc_r>
 8009eee:	4606      	mov	r6, r0
 8009ef0:	b360      	cbz	r0, 8009f4c <__ssputs_r+0xa0>
 8009ef2:	6921      	ldr	r1, [r4, #16]
 8009ef4:	464a      	mov	r2, r9
 8009ef6:	f000 fc27 	bl	800a748 <memcpy>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	6126      	str	r6, [r4, #16]
 8009f08:	6165      	str	r5, [r4, #20]
 8009f0a:	444e      	add	r6, r9
 8009f0c:	eba5 0509 	sub.w	r5, r5, r9
 8009f10:	6026      	str	r6, [r4, #0]
 8009f12:	60a5      	str	r5, [r4, #8]
 8009f14:	463e      	mov	r6, r7
 8009f16:	42be      	cmp	r6, r7
 8009f18:	d900      	bls.n	8009f1c <__ssputs_r+0x70>
 8009f1a:	463e      	mov	r6, r7
 8009f1c:	6820      	ldr	r0, [r4, #0]
 8009f1e:	4632      	mov	r2, r6
 8009f20:	4641      	mov	r1, r8
 8009f22:	f000 fba3 	bl	800a66c <memmove>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	1b9b      	subs	r3, r3, r6
 8009f2a:	60a3      	str	r3, [r4, #8]
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	4433      	add	r3, r6
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	2000      	movs	r0, #0
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	462a      	mov	r2, r5
 8009f3a:	f000 fc3b 	bl	800a7b4 <_realloc_r>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d1e0      	bne.n	8009f06 <__ssputs_r+0x5a>
 8009f44:	6921      	ldr	r1, [r4, #16]
 8009f46:	4650      	mov	r0, sl
 8009f48:	f7ff fb34 	bl	80095b4 <_free_r>
 8009f4c:	230c      	movs	r3, #12
 8009f4e:	f8ca 3000 	str.w	r3, [sl]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	e7e9      	b.n	8009f34 <__ssputs_r+0x88>

08009f60 <_svfiprintf_r>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	4698      	mov	r8, r3
 8009f66:	898b      	ldrh	r3, [r1, #12]
 8009f68:	061b      	lsls	r3, r3, #24
 8009f6a:	b09d      	sub	sp, #116	; 0x74
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	d50e      	bpl.n	8009f92 <_svfiprintf_r+0x32>
 8009f74:	690b      	ldr	r3, [r1, #16]
 8009f76:	b963      	cbnz	r3, 8009f92 <_svfiprintf_r+0x32>
 8009f78:	2140      	movs	r1, #64	; 0x40
 8009f7a:	f7ff fb8f 	bl	800969c <_malloc_r>
 8009f7e:	6028      	str	r0, [r5, #0]
 8009f80:	6128      	str	r0, [r5, #16]
 8009f82:	b920      	cbnz	r0, 8009f8e <_svfiprintf_r+0x2e>
 8009f84:	230c      	movs	r3, #12
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	e0d0      	b.n	800a130 <_svfiprintf_r+0x1d0>
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	616b      	str	r3, [r5, #20]
 8009f92:	2300      	movs	r3, #0
 8009f94:	9309      	str	r3, [sp, #36]	; 0x24
 8009f96:	2320      	movs	r3, #32
 8009f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa0:	2330      	movs	r3, #48	; 0x30
 8009fa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a148 <_svfiprintf_r+0x1e8>
 8009fa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009faa:	f04f 0901 	mov.w	r9, #1
 8009fae:	4623      	mov	r3, r4
 8009fb0:	469a      	mov	sl, r3
 8009fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb6:	b10a      	cbz	r2, 8009fbc <_svfiprintf_r+0x5c>
 8009fb8:	2a25      	cmp	r2, #37	; 0x25
 8009fba:	d1f9      	bne.n	8009fb0 <_svfiprintf_r+0x50>
 8009fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc0:	d00b      	beq.n	8009fda <_svfiprintf_r+0x7a>
 8009fc2:	465b      	mov	r3, fp
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff ff6f 	bl	8009eac <__ssputs_r>
 8009fce:	3001      	adds	r0, #1
 8009fd0:	f000 80a9 	beq.w	800a126 <_svfiprintf_r+0x1c6>
 8009fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd6:	445a      	add	r2, fp
 8009fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8009fda:	f89a 3000 	ldrb.w	r3, [sl]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 80a1 	beq.w	800a126 <_svfiprintf_r+0x1c6>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fee:	f10a 0a01 	add.w	sl, sl, #1
 8009ff2:	9304      	str	r3, [sp, #16]
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffc:	4654      	mov	r4, sl
 8009ffe:	2205      	movs	r2, #5
 800a000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a004:	4850      	ldr	r0, [pc, #320]	; (800a148 <_svfiprintf_r+0x1e8>)
 800a006:	f7f6 f8e3 	bl	80001d0 <memchr>
 800a00a:	9a04      	ldr	r2, [sp, #16]
 800a00c:	b9d8      	cbnz	r0, 800a046 <_svfiprintf_r+0xe6>
 800a00e:	06d0      	lsls	r0, r2, #27
 800a010:	bf44      	itt	mi
 800a012:	2320      	movmi	r3, #32
 800a014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a018:	0711      	lsls	r1, r2, #28
 800a01a:	bf44      	itt	mi
 800a01c:	232b      	movmi	r3, #43	; 0x2b
 800a01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a022:	f89a 3000 	ldrb.w	r3, [sl]
 800a026:	2b2a      	cmp	r3, #42	; 0x2a
 800a028:	d015      	beq.n	800a056 <_svfiprintf_r+0xf6>
 800a02a:	9a07      	ldr	r2, [sp, #28]
 800a02c:	4654      	mov	r4, sl
 800a02e:	2000      	movs	r0, #0
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	4621      	mov	r1, r4
 800a036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03a:	3b30      	subs	r3, #48	; 0x30
 800a03c:	2b09      	cmp	r3, #9
 800a03e:	d94d      	bls.n	800a0dc <_svfiprintf_r+0x17c>
 800a040:	b1b0      	cbz	r0, 800a070 <_svfiprintf_r+0x110>
 800a042:	9207      	str	r2, [sp, #28]
 800a044:	e014      	b.n	800a070 <_svfiprintf_r+0x110>
 800a046:	eba0 0308 	sub.w	r3, r0, r8
 800a04a:	fa09 f303 	lsl.w	r3, r9, r3
 800a04e:	4313      	orrs	r3, r2
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	46a2      	mov	sl, r4
 800a054:	e7d2      	b.n	8009ffc <_svfiprintf_r+0x9c>
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	1d19      	adds	r1, r3, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	9103      	str	r1, [sp, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfbb      	ittet	lt
 800a062:	425b      	neglt	r3, r3
 800a064:	f042 0202 	orrlt.w	r2, r2, #2
 800a068:	9307      	strge	r3, [sp, #28]
 800a06a:	9307      	strlt	r3, [sp, #28]
 800a06c:	bfb8      	it	lt
 800a06e:	9204      	strlt	r2, [sp, #16]
 800a070:	7823      	ldrb	r3, [r4, #0]
 800a072:	2b2e      	cmp	r3, #46	; 0x2e
 800a074:	d10c      	bne.n	800a090 <_svfiprintf_r+0x130>
 800a076:	7863      	ldrb	r3, [r4, #1]
 800a078:	2b2a      	cmp	r3, #42	; 0x2a
 800a07a:	d134      	bne.n	800a0e6 <_svfiprintf_r+0x186>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	1d1a      	adds	r2, r3, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	9203      	str	r2, [sp, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	bfb8      	it	lt
 800a088:	f04f 33ff 	movlt.w	r3, #4294967295
 800a08c:	3402      	adds	r4, #2
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a158 <_svfiprintf_r+0x1f8>
 800a094:	7821      	ldrb	r1, [r4, #0]
 800a096:	2203      	movs	r2, #3
 800a098:	4650      	mov	r0, sl
 800a09a:	f7f6 f899 	bl	80001d0 <memchr>
 800a09e:	b138      	cbz	r0, 800a0b0 <_svfiprintf_r+0x150>
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	eba0 000a 	sub.w	r0, r0, sl
 800a0a6:	2240      	movs	r2, #64	; 0x40
 800a0a8:	4082      	lsls	r2, r0
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	3401      	adds	r4, #1
 800a0ae:	9304      	str	r3, [sp, #16]
 800a0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b4:	4825      	ldr	r0, [pc, #148]	; (800a14c <_svfiprintf_r+0x1ec>)
 800a0b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0ba:	2206      	movs	r2, #6
 800a0bc:	f7f6 f888 	bl	80001d0 <memchr>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d038      	beq.n	800a136 <_svfiprintf_r+0x1d6>
 800a0c4:	4b22      	ldr	r3, [pc, #136]	; (800a150 <_svfiprintf_r+0x1f0>)
 800a0c6:	bb1b      	cbnz	r3, 800a110 <_svfiprintf_r+0x1b0>
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	3307      	adds	r3, #7
 800a0cc:	f023 0307 	bic.w	r3, r3, #7
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	9303      	str	r3, [sp, #12]
 800a0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d6:	4433      	add	r3, r6
 800a0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0da:	e768      	b.n	8009fae <_svfiprintf_r+0x4e>
 800a0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	e7a6      	b.n	800a034 <_svfiprintf_r+0xd4>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	3401      	adds	r4, #1
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f04f 0c0a 	mov.w	ip, #10
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0f8:	3a30      	subs	r2, #48	; 0x30
 800a0fa:	2a09      	cmp	r2, #9
 800a0fc:	d903      	bls.n	800a106 <_svfiprintf_r+0x1a6>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0c6      	beq.n	800a090 <_svfiprintf_r+0x130>
 800a102:	9105      	str	r1, [sp, #20]
 800a104:	e7c4      	b.n	800a090 <_svfiprintf_r+0x130>
 800a106:	fb0c 2101 	mla	r1, ip, r1, r2
 800a10a:	4604      	mov	r4, r0
 800a10c:	2301      	movs	r3, #1
 800a10e:	e7f0      	b.n	800a0f2 <_svfiprintf_r+0x192>
 800a110:	ab03      	add	r3, sp, #12
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	462a      	mov	r2, r5
 800a116:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <_svfiprintf_r+0x1f4>)
 800a118:	a904      	add	r1, sp, #16
 800a11a:	4638      	mov	r0, r7
 800a11c:	f7fd fe3a 	bl	8007d94 <_printf_float>
 800a120:	1c42      	adds	r2, r0, #1
 800a122:	4606      	mov	r6, r0
 800a124:	d1d6      	bne.n	800a0d4 <_svfiprintf_r+0x174>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	065b      	lsls	r3, r3, #25
 800a12a:	f53f af2d 	bmi.w	8009f88 <_svfiprintf_r+0x28>
 800a12e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a130:	b01d      	add	sp, #116	; 0x74
 800a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a136:	ab03      	add	r3, sp, #12
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	462a      	mov	r2, r5
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <_svfiprintf_r+0x1f4>)
 800a13e:	a904      	add	r1, sp, #16
 800a140:	4638      	mov	r0, r7
 800a142:	f7fe f8cb 	bl	80082dc <_printf_i>
 800a146:	e7eb      	b.n	800a120 <_svfiprintf_r+0x1c0>
 800a148:	0800adbc 	.word	0x0800adbc
 800a14c:	0800adc6 	.word	0x0800adc6
 800a150:	08007d95 	.word	0x08007d95
 800a154:	08009ead 	.word	0x08009ead
 800a158:	0800adc2 	.word	0x0800adc2

0800a15c <__sfputc_r>:
 800a15c:	6893      	ldr	r3, [r2, #8]
 800a15e:	3b01      	subs	r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	b410      	push	{r4}
 800a164:	6093      	str	r3, [r2, #8]
 800a166:	da08      	bge.n	800a17a <__sfputc_r+0x1e>
 800a168:	6994      	ldr	r4, [r2, #24]
 800a16a:	42a3      	cmp	r3, r4
 800a16c:	db01      	blt.n	800a172 <__sfputc_r+0x16>
 800a16e:	290a      	cmp	r1, #10
 800a170:	d103      	bne.n	800a17a <__sfputc_r+0x1e>
 800a172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a176:	f000 b9e3 	b.w	800a540 <__swbuf_r>
 800a17a:	6813      	ldr	r3, [r2, #0]
 800a17c:	1c58      	adds	r0, r3, #1
 800a17e:	6010      	str	r0, [r2, #0]
 800a180:	7019      	strb	r1, [r3, #0]
 800a182:	4608      	mov	r0, r1
 800a184:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <__sfputs_r>:
 800a18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18c:	4606      	mov	r6, r0
 800a18e:	460f      	mov	r7, r1
 800a190:	4614      	mov	r4, r2
 800a192:	18d5      	adds	r5, r2, r3
 800a194:	42ac      	cmp	r4, r5
 800a196:	d101      	bne.n	800a19c <__sfputs_r+0x12>
 800a198:	2000      	movs	r0, #0
 800a19a:	e007      	b.n	800a1ac <__sfputs_r+0x22>
 800a19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a0:	463a      	mov	r2, r7
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff ffda 	bl	800a15c <__sfputc_r>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d1f3      	bne.n	800a194 <__sfputs_r+0xa>
 800a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1b0 <_vfiprintf_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	460d      	mov	r5, r1
 800a1b6:	b09d      	sub	sp, #116	; 0x74
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	4698      	mov	r8, r3
 800a1bc:	4606      	mov	r6, r0
 800a1be:	b118      	cbz	r0, 800a1c8 <_vfiprintf_r+0x18>
 800a1c0:	6a03      	ldr	r3, [r0, #32]
 800a1c2:	b90b      	cbnz	r3, 800a1c8 <_vfiprintf_r+0x18>
 800a1c4:	f7fe fa38 	bl	8008638 <__sinit>
 800a1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ca:	07d9      	lsls	r1, r3, #31
 800a1cc:	d405      	bmi.n	800a1da <_vfiprintf_r+0x2a>
 800a1ce:	89ab      	ldrh	r3, [r5, #12]
 800a1d0:	059a      	lsls	r2, r3, #22
 800a1d2:	d402      	bmi.n	800a1da <_vfiprintf_r+0x2a>
 800a1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1d6:	f7fe fb6a 	bl	80088ae <__retarget_lock_acquire_recursive>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	071b      	lsls	r3, r3, #28
 800a1de:	d501      	bpl.n	800a1e4 <_vfiprintf_r+0x34>
 800a1e0:	692b      	ldr	r3, [r5, #16]
 800a1e2:	b99b      	cbnz	r3, 800a20c <_vfiprintf_r+0x5c>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f000 f9e8 	bl	800a5bc <__swsetup_r>
 800a1ec:	b170      	cbz	r0, 800a20c <_vfiprintf_r+0x5c>
 800a1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f0:	07dc      	lsls	r4, r3, #31
 800a1f2:	d504      	bpl.n	800a1fe <_vfiprintf_r+0x4e>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	b01d      	add	sp, #116	; 0x74
 800a1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fe:	89ab      	ldrh	r3, [r5, #12]
 800a200:	0598      	lsls	r0, r3, #22
 800a202:	d4f7      	bmi.n	800a1f4 <_vfiprintf_r+0x44>
 800a204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a206:	f7fe fb53 	bl	80088b0 <__retarget_lock_release_recursive>
 800a20a:	e7f3      	b.n	800a1f4 <_vfiprintf_r+0x44>
 800a20c:	2300      	movs	r3, #0
 800a20e:	9309      	str	r3, [sp, #36]	; 0x24
 800a210:	2320      	movs	r3, #32
 800a212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a216:	f8cd 800c 	str.w	r8, [sp, #12]
 800a21a:	2330      	movs	r3, #48	; 0x30
 800a21c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a3d0 <_vfiprintf_r+0x220>
 800a220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a224:	f04f 0901 	mov.w	r9, #1
 800a228:	4623      	mov	r3, r4
 800a22a:	469a      	mov	sl, r3
 800a22c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a230:	b10a      	cbz	r2, 800a236 <_vfiprintf_r+0x86>
 800a232:	2a25      	cmp	r2, #37	; 0x25
 800a234:	d1f9      	bne.n	800a22a <_vfiprintf_r+0x7a>
 800a236:	ebba 0b04 	subs.w	fp, sl, r4
 800a23a:	d00b      	beq.n	800a254 <_vfiprintf_r+0xa4>
 800a23c:	465b      	mov	r3, fp
 800a23e:	4622      	mov	r2, r4
 800a240:	4629      	mov	r1, r5
 800a242:	4630      	mov	r0, r6
 800a244:	f7ff ffa1 	bl	800a18a <__sfputs_r>
 800a248:	3001      	adds	r0, #1
 800a24a:	f000 80a9 	beq.w	800a3a0 <_vfiprintf_r+0x1f0>
 800a24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a250:	445a      	add	r2, fp
 800a252:	9209      	str	r2, [sp, #36]	; 0x24
 800a254:	f89a 3000 	ldrb.w	r3, [sl]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80a1 	beq.w	800a3a0 <_vfiprintf_r+0x1f0>
 800a25e:	2300      	movs	r3, #0
 800a260:	f04f 32ff 	mov.w	r2, #4294967295
 800a264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a268:	f10a 0a01 	add.w	sl, sl, #1
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a274:	931a      	str	r3, [sp, #104]	; 0x68
 800a276:	4654      	mov	r4, sl
 800a278:	2205      	movs	r2, #5
 800a27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a27e:	4854      	ldr	r0, [pc, #336]	; (800a3d0 <_vfiprintf_r+0x220>)
 800a280:	f7f5 ffa6 	bl	80001d0 <memchr>
 800a284:	9a04      	ldr	r2, [sp, #16]
 800a286:	b9d8      	cbnz	r0, 800a2c0 <_vfiprintf_r+0x110>
 800a288:	06d1      	lsls	r1, r2, #27
 800a28a:	bf44      	itt	mi
 800a28c:	2320      	movmi	r3, #32
 800a28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a292:	0713      	lsls	r3, r2, #28
 800a294:	bf44      	itt	mi
 800a296:	232b      	movmi	r3, #43	; 0x2b
 800a298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a29c:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a2:	d015      	beq.n	800a2d0 <_vfiprintf_r+0x120>
 800a2a4:	9a07      	ldr	r2, [sp, #28]
 800a2a6:	4654      	mov	r4, sl
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f04f 0c0a 	mov.w	ip, #10
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2b4:	3b30      	subs	r3, #48	; 0x30
 800a2b6:	2b09      	cmp	r3, #9
 800a2b8:	d94d      	bls.n	800a356 <_vfiprintf_r+0x1a6>
 800a2ba:	b1b0      	cbz	r0, 800a2ea <_vfiprintf_r+0x13a>
 800a2bc:	9207      	str	r2, [sp, #28]
 800a2be:	e014      	b.n	800a2ea <_vfiprintf_r+0x13a>
 800a2c0:	eba0 0308 	sub.w	r3, r0, r8
 800a2c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	46a2      	mov	sl, r4
 800a2ce:	e7d2      	b.n	800a276 <_vfiprintf_r+0xc6>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	1d19      	adds	r1, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	9103      	str	r1, [sp, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bfbb      	ittet	lt
 800a2dc:	425b      	neglt	r3, r3
 800a2de:	f042 0202 	orrlt.w	r2, r2, #2
 800a2e2:	9307      	strge	r3, [sp, #28]
 800a2e4:	9307      	strlt	r3, [sp, #28]
 800a2e6:	bfb8      	it	lt
 800a2e8:	9204      	strlt	r2, [sp, #16]
 800a2ea:	7823      	ldrb	r3, [r4, #0]
 800a2ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ee:	d10c      	bne.n	800a30a <_vfiprintf_r+0x15a>
 800a2f0:	7863      	ldrb	r3, [r4, #1]
 800a2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f4:	d134      	bne.n	800a360 <_vfiprintf_r+0x1b0>
 800a2f6:	9b03      	ldr	r3, [sp, #12]
 800a2f8:	1d1a      	adds	r2, r3, #4
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	9203      	str	r2, [sp, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	bfb8      	it	lt
 800a302:	f04f 33ff 	movlt.w	r3, #4294967295
 800a306:	3402      	adds	r4, #2
 800a308:	9305      	str	r3, [sp, #20]
 800a30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3e0 <_vfiprintf_r+0x230>
 800a30e:	7821      	ldrb	r1, [r4, #0]
 800a310:	2203      	movs	r2, #3
 800a312:	4650      	mov	r0, sl
 800a314:	f7f5 ff5c 	bl	80001d0 <memchr>
 800a318:	b138      	cbz	r0, 800a32a <_vfiprintf_r+0x17a>
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	eba0 000a 	sub.w	r0, r0, sl
 800a320:	2240      	movs	r2, #64	; 0x40
 800a322:	4082      	lsls	r2, r0
 800a324:	4313      	orrs	r3, r2
 800a326:	3401      	adds	r4, #1
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a32e:	4829      	ldr	r0, [pc, #164]	; (800a3d4 <_vfiprintf_r+0x224>)
 800a330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a334:	2206      	movs	r2, #6
 800a336:	f7f5 ff4b 	bl	80001d0 <memchr>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d03f      	beq.n	800a3be <_vfiprintf_r+0x20e>
 800a33e:	4b26      	ldr	r3, [pc, #152]	; (800a3d8 <_vfiprintf_r+0x228>)
 800a340:	bb1b      	cbnz	r3, 800a38a <_vfiprintf_r+0x1da>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	3307      	adds	r3, #7
 800a346:	f023 0307 	bic.w	r3, r3, #7
 800a34a:	3308      	adds	r3, #8
 800a34c:	9303      	str	r3, [sp, #12]
 800a34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a350:	443b      	add	r3, r7
 800a352:	9309      	str	r3, [sp, #36]	; 0x24
 800a354:	e768      	b.n	800a228 <_vfiprintf_r+0x78>
 800a356:	fb0c 3202 	mla	r2, ip, r2, r3
 800a35a:	460c      	mov	r4, r1
 800a35c:	2001      	movs	r0, #1
 800a35e:	e7a6      	b.n	800a2ae <_vfiprintf_r+0xfe>
 800a360:	2300      	movs	r3, #0
 800a362:	3401      	adds	r4, #1
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	4619      	mov	r1, r3
 800a368:	f04f 0c0a 	mov.w	ip, #10
 800a36c:	4620      	mov	r0, r4
 800a36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a372:	3a30      	subs	r2, #48	; 0x30
 800a374:	2a09      	cmp	r2, #9
 800a376:	d903      	bls.n	800a380 <_vfiprintf_r+0x1d0>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0c6      	beq.n	800a30a <_vfiprintf_r+0x15a>
 800a37c:	9105      	str	r1, [sp, #20]
 800a37e:	e7c4      	b.n	800a30a <_vfiprintf_r+0x15a>
 800a380:	fb0c 2101 	mla	r1, ip, r1, r2
 800a384:	4604      	mov	r4, r0
 800a386:	2301      	movs	r3, #1
 800a388:	e7f0      	b.n	800a36c <_vfiprintf_r+0x1bc>
 800a38a:	ab03      	add	r3, sp, #12
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	462a      	mov	r2, r5
 800a390:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <_vfiprintf_r+0x22c>)
 800a392:	a904      	add	r1, sp, #16
 800a394:	4630      	mov	r0, r6
 800a396:	f7fd fcfd 	bl	8007d94 <_printf_float>
 800a39a:	4607      	mov	r7, r0
 800a39c:	1c78      	adds	r0, r7, #1
 800a39e:	d1d6      	bne.n	800a34e <_vfiprintf_r+0x19e>
 800a3a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3a2:	07d9      	lsls	r1, r3, #31
 800a3a4:	d405      	bmi.n	800a3b2 <_vfiprintf_r+0x202>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	059a      	lsls	r2, r3, #22
 800a3aa:	d402      	bmi.n	800a3b2 <_vfiprintf_r+0x202>
 800a3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ae:	f7fe fa7f 	bl	80088b0 <__retarget_lock_release_recursive>
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	065b      	lsls	r3, r3, #25
 800a3b6:	f53f af1d 	bmi.w	800a1f4 <_vfiprintf_r+0x44>
 800a3ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3bc:	e71c      	b.n	800a1f8 <_vfiprintf_r+0x48>
 800a3be:	ab03      	add	r3, sp, #12
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	462a      	mov	r2, r5
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <_vfiprintf_r+0x22c>)
 800a3c6:	a904      	add	r1, sp, #16
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7fd ff87 	bl	80082dc <_printf_i>
 800a3ce:	e7e4      	b.n	800a39a <_vfiprintf_r+0x1ea>
 800a3d0:	0800adbc 	.word	0x0800adbc
 800a3d4:	0800adc6 	.word	0x0800adc6
 800a3d8:	08007d95 	.word	0x08007d95
 800a3dc:	0800a18b 	.word	0x0800a18b
 800a3e0:	0800adc2 	.word	0x0800adc2

0800a3e4 <__sflush_r>:
 800a3e4:	898a      	ldrh	r2, [r1, #12]
 800a3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	0710      	lsls	r0, r2, #28
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	d458      	bmi.n	800a4a4 <__sflush_r+0xc0>
 800a3f2:	684b      	ldr	r3, [r1, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dc05      	bgt.n	800a404 <__sflush_r+0x20>
 800a3f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dc02      	bgt.n	800a404 <__sflush_r+0x20>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a406:	2e00      	cmp	r6, #0
 800a408:	d0f9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a410:	682f      	ldr	r7, [r5, #0]
 800a412:	6a21      	ldr	r1, [r4, #32]
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	d032      	beq.n	800a47e <__sflush_r+0x9a>
 800a418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	075a      	lsls	r2, r3, #29
 800a41e:	d505      	bpl.n	800a42c <__sflush_r+0x48>
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	1ac0      	subs	r0, r0, r3
 800a424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a426:	b10b      	cbz	r3, 800a42c <__sflush_r+0x48>
 800a428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a42a:	1ac0      	subs	r0, r0, r3
 800a42c:	2300      	movs	r3, #0
 800a42e:	4602      	mov	r2, r0
 800a430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a432:	6a21      	ldr	r1, [r4, #32]
 800a434:	4628      	mov	r0, r5
 800a436:	47b0      	blx	r6
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	d106      	bne.n	800a44c <__sflush_r+0x68>
 800a43e:	6829      	ldr	r1, [r5, #0]
 800a440:	291d      	cmp	r1, #29
 800a442:	d82b      	bhi.n	800a49c <__sflush_r+0xb8>
 800a444:	4a29      	ldr	r2, [pc, #164]	; (800a4ec <__sflush_r+0x108>)
 800a446:	410a      	asrs	r2, r1
 800a448:	07d6      	lsls	r6, r2, #31
 800a44a:	d427      	bmi.n	800a49c <__sflush_r+0xb8>
 800a44c:	2200      	movs	r2, #0
 800a44e:	6062      	str	r2, [r4, #4]
 800a450:	04d9      	lsls	r1, r3, #19
 800a452:	6922      	ldr	r2, [r4, #16]
 800a454:	6022      	str	r2, [r4, #0]
 800a456:	d504      	bpl.n	800a462 <__sflush_r+0x7e>
 800a458:	1c42      	adds	r2, r0, #1
 800a45a:	d101      	bne.n	800a460 <__sflush_r+0x7c>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b903      	cbnz	r3, 800a462 <__sflush_r+0x7e>
 800a460:	6560      	str	r0, [r4, #84]	; 0x54
 800a462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a464:	602f      	str	r7, [r5, #0]
 800a466:	2900      	cmp	r1, #0
 800a468:	d0c9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a46a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a46e:	4299      	cmp	r1, r3
 800a470:	d002      	beq.n	800a478 <__sflush_r+0x94>
 800a472:	4628      	mov	r0, r5
 800a474:	f7ff f89e 	bl	80095b4 <_free_r>
 800a478:	2000      	movs	r0, #0
 800a47a:	6360      	str	r0, [r4, #52]	; 0x34
 800a47c:	e7c0      	b.n	800a400 <__sflush_r+0x1c>
 800a47e:	2301      	movs	r3, #1
 800a480:	4628      	mov	r0, r5
 800a482:	47b0      	blx	r6
 800a484:	1c41      	adds	r1, r0, #1
 800a486:	d1c8      	bne.n	800a41a <__sflush_r+0x36>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0c5      	beq.n	800a41a <__sflush_r+0x36>
 800a48e:	2b1d      	cmp	r3, #29
 800a490:	d001      	beq.n	800a496 <__sflush_r+0xb2>
 800a492:	2b16      	cmp	r3, #22
 800a494:	d101      	bne.n	800a49a <__sflush_r+0xb6>
 800a496:	602f      	str	r7, [r5, #0]
 800a498:	e7b1      	b.n	800a3fe <__sflush_r+0x1a>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	e7ad      	b.n	800a400 <__sflush_r+0x1c>
 800a4a4:	690f      	ldr	r7, [r1, #16]
 800a4a6:	2f00      	cmp	r7, #0
 800a4a8:	d0a9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a4aa:	0793      	lsls	r3, r2, #30
 800a4ac:	680e      	ldr	r6, [r1, #0]
 800a4ae:	bf08      	it	eq
 800a4b0:	694b      	ldreq	r3, [r1, #20]
 800a4b2:	600f      	str	r7, [r1, #0]
 800a4b4:	bf18      	it	ne
 800a4b6:	2300      	movne	r3, #0
 800a4b8:	eba6 0807 	sub.w	r8, r6, r7
 800a4bc:	608b      	str	r3, [r1, #8]
 800a4be:	f1b8 0f00 	cmp.w	r8, #0
 800a4c2:	dd9c      	ble.n	800a3fe <__sflush_r+0x1a>
 800a4c4:	6a21      	ldr	r1, [r4, #32]
 800a4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4c8:	4643      	mov	r3, r8
 800a4ca:	463a      	mov	r2, r7
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b0      	blx	r6
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	dc06      	bgt.n	800a4e2 <__sflush_r+0xfe>
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	e78e      	b.n	800a400 <__sflush_r+0x1c>
 800a4e2:	4407      	add	r7, r0
 800a4e4:	eba8 0800 	sub.w	r8, r8, r0
 800a4e8:	e7e9      	b.n	800a4be <__sflush_r+0xda>
 800a4ea:	bf00      	nop
 800a4ec:	dfbffffe 	.word	0xdfbffffe

0800a4f0 <_fflush_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	690b      	ldr	r3, [r1, #16]
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	b913      	cbnz	r3, 800a500 <_fflush_r+0x10>
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	b118      	cbz	r0, 800a50a <_fflush_r+0x1a>
 800a502:	6a03      	ldr	r3, [r0, #32]
 800a504:	b90b      	cbnz	r3, 800a50a <_fflush_r+0x1a>
 800a506:	f7fe f897 	bl	8008638 <__sinit>
 800a50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0f3      	beq.n	800a4fa <_fflush_r+0xa>
 800a512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a514:	07d0      	lsls	r0, r2, #31
 800a516:	d404      	bmi.n	800a522 <_fflush_r+0x32>
 800a518:	0599      	lsls	r1, r3, #22
 800a51a:	d402      	bmi.n	800a522 <_fflush_r+0x32>
 800a51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a51e:	f7fe f9c6 	bl	80088ae <__retarget_lock_acquire_recursive>
 800a522:	4628      	mov	r0, r5
 800a524:	4621      	mov	r1, r4
 800a526:	f7ff ff5d 	bl	800a3e4 <__sflush_r>
 800a52a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a52c:	07da      	lsls	r2, r3, #31
 800a52e:	4605      	mov	r5, r0
 800a530:	d4e4      	bmi.n	800a4fc <_fflush_r+0xc>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	059b      	lsls	r3, r3, #22
 800a536:	d4e1      	bmi.n	800a4fc <_fflush_r+0xc>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	f7fe f9b9 	bl	80088b0 <__retarget_lock_release_recursive>
 800a53e:	e7dd      	b.n	800a4fc <_fflush_r+0xc>

0800a540 <__swbuf_r>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	460e      	mov	r6, r1
 800a544:	4614      	mov	r4, r2
 800a546:	4605      	mov	r5, r0
 800a548:	b118      	cbz	r0, 800a552 <__swbuf_r+0x12>
 800a54a:	6a03      	ldr	r3, [r0, #32]
 800a54c:	b90b      	cbnz	r3, 800a552 <__swbuf_r+0x12>
 800a54e:	f7fe f873 	bl	8008638 <__sinit>
 800a552:	69a3      	ldr	r3, [r4, #24]
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	071a      	lsls	r2, r3, #28
 800a55a:	d525      	bpl.n	800a5a8 <__swbuf_r+0x68>
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	b31b      	cbz	r3, 800a5a8 <__swbuf_r+0x68>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	6922      	ldr	r2, [r4, #16]
 800a564:	1a98      	subs	r0, r3, r2
 800a566:	6963      	ldr	r3, [r4, #20]
 800a568:	b2f6      	uxtb	r6, r6
 800a56a:	4283      	cmp	r3, r0
 800a56c:	4637      	mov	r7, r6
 800a56e:	dc04      	bgt.n	800a57a <__swbuf_r+0x3a>
 800a570:	4621      	mov	r1, r4
 800a572:	4628      	mov	r0, r5
 800a574:	f7ff ffbc 	bl	800a4f0 <_fflush_r>
 800a578:	b9e0      	cbnz	r0, 800a5b4 <__swbuf_r+0x74>
 800a57a:	68a3      	ldr	r3, [r4, #8]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	6022      	str	r2, [r4, #0]
 800a586:	701e      	strb	r6, [r3, #0]
 800a588:	6962      	ldr	r2, [r4, #20]
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d004      	beq.n	800a59a <__swbuf_r+0x5a>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	07db      	lsls	r3, r3, #31
 800a594:	d506      	bpl.n	800a5a4 <__swbuf_r+0x64>
 800a596:	2e0a      	cmp	r6, #10
 800a598:	d104      	bne.n	800a5a4 <__swbuf_r+0x64>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4628      	mov	r0, r5
 800a59e:	f7ff ffa7 	bl	800a4f0 <_fflush_r>
 800a5a2:	b938      	cbnz	r0, 800a5b4 <__swbuf_r+0x74>
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 f806 	bl	800a5bc <__swsetup_r>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d0d5      	beq.n	800a560 <__swbuf_r+0x20>
 800a5b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a5b8:	e7f4      	b.n	800a5a4 <__swbuf_r+0x64>
	...

0800a5bc <__swsetup_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4b2a      	ldr	r3, [pc, #168]	; (800a668 <__swsetup_r+0xac>)
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	b118      	cbz	r0, 800a5d0 <__swsetup_r+0x14>
 800a5c8:	6a03      	ldr	r3, [r0, #32]
 800a5ca:	b90b      	cbnz	r3, 800a5d0 <__swsetup_r+0x14>
 800a5cc:	f7fe f834 	bl	8008638 <__sinit>
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d6:	0718      	lsls	r0, r3, #28
 800a5d8:	d422      	bmi.n	800a620 <__swsetup_r+0x64>
 800a5da:	06d9      	lsls	r1, r3, #27
 800a5dc:	d407      	bmi.n	800a5ee <__swsetup_r+0x32>
 800a5de:	2309      	movs	r3, #9
 800a5e0:	602b      	str	r3, [r5, #0]
 800a5e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	e034      	b.n	800a658 <__swsetup_r+0x9c>
 800a5ee:	0758      	lsls	r0, r3, #29
 800a5f0:	d512      	bpl.n	800a618 <__swsetup_r+0x5c>
 800a5f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5f4:	b141      	cbz	r1, 800a608 <__swsetup_r+0x4c>
 800a5f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5fa:	4299      	cmp	r1, r3
 800a5fc:	d002      	beq.n	800a604 <__swsetup_r+0x48>
 800a5fe:	4628      	mov	r0, r5
 800a600:	f7fe ffd8 	bl	80095b4 <_free_r>
 800a604:	2300      	movs	r3, #0
 800a606:	6363      	str	r3, [r4, #52]	; 0x34
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	2300      	movs	r3, #0
 800a612:	6063      	str	r3, [r4, #4]
 800a614:	6923      	ldr	r3, [r4, #16]
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	f043 0308 	orr.w	r3, r3, #8
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	b94b      	cbnz	r3, 800a638 <__swsetup_r+0x7c>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62e:	d003      	beq.n	800a638 <__swsetup_r+0x7c>
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f000 f920 	bl	800a878 <__smakebuf_r>
 800a638:	89a0      	ldrh	r0, [r4, #12]
 800a63a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63e:	f010 0301 	ands.w	r3, r0, #1
 800a642:	d00a      	beq.n	800a65a <__swsetup_r+0x9e>
 800a644:	2300      	movs	r3, #0
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	6963      	ldr	r3, [r4, #20]
 800a64a:	425b      	negs	r3, r3
 800a64c:	61a3      	str	r3, [r4, #24]
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	b943      	cbnz	r3, 800a664 <__swsetup_r+0xa8>
 800a652:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a656:	d1c4      	bne.n	800a5e2 <__swsetup_r+0x26>
 800a658:	bd38      	pop	{r3, r4, r5, pc}
 800a65a:	0781      	lsls	r1, r0, #30
 800a65c:	bf58      	it	pl
 800a65e:	6963      	ldrpl	r3, [r4, #20]
 800a660:	60a3      	str	r3, [r4, #8]
 800a662:	e7f4      	b.n	800a64e <__swsetup_r+0x92>
 800a664:	2000      	movs	r0, #0
 800a666:	e7f7      	b.n	800a658 <__swsetup_r+0x9c>
 800a668:	20000074 	.word	0x20000074

0800a66c <memmove>:
 800a66c:	4288      	cmp	r0, r1
 800a66e:	b510      	push	{r4, lr}
 800a670:	eb01 0402 	add.w	r4, r1, r2
 800a674:	d902      	bls.n	800a67c <memmove+0x10>
 800a676:	4284      	cmp	r4, r0
 800a678:	4623      	mov	r3, r4
 800a67a:	d807      	bhi.n	800a68c <memmove+0x20>
 800a67c:	1e43      	subs	r3, r0, #1
 800a67e:	42a1      	cmp	r1, r4
 800a680:	d008      	beq.n	800a694 <memmove+0x28>
 800a682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a68a:	e7f8      	b.n	800a67e <memmove+0x12>
 800a68c:	4402      	add	r2, r0
 800a68e:	4601      	mov	r1, r0
 800a690:	428a      	cmp	r2, r1
 800a692:	d100      	bne.n	800a696 <memmove+0x2a>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a69e:	e7f7      	b.n	800a690 <memmove+0x24>

0800a6a0 <_raise_r>:
 800a6a0:	291f      	cmp	r1, #31
 800a6a2:	b538      	push	{r3, r4, r5, lr}
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	d904      	bls.n	800a6b4 <_raise_r+0x14>
 800a6aa:	2316      	movs	r3, #22
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6b6:	b112      	cbz	r2, 800a6be <_raise_r+0x1e>
 800a6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6bc:	b94b      	cbnz	r3, 800a6d2 <_raise_r+0x32>
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 f830 	bl	800a724 <_getpid_r>
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ce:	f000 b817 	b.w	800a700 <_kill_r>
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d00a      	beq.n	800a6ec <_raise_r+0x4c>
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <_raise_r+0x42>
 800a6da:	2316      	movs	r3, #22
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7e7      	b.n	800a6b2 <_raise_r+0x12>
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	4798      	blx	r3
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7e0      	b.n	800a6b2 <_raise_r+0x12>

0800a6f0 <raise>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <raise+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f7ff bfd3 	b.w	800a6a0 <_raise_r>
 800a6fa:	bf00      	nop
 800a6fc:	20000074 	.word	0x20000074

0800a700 <_kill_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	; (800a720 <_kill_r+0x20>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	f7f7 fb2f 	bl	8001d70 <_kill>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d102      	bne.n	800a71c <_kill_r+0x1c>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	b103      	cbz	r3, 800a71c <_kill_r+0x1c>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	200005ac 	.word	0x200005ac

0800a724 <_getpid_r>:
 800a724:	f7f7 bb1c 	b.w	8001d60 <_getpid>

0800a728 <_sbrk_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_sbrk_r+0x1c>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f7 fba4 	bl	8001e80 <_sbrk>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_sbrk_r+0x1a>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_sbrk_r+0x1a>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	200005ac 	.word	0x200005ac

0800a748 <memcpy>:
 800a748:	440a      	add	r2, r1
 800a74a:	4291      	cmp	r1, r2
 800a74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a750:	d100      	bne.n	800a754 <memcpy+0xc>
 800a752:	4770      	bx	lr
 800a754:	b510      	push	{r4, lr}
 800a756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a75e:	4291      	cmp	r1, r2
 800a760:	d1f9      	bne.n	800a756 <memcpy+0xe>
 800a762:	bd10      	pop	{r4, pc}

0800a764 <_calloc_r>:
 800a764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a766:	fba1 2402 	umull	r2, r4, r1, r2
 800a76a:	b94c      	cbnz	r4, 800a780 <_calloc_r+0x1c>
 800a76c:	4611      	mov	r1, r2
 800a76e:	9201      	str	r2, [sp, #4]
 800a770:	f7fe ff94 	bl	800969c <_malloc_r>
 800a774:	9a01      	ldr	r2, [sp, #4]
 800a776:	4605      	mov	r5, r0
 800a778:	b930      	cbnz	r0, 800a788 <_calloc_r+0x24>
 800a77a:	4628      	mov	r0, r5
 800a77c:	b003      	add	sp, #12
 800a77e:	bd30      	pop	{r4, r5, pc}
 800a780:	220c      	movs	r2, #12
 800a782:	6002      	str	r2, [r0, #0]
 800a784:	2500      	movs	r5, #0
 800a786:	e7f8      	b.n	800a77a <_calloc_r+0x16>
 800a788:	4621      	mov	r1, r4
 800a78a:	f7fe f812 	bl	80087b2 <memset>
 800a78e:	e7f4      	b.n	800a77a <_calloc_r+0x16>

0800a790 <__ascii_mbtowc>:
 800a790:	b082      	sub	sp, #8
 800a792:	b901      	cbnz	r1, 800a796 <__ascii_mbtowc+0x6>
 800a794:	a901      	add	r1, sp, #4
 800a796:	b142      	cbz	r2, 800a7aa <__ascii_mbtowc+0x1a>
 800a798:	b14b      	cbz	r3, 800a7ae <__ascii_mbtowc+0x1e>
 800a79a:	7813      	ldrb	r3, [r2, #0]
 800a79c:	600b      	str	r3, [r1, #0]
 800a79e:	7812      	ldrb	r2, [r2, #0]
 800a7a0:	1e10      	subs	r0, r2, #0
 800a7a2:	bf18      	it	ne
 800a7a4:	2001      	movne	r0, #1
 800a7a6:	b002      	add	sp, #8
 800a7a8:	4770      	bx	lr
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	e7fb      	b.n	800a7a6 <__ascii_mbtowc+0x16>
 800a7ae:	f06f 0001 	mvn.w	r0, #1
 800a7b2:	e7f8      	b.n	800a7a6 <__ascii_mbtowc+0x16>

0800a7b4 <_realloc_r>:
 800a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	4614      	mov	r4, r2
 800a7bc:	460e      	mov	r6, r1
 800a7be:	b921      	cbnz	r1, 800a7ca <_realloc_r+0x16>
 800a7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	f7fe bf69 	b.w	800969c <_malloc_r>
 800a7ca:	b92a      	cbnz	r2, 800a7d8 <_realloc_r+0x24>
 800a7cc:	f7fe fef2 	bl	80095b4 <_free_r>
 800a7d0:	4625      	mov	r5, r4
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d8:	f000 f8ac 	bl	800a934 <_malloc_usable_size_r>
 800a7dc:	4284      	cmp	r4, r0
 800a7de:	4607      	mov	r7, r0
 800a7e0:	d802      	bhi.n	800a7e8 <_realloc_r+0x34>
 800a7e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7e6:	d812      	bhi.n	800a80e <_realloc_r+0x5a>
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	f7fe ff56 	bl	800969c <_malloc_r>
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d0ed      	beq.n	800a7d2 <_realloc_r+0x1e>
 800a7f6:	42bc      	cmp	r4, r7
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	bf28      	it	cs
 800a7fe:	463a      	movcs	r2, r7
 800a800:	f7ff ffa2 	bl	800a748 <memcpy>
 800a804:	4631      	mov	r1, r6
 800a806:	4640      	mov	r0, r8
 800a808:	f7fe fed4 	bl	80095b4 <_free_r>
 800a80c:	e7e1      	b.n	800a7d2 <_realloc_r+0x1e>
 800a80e:	4635      	mov	r5, r6
 800a810:	e7df      	b.n	800a7d2 <_realloc_r+0x1e>

0800a812 <__ascii_wctomb>:
 800a812:	b149      	cbz	r1, 800a828 <__ascii_wctomb+0x16>
 800a814:	2aff      	cmp	r2, #255	; 0xff
 800a816:	bf85      	ittet	hi
 800a818:	238a      	movhi	r3, #138	; 0x8a
 800a81a:	6003      	strhi	r3, [r0, #0]
 800a81c:	700a      	strbls	r2, [r1, #0]
 800a81e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a822:	bf98      	it	ls
 800a824:	2001      	movls	r0, #1
 800a826:	4770      	bx	lr
 800a828:	4608      	mov	r0, r1
 800a82a:	4770      	bx	lr

0800a82c <__swhatbuf_r>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	460c      	mov	r4, r1
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	2900      	cmp	r1, #0
 800a836:	b096      	sub	sp, #88	; 0x58
 800a838:	4615      	mov	r5, r2
 800a83a:	461e      	mov	r6, r3
 800a83c:	da0d      	bge.n	800a85a <__swhatbuf_r+0x2e>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a844:	f04f 0100 	mov.w	r1, #0
 800a848:	bf0c      	ite	eq
 800a84a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a84e:	2340      	movne	r3, #64	; 0x40
 800a850:	2000      	movs	r0, #0
 800a852:	6031      	str	r1, [r6, #0]
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	b016      	add	sp, #88	; 0x58
 800a858:	bd70      	pop	{r4, r5, r6, pc}
 800a85a:	466a      	mov	r2, sp
 800a85c:	f000 f848 	bl	800a8f0 <_fstat_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	dbec      	blt.n	800a83e <__swhatbuf_r+0x12>
 800a864:	9901      	ldr	r1, [sp, #4]
 800a866:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a86a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a86e:	4259      	negs	r1, r3
 800a870:	4159      	adcs	r1, r3
 800a872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a876:	e7eb      	b.n	800a850 <__swhatbuf_r+0x24>

0800a878 <__smakebuf_r>:
 800a878:	898b      	ldrh	r3, [r1, #12]
 800a87a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a87c:	079d      	lsls	r5, r3, #30
 800a87e:	4606      	mov	r6, r0
 800a880:	460c      	mov	r4, r1
 800a882:	d507      	bpl.n	800a894 <__smakebuf_r+0x1c>
 800a884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	6123      	str	r3, [r4, #16]
 800a88c:	2301      	movs	r3, #1
 800a88e:	6163      	str	r3, [r4, #20]
 800a890:	b002      	add	sp, #8
 800a892:	bd70      	pop	{r4, r5, r6, pc}
 800a894:	ab01      	add	r3, sp, #4
 800a896:	466a      	mov	r2, sp
 800a898:	f7ff ffc8 	bl	800a82c <__swhatbuf_r>
 800a89c:	9900      	ldr	r1, [sp, #0]
 800a89e:	4605      	mov	r5, r0
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7fe fefb 	bl	800969c <_malloc_r>
 800a8a6:	b948      	cbnz	r0, 800a8bc <__smakebuf_r+0x44>
 800a8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ac:	059a      	lsls	r2, r3, #22
 800a8ae:	d4ef      	bmi.n	800a890 <__smakebuf_r+0x18>
 800a8b0:	f023 0303 	bic.w	r3, r3, #3
 800a8b4:	f043 0302 	orr.w	r3, r3, #2
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	e7e3      	b.n	800a884 <__smakebuf_r+0xc>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	6020      	str	r0, [r4, #0]
 800a8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	9b00      	ldr	r3, [sp, #0]
 800a8c8:	6163      	str	r3, [r4, #20]
 800a8ca:	9b01      	ldr	r3, [sp, #4]
 800a8cc:	6120      	str	r0, [r4, #16]
 800a8ce:	b15b      	cbz	r3, 800a8e8 <__smakebuf_r+0x70>
 800a8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f000 f81d 	bl	800a914 <_isatty_r>
 800a8da:	b128      	cbz	r0, 800a8e8 <__smakebuf_r+0x70>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	f043 0301 	orr.w	r3, r3, #1
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	431d      	orrs	r5, r3
 800a8ec:	81a5      	strh	r5, [r4, #12]
 800a8ee:	e7cf      	b.n	800a890 <__smakebuf_r+0x18>

0800a8f0 <_fstat_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	; (800a910 <_fstat_r+0x20>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	f7f7 fa96 	bl	8001e2e <_fstat>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d102      	bne.n	800a90c <_fstat_r+0x1c>
 800a906:	682b      	ldr	r3, [r5, #0]
 800a908:	b103      	cbz	r3, 800a90c <_fstat_r+0x1c>
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	bd38      	pop	{r3, r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	200005ac 	.word	0x200005ac

0800a914 <_isatty_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d06      	ldr	r5, [pc, #24]	; (800a930 <_isatty_r+0x1c>)
 800a918:	2300      	movs	r3, #0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4608      	mov	r0, r1
 800a91e:	602b      	str	r3, [r5, #0]
 800a920:	f7f7 fa95 	bl	8001e4e <_isatty>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_isatty_r+0x1a>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_isatty_r+0x1a>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	200005ac 	.word	0x200005ac

0800a934 <_malloc_usable_size_r>:
 800a934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a938:	1f18      	subs	r0, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	bfbc      	itt	lt
 800a93e:	580b      	ldrlt	r3, [r1, r0]
 800a940:	18c0      	addlt	r0, r0, r3
 800a942:	4770      	bx	lr

0800a944 <_init>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr

0800a950 <_fini>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr
