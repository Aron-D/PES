
projectNucleo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800713c  0800713c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007144  08007144  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800714c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  080071bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080071bc  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb88  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258b  00000000  00000000  0002fc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  000321f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9c  00000000  00000000  00032fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021538  00000000  00000000  00033a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119b4  00000000  00000000  00054f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4124  00000000  00000000  00066940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042dc  00000000  00000000  0012aa64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0012ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f08 	.word	0x08006f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006f08 	.word	0x08006f08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800057c:	b480      	push	{r7}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000586:	23ff      	movs	r3, #255	; 0xff
 8000588:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	e020      	b.n	80005d2 <calculate_crc+0x56>
		crc ^= data[i];
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	4413      	add	r3, r2
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	4053      	eors	r3, r2
 800059c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e010      	b.n	80005c6 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 80005a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da06      	bge.n	80005ba <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80005b6:	75fb      	strb	r3, [r7, #23]
 80005b8:	e002      	b.n	80005c0 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d9eb      	bls.n	80005a4 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	3301      	adds	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3da      	bcc.n	8000590 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	b299      	uxth	r1, r3
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	231e      	movs	r3, #30
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	f001 fab5 	bl	8001b88 <HAL_I2C_Master_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <sht3x_send_command+0x42>
	}

	return true;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	460a      	mov	r2, r1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4613      	mov	r3, r2
 8000640:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b29b      	uxth	r3, r3
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	b29a      	uxth	r2, r3
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af04      	add	r7, sp, #16
 8000666:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <sht3x_init+0x1e>
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <sht3x_init+0x74>)
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <sht3x_init+0x78>)
 8000676:	2138      	movs	r1, #56	; 0x38
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <sht3x_init+0x7c>)
 800067a:	f005 fabb 	bl	8005bf4 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	889b      	ldrh	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	b299      	uxth	r1, r3
 800068a:	231e      	movs	r3, #30
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2303      	movs	r3, #3
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2302      	movs	r3, #2
 800069a:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800069e:	f001 fd3f 	bl	8002120 <HAL_I2C_Mem_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e00e      	b.n	80006ca <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff62 	bl	800057c <calculate_crc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d001      	beq.n	80006c8 <sht3x_init+0x68>
		return false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e000      	b.n	80006ca <sht3x_init+0x6a>
	}

	return true;
 80006c8:	2301      	movs	r3, #1
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08006f20 	.word	0x08006f20
 80006d8:	08007078 	.word	0x08007078
 80006dc:	08006f60 	.word	0x08006f60

080006e0 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80006ec:	f642 4106 	movw	r1, #11270	; 0x2c06
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ff79 	bl	80005e8 <sht3x_send_command>

	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fea4 	bl	8001444 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b299      	uxth	r1, r3
 8000708:	f107 0214 	add.w	r2, r7, #20
 800070c:	231e      	movs	r3, #30
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2306      	movs	r3, #6
 8000712:	f001 fb51 	bl	8001db8 <HAL_I2C_Master_Receive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 800071c:	2300      	movs	r3, #0
 800071e:	e04f      	b.n	80007c0 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff28 	bl	800057c <calculate_crc>
 800072c:	4603      	mov	r3, r0
 800072e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	3303      	adds	r3, #3
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff1f 	bl	800057c <calculate_crc>
 800073e:	4603      	mov	r3, r0
 8000740:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000742:	7dbb      	ldrb	r3, [r7, #22]
 8000744:	7ffa      	ldrb	r2, [r7, #31]
 8000746:	429a      	cmp	r2, r3
 8000748:	d103      	bne.n	8000752 <sht3x_read_temperature_and_humidity+0x72>
 800074a:	7e7b      	ldrb	r3, [r7, #25]
 800074c:	7fba      	ldrb	r2, [r7, #30]
 800074e:	429a      	cmp	r2, r3
 8000750:	d001      	beq.n	8000756 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000752:	2300      	movs	r3, #0
 8000754:	e034      	b.n	80007c0 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8000756:	7d3b      	ldrb	r3, [r7, #20]
 8000758:	7d7a      	ldrb	r2, [r7, #21]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff68 	bl	8000632 <uint8_to_uint16>
 8000762:	4603      	mov	r3, r0
 8000764:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	7e3a      	ldrb	r2, [r7, #24]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff60 	bl	8000632 <uint8_to_uint16>
 8000772:	4603      	mov	r3, r0
 8000774:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000776:	8bbb      	ldrh	r3, [r7, #28]
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80007c8 <sht3x_read_temperature_and_humidity+0xe8>
 8000784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000788:	eddf 6a10 	vldr	s13, [pc, #64]	; 80007cc <sht3x_read_temperature_and_humidity+0xec>
 800078c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000790:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80007d0 <sht3x_read_temperature_and_humidity+0xf0>
 8000794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800079e:	8b7b      	ldrh	r3, [r7, #26]
 80007a0:	ee07 3a90 	vmov	s15, r3
 80007a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80007d4 <sht3x_read_temperature_and_humidity+0xf4>
 80007ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007b0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80007cc <sht3x_read_temperature_and_humidity+0xec>
 80007b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	edc3 7a00 	vstr	s15, [r3]

	return true;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	432f0000 	.word	0x432f0000
 80007cc:	477fff00 	.word	0x477fff00
 80007d0:	42340000 	.word	0x42340000
 80007d4:	42c80000 	.word	0x42c80000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af02      	add	r7, sp, #8
//	HAL_StatusTypeDef ret;

//	int16_t val;
//	float temp_c;

	sht3x_handle_t handle = {
 80007de:	4a44      	ldr	r2, [pc, #272]	; (80008f0 <main+0x118>)
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e8:	e883 0003 	stmia.w	r3, {r0, r1}
	    .i2c_handle = &hi2c3,
	    .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
	};

	if (!sht3x_init(&handle)) {
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff35 	bl	8000660 <sht3x_init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <main+0x30>
	    printf("SHT3x access failed.\n\r");
 8000802:	483c      	ldr	r0, [pc, #240]	; (80008f4 <main+0x11c>)
 8000804:	f005 fae8 	bl	8005dd8 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fda7 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f890 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f9a0 	bl	8000b54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000814:	f000 f96e 	bl	8000af4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000818:	f000 f8ec 	bl	80009f4 <MX_I2C1_Init>
  MX_I2C3_Init();
 800081c:	f000 f92a 	bl	8000a74 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, " - Nucleo 1 online - \n\r", 23, HAL_MAX_DELAY);
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2217      	movs	r2, #23
 8000826:	4934      	ldr	r1, [pc, #208]	; (80008f8 <main+0x120>)
 8000828:	4834      	ldr	r0, [pc, #208]	; (80008fc <main+0x124>)
 800082a:	f004 fd17 	bl	800525c <HAL_UART_Transmit>
  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	4933      	ldr	r1, [pc, #204]	; (8000900 <main+0x128>)
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <main+0x12c>)
 8000834:	f001 fc24 	bl	8002080 <HAL_I2C_Slave_Receive_IT>

  //initialisatie van de co2 sensor
  HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, (uint8_t[]) {0x20, 0x03}, 2, HAL_MAX_DELAY);
 8000838:	4b33      	ldr	r3, [pc, #204]	; (8000908 <main+0x130>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	81bb      	strh	r3, [r7, #12]
 800083e:	f107 020c 	add.w	r2, r7, #12
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2302      	movs	r3, #2
 800084a:	21b0      	movs	r1, #176	; 0xb0
 800084c:	482f      	ldr	r0, [pc, #188]	; (800090c <main+0x134>)
 800084e:	f001 f99b 	bl	8001b88 <HAL_I2C_Master_Transmit>

  while (1)
  {
	  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	492a      	ldr	r1, [pc, #168]	; (8000900 <main+0x128>)
 8000856:	482b      	ldr	r0, [pc, #172]	; (8000904 <main+0x12c>)
 8000858:	f001 fc12 	bl	8002080 <HAL_I2C_Slave_Receive_IT>
	  /*
	   * Readout temperature and humidity using library functions and store them in corresponding buffers
	   */
	  sht3x_read_temperature_and_humidity(&handle, &temp, &humidity);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <main+0x138>)
 8000862:	492c      	ldr	r1, [pc, #176]	; (8000914 <main+0x13c>)
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff3b 	bl	80006e0 <sht3x_read_temperature_and_humidity>
	  sprintf((char*) temperatureBuf, "%u", (unsigned int) temp);
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <main+0x13c>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000874:	ee17 2a90 	vmov	r2, s15
 8000878:	4927      	ldr	r1, [pc, #156]	; (8000918 <main+0x140>)
 800087a:	4828      	ldr	r0, [pc, #160]	; (800091c <main+0x144>)
 800087c:	f005 fabe 	bl	8005dfc <siprintf>
	  //HAL_UART_Transmit(&huart2, (char*)temperatureBuf, 12, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, "\n\r", 2, HAL_MAX_DELAY);
	  HAL_Delay(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f000 fddf 	bl	8001444 <HAL_Delay>

		//char buf[50];       // Read data from SGP30 sensor
		uint8_t data[6]; // Data buffer to store sensor readings
		// Request measurement
		uint8_t command[] = {0x20, 0x08}; // Command for reading measurement data
 8000886:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800088a:	803b      	strh	r3, [r7, #0]
		HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, command, sizeof(command), HAL_MAX_DELAY);
 800088c:	463a      	mov	r2, r7
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2302      	movs	r3, #2
 8000896:	21b0      	movs	r1, #176	; 0xb0
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <main+0x134>)
 800089a:	f001 f975 	bl	8001b88 <HAL_I2C_Master_Transmit>
		// Wait for measurement to complete
		HAL_Delay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fdd0 	bl	8001444 <HAL_Delay>
		// Read measurement data
		HAL_I2C_Master_Receive(&hi2c3, (0x58 << 1) | 0x01, data, sizeof(data), HAL_MAX_DELAY);
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2306      	movs	r3, #6
 80008ae:	21b1      	movs	r1, #177	; 0xb1
 80008b0:	4816      	ldr	r0, [pc, #88]	; (800090c <main+0x134>)
 80008b2:	f001 fa81 	bl	8001db8 <HAL_I2C_Master_Receive>
		// Process data to get CO2 and TVOC
		CO2 = (data[0] << 8) | data[1];
 80008b6:	793b      	ldrb	r3, [r7, #4]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <main+0x148>)
 80008c6:	801a      	strh	r2, [r3, #0]
		TVOC = (data[3] << 8) | data[4];        // Print data to Serial port (UART)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	7a3b      	ldrb	r3, [r7, #8]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <main+0x14c>)
 80008da:	801a      	strh	r2, [r3, #0]
		//sprintf(buf, "CO2: %d TVOC: %d \r\n", CO2, TVOC);
		//HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
		sprintf((char*) co2Buf, "%d", CO2);
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <main+0x148>)
 80008de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4910      	ldr	r1, [pc, #64]	; (8000928 <main+0x150>)
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <main+0x154>)
 80008e8:	f005 fa88 	bl	8005dfc <siprintf>
  {
 80008ec:	e7b1      	b.n	8000852 <main+0x7a>
 80008ee:	bf00      	nop
 80008f0:	08006fac 	.word	0x08006fac
 80008f4:	08006f74 	.word	0x08006f74
 80008f8:	08006f8c 	.word	0x08006f8c
 80008fc:	20000134 	.word	0x20000134
 8000900:	200001bc 	.word	0x200001bc
 8000904:	2000008c 	.word	0x2000008c
 8000908:	08006fb4 	.word	0x08006fb4
 800090c:	200000e0 	.word	0x200000e0
 8000910:	20000004 	.word	0x20000004
 8000914:	20000000 	.word	0x20000000
 8000918:	08006fa4 	.word	0x08006fa4
 800091c:	200001c0 	.word	0x200001c0
 8000920:	200001d8 	.word	0x200001d8
 8000924:	200001da 	.word	0x200001da
 8000928:	08006fa8 	.word	0x08006fa8
 800092c:	200001cc 	.word	0x200001cc

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	; 0x58
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2244      	movs	r2, #68	; 0x44
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f005 fabf 	bl	8005ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000956:	f003 faad 	bl	8003eb4 <HAL_PWREx_ControlVoltageScaling>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000960:	f000 fa3a 	bl	8000dd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000964:	f003 fa88 	bl	8003e78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <SystemClock_Config+0xc0>)
 800096a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <SystemClock_Config+0xc0>)
 8000970:	f023 0318 	bic.w	r3, r3, #24
 8000974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000978:	2314      	movs	r3, #20
 800097a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000990:	2301      	movs	r3, #1
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000998:	2310      	movs	r3, #16
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800099c:	2307      	movs	r3, #7
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fad7 	bl	8003f60 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009b8:	f000 fa0e 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2303      	movs	r3, #3
 80009c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fed7 	bl	8004788 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009e0:	f000 f9fa 	bl	8000dd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009e4:	f004 faea 	bl	8004fbc <HAL_RCCEx_EnableMSIPLLMode>
}
 80009e8:	bf00      	nop
 80009ea:	3758      	adds	r7, #88	; 0x58
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000

080009f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_I2C1_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_I2C1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a06:	2220      	movs	r2, #32
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a30:	f001 f80e 	bl	8001a50 <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3a:	f000 f9cd 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a42:	f003 f981 	bl	8003d48 <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 f9c4 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a54:	f003 f9c3 	bl	8003dde <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f9bb 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000008c 	.word	0x2000008c
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	00707cbb 	.word	0x00707cbb

08000a74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_I2C3_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_I2C3_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000ab0:	f000 ffce 	bl	8001a50 <HAL_I2C_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aba:	f000 f98d 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000ac2:	f003 f941 	bl	8003d48 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000acc:	f000 f984 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_I2C3_Init+0x74>)
 8000ad4:	f003 f983 	bl	8003dde <HAL_I2CEx_ConfigDigitalFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 f97b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000e0 	.word	0x200000e0
 8000aec:	40005c00 	.word	0x40005c00
 8000af0:	00707cbb 	.word	0x00707cbb

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART2_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b38:	f004 fb42 	bl	80051c0 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f949 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000134 	.word	0x20000134
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDOUT_Pin|output1_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f640 0108 	movw	r1, #2056	; 0x808
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 ff30 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <MX_GPIO_Init+0xd8>)
 8000bc6:	f000 ff2b 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDOUT_Pin output1_Pin */
  GPIO_InitStruct.Pin = LEDOUT_Pin|output1_Pin;
 8000bca:	f640 0308 	movw	r3, #2056	; 0x808
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f000 fdb1 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000bea:	2302      	movs	r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_GPIO_Init+0xd8>)
 8000bfe:	f000 fda5 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_GPIO_Init+0xd8>)
 8000c1a:	f000 fd97 	bl	800174c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400

08000c30 <HAL_I2C_SlaveRxCpltCallback>:
 * 0x01 - Request temperature data
 * 0x02 - Turn single LED ON
 * 0x03 - Turn single LED OFF
 * 0x04 - Request button data (Not in use)
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if (received_command == 0x01) {
 8000c38:	4b59      	ldr	r3, [pc, #356]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d132      	bne.n	8000ca6 <HAL_I2C_SlaveRxCpltCallback+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received TEMP flag, returning temp: ", 36, HAL_MAX_DELAY);
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2224      	movs	r2, #36	; 0x24
 8000c46:	4957      	ldr	r1, [pc, #348]	; (8000da4 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000c48:	4857      	ldr	r0, [pc, #348]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000c4a:	f004 fb07 	bl	800525c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, temperatureBuf, strlen((char*)temperatureBuf), HAL_MAX_DELAY);
 8000c4e:	4857      	ldr	r0, [pc, #348]	; (8000dac <HAL_I2C_SlaveRxCpltCallback+0x17c>)
 8000c50:	f7ff fabe 	bl	80001d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	4953      	ldr	r1, [pc, #332]	; (8000dac <HAL_I2C_SlaveRxCpltCallback+0x17c>)
 8000c5e:	4852      	ldr	r0, [pc, #328]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000c60:	f004 fafc 	bl	800525c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4951      	ldr	r1, [pc, #324]	; (8000db0 <HAL_I2C_SlaveRxCpltCallback+0x180>)
 8000c6c:	484e      	ldr	r0, [pc, #312]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000c6e:	f004 faf5 	bl	800525c <HAL_UART_Transmit>
	    if (HAL_I2C_Slave_Transmit_IT(&hi2c1, temperatureBuf, strlen((char*)temperatureBuf)) != HAL_OK) {
 8000c72:	484e      	ldr	r0, [pc, #312]	; (8000dac <HAL_I2C_SlaveRxCpltCallback+0x17c>)
 8000c74:	f7ff faac 	bl	80001d0 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	494b      	ldr	r1, [pc, #300]	; (8000dac <HAL_I2C_SlaveRxCpltCallback+0x17c>)
 8000c80:	484c      	ldr	r0, [pc, #304]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000c82:	f001 f98f 	bl	8001fa4 <HAL_I2C_Slave_Transmit_IT>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_I2C_SlaveRxCpltCallback+0x6a>
	    	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	2228      	movs	r2, #40	; 0x28
 8000c92:	4949      	ldr	r1, [pc, #292]	; (8000db8 <HAL_I2C_SlaveRxCpltCallback+0x188>)
 8000c94:	4844      	ldr	r0, [pc, #272]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000c96:	f004 fae1 	bl	800525c <HAL_UART_Transmit>
	    }
	    HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4940      	ldr	r1, [pc, #256]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000c9e:	4845      	ldr	r0, [pc, #276]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000ca0:	f001 f9ee 	bl	8002080 <HAL_I2C_Slave_Receive_IT>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
	} else {
		HAL_I2C_Slave_Transmit_IT(&hi2c1, (char*)"Huh?", 5);
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
	}
}
 8000ca4:	e078      	b.n	8000d98 <HAL_I2C_SlaveRxCpltCallback+0x168>
	} else if (received_command == 0x02) {
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d112      	bne.n	8000cd4 <HAL_I2C_SlaveRxCpltCallback+0xa4>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDON flag, turning LED ON\n\r", 37, HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2225      	movs	r2, #37	; 0x25
 8000cb4:	4941      	ldr	r1, [pc, #260]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x18c>)
 8000cb6:	483c      	ldr	r0, [pc, #240]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000cb8:	f004 fad0 	bl	800525c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f000 feac 	bl	8001a20 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4935      	ldr	r1, [pc, #212]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000ccc:	4839      	ldr	r0, [pc, #228]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000cce:	f001 f9d7 	bl	8002080 <HAL_I2C_Slave_Receive_IT>
}
 8000cd2:	e061      	b.n	8000d98 <HAL_I2C_SlaveRxCpltCallback+0x168>
	} else if (received_command == 0x03) {
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d112      	bne.n	8000d02 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDOFF flag, turning LED OFF\n\r", 39, HAL_MAX_DELAY);
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	2227      	movs	r2, #39	; 0x27
 8000ce2:	4937      	ldr	r1, [pc, #220]	; (8000dc0 <HAL_I2C_SlaveRxCpltCallback+0x190>)
 8000ce4:	4830      	ldr	r0, [pc, #192]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000ce6:	f004 fab9 	bl	800525c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2108      	movs	r1, #8
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f000 fe95 	bl	8001a20 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4929      	ldr	r1, [pc, #164]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000cfa:	482e      	ldr	r0, [pc, #184]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000cfc:	f001 f9c0 	bl	8002080 <HAL_I2C_Slave_Receive_IT>
}
 8000d00:	e04a      	b.n	8000d98 <HAL_I2C_SlaveRxCpltCallback+0x168>
	} else if (received_command == 0x04) {
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d046      	beq.n	8000d98 <HAL_I2C_SlaveRxCpltCallback+0x168>
	}  else if (received_command == 0x06){
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d136      	bne.n	8000d80 <HAL_I2C_SlaveRxCpltCallback+0x150>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received CO2 flag, returning CO2: ", 34, HAL_MAX_DELAY);
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	2222      	movs	r2, #34	; 0x22
 8000d18:	492a      	ldr	r1, [pc, #168]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x194>)
 8000d1a:	4823      	ldr	r0, [pc, #140]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000d1c:	f004 fa9e 	bl	800525c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, co2Buf, strlen((char*)co2Buf), HAL_MAX_DELAY);
 8000d20:	4829      	ldr	r0, [pc, #164]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x198>)
 8000d22:	f7ff fa55 	bl	80001d0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	4926      	ldr	r1, [pc, #152]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x198>)
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000d32:	f004 fa93 	bl	800525c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	491c      	ldr	r1, [pc, #112]	; (8000db0 <HAL_I2C_SlaveRxCpltCallback+0x180>)
 8000d3e:	481a      	ldr	r0, [pc, #104]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000d40:	f004 fa8c 	bl	800525c <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, CO2, strlen((char*)co2Buf)) != HAL_OK) {
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_I2C_SlaveRxCpltCallback+0x19c>)
 8000d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4a:	461c      	mov	r4, r3
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x198>)
 8000d4e:	f7ff fa3f 	bl	80001d0 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	4621      	mov	r1, r4
 8000d5a:	4816      	ldr	r0, [pc, #88]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000d5c:	f001 f922 	bl	8001fa4 <HAL_I2C_Slave_Transmit_IT>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_I2C_SlaveRxCpltCallback+0x144>
			HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	4912      	ldr	r1, [pc, #72]	; (8000db8 <HAL_I2C_SlaveRxCpltCallback+0x188>)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000d70:	f004 fa74 	bl	800525c <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	490a      	ldr	r1, [pc, #40]	; (8000da0 <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000d78:	480e      	ldr	r0, [pc, #56]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000d7a:	f001 f981 	bl	8002080 <HAL_I2C_Slave_Receive_IT>
}
 8000d7e:	e00b      	b.n	8000d98 <HAL_I2C_SlaveRxCpltCallback+0x168>
		HAL_I2C_Slave_Transmit_IT(&hi2c1, (char*)"Huh?", 5);
 8000d80:	2205      	movs	r2, #5
 8000d82:	4913      	ldr	r1, [pc, #76]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x1a0>)
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000d86:	f001 f90d 	bl	8001fa4 <HAL_I2C_Slave_Transmit_IT>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	2205      	movs	r2, #5
 8000d90:	4910      	ldr	r1, [pc, #64]	; (8000dd4 <HAL_I2C_SlaveRxCpltCallback+0x1a4>)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000d94:	f004 fa62 	bl	800525c <HAL_UART_Transmit>
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	200001bc 	.word	0x200001bc
 8000da4:	08006fb8 	.word	0x08006fb8
 8000da8:	20000134 	.word	0x20000134
 8000dac:	200001c0 	.word	0x200001c0
 8000db0:	08006fe0 	.word	0x08006fe0
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	08006fe4 	.word	0x08006fe4
 8000dbc:	08006ff4 	.word	0x08006ff4
 8000dc0:	0800701c 	.word	0x0800701c
 8000dc4:	08007044 	.word	0x08007044
 8000dc8:	200001cc 	.word	0x200001cc
 8000dcc:	200001d8 	.word	0x200001d8
 8000dd0:	08007068 	.word	0x08007068
 8000dd4:	08007070 	.word	0x08007070

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x44>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x44>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0a2      	sub	sp, #136	; 0x88
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	2254      	movs	r2, #84	; 0x54
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 f838 	bl	8005ec2 <memset>
  if(hi2c->Instance==I2C1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a5e      	ldr	r2, [pc, #376]	; (8000fd0 <HAL_I2C_MspInit+0x1a4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d148      	bne.n	8000eee <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e5c:	2340      	movs	r3, #64	; 0x40
 8000e5e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 feb1 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e74:	f7ff ffb0 	bl	8000dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e90:	23c0      	movs	r3, #192	; 0xc0
 8000e92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000eac:	4619      	mov	r1, r3
 8000eae:	484a      	ldr	r0, [pc, #296]	; (8000fd8 <HAL_I2C_MspInit+0x1ac>)
 8000eb0:	f000 fc4c 	bl	800174c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb4:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	201f      	movs	r0, #31
 8000ed2:	f000 fbb6 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ed6:	201f      	movs	r0, #31
 8000ed8:	f000 fbcf 	bl	800167a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2020      	movs	r0, #32
 8000ee2:	f000 fbae 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ee6:	2020      	movs	r0, #32
 8000ee8:	f000 fbc7 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000eec:	e06c      	b.n	8000fc8 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a3a      	ldr	r2, [pc, #232]	; (8000fdc <HAL_I2C_MspInit+0x1b0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d167      	bne.n	8000fc8 <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fe62 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_I2C_MspInit+0xea>
      Error_Handler();
 8000f12:	f7ff ff61 	bl	8000dd8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 fbf0 	bl	800174c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <HAL_I2C_MspInit+0x1ac>)
 8000f8c:	f000 fbde 	bl	800174c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_I2C_MspInit+0x1a8>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2048      	movs	r0, #72	; 0x48
 8000fae:	f000 fb48 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000fb2:	2048      	movs	r0, #72	; 0x48
 8000fb4:	f000 fb61 	bl	800167a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2049      	movs	r0, #73	; 0x49
 8000fbe:	f000 fb40 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000fc2:	2049      	movs	r0, #73	; 0x49
 8000fc4:	f000 fb59 	bl	800167a <HAL_NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3788      	adds	r7, #136	; 0x88
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	40005c00 	.word	0x40005c00

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09e      	sub	sp, #120	; 0x78
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2254      	movs	r2, #84	; 0x54
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f004 ff5e 	bl	8005ec2 <memset>
  if(huart->Instance==USART2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <HAL_UART_MspInit+0xcc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d148      	bne.n	80010a2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fdd7 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001028:	f7ff fed6 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_UART_MspInit+0xd0>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_UART_MspInit+0xd0>)
 8001032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001036:	6593      	str	r3, [r2, #88]	; 0x58
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0xd0>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_UART_MspInit+0xd0>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0xd0>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_UART_MspInit+0xd0>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106c:	2307      	movs	r3, #7
 800106e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f000 fb67 	bl	800174c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800107e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001082:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001090:	2303      	movs	r3, #3
 8001092:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f000 fb55 	bl	800174c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3778      	adds	r7, #120	; 0x78
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40004400 	.word	0x40004400
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f980 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <I2C1_EV_IRQHandler+0x10>)
 800110e:	f001 f921 	bl	8002354 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000008c 	.word	0x2000008c

0800111c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <I2C1_ER_IRQHandler+0x10>)
 8001122:	f001 f931 	bl	8002388 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000008c 	.word	0x2000008c

08001130 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <I2C3_EV_IRQHandler+0x10>)
 8001136:	f001 f90d 	bl	8002354 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000e0 	.word	0x200000e0

08001144 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <I2C3_ER_IRQHandler+0x10>)
 800114a:	f001 f91d 	bl	8002388 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000e0 	.word	0x200000e0

08001158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001172:	f004 fef5 	bl	8005f60 <__errno>
 8001176:	4603      	mov	r3, r0
 8001178:	2216      	movs	r2, #22
 800117a:	601a      	str	r2, [r3, #0]
  return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_exit>:

void _exit (int status)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffe7 	bl	8001168 <_kill>
  while (1) {}    /* Make sure we hang here */
 800119a:	e7fe      	b.n	800119a <_exit+0x12>

0800119c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
  }

  return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e009      	b.n	80011fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf1      	blt.n	80011e8 <_write+0x12>
  }
  return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	605a      	str	r2, [r3, #4]
  return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f004 fe5a 	bl	8005f60 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20010000 	.word	0x20010000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200001dc 	.word	0x200001dc
 80012e0:	20000330 	.word	0x20000330

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800130c:	f7ff ffea 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f004 fe19 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fa4d 	bl	80007d8 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800134c:	0800714c 	.word	0x0800714c
  ldr r2, =_sbss
 8001350:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001354:	20000330 	.word	0x20000330

08001358 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_IRQHandler>

0800135a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f961 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f80e 	bl	800138c <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e001      	b.n	8001380 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800137c:	f7ff fd32 	bl	8000de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001380:	79fb      	ldrb	r3, [r7, #7]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_InitTick+0x6c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_InitTick+0x70>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_InitTick+0x6c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f96d 	bl	8001696 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d809      	bhi.n	80013dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f937 	bl	8001642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_InitTick+0x74>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e007      	b.n	80013ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e004      	b.n	80013ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e001      	b.n	80013ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	20000008 	.word	0x20000008
 8001400:	2000000c 	.word	0x2000000c

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000010 	.word	0x20000010
 8001428:	200001e0 	.word	0x200001e0

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200001e0 	.word	0x200001e0

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffde 	bl	800142c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000010 	.word	0x20000010

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff29 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff3e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff8e 	bl	8001580 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5d 	bl	800152c <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff31 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e029      	b.n	8001726 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f003 021c 	and.w	r2, r3, #28
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
    }
  }
  return status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	e148      	b.n	80019ee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 813a 	beq.w	80019e8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d005      	beq.n	800178c <HAL_GPIO_Init+0x40>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d130      	bne.n	80017ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c2:	2201      	movs	r2, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 0201 	and.w	r2, r3, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d017      	beq.n	800182a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d123      	bne.n	800187e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	6939      	ldr	r1, [r7, #16]
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0203 	and.w	r2, r3, #3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8094 	beq.w	80019e8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c0:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6613      	str	r3, [r2, #96]	; 0x60
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80018ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d8:	4a4d      	ldr	r2, [pc, #308]	; (8001a10 <HAL_GPIO_Init+0x2c4>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1d4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1d0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <HAL_GPIO_Init+0x2cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1cc>
 8001914:	2302      	movs	r3, #2
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1d6>
 8001918:	2307      	movs	r3, #7
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1d6>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1d6>
 8001920:	2300      	movs	r3, #0
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001932:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2c4>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001964:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f aeaf 	bne.w	800175c <HAL_GPIO_Init+0x10>
  }
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	48000400 	.word	0x48000400
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e08d      	b.n	8001b7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff f9d8 	bl	8000e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e006      	b.n	8001ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d108      	bne.n	8001af2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	e007      	b.n	8001b02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69d9      	ldr	r1, [r3, #28]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	817b      	strh	r3, [r7, #10]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	f040 80fd 	bne.w	8001da4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_Master_Transmit+0x30>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e0f6      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x21e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fc34 	bl	800142c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2319      	movs	r3, #25
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f001 fd69 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0e1      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2221      	movs	r2, #33	; 0x21
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2210      	movs	r2, #16
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	893a      	ldrh	r2, [r7, #8]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d906      	bls.n	8001c22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	22ff      	movs	r2, #255	; 0xff
 8001c18:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e007      	b.n	8001c32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d024      	beq.n	8001c84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	8979      	ldrh	r1, [r7, #10]
 8001c76:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <HAL_I2C_Master_Transmit+0x228>)
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f001 ff4f 	bl	8003b20 <I2C_TransferConfig>
 8001c82:	e066      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	8979      	ldrh	r1, [r7, #10]
 8001c8c:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <HAL_I2C_Master_Transmit+0x228>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f001 ff44 	bl	8003b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c98:	e05b      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f001 fd52 	bl	8003748 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07b      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d034      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x1ca>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d130      	bne.n	8001d52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f001 fcd5 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e04d      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2bff      	cmp	r3, #255	; 0xff
 8001d12:	d90e      	bls.n	8001d32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	22ff      	movs	r2, #255	; 0xff
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	8979      	ldrh	r1, [r7, #10]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f001 fef8 	bl	8003b20 <I2C_TransferConfig>
 8001d30:	e00f      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	8979      	ldrh	r1, [r7, #10]
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f001 fee7 	bl	8003b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d19e      	bne.n	8001c9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	6a39      	ldr	r1, [r7, #32]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f001 fd38 	bl	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e01a      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2220      	movs	r2, #32
 8001d76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_I2C_Master_Transmit+0x22c>)
 8001d84:	400b      	ands	r3, r1
 8001d86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	80002000 	.word	0x80002000
 8001db4:	fe00e800 	.word	0xfe00e800

08001db8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	817b      	strh	r3, [r7, #10]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	f040 80db 	bne.w	8001f90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_I2C_Master_Receive+0x30>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0d4      	b.n	8001f92 <HAL_I2C_Master_Receive+0x1da>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001df0:	f7ff fb1c 	bl	800142c <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2319      	movs	r3, #25
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f001 fc51 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0bf      	b.n	8001f92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2222      	movs	r2, #34	; 0x22
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	893a      	ldrh	r2, [r7, #8]
 8001e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2bff      	cmp	r3, #255	; 0xff
 8001e42:	d90e      	bls.n	8001e62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	8979      	ldrh	r1, [r7, #10]
 8001e52:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_I2C_Master_Receive+0x1e4>)
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f001 fe60 	bl	8003b20 <I2C_TransferConfig>
 8001e60:	e06d      	b.n	8001f3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	8979      	ldrh	r1, [r7, #10]
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_I2C_Master_Receive+0x1e4>)
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f001 fe4f 	bl	8003b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e82:	e05c      	b.n	8001f3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	6a39      	ldr	r1, [r7, #32]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f001 fce7 	bl	800385c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e07c      	b.n	8001f92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d034      	beq.n	8001f3e <HAL_I2C_Master_Receive+0x186>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d130      	bne.n	8001f3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f001 fbdf 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e04d      	b.n	8001f92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2bff      	cmp	r3, #255	; 0xff
 8001efe:	d90e      	bls.n	8001f1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	8979      	ldrh	r1, [r7, #10]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f001 fe02 	bl	8003b20 <I2C_TransferConfig>
 8001f1c:	e00f      	b.n	8001f3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	8979      	ldrh	r1, [r7, #10]
 8001f30:	2300      	movs	r3, #0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f001 fdf1 	bl	8003b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d19d      	bne.n	8001e84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6a39      	ldr	r1, [r7, #32]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f001 fc42 	bl	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01a      	b.n	8001f92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_I2C_Master_Receive+0x1e8>)
 8001f70:	400b      	ands	r3, r1
 8001f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	80002400 	.word	0x80002400
 8001fa0:	fe00e800 	.word	0xfe00e800

08001fa4 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d156      	bne.n	800206c <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Slave_Transmit_IT+0x28>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e050      	b.n	800206e <HAL_I2C_Slave_Transmit_IT+0xca>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2221      	movs	r2, #33	; 0x21
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	88fa      	ldrh	r2, [r7, #6]
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_I2C_Slave_Transmit_IT+0xd8>)
 800201a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002024:	d117      	bne.n	8002056 <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800205e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f001 fd8e 	bl	8003b84 <I2C_Enable_IRQ>

    return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e000      	b.n	800206e <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800206c:	2302      	movs	r3, #2
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	ffff0000 	.word	0xffff0000
 800207c:	080024fb 	.word	0x080024fb

08002080 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	d139      	bne.n	800210e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2C_Slave_Receive_IT+0x28>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e033      	b.n	8002110 <HAL_I2C_Slave_Receive_IT+0x90>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2222      	movs	r2, #34	; 0x22
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_I2C_Slave_Receive_IT+0x98>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_I2C_Slave_Receive_IT+0x9c>)
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002100:	f248 0102 	movw	r1, #32770	; 0x8002
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f001 fd3d 	bl	8003b84 <I2C_Enable_IRQ>

    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	ffff0000 	.word	0xffff0000
 800211c:	080024fb 	.word	0x080024fb

08002120 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	f040 80fd 	bne.w	8002342 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_I2C_Mem_Read+0x34>
 800214e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0f1      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_I2C_Mem_Read+0x4e>
 800216a:	2302      	movs	r3, #2
 800216c:	e0ea      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002176:	f7ff f959 	bl	800142c <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2319      	movs	r3, #25
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f001 fa8e 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d5      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2222      	movs	r2, #34	; 0x22
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a3a      	ldr	r2, [r7, #32]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021c0:	88f8      	ldrh	r0, [r7, #6]
 80021c2:	893a      	ldrh	r2, [r7, #8]
 80021c4:	8979      	ldrh	r1, [r7, #10]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	4603      	mov	r3, r0
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fd71 	bl	8002cb8 <I2C_RequestMemoryRead>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0ad      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d90e      	bls.n	8002210 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22ff      	movs	r2, #255	; 0xff
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	4b52      	ldr	r3, [pc, #328]	; (800234c <HAL_I2C_Mem_Read+0x22c>)
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f001 fc89 	bl	8003b20 <I2C_TransferConfig>
 800220e:	e00f      	b.n	8002230 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_I2C_Mem_Read+0x22c>)
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f001 fc78 	bl	8003b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	2200      	movs	r2, #0
 8002238:	2104      	movs	r1, #4
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f001 fa35 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e07c      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d034      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x1d0>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d130      	bne.n	80022f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	2200      	movs	r2, #0
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f001 fa06 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e04d      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d90e      	bls.n	80022d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	8979      	ldrh	r1, [r7, #10]
 80022c0:	2300      	movs	r3, #0
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f001 fc29 	bl	8003b20 <I2C_TransferConfig>
 80022ce:	e00f      	b.n	80022f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	2300      	movs	r3, #0
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f001 fc18 	bl	8003b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d19a      	bne.n	8002230 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f001 fa69 	bl	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e01a      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2220      	movs	r2, #32
 8002314:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_I2C_Mem_Read+0x230>)
 8002322:	400b      	ands	r3, r1
 8002324:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	80002400 	.word	0x80002400
 8002350:	fe00e800 	.word	0xfe00e800

08002354 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
  }
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00f      	beq.n	80023ca <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00f      	beq.n	80023f4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f043 0208 	orr.w	r2, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00f      	beq.n	800241e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	f043 0202 	orr.w	r2, r3, #2
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 030b 	and.w	r3, r3, #11
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 ffe1 	bl	80033f8 <I2C_ITError>
  }
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
 8002486:	4613      	mov	r3, r2
 8002488:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <I2C_Slave_ISR_IT+0x24>
 800251a:	2302      	movs	r3, #2
 800251c:	e0e1      	b.n	80026e2 <I2C_Slave_ISR_IT+0x1e8>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fdf5 	bl	800312c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d04b      	beq.n	80025e4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002552:	2b00      	cmp	r3, #0
 8002554:	d046      	beq.n	80025e4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d128      	bne.n	80025b2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b28      	cmp	r3, #40	; 0x28
 800256a:	d108      	bne.n	800257e <I2C_Slave_ISR_IT+0x84>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002572:	d104      	bne.n	800257e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 feea 	bl	8003350 <I2C_ITListenCplt>
 800257c:	e031      	b.n	80025e2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b29      	cmp	r3, #41	; 0x29
 8002588:	d10e      	bne.n	80025a8 <I2C_Slave_ISR_IT+0xae>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002590:	d00a      	beq.n	80025a8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2210      	movs	r2, #16
 8002598:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f001 f843 	bl	8003626 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fc9e 	bl	8002ee2 <I2C_ITSlaveSeqCplt>
 80025a6:	e01c      	b.n	80025e2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025b0:	e08f      	b.n	80026d2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2210      	movs	r2, #16
 80025b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <I2C_Slave_ISR_IT+0xda>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d2:	d17e      	bne.n	80026d2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 ff0c 	bl	80033f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025e0:	e077      	b.n	80026d2 <I2C_Slave_ISR_IT+0x1d8>
 80025e2:	e076      	b.n	80026d2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d02f      	beq.n	800264e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02a      	beq.n	800264e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d018      	beq.n	8002634 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d14b      	bne.n	80026d6 <I2C_Slave_ISR_IT+0x1dc>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002644:	d047      	beq.n	80026d6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fc4b 	bl	8002ee2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800264c:	e043      	b.n	80026d6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002662:	6939      	ldr	r1, [r7, #16]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb7b 	bl	8002d60 <I2C_ITAddrCplt>
 800266a:	e035      	b.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d030      	beq.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800267c:	2b00      	cmp	r3, #0
 800267e:	d02b      	beq.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d018      	beq.n	80026bc <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80026ba:	e00d      	b.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c2:	d002      	beq.n	80026ca <I2C_Slave_ISR_IT+0x1d0>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fc09 	bl	8002ee2 <I2C_ITSlaveSeqCplt>
 80026d0:	e002      	b.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80026d6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b088      	sub	sp, #32
 80026ee:	af02      	add	r7, sp, #8
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <I2C_Master_ISR_DMA+0x1a>
 8002700:	2302      	movs	r3, #2
 8002702:	e0d9      	b.n	80028b8 <I2C_Master_ISR_DMA+0x1ce>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800271c:	2b00      	cmp	r3, #0
 800271e:	d011      	beq.n	8002744 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2210      	movs	r2, #16
 8002726:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002734:	2120      	movs	r1, #32
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f001 fa24 	bl	8003b84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 ff72 	bl	8003626 <I2C_Flush_TXDR>
 8002742:	e0b4      	b.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d071      	beq.n	8002832 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002754:	2b00      	cmp	r3, #0
 8002756:	d06c      	beq.n	8002832 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d04e      	beq.n	8002810 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d906      	bls.n	8002798 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e010      	b.n	80027ba <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027aa:	d003      	beq.n	80027b4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e002      	b.n	80027ba <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	8a79      	ldrh	r1, [r7, #18]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f001 f9a9 	bl	8003b20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b22      	cmp	r3, #34	; 0x22
 80027ea:	d108      	bne.n	80027fe <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80027fc:	e057      	b.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800280e:	e04e      	b.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800281e:	d003      	beq.n	8002828 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fb21 	bl	8002e68 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002826:	e042      	b.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fde4 	bl	80033f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002830:	e03d      	b.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d028      	beq.n	800288e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d119      	bne.n	8002884 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800285e:	d025      	beq.n	80028ac <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002868:	d108      	bne.n	800287c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002878:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800287a:	e017      	b.n	80028ac <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 faf3 	bl	8002e68 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002882:	e013      	b.n	80028ac <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002884:	2140      	movs	r1, #64	; 0x40
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fdb6 	bl	80033f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800288c:	e00e      	b.n	80028ac <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fb79 	bl	8002f9c <I2C_ITMasterCplt>
 80028aa:	e000      	b.n	80028ae <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80028cc:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <I2C_Mem_ISR_DMA+0x244>)
 80028ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <I2C_Mem_ISR_DMA+0x1e>
 80028da:	2302      	movs	r3, #2
 80028dc:	e10e      	b.n	8002afc <I2C_Mem_ISR_DMA+0x23c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d011      	beq.n	800291e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2210      	movs	r2, #16
 8002900:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800290e:	2120      	movs	r1, #32
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f001 f937 	bl	8003b84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fe85 	bl	8003626 <I2C_Flush_TXDR>
 800291c:	e0e9      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	651a      	str	r2, [r3, #80]	; 0x50
 8002944:	e0d5      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05f      	beq.n	8002a10 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002956:	2b00      	cmp	r3, #0
 8002958:	d05a      	beq.n	8002a10 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800295a:	2101      	movs	r1, #1
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f001 f995 	bl	8003c8c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002962:	2110      	movs	r1, #16
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f001 f90d 	bl	8003b84 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d048      	beq.n	8002a06 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d910      	bls.n	80029a0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	22ff      	movs	r2, #255	; 0xff
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	b299      	uxth	r1, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	b2da      	uxtb	r2, r3
 8002990:	2300      	movs	r3, #0
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f001 f8c1 	bl	8003b20 <I2C_TransferConfig>
 800299e:	e011      	b.n	80029c4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	b299      	uxth	r1, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f001 f8ae 	bl	8003b20 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b22      	cmp	r3, #34	; 0x22
 80029e0:	d108      	bne.n	80029f4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029f2:	e07e      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a02:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a04:	e075      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fcf5 	bl	80033f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a0e:	e070      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d05d      	beq.n	8002ad6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d058      	beq.n	8002ad6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a24:	2101      	movs	r1, #1
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f001 f930 	bl	8003c8c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a2c:	2110      	movs	r1, #16
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f001 f8a8 	bl	8003b84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b22      	cmp	r3, #34	; 0x22
 8002a3e:	d101      	bne.n	8002a44 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a40:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <I2C_Mem_ISR_DMA+0x248>)
 8002a42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2bff      	cmp	r3, #255	; 0xff
 8002a4c:	d910      	bls.n	8002a70 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f001 f859 	bl	8003b20 <I2C_TransferConfig>
 8002a6e:	e011      	b.n	8002a94 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	b299      	uxth	r1, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f001 f846 	bl	8003b20 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b22      	cmp	r3, #34	; 0x22
 8002ab0:	d108      	bne.n	8002ac4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ac2:	e016      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ad4:	e00d      	b.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fa55 	bl	8002f9c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	80002000 	.word	0x80002000
 8002b08:	80002400 	.word	0x80002400

08002b0c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <I2C_Slave_ISR_DMA+0x24>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0bf      	b.n	8002cb0 <I2C_Slave_ISR_DMA+0x1a4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 faec 	bl	800312c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8095 	beq.w	8002c8a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 808f 	beq.w	8002c8a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d07d      	beq.n	8002c7c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00c      	beq.n	8002ba2 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d128      	bne.n	8002c1c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b28      	cmp	r3, #40	; 0x28
 8002bd4:	d108      	bne.n	8002be8 <I2C_Slave_ISR_DMA+0xdc>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bdc:	d104      	bne.n	8002be8 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fbb5 	bl	8003350 <I2C_ITListenCplt>
 8002be6:	e048      	b.n	8002c7a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b29      	cmp	r3, #41	; 0x29
 8002bf2:	d10e      	bne.n	8002c12 <I2C_Slave_ISR_DMA+0x106>
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bfa:	d00a      	beq.n	8002c12 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fd0e 	bl	8003626 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f969 	bl	8002ee2 <I2C_ITSlaveSeqCplt>
 8002c10:	e033      	b.n	8002c7a <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2210      	movs	r2, #16
 8002c18:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c1a:	e034      	b.n	8002c86 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2210      	movs	r2, #16
 8002c22:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c36:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <I2C_Slave_ISR_DMA+0x13a>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d11f      	bne.n	8002c86 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b21      	cmp	r3, #33	; 0x21
 8002c4a:	d002      	beq.n	8002c52 <I2C_Slave_ISR_DMA+0x146>
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b29      	cmp	r3, #41	; 0x29
 8002c50:	d103      	bne.n	8002c5a <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2221      	movs	r2, #33	; 0x21
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
 8002c58:	e008      	b.n	8002c6c <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b22      	cmp	r3, #34	; 0x22
 8002c5e:	d002      	beq.n	8002c66 <I2C_Slave_ISR_DMA+0x15a>
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b2a      	cmp	r3, #42	; 0x2a
 8002c64:	d102      	bne.n	8002c6c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2222      	movs	r2, #34	; 0x22
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	4619      	mov	r1, r3
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fbc0 	bl	80033f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8002c78:	e005      	b.n	8002c86 <I2C_Slave_ISR_DMA+0x17a>
 8002c7a:	e004      	b.n	8002c86 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2210      	movs	r2, #16
 8002c82:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c84:	e00f      	b.n	8002ca6 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002c86:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c88:	e00d      	b.n	8002ca6 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f85d 	bl	8002d60 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	813b      	strh	r3, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <I2C_RequestMemoryRead+0xa4>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 ff1e 	bl	8003b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fd2d 	bl	8003748 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e02c      	b.n	8002d52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
 8002d08:	e015      	b.n	8002d36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fd13 	bl	8003748 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e012      	b.n	8002d52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2c:	893b      	ldrh	r3, [r7, #8]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fcb2 	bl	80036aa <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	80002000 	.word	0x80002000

08002d60 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d76:	2b28      	cmp	r3, #40	; 0x28
 8002d78:	d16a      	bne.n	8002e50 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d98:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002db4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d138      	bne.n	8002e30 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	09db      	lsrs	r3, r3, #7
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	89bb      	ldrh	r3, [r7, #12]
 8002dc6:	4053      	eors	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f003 0306 	and.w	r3, r3, #6
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11c      	bne.n	8002e0c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d13b      	bne.n	8002e60 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2208      	movs	r2, #8
 8002df4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dfe:	89ba      	ldrh	r2, [r7, #12]
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fb38 	bl	800247a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e0a:	e029      	b.n	8002e60 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 ff39 	bl	8003c8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e22:	89ba      	ldrh	r2, [r7, #12]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fb26 	bl	800247a <HAL_I2C_AddrCallback>
}
 8002e2e:	e017      	b.n	8002e60 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 ff29 	bl	8003c8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e42:	89ba      	ldrh	r2, [r7, #12]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fb16 	bl	800247a <HAL_I2C_AddrCallback>
}
 8002e4e:	e007      	b.n	8002e60 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2208      	movs	r2, #8
 8002e56:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b21      	cmp	r3, #33	; 0x21
 8002e82:	d115      	bne.n	8002eb0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2211      	movs	r2, #17
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fef6 	bl	8003c8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fac8 	bl	800243e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002eae:	e014      	b.n	8002eda <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2212      	movs	r2, #18
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fee0 	bl	8003c8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fabc 	bl	8002452 <HAL_I2C_MasterRxCpltCallback>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e00c      	b.n	8002f30 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b29      	cmp	r3, #41	; 0x29
 8002f3a:	d112      	bne.n	8002f62 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2228      	movs	r2, #40	; 0x28
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fe9d 	bl	8003c8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fa83 	bl	8002466 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f60:	e017      	b.n	8002f92 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f6c:	d111      	bne.n	8002f92 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2228      	movs	r2, #40	; 0x28
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2222      	movs	r2, #34	; 0x22
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fe84 	bl	8003c8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fe4f 	bl	8000c30 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b21      	cmp	r3, #33	; 0x21
 8002fbc:	d107      	bne.n	8002fce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fe63 	bl	8003c8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2211      	movs	r2, #17
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
 8002fcc:	e00c      	b.n	8002fe8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b22      	cmp	r3, #34	; 0x22
 8002fd8:	d106      	bne.n	8002fe8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fda:	2102      	movs	r1, #2
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fe55 	bl	8003c8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2212      	movs	r2, #18
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <I2C_ITMasterCplt+0x188>)
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a49      	ldr	r2, [pc, #292]	; (8003128 <I2C_ITMasterCplt+0x18c>)
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b60      	cmp	r3, #96	; 0x60
 800302c:	d10a      	bne.n	8003044 <I2C_ITMasterCplt+0xa8>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003042:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 faee 	bl	8003626 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d002      	beq.n	8003062 <I2C_ITMasterCplt+0xc6>
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4619      	mov	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f9c5 	bl	80033f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800306e:	e054      	b.n	800311a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b21      	cmp	r3, #33	; 0x21
 800307a:	d124      	bne.n	80030c6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d10b      	bne.n	80030ae <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff f9ff 	bl	80024aa <HAL_I2C_MemTxCpltCallback>
}
 80030ac:	e035      	b.n	800311a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff f9bd 	bl	800243e <HAL_I2C_MasterTxCpltCallback>
}
 80030c4:	e029      	b.n	800311a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b22      	cmp	r3, #34	; 0x22
 80030d0:	d123      	bne.n	800311a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d10b      	bne.n	8003104 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff f9de 	bl	80024be <HAL_I2C_MemRxCpltCallback>
}
 8003102:	e00a      	b.n	800311a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff f99c 	bl	8002452 <HAL_I2C_MasterRxCpltCallback>
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	fe00e800 	.word	0xfe00e800
 8003128:	ffff0000 	.word	0xffff0000

0800312c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2220      	movs	r2, #32
 8003150:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b21      	cmp	r3, #33	; 0x21
 8003156:	d002      	beq.n	800315e <I2C_ITSlaveCplt+0x32>
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b29      	cmp	r3, #41	; 0x29
 800315c:	d108      	bne.n	8003170 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800315e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fd92 	bl	8003c8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2221      	movs	r2, #33	; 0x21
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
 800316e:	e019      	b.n	80031a4 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	2b22      	cmp	r3, #34	; 0x22
 8003174:	d002      	beq.n	800317c <I2C_ITSlaveCplt+0x50>
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b2a      	cmp	r3, #42	; 0x2a
 800317a:	d108      	bne.n	800318e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800317c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fd83 	bl	8003c8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2222      	movs	r2, #34	; 0x22
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
 800318c:	e00a      	b.n	80031a4 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b28      	cmp	r3, #40	; 0x28
 8003192:	d107      	bne.n	80031a4 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003194:	f248 0103 	movw	r1, #32771	; 0x8003
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fd77 	bl	8003c8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b62      	ldr	r3, [pc, #392]	; (8003348 <I2C_ITSlaveCplt+0x21c>)
 80031c0:	400b      	ands	r3, r1
 80031c2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa2e 	bl	8003626 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01f      	beq.n	800322c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031fa:	e017      	b.n	800322c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003214:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d020      	beq.n	8003278 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8a4 	bl	80033f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b28      	cmp	r3, #40	; 0x28
 80032ba:	d141      	bne.n	8003340 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f846 	bl	8003350 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032c4:	e03c      	b.n	8003340 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ce:	d014      	beq.n	80032fa <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fe06 	bl	8002ee2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <I2C_ITSlaveCplt+0x220>)
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff f8cf 	bl	8002496 <HAL_I2C_ListenCpltCallback>
}
 80032f8:	e022      	b.n	8003340 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b22      	cmp	r3, #34	; 0x22
 8003304:	d10e      	bne.n	8003324 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd fc87 	bl	8000c30 <HAL_I2C_SlaveRxCpltCallback>
}
 8003322:	e00d      	b.n	8003340 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff f893 	bl	8002466 <HAL_I2C_SlaveTxCpltCallback>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	fe00e800 	.word	0xfe00e800
 800334c:	ffff0000 	.word	0xffff0000

08003350 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <I2C_ITListenCplt+0xa4>)
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d022      	beq.n	80033cc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f043 0204 	orr.w	r2, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fc5b 	bl	8003c8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2210      	movs	r2, #16
 80033dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff f855 	bl	8002496 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	ffff0000 	.word	0xffff0000

080033f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a6d      	ldr	r2, [pc, #436]	; (80035cc <I2C_ITError+0x1d4>)
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b28      	cmp	r3, #40	; 0x28
 800342e:	d005      	beq.n	800343c <I2C_ITError+0x44>
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b29      	cmp	r3, #41	; 0x29
 8003434:	d002      	beq.n	800343c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b2a      	cmp	r3, #42	; 0x2a
 800343a:	d10b      	bne.n	8003454 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800343c:	2103      	movs	r1, #3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fc24 	bl	8003c8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2228      	movs	r2, #40	; 0x28
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <I2C_ITError+0x1d8>)
 8003450:	635a      	str	r2, [r3, #52]	; 0x34
 8003452:	e030      	b.n	80034b6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003454:	f248 0103 	movw	r1, #32771	; 0x8003
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fc17 	bl	8003c8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8e1 	bl	8003626 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d01f      	beq.n	80034b0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b20      	cmp	r3, #32
 8003484:	d114      	bne.n	80034b0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d109      	bne.n	80034a8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2210      	movs	r2, #16
 800349a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2220      	movs	r2, #32
 80034ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d039      	beq.n	8003538 <I2C_ITError+0x140>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b11      	cmp	r3, #17
 80034c8:	d002      	beq.n	80034d0 <I2C_ITError+0xd8>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b21      	cmp	r3, #33	; 0x21
 80034ce:	d133      	bne.n	8003538 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034de:	d107      	bne.n	80034f0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe f91b 	bl	8001730 <HAL_DMA_GetState>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d017      	beq.n	8003530 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	4a33      	ldr	r2, [pc, #204]	; (80035d4 <I2C_ITError+0x1dc>)
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe f8ca 	bl	80016ae <HAL_DMA_Abort_IT>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04d      	beq.n	80035bc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352a:	4610      	mov	r0, r2
 800352c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800352e:	e045      	b.n	80035bc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f851 	bl	80035d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003536:	e041      	b.n	80035bc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d039      	beq.n	80035b4 <I2C_ITError+0x1bc>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b12      	cmp	r3, #18
 8003544:	d002      	beq.n	800354c <I2C_ITError+0x154>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b22      	cmp	r3, #34	; 0x22
 800354a:	d133      	bne.n	80035b4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355a:	d107      	bne.n	800356c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800356a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe f8dd 	bl	8001730 <HAL_DMA_GetState>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d017      	beq.n	80035ac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <I2C_ITError+0x1dc>)
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe f88c 	bl	80016ae <HAL_DMA_Abort_IT>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d011      	beq.n	80035c0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a6:	4610      	mov	r0, r2
 80035a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035aa:	e009      	b.n	80035c0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f813 	bl	80035d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035b2:	e005      	b.n	80035c0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f80f 	bl	80035d8 <I2C_TreatErrorCallback>
  }
}
 80035ba:	e002      	b.n	80035c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035c0:	bf00      	nop
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	ffff0000 	.word	0xffff0000
 80035d0:	080024fb 	.word	0x080024fb
 80035d4:	0800366f 	.word	0x0800366f

080035d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b60      	cmp	r3, #96	; 0x60
 80035ea:	d10e      	bne.n	800360a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe ff6f 	bl	80024e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003608:	e009      	b.n	800361e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fe ff5a 	bl	80024d2 <HAL_I2C_ErrorCallback>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d103      	bne.n	8003644 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d007      	beq.n	8003662 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	619a      	str	r2, [r3, #24]
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	2200      	movs	r2, #0
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	2200      	movs	r2, #0
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ff9b 	bl	80035d8 <I2C_TreatErrorCallback>
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ba:	e031      	b.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d02d      	beq.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fd feb2 	bl	800142c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnFlagUntilTimeout+0x30>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d122      	bne.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d113      	bne.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e00f      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	429a      	cmp	r2, r3
 800373c:	d0be      	beq.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003754:	e033      	b.n	80037be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f900 	bl	8003960 <I2C_IsErrorOccurred>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e031      	b.n	80037ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d025      	beq.n	80037be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fd fe5b 	bl	800142c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11a      	bne.n	80037be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d013      	beq.n	80037be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d1c4      	bne.n	8003756 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e2:	e02f      	b.n	8003844 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f8b9 	bl	8003960 <I2C_IsErrorOccurred>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e02d      	b.n	8003854 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fd fe18 	bl	800142c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11a      	bne.n	8003844 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b20      	cmp	r3, #32
 800381a:	d013      	beq.n	8003844 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b20      	cmp	r3, #32
 8003850:	d1c8      	bne.n	80037e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003868:	e06b      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f876 	bl	8003960 <I2C_IsErrorOccurred>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e069      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d138      	bne.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d105      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e055      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d107      	bne.n	80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2210      	movs	r2, #16
 80038ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2204      	movs	r2, #4
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
 80038c2:	e002      	b.n	80038ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2220      	movs	r2, #32
 80038d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b1f      	ldr	r3, [pc, #124]	; (800395c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80038de:	400b      	ands	r3, r1
 80038e0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e029      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd fd95 	bl	800142c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00f      	beq.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d18c      	bne.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	fe00e800 	.word	0xfe00e800

08003960 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	d068      	beq.n	8003a5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2210      	movs	r2, #16
 8003992:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003994:	e049      	b.n	8003a2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d045      	beq.n	8003a2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fd fd45 	bl	800142c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_IsErrorOccurred+0x54>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d13a      	bne.n	8003a2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d121      	bne.n	8003a1c <I2C_IsErrorOccurred+0xbc>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039de:	d01d      	beq.n	8003a1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d01a      	beq.n	8003a1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039f6:	f7fd fd19 	bl	800142c <HAL_GetTick>
 80039fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039fc:	e00e      	b.n	8003a1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039fe:	f7fd fd15 	bl	800142c <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b19      	cmp	r3, #25
 8003a0a:	d907      	bls.n	8003a1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a1a:	e006      	b.n	8003a2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d1e9      	bne.n	80039fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d003      	beq.n	8003a40 <I2C_IsErrorOccurred+0xe0>
 8003a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0aa      	beq.n	8003996 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f043 0308 	orr.w	r3, r3, #8
 8003a98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01c      	beq.n	8003b0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fda6 	bl	8003626 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <I2C_IsErrorOccurred+0x1bc>)
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3728      	adds	r7, #40	; 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	fe00e800 	.word	0xfe00e800

08003b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	817b      	strh	r3, [r7, #10]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b32:	897b      	ldrh	r3, [r7, #10]
 8003b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b38:	7a7b      	ldrb	r3, [r7, #9]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	0d5b      	lsrs	r3, r3, #21
 8003b5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <I2C_TransferConfig+0x60>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	43db      	mvns	r3, r3
 8003b64:	ea02 0103 	and.w	r1, r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	03ff63ff 	.word	0x03ff63ff

08003b84 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4a39      	ldr	r2, [pc, #228]	; (8003c80 <I2C_Enable_IRQ+0xfc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d032      	beq.n	8003c04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003ba2:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <I2C_Enable_IRQ+0x100>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d02d      	beq.n	8003c04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003bac:	4a36      	ldr	r2, [pc, #216]	; (8003c88 <I2C_Enable_IRQ+0x104>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d028      	beq.n	8003c04 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da03      	bge.n	8003bc2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003bc0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003bd2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003be4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d103      	bne.n	8003bf4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003bf2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d133      	bne.n	8003c62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f043 0320 	orr.w	r3, r3, #32
 8003c00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c02:	e02e      	b.n	8003c62 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da03      	bge.n	8003c14 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d103      	bne.n	8003c46 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d103      	bne.n	8003c54 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d103      	bne.n	8003c62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c60:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6819      	ldr	r1, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	080026eb 	.word	0x080026eb
 8003c84:	08002b0d 	.word	0x08002b0d
 8003c88:	080028c1 	.word	0x080028c1

08003c8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00f      	beq.n	8003cc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003cac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cba:	2b28      	cmp	r3, #40	; 0x28
 8003cbc:	d003      	beq.n	8003cc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00f      	beq.n	8003cf0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003cd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ce4:	2b28      	cmp	r3, #40	; 0x28
 8003ce6:	d003      	beq.n	8003cf0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da03      	bge.n	8003d00 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d103      	bne.n	8003d0e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d103      	bne.n	8003d1c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f043 0320 	orr.w	r3, r3, #32
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d103      	bne.n	8003d2a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	400a      	ands	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d138      	bne.n	8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e032      	b.n	8003dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d139      	bne.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e033      	b.n	8003e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2224      	movs	r2, #36	; 0x24
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000

08003e98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec2:	d130      	bne.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ec4:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d038      	beq.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2232      	movs	r2, #50	; 0x32
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef8:	e002      	b.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d102      	bne.n	8003f14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f2      	bne.n	8003efa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d110      	bne.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e00f      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f32:	d007      	beq.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f3c:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000
 8003f58:	20000008 	.word	0x20000008
 8003f5c:	431bde83 	.word	0x431bde83

08003f60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f000 bc02 	b.w	8004778 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f74:	4b96      	ldr	r3, [pc, #600]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7e:	4b94      	ldr	r3, [pc, #592]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80e4 	beq.w	800415e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_RCC_OscConfig+0x4c>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	f040 808b 	bne.w	80040ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f040 8087 	bne.w	80040ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fac:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x64>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e3d9      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	4b81      	ldr	r3, [pc, #516]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_RCC_OscConfig+0x7e>
 8003fd4:	4b7e      	ldr	r3, [pc, #504]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fdc:	e005      	b.n	8003fea <HAL_RCC_OscConfig+0x8a>
 8003fde:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d223      	bcs.n	8004036 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fd8c 	bl	8004b10 <RCC_SetFlashLatencyFromMSIRange>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e3ba      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004002:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a72      	ldr	r2, [pc, #456]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	496d      	ldr	r1, [pc, #436]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004020:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	4968      	ldr	r1, [pc, #416]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	e025      	b.n	8004082 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004036:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a65      	ldr	r2, [pc, #404]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800403c:	f043 0308 	orr.w	r3, r3, #8
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4960      	ldr	r1, [pc, #384]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	495b      	ldr	r1, [pc, #364]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fd4c 	bl	8004b10 <RCC_SetFlashLatencyFromMSIRange>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e37a      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004082:	f000 fc81 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004086:	4602      	mov	r2, r0
 8004088:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4950      	ldr	r1, [pc, #320]	; (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a4e      	ldr	r2, [pc, #312]	; (80041d8 <HAL_RCC_OscConfig+0x278>)
 80040a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040a2:	4b4e      	ldr	r3, [pc, #312]	; (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd f970 	bl	800138c <HAL_InitTick>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d052      	beq.n	800415c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	e35e      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d032      	beq.n	8004128 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040c2:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ce:	f7fd f9ad 	bl	800142c <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d6:	f7fd f9a9 	bl	800142c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e347      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e8:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a35      	ldr	r2, [pc, #212]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040fa:	f043 0308 	orr.w	r3, r3, #8
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4930      	ldr	r1, [pc, #192]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	492b      	ldr	r1, [pc, #172]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e01a      	b.n	800415e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004134:	f7fd f97a 	bl	800142c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800413c:	f7fd f976 	bl	800142c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e314      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1dc>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d073      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d005      	beq.n	800417c <HAL_RCC_OscConfig+0x21c>
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d10e      	bne.n	8004194 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d10b      	bne.n	8004194 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d063      	beq.n	8004250 <HAL_RCC_OscConfig+0x2f0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d15f      	bne.n	8004250 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e2f1      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d106      	bne.n	80041ac <HAL_RCC_OscConfig+0x24c>
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e025      	b.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b4:	d114      	bne.n	80041e0 <HAL_RCC_OscConfig+0x280>
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a02      	ldr	r2, [pc, #8]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e013      	b.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08007084 	.word	0x08007084
 80041d8:	20000008 	.word	0x20000008
 80041dc:	2000000c 	.word	0x2000000c
 80041e0:	4ba0      	ldr	r3, [pc, #640]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a9f      	ldr	r2, [pc, #636]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b9d      	ldr	r3, [pc, #628]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a9c      	ldr	r2, [pc, #624]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd f914 	bl	800142c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd f910 	bl	800142c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e2ae      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b92      	ldr	r3, [pc, #584]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x2a8>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd f900 	bl	800142c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd f8fc 	bl	800142c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e29a      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x2d0>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d060      	beq.n	8004320 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x310>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d119      	bne.n	800429e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d116      	bne.n	800429e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004270:	4b7c      	ldr	r3, [pc, #496]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_OscConfig+0x328>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e277      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4973      	ldr	r1, [pc, #460]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429c:	e040      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d023      	beq.n	80042ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a6:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6e      	ldr	r2, [pc, #440]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd f8bb 	bl	800142c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd f8b7 	bl	800142c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e255      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	4b65      	ldr	r3, [pc, #404]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b62      	ldr	r3, [pc, #392]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	495f      	ldr	r1, [pc, #380]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	e018      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b5d      	ldr	r3, [pc, #372]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5c      	ldr	r2, [pc, #368]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd f897 	bl	800142c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004302:	f7fd f893 	bl	800142c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e231      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004314:	4b53      	ldr	r3, [pc, #332]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d03c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01c      	beq.n	800436e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004334:	4b4b      	ldr	r3, [pc, #300]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433a:	4a4a      	ldr	r2, [pc, #296]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fd f872 	bl	800142c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434c:	f7fd f86e 	bl	800142c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e20c      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ef      	beq.n	800434c <HAL_RCC_OscConfig+0x3ec>
 800436c:	e01b      	b.n	80043a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	4a3b      	ldr	r2, [pc, #236]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fd f855 	bl	800142c <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004386:	f7fd f851 	bl	800142c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1ef      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004398:	4b32      	ldr	r3, [pc, #200]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ef      	bne.n	8004386 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80a6 	beq.w	8004500 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a26      	ldr	r2, [pc, #152]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043dc:	2301      	movs	r3, #1
 80043de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d118      	bne.n	800441e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f8:	f7fd f818 	bl	800142c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd f814 	bl	800142c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1b2      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d108      	bne.n	8004438 <HAL_RCC_OscConfig+0x4d8>
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004436:	e029      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d115      	bne.n	800446c <HAL_RCC_OscConfig+0x50c>
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004460:	e014      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
 800446c:	4b9a      	ldr	r3, [pc, #616]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a99      	ldr	r2, [pc, #612]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800447c:	4b96      	ldr	r3, [pc, #600]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a95      	ldr	r2, [pc, #596]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fc ffca 	bl	800142c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fc ffc6 	bl	800142c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e162      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ed      	beq.n	800449c <HAL_RCC_OscConfig+0x53c>
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fc ffb3 	bl	800142c <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fc ffaf 	bl	800142c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e14b      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e0:	4b7d      	ldr	r3, [pc, #500]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ed      	bne.n	80044ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b78      	ldr	r3, [pc, #480]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a77      	ldr	r2, [pc, #476]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d03c      	beq.n	8004586 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01c      	beq.n	800454e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004514:	4b70      	ldr	r3, [pc, #448]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451a:	4a6f      	ldr	r2, [pc, #444]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fc ff82 	bl	800142c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800452c:	f7fc ff7e 	bl	800142c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e11c      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453e:	4b66      	ldr	r3, [pc, #408]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCC_OscConfig+0x5cc>
 800454c:	e01b      	b.n	8004586 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004554:	4a60      	ldr	r2, [pc, #384]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fc ff65 	bl	800142c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004566:	f7fc ff61 	bl	800142c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0ff      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004578:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ef      	bne.n	8004566 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80f3 	beq.w	8004776 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	2b02      	cmp	r3, #2
 8004596:	f040 80c9 	bne.w	800472c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800459a:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0203 	and.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d12c      	bne.n	8004608 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	3b01      	subs	r3, #1
 80045ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d123      	bne.n	8004608 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d11b      	bne.n	8004608 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d113      	bne.n	8004608 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	3b01      	subs	r3, #1
 80045ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d109      	bne.n	8004608 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d06b      	beq.n	80046e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d062      	beq.n	80046d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0ac      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004628:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800462a:	f7fc feff 	bl	800142c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004632:	f7fc fefb 	bl	800142c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e099      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	4b21      	ldr	r3, [pc, #132]	; (80046dc <HAL_RCC_OscConfig+0x77c>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004660:	3a01      	subs	r2, #1
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800466a:	0212      	lsls	r2, r2, #8
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	3a01      	subs	r2, #1
 8004676:	0552      	lsls	r2, r2, #21
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800467e:	0852      	lsrs	r2, r2, #1
 8004680:	3a01      	subs	r2, #1
 8004682:	0652      	lsls	r2, r2, #25
 8004684:	4311      	orrs	r1, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800468a:	06d2      	lsls	r2, r2, #27
 800468c:	430a      	orrs	r2, r1
 800468e:	4912      	ldr	r1, [pc, #72]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004690:	4313      	orrs	r3, r2
 8004692:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 800469a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80046a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ac:	f7fc febe 	bl	800142c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fc feba 	bl	800142c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e058      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <HAL_RCC_OscConfig+0x778>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046d2:	e050      	b.n	8004776 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e04f      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e0:	4b27      	ldr	r3, [pc, #156]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d144      	bne.n	8004776 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 80046f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a20      	ldr	r2, [pc, #128]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 80046fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004702:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004704:	f7fc fe92 	bl	800142c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fc fe8e 	bl	800142c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e02c      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x7ac>
 800472a:	e024      	b.n	8004776 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d01f      	beq.n	8004772 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a12      	ldr	r2, [pc, #72]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 8004738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fc fe75 	bl	800142c <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004746:	f7fc fe71 	bl	800142c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e00f      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f0      	bne.n	8004746 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4905      	ldr	r1, [pc, #20]	; (8004780 <HAL_RCC_OscConfig+0x820>)
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCC_OscConfig+0x824>)
 800476c:	4013      	ands	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
 8004770:	e001      	b.n	8004776 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	feeefffc 	.word	0xfeeefffc

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0e7      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b75      	ldr	r3, [pc, #468]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d910      	bls.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b72      	ldr	r3, [pc, #456]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4970      	ldr	r1, [pc, #448]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b6e      	ldr	r3, [pc, #440]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0cf      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	4b66      	ldr	r3, [pc, #408]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d908      	bls.n	80047fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b63      	ldr	r3, [pc, #396]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4960      	ldr	r1, [pc, #384]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04c      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	4b5a      	ldr	r3, [pc, #360]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d121      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0a6      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004826:	4b54      	ldr	r3, [pc, #336]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d115      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e09a      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e08e      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484e:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e086      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4943      	ldr	r1, [pc, #268]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fc fddc 	bl	800142c <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fc fdd8 	bl	800142c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e06e      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 020c 	and.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	429a      	cmp	r2, r3
 800489e:	d1eb      	bne.n	8004878 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d208      	bcs.n	80048ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	492b      	ldr	r1, [pc, #172]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d210      	bcs.n	80048fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 0207 	bic.w	r2, r3, #7
 80048e4:	4923      	ldr	r1, [pc, #140]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e036      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	4918      	ldr	r1, [pc, #96]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4910      	ldr	r1, [pc, #64]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800493c:	f000 f824 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	490b      	ldr	r1, [pc, #44]	; (800497c <HAL_RCC_ClockConfig+0x1f4>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1fc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc fd13 	bl	800138c <HAL_InitTick>
 8004966:	4603      	mov	r3, r0
 8004968:	72fb      	strb	r3, [r7, #11]

  return status;
 800496a:	7afb      	ldrb	r3, [r7, #11]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40022000 	.word	0x40022000
 8004978:	40021000 	.word	0x40021000
 800497c:	08007084 	.word	0x08007084
 8004980:	20000008 	.word	0x20000008
 8004984:	2000000c 	.word	0x2000000c

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004996:	4b3e      	ldr	r3, [pc, #248]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a0:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x34>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d121      	bne.n	80049fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d11e      	bne.n	80049fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049bc:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e005      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049d8:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049e4:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e004      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a0c:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d134      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0xa6>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xac>
 8004a2c:	e005      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a30:	617b      	str	r3, [r7, #20]
      break;
 8004a32:	e005      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a36:	617b      	str	r3, [r7, #20]
      break;
 8004a38:	e002      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	617b      	str	r3, [r7, #20]
      break;
 8004a3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	fb03 f202 	mul.w	r2, r3, r2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	0e5b      	lsrs	r3, r3, #25
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	3301      	adds	r3, #1
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a80:	69bb      	ldr	r3, [r7, #24]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3724      	adds	r7, #36	; 0x24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	0800709c 	.word	0x0800709c
 8004a98:	00f42400 	.word	0x00f42400
 8004a9c:	007a1200 	.word	0x007a1200

08004aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000008 	.word	0x20000008

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004abc:	f7ff fff0 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4904      	ldr	r1, [pc, #16]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	08007094 	.word	0x08007094

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ae8:	f7ff ffda 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0adb      	lsrs	r3, r3, #11
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4904      	ldr	r1, [pc, #16]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	08007094 	.word	0x08007094

08004b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b28:	f7ff f9b6 	bl	8003e98 <HAL_PWREx_GetVoltageRange>
 8004b2c:	6178      	str	r0, [r7, #20]
 8004b2e:	e014      	b.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b30:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b48:	f7ff f9a6 	bl	8003e98 <HAL_PWREx_GetVoltageRange>
 8004b4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d10b      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d919      	bls.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2ba0      	cmp	r3, #160	; 0xa0
 8004b6c:	d902      	bls.n	8004b74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b6e:	2302      	movs	r3, #2
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e013      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b74:	2301      	movs	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e010      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	d902      	bls.n	8004b86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b80:	2303      	movs	r3, #3
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	e00a      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d102      	bne.n	8004b92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e004      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b70      	cmp	r3, #112	; 0x70
 8004b96:	d101      	bne.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b98:	2301      	movs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 0207 	bic.w	r2, r3, #7
 8004ba4:	4909      	ldr	r1, [pc, #36]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40022000 	.word	0x40022000

08004bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bd8:	2300      	movs	r3, #0
 8004bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d031      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bf4:	d01a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004bf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bfa:	d814      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c06:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4a5c      	ldr	r2, [pc, #368]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c12:	e00c      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f9de 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c24:	e003      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	74fb      	strb	r3, [r7, #19]
      break;
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c34:	4b51      	ldr	r3, [pc, #324]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	494e      	ldr	r1, [pc, #312]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c4a:	e001      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 809e 	beq.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c78:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	4a3f      	ldr	r2, [pc, #252]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6593      	str	r3, [r2, #88]	; 0x58
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c90:	2301      	movs	r3, #1
 8004c92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c94:	4b3a      	ldr	r3, [pc, #232]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a39      	ldr	r2, [pc, #228]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ca0:	f7fc fbc4 	bl	800142c <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ca6:	e009      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca8:	f7fc fbc0 	bl	800142c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d902      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	74fb      	strb	r3, [r7, #19]
        break;
 8004cba:	e005      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cbc:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d15a      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cce:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01e      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d019      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d16:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d016      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d28:	f7fc fb80 	bl	800142c <HAL_GetTick>
 8004d2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fc fb7c 	bl	800142c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d902      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	74fb      	strb	r3, [r7, #19]
            break;
 8004d46:	e006      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ec      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	4904      	ldr	r1, [pc, #16]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d72:	e009      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d88:	7c7b      	ldrb	r3, [r7, #17]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b8a      	ldr	r3, [pc, #552]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	4a89      	ldr	r2, [pc, #548]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da6:	4b84      	ldr	r3, [pc, #528]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 0203 	bic.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4980      	ldr	r1, [pc, #512]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dc8:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 020c 	bic.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	4978      	ldr	r1, [pc, #480]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dea:	4b73      	ldr	r3, [pc, #460]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	496f      	ldr	r1, [pc, #444]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	4967      	ldr	r1, [pc, #412]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e2e:	4b62      	ldr	r3, [pc, #392]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	495e      	ldr	r1, [pc, #376]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e50:	4b59      	ldr	r3, [pc, #356]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4956      	ldr	r1, [pc, #344]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e72:	4b51      	ldr	r3, [pc, #324]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	494d      	ldr	r1, [pc, #308]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d028      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e94:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4945      	ldr	r1, [pc, #276]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a3f      	ldr	r2, [pc, #252]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ebe:	60d3      	str	r3, [r2, #12]
 8004ec0:	e011      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eca:	d10c      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f882 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d028      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef2:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	492d      	ldr	r1, [pc, #180]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f10:	d106      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f12:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1c:	60d3      	str	r3, [r2, #12]
 8004f1e:	e011      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f853 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01c      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	4916      	ldr	r1, [pc, #88]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f830 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa4:	4904      	ldr	r1, [pc, #16]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000

08004fdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fea:	4b74      	ldr	r3, [pc, #464]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d018      	beq.n	8005028 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ff6:	4b71      	ldr	r3, [pc, #452]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d10d      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
       ||
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800500e:	4b6b      	ldr	r3, [pc, #428]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
       ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d047      	beq.n	80050b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e044      	b.n	80050b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d018      	beq.n	8005062 <RCCEx_PLLSAI1_Config+0x86>
 8005030:	2b03      	cmp	r3, #3
 8005032:	d825      	bhi.n	8005080 <RCCEx_PLLSAI1_Config+0xa4>
 8005034:	2b01      	cmp	r3, #1
 8005036:	d002      	beq.n	800503e <RCCEx_PLLSAI1_Config+0x62>
 8005038:	2b02      	cmp	r3, #2
 800503a:	d009      	beq.n	8005050 <RCCEx_PLLSAI1_Config+0x74>
 800503c:	e020      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800503e:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11d      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504e:	e01a      	b.n	8005086 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005050:	4b5a      	ldr	r3, [pc, #360]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d116      	bne.n	800508a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e013      	b.n	800508a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005062:	4b56      	ldr	r3, [pc, #344]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800506e:	4b53      	ldr	r3, [pc, #332]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800507e:	e006      	b.n	800508e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e004      	b.n	8005090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800508e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005096:	4b49      	ldr	r3, [pc, #292]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	430b      	orrs	r3, r1
 80050ac:	4943      	ldr	r1, [pc, #268]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d17c      	bne.n	80051b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050b8:	4b40      	ldr	r3, [pc, #256]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c4:	f7fc f9b2 	bl	800142c <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ca:	e009      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050cc:	f7fc f9ae 	bl	800142c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	73fb      	strb	r3, [r7, #15]
        break;
 80050de:	e005      	b.n	80050ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050e0:	4b36      	ldr	r3, [pc, #216]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ef      	bne.n	80050cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d15f      	bne.n	80051b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d110      	bne.n	800511a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005100:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6892      	ldr	r2, [r2, #8]
 8005108:	0211      	lsls	r1, r2, #8
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68d2      	ldr	r2, [r2, #12]
 800510e:	06d2      	lsls	r2, r2, #27
 8005110:	430a      	orrs	r2, r1
 8005112:	492a      	ldr	r1, [pc, #168]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	610b      	str	r3, [r1, #16]
 8005118:	e027      	b.n	800516a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d112      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005128:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6892      	ldr	r2, [r2, #8]
 8005130:	0211      	lsls	r1, r2, #8
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6912      	ldr	r2, [r2, #16]
 8005136:	0852      	lsrs	r2, r2, #1
 8005138:	3a01      	subs	r2, #1
 800513a:	0552      	lsls	r2, r2, #21
 800513c:	430a      	orrs	r2, r1
 800513e:	491f      	ldr	r1, [pc, #124]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005140:	4313      	orrs	r3, r2
 8005142:	610b      	str	r3, [r1, #16]
 8005144:	e011      	b.n	800516a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800514e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	0211      	lsls	r1, r2, #8
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6952      	ldr	r2, [r2, #20]
 800515c:	0852      	lsrs	r2, r2, #1
 800515e:	3a01      	subs	r2, #1
 8005160:	0652      	lsls	r2, r2, #25
 8005162:	430a      	orrs	r2, r1
 8005164:	4915      	ldr	r1, [pc, #84]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005166:	4313      	orrs	r3, r2
 8005168:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800516a:	4b14      	ldr	r3, [pc, #80]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a13      	ldr	r2, [pc, #76]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005174:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7fc f959 	bl	800142c <HAL_GetTick>
 800517a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800517c:	e009      	b.n	8005192 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800517e:	f7fc f955 	bl	800142c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d902      	bls.n	8005192 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	73fb      	strb	r3, [r7, #15]
          break;
 8005190:	e005      	b.n	800519e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ef      	beq.n	800517e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	4903      	ldr	r1, [pc, #12]	; (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e040      	b.n	8005254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fefc 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2224      	movs	r2, #36	; 0x24
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fade 	bl	80057c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8af 	bl	8005370 <UART_SetConfig>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e01b      	b.n	8005254 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fb5d 	bl	800590c <UART_CheckIdleState>
 8005252:	4603      	mov	r3, r0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005270:	2b20      	cmp	r3, #32
 8005272:	d178      	bne.n	8005366 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Transmit+0x24>
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e071      	b.n	8005368 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2221      	movs	r2, #33	; 0x21
 8005290:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005292:	f7fc f8cb 	bl	800142c <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d108      	bne.n	80052c4 <HAL_UART_Transmit+0x68>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e003      	b.n	80052cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052cc:	e030      	b.n	8005330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fbbf 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e03c      	b.n	8005368 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	b292      	uxth	r2, r2
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	3302      	adds	r3, #2
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e008      	b.n	800531e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b292      	uxth	r2, r2
 8005316:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3301      	adds	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c8      	bne.n	80052ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fb88 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e005      	b.n	8005368 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005374:	b08a      	sub	sp, #40	; 0x28
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	431a      	orrs	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	4313      	orrs	r3, r2
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4bb4      	ldr	r3, [pc, #720]	; (8005670 <UART_SetConfig+0x300>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4aa9      	ldr	r2, [pc, #676]	; (8005674 <UART_SetConfig+0x304>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	4313      	orrs	r3, r2
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4aa0      	ldr	r2, [pc, #640]	; (8005678 <UART_SetConfig+0x308>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d126      	bne.n	8005448 <UART_SetConfig+0xd8>
 80053fa:	4ba0      	ldr	r3, [pc, #640]	; (800567c <UART_SetConfig+0x30c>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d81b      	bhi.n	8005440 <UART_SetConfig+0xd0>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0xa0>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005421 	.word	0x08005421
 8005414:	08005431 	.word	0x08005431
 8005418:	08005429 	.word	0x08005429
 800541c:	08005439 	.word	0x08005439
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e080      	b.n	800552a <UART_SetConfig+0x1ba>
 8005428:	2302      	movs	r3, #2
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e07c      	b.n	800552a <UART_SetConfig+0x1ba>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e078      	b.n	800552a <UART_SetConfig+0x1ba>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	e074      	b.n	800552a <UART_SetConfig+0x1ba>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005446:	e070      	b.n	800552a <UART_SetConfig+0x1ba>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a8c      	ldr	r2, [pc, #560]	; (8005680 <UART_SetConfig+0x310>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d138      	bne.n	80054c4 <UART_SetConfig+0x154>
 8005452:	4b8a      	ldr	r3, [pc, #552]	; (800567c <UART_SetConfig+0x30c>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f003 030c 	and.w	r3, r3, #12
 800545c:	2b0c      	cmp	r3, #12
 800545e:	d82d      	bhi.n	80054bc <UART_SetConfig+0x14c>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0xf8>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	0800549d 	.word	0x0800549d
 800546c:	080054bd 	.word	0x080054bd
 8005470:	080054bd 	.word	0x080054bd
 8005474:	080054bd 	.word	0x080054bd
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054bd 	.word	0x080054bd
 8005484:	080054bd 	.word	0x080054bd
 8005488:	080054a5 	.word	0x080054a5
 800548c:	080054bd 	.word	0x080054bd
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054b5 	.word	0x080054b5
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e042      	b.n	800552a <UART_SetConfig+0x1ba>
 80054a4:	2302      	movs	r3, #2
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e03e      	b.n	800552a <UART_SetConfig+0x1ba>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e03a      	b.n	800552a <UART_SetConfig+0x1ba>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e036      	b.n	800552a <UART_SetConfig+0x1ba>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e032      	b.n	800552a <UART_SetConfig+0x1ba>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a6a      	ldr	r2, [pc, #424]	; (8005674 <UART_SetConfig+0x304>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d12a      	bne.n	8005524 <UART_SetConfig+0x1b4>
 80054ce:	4b6b      	ldr	r3, [pc, #428]	; (800567c <UART_SetConfig+0x30c>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054dc:	d01a      	beq.n	8005514 <UART_SetConfig+0x1a4>
 80054de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e2:	d81b      	bhi.n	800551c <UART_SetConfig+0x1ac>
 80054e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e8:	d00c      	beq.n	8005504 <UART_SetConfig+0x194>
 80054ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ee:	d815      	bhi.n	800551c <UART_SetConfig+0x1ac>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <UART_SetConfig+0x18c>
 80054f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f8:	d008      	beq.n	800550c <UART_SetConfig+0x19c>
 80054fa:	e00f      	b.n	800551c <UART_SetConfig+0x1ac>
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005502:	e012      	b.n	800552a <UART_SetConfig+0x1ba>
 8005504:	2302      	movs	r3, #2
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e00e      	b.n	800552a <UART_SetConfig+0x1ba>
 800550c:	2304      	movs	r3, #4
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005512:	e00a      	b.n	800552a <UART_SetConfig+0x1ba>
 8005514:	2308      	movs	r3, #8
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e006      	b.n	800552a <UART_SetConfig+0x1ba>
 800551c:	2310      	movs	r3, #16
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e002      	b.n	800552a <UART_SetConfig+0x1ba>
 8005524:	2310      	movs	r3, #16
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a51      	ldr	r2, [pc, #324]	; (8005674 <UART_SetConfig+0x304>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d17a      	bne.n	800562a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005538:	2b08      	cmp	r3, #8
 800553a:	d824      	bhi.n	8005586 <UART_SetConfig+0x216>
 800553c:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x1d4>)
 800553e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005542:	bf00      	nop
 8005544:	08005569 	.word	0x08005569
 8005548:	08005587 	.word	0x08005587
 800554c:	08005571 	.word	0x08005571
 8005550:	08005587 	.word	0x08005587
 8005554:	08005577 	.word	0x08005577
 8005558:	08005587 	.word	0x08005587
 800555c:	08005587 	.word	0x08005587
 8005560:	08005587 	.word	0x08005587
 8005564:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7ff faa6 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 800556c:	61f8      	str	r0, [r7, #28]
        break;
 800556e:	e010      	b.n	8005592 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b44      	ldr	r3, [pc, #272]	; (8005684 <UART_SetConfig+0x314>)
 8005572:	61fb      	str	r3, [r7, #28]
        break;
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7ff fa07 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800557a:	61f8      	str	r0, [r7, #28]
        break;
 800557c:	e009      	b.n	8005592 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e005      	b.n	8005592 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005590:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8107 	beq.w	80057a8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d305      	bcc.n	80055b6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d903      	bls.n	80055be <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055bc:	e0f4      	b.n	80057a8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2200      	movs	r2, #0
 80055c2:	461c      	mov	r4, r3
 80055c4:	4615      	mov	r5, r2
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	022b      	lsls	r3, r5, #8
 80055d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055d4:	0222      	lsls	r2, r4, #8
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	6849      	ldr	r1, [r1, #4]
 80055da:	0849      	lsrs	r1, r1, #1
 80055dc:	2000      	movs	r0, #0
 80055de:	4688      	mov	r8, r1
 80055e0:	4681      	mov	r9, r0
 80055e2:	eb12 0a08 	adds.w	sl, r2, r8
 80055e6:	eb43 0b09 	adc.w	fp, r3, r9
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f8:	4650      	mov	r0, sl
 80055fa:	4659      	mov	r1, fp
 80055fc:	f7fa fe40 	bl	8000280 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560e:	d308      	bcc.n	8005622 <UART_SetConfig+0x2b2>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005616:	d204      	bcs.n	8005622 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	60da      	str	r2, [r3, #12]
 8005620:	e0c2      	b.n	80057a8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005628:	e0be      	b.n	80057a8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005632:	d16a      	bne.n	800570a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005638:	2b08      	cmp	r3, #8
 800563a:	d834      	bhi.n	80056a6 <UART_SetConfig+0x336>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x2d4>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005669 	.word	0x08005669
 8005648:	08005689 	.word	0x08005689
 800564c:	08005691 	.word	0x08005691
 8005650:	080056a7 	.word	0x080056a7
 8005654:	08005697 	.word	0x08005697
 8005658:	080056a7 	.word	0x080056a7
 800565c:	080056a7 	.word	0x080056a7
 8005660:	080056a7 	.word	0x080056a7
 8005664:	0800569f 	.word	0x0800569f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7ff fa26 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 800566c:	61f8      	str	r0, [r7, #28]
        break;
 800566e:	e020      	b.n	80056b2 <UART_SetConfig+0x342>
 8005670:	efff69f3 	.word	0xefff69f3
 8005674:	40008000 	.word	0x40008000
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40004400 	.word	0x40004400
 8005684:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005688:	f7ff fa2c 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 800568c:	61f8      	str	r0, [r7, #28]
        break;
 800568e:	e010      	b.n	80056b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005690:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <UART_SetConfig+0x454>)
 8005692:	61fb      	str	r3, [r7, #28]
        break;
 8005694:	e00d      	b.n	80056b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005696:	f7ff f977 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800569a:	61f8      	str	r0, [r7, #28]
        break;
 800569c:	e009      	b.n	80056b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a2:	61fb      	str	r3, [r7, #28]
        break;
 80056a4:	e005      	b.n	80056b2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d077      	beq.n	80057a8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	005a      	lsls	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	441a      	add	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	2b0f      	cmp	r3, #15
 80056d2:	d916      	bls.n	8005702 <UART_SetConfig+0x392>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056da:	d212      	bcs.n	8005702 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f023 030f 	bic.w	r3, r3, #15
 80056e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	8afb      	ldrh	r3, [r7, #22]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	8afa      	ldrh	r2, [r7, #22]
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	e052      	b.n	80057a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005708:	e04e      	b.n	80057a8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800570a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800570e:	2b08      	cmp	r3, #8
 8005710:	d827      	bhi.n	8005762 <UART_SetConfig+0x3f2>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <UART_SetConfig+0x3a8>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005745 	.word	0x08005745
 8005720:	0800574d 	.word	0x0800574d
 8005724:	08005763 	.word	0x08005763
 8005728:	08005753 	.word	0x08005753
 800572c:	08005763 	.word	0x08005763
 8005730:	08005763 	.word	0x08005763
 8005734:	08005763 	.word	0x08005763
 8005738:	0800575b 	.word	0x0800575b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800573c:	f7ff f9bc 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005740:	61f8      	str	r0, [r7, #28]
        break;
 8005742:	e014      	b.n	800576e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005744:	f7ff f9ce 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8005748:	61f8      	str	r0, [r7, #28]
        break;
 800574a:	e010      	b.n	800576e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <UART_SetConfig+0x454>)
 800574e:	61fb      	str	r3, [r7, #28]
        break;
 8005750:	e00d      	b.n	800576e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005752:	f7ff f919 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8005756:	61f8      	str	r0, [r7, #28]
        break;
 8005758:	e009      	b.n	800576e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575e:	61fb      	str	r3, [r7, #28]
        break;
 8005760:	e005      	b.n	800576e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800576c:	bf00      	nop
    }

    if (pclk != 0U)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d019      	beq.n	80057a8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	085a      	lsrs	r2, r3, #1
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	441a      	add	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	fbb2 f3f3 	udiv	r3, r2, r3
 8005786:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	d909      	bls.n	80057a2 <UART_SetConfig+0x432>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005794:	d205      	bcs.n	80057a2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60da      	str	r2, [r3, #12]
 80057a0:	e002      	b.n	80057a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3728      	adds	r7, #40	; 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c2:	bf00      	nop
 80057c4:	00f42400 	.word	0x00f42400

080057c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01a      	beq.n	80058de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c6:	d10a      	bne.n	80058de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b098      	sub	sp, #96	; 0x60
 8005910:	af02      	add	r7, sp, #8
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800591c:	f7fb fd86 	bl	800142c <HAL_GetTick>
 8005920:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d12e      	bne.n	800598e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005938:	2200      	movs	r2, #0
 800593a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f88c 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d021      	beq.n	800598e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	653b      	str	r3, [r7, #80]	; 0x50
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
 800596a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800596e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e062      	b.n	8005a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d149      	bne.n	8005a30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f856 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03c      	beq.n	8005a30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	623b      	str	r3, [r7, #32]
   return(result);
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
 80059d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3308      	adds	r3, #8
 8005a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	617b      	str	r3, [r7, #20]
   return(result);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e011      	b.n	8005a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3758      	adds	r7, #88	; 0x58
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6c:	e049      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d045      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a76:	f7fb fcd9 	bl	800142c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d302      	bcc.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e048      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d031      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d110      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f838 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2208      	movs	r2, #8
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e029      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005adc:	d111      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f81e 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d0a6      	beq.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b095      	sub	sp, #84	; 0x54
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
 8005b52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d118      	bne.n	8005bd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005be6:	bf00      	nop
 8005be8:	3754      	adds	r7, #84	; 0x54
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <__assert_func>:
 8005bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bf6:	4614      	mov	r4, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <__assert_func+0x2c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4605      	mov	r5, r0
 8005c00:	68d8      	ldr	r0, [r3, #12]
 8005c02:	b14c      	cbz	r4, 8005c18 <__assert_func+0x24>
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <__assert_func+0x30>)
 8005c06:	9100      	str	r1, [sp, #0]
 8005c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c0c:	4906      	ldr	r1, [pc, #24]	; (8005c28 <__assert_func+0x34>)
 8005c0e:	462b      	mov	r3, r5
 8005c10:	f000 f8b2 	bl	8005d78 <fiprintf>
 8005c14:	f000 f9d1 	bl	8005fba <abort>
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__assert_func+0x38>)
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	e7f3      	b.n	8005c06 <__assert_func+0x12>
 8005c1e:	bf00      	nop
 8005c20:	2000006c 	.word	0x2000006c
 8005c24:	080070cc 	.word	0x080070cc
 8005c28:	080070d9 	.word	0x080070d9
 8005c2c:	08007107 	.word	0x08007107

08005c30 <std>:
 8005c30:	2300      	movs	r3, #0
 8005c32:	b510      	push	{r4, lr}
 8005c34:	4604      	mov	r4, r0
 8005c36:	e9c0 3300 	strd	r3, r3, [r0]
 8005c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c3e:	6083      	str	r3, [r0, #8]
 8005c40:	8181      	strh	r1, [r0, #12]
 8005c42:	6643      	str	r3, [r0, #100]	; 0x64
 8005c44:	81c2      	strh	r2, [r0, #14]
 8005c46:	6183      	str	r3, [r0, #24]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	305c      	adds	r0, #92	; 0x5c
 8005c4e:	f000 f938 	bl	8005ec2 <memset>
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <std+0x58>)
 8005c54:	6263      	str	r3, [r4, #36]	; 0x24
 8005c56:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <std+0x5c>)
 8005c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <std+0x60>)
 8005c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <std+0x64>)
 8005c60:	6323      	str	r3, [r4, #48]	; 0x30
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <std+0x68>)
 8005c64:	6224      	str	r4, [r4, #32]
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d006      	beq.n	8005c78 <std+0x48>
 8005c6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005c6e:	4294      	cmp	r4, r2
 8005c70:	d002      	beq.n	8005c78 <std+0x48>
 8005c72:	33d0      	adds	r3, #208	; 0xd0
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d105      	bne.n	8005c84 <std+0x54>
 8005c78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f000 b998 	b.w	8005fb4 <__retarget_lock_init_recursive>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	08005e3d 	.word	0x08005e3d
 8005c8c:	08005e5f 	.word	0x08005e5f
 8005c90:	08005e97 	.word	0x08005e97
 8005c94:	08005ebb 	.word	0x08005ebb
 8005c98:	200001e4 	.word	0x200001e4

08005c9c <stdio_exit_handler>:
 8005c9c:	4a02      	ldr	r2, [pc, #8]	; (8005ca8 <stdio_exit_handler+0xc>)
 8005c9e:	4903      	ldr	r1, [pc, #12]	; (8005cac <stdio_exit_handler+0x10>)
 8005ca0:	4803      	ldr	r0, [pc, #12]	; (8005cb0 <stdio_exit_handler+0x14>)
 8005ca2:	f000 b87b 	b.w	8005d9c <_fwalk_sglue>
 8005ca6:	bf00      	nop
 8005ca8:	20000014 	.word	0x20000014
 8005cac:	08006b1d 	.word	0x08006b1d
 8005cb0:	20000020 	.word	0x20000020

08005cb4 <cleanup_stdio>:
 8005cb4:	6841      	ldr	r1, [r0, #4]
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <cleanup_stdio+0x34>)
 8005cb8:	4299      	cmp	r1, r3
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	d001      	beq.n	8005cc4 <cleanup_stdio+0x10>
 8005cc0:	f000 ff2c 	bl	8006b1c <_fflush_r>
 8005cc4:	68a1      	ldr	r1, [r4, #8]
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <cleanup_stdio+0x38>)
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d002      	beq.n	8005cd2 <cleanup_stdio+0x1e>
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 ff25 	bl	8006b1c <_fflush_r>
 8005cd2:	68e1      	ldr	r1, [r4, #12]
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <cleanup_stdio+0x3c>)
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	d004      	beq.n	8005ce4 <cleanup_stdio+0x30>
 8005cda:	4620      	mov	r0, r4
 8005cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce0:	f000 bf1c 	b.w	8006b1c <_fflush_r>
 8005ce4:	bd10      	pop	{r4, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200001e4 	.word	0x200001e4
 8005cec:	2000024c 	.word	0x2000024c
 8005cf0:	200002b4 	.word	0x200002b4

08005cf4 <global_stdio_init.part.0>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <global_stdio_init.part.0+0x30>)
 8005cf8:	4c0b      	ldr	r4, [pc, #44]	; (8005d28 <global_stdio_init.part.0+0x34>)
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <global_stdio_init.part.0+0x38>)
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	2200      	movs	r2, #0
 8005d02:	2104      	movs	r1, #4
 8005d04:	f7ff ff94 	bl	8005c30 <std>
 8005d08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	2109      	movs	r1, #9
 8005d10:	f7ff ff8e 	bl	8005c30 <std>
 8005d14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d18:	2202      	movs	r2, #2
 8005d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d1e:	2112      	movs	r1, #18
 8005d20:	f7ff bf86 	b.w	8005c30 <std>
 8005d24:	2000031c 	.word	0x2000031c
 8005d28:	200001e4 	.word	0x200001e4
 8005d2c:	08005c9d 	.word	0x08005c9d

08005d30 <__sfp_lock_acquire>:
 8005d30:	4801      	ldr	r0, [pc, #4]	; (8005d38 <__sfp_lock_acquire+0x8>)
 8005d32:	f000 b940 	b.w	8005fb6 <__retarget_lock_acquire_recursive>
 8005d36:	bf00      	nop
 8005d38:	20000325 	.word	0x20000325

08005d3c <__sfp_lock_release>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	; (8005d44 <__sfp_lock_release+0x8>)
 8005d3e:	f000 b93b 	b.w	8005fb8 <__retarget_lock_release_recursive>
 8005d42:	bf00      	nop
 8005d44:	20000325 	.word	0x20000325

08005d48 <__sinit>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	f7ff fff0 	bl	8005d30 <__sfp_lock_acquire>
 8005d50:	6a23      	ldr	r3, [r4, #32]
 8005d52:	b11b      	cbz	r3, 8005d5c <__sinit+0x14>
 8005d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d58:	f7ff bff0 	b.w	8005d3c <__sfp_lock_release>
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <__sinit+0x28>)
 8005d5e:	6223      	str	r3, [r4, #32]
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <__sinit+0x2c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f5      	bne.n	8005d54 <__sinit+0xc>
 8005d68:	f7ff ffc4 	bl	8005cf4 <global_stdio_init.part.0>
 8005d6c:	e7f2      	b.n	8005d54 <__sinit+0xc>
 8005d6e:	bf00      	nop
 8005d70:	08005cb5 	.word	0x08005cb5
 8005d74:	2000031c 	.word	0x2000031c

08005d78 <fiprintf>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	b503      	push	{r0, r1, lr}
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	ab03      	add	r3, sp, #12
 8005d80:	4805      	ldr	r0, [pc, #20]	; (8005d98 <fiprintf+0x20>)
 8005d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	f000 fb97 	bl	80064bc <_vfiprintf_r>
 8005d8e:	b002      	add	sp, #8
 8005d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d94:	b003      	add	sp, #12
 8005d96:	4770      	bx	lr
 8005d98:	2000006c 	.word	0x2000006c

08005d9c <_fwalk_sglue>:
 8005d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da0:	4607      	mov	r7, r0
 8005da2:	4688      	mov	r8, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	2600      	movs	r6, #0
 8005da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dac:	f1b9 0901 	subs.w	r9, r9, #1
 8005db0:	d505      	bpl.n	8005dbe <_fwalk_sglue+0x22>
 8005db2:	6824      	ldr	r4, [r4, #0]
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	d1f7      	bne.n	8005da8 <_fwalk_sglue+0xc>
 8005db8:	4630      	mov	r0, r6
 8005dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d907      	bls.n	8005dd4 <_fwalk_sglue+0x38>
 8005dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	d003      	beq.n	8005dd4 <_fwalk_sglue+0x38>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	4306      	orrs	r6, r0
 8005dd4:	3568      	adds	r5, #104	; 0x68
 8005dd6:	e7e9      	b.n	8005dac <_fwalk_sglue+0x10>

08005dd8 <iprintf>:
 8005dd8:	b40f      	push	{r0, r1, r2, r3}
 8005dda:	b507      	push	{r0, r1, r2, lr}
 8005ddc:	4906      	ldr	r1, [pc, #24]	; (8005df8 <iprintf+0x20>)
 8005dde:	ab04      	add	r3, sp, #16
 8005de0:	6808      	ldr	r0, [r1, #0]
 8005de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de6:	6881      	ldr	r1, [r0, #8]
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	f000 fb67 	bl	80064bc <_vfiprintf_r>
 8005dee:	b003      	add	sp, #12
 8005df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df4:	b004      	add	sp, #16
 8005df6:	4770      	bx	lr
 8005df8:	2000006c 	.word	0x2000006c

08005dfc <siprintf>:
 8005dfc:	b40e      	push	{r1, r2, r3}
 8005dfe:	b500      	push	{lr}
 8005e00:	b09c      	sub	sp, #112	; 0x70
 8005e02:	ab1d      	add	r3, sp, #116	; 0x74
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	9006      	str	r0, [sp, #24]
 8005e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e0c:	4809      	ldr	r0, [pc, #36]	; (8005e34 <siprintf+0x38>)
 8005e0e:	9107      	str	r1, [sp, #28]
 8005e10:	9104      	str	r1, [sp, #16]
 8005e12:	4909      	ldr	r1, [pc, #36]	; (8005e38 <siprintf+0x3c>)
 8005e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e18:	9105      	str	r1, [sp, #20]
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	a902      	add	r1, sp, #8
 8005e20:	f000 fa24 	bl	800626c <_svfiprintf_r>
 8005e24:	9b02      	ldr	r3, [sp, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	b01c      	add	sp, #112	; 0x70
 8005e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e30:	b003      	add	sp, #12
 8005e32:	4770      	bx	lr
 8005e34:	2000006c 	.word	0x2000006c
 8005e38:	ffff0208 	.word	0xffff0208

08005e3c <__sread>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	f000 f868 	bl	8005f18 <_read_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	bfab      	itete	ge
 8005e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e50:	181b      	addge	r3, r3, r0
 8005e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e56:	bfac      	ite	ge
 8005e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e5a:	81a3      	strhlt	r3, [r4, #12]
 8005e5c:	bd10      	pop	{r4, pc}

08005e5e <__swrite>:
 8005e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	461f      	mov	r7, r3
 8005e64:	898b      	ldrh	r3, [r1, #12]
 8005e66:	05db      	lsls	r3, r3, #23
 8005e68:	4605      	mov	r5, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	d505      	bpl.n	8005e7c <__swrite+0x1e>
 8005e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e74:	2302      	movs	r3, #2
 8005e76:	2200      	movs	r2, #0
 8005e78:	f000 f83c 	bl	8005ef4 <_lseek_r>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	f000 b853 	b.w	8005f3c <_write_r>

08005e96 <__sseek>:
 8005e96:	b510      	push	{r4, lr}
 8005e98:	460c      	mov	r4, r1
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 f829 	bl	8005ef4 <_lseek_r>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	bf15      	itete	ne
 8005ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eb2:	81a3      	strheq	r3, [r4, #12]
 8005eb4:	bf18      	it	ne
 8005eb6:	81a3      	strhne	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__sclose>:
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 b809 	b.w	8005ed4 <_close_r>

08005ec2 <memset>:
 8005ec2:	4402      	add	r2, r0
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d100      	bne.n	8005ecc <memset+0xa>
 8005eca:	4770      	bx	lr
 8005ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed0:	e7f9      	b.n	8005ec6 <memset+0x4>
	...

08005ed4 <_close_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d06      	ldr	r5, [pc, #24]	; (8005ef0 <_close_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7fb f995 	bl	800120e <_close>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_close_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_close_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20000320 	.word	0x20000320

08005ef4 <_lseek_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d07      	ldr	r5, [pc, #28]	; (8005f14 <_lseek_r+0x20>)
 8005ef8:	4604      	mov	r4, r0
 8005efa:	4608      	mov	r0, r1
 8005efc:	4611      	mov	r1, r2
 8005efe:	2200      	movs	r2, #0
 8005f00:	602a      	str	r2, [r5, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f7fb f9aa 	bl	800125c <_lseek>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_lseek_r+0x1e>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_lseek_r+0x1e>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20000320 	.word	0x20000320

08005f18 <_read_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	; (8005f38 <_read_r+0x20>)
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	4611      	mov	r1, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fb f938 	bl	800119c <_read>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_read_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_read_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20000320 	.word	0x20000320

08005f3c <_write_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_write_r+0x20>)
 8005f40:	4604      	mov	r4, r0
 8005f42:	4608      	mov	r0, r1
 8005f44:	4611      	mov	r1, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fb f943 	bl	80011d6 <_write>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_write_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_write_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20000320 	.word	0x20000320

08005f60 <__errno>:
 8005f60:	4b01      	ldr	r3, [pc, #4]	; (8005f68 <__errno+0x8>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	2000006c 	.word	0x2000006c

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4d0d      	ldr	r5, [pc, #52]	; (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2600      	movs	r6, #0
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4d0b      	ldr	r5, [pc, #44]	; (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	; (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f000 ffc2 	bl	8006f08 <_init>
 8005f84:	1b64      	subs	r4, r4, r5
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2600      	movs	r6, #0
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08007144 	.word	0x08007144
 8005fa8:	08007144 	.word	0x08007144
 8005fac:	08007144 	.word	0x08007144
 8005fb0:	08007148 	.word	0x08007148

08005fb4 <__retarget_lock_init_recursive>:
 8005fb4:	4770      	bx	lr

08005fb6 <__retarget_lock_acquire_recursive>:
 8005fb6:	4770      	bx	lr

08005fb8 <__retarget_lock_release_recursive>:
 8005fb8:	4770      	bx	lr

08005fba <abort>:
 8005fba:	b508      	push	{r3, lr}
 8005fbc:	2006      	movs	r0, #6
 8005fbe:	f000 fead 	bl	8006d1c <raise>
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	f7fb f8e0 	bl	8001188 <_exit>

08005fc8 <_free_r>:
 8005fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fca:	2900      	cmp	r1, #0
 8005fcc:	d044      	beq.n	8006058 <_free_r+0x90>
 8005fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd2:	9001      	str	r0, [sp, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8005fda:	bfb8      	it	lt
 8005fdc:	18e4      	addlt	r4, r4, r3
 8005fde:	f000 f8df 	bl	80061a0 <__malloc_lock>
 8005fe2:	4a1e      	ldr	r2, [pc, #120]	; (800605c <_free_r+0x94>)
 8005fe4:	9801      	ldr	r0, [sp, #4]
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	b933      	cbnz	r3, 8005ff8 <_free_r+0x30>
 8005fea:	6063      	str	r3, [r4, #4]
 8005fec:	6014      	str	r4, [r2, #0]
 8005fee:	b003      	add	sp, #12
 8005ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ff4:	f000 b8da 	b.w	80061ac <__malloc_unlock>
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d908      	bls.n	800600e <_free_r+0x46>
 8005ffc:	6825      	ldr	r5, [r4, #0]
 8005ffe:	1961      	adds	r1, r4, r5
 8006000:	428b      	cmp	r3, r1
 8006002:	bf01      	itttt	eq
 8006004:	6819      	ldreq	r1, [r3, #0]
 8006006:	685b      	ldreq	r3, [r3, #4]
 8006008:	1949      	addeq	r1, r1, r5
 800600a:	6021      	streq	r1, [r4, #0]
 800600c:	e7ed      	b.n	8005fea <_free_r+0x22>
 800600e:	461a      	mov	r2, r3
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	b10b      	cbz	r3, 8006018 <_free_r+0x50>
 8006014:	42a3      	cmp	r3, r4
 8006016:	d9fa      	bls.n	800600e <_free_r+0x46>
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	1855      	adds	r5, r2, r1
 800601c:	42a5      	cmp	r5, r4
 800601e:	d10b      	bne.n	8006038 <_free_r+0x70>
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	4421      	add	r1, r4
 8006024:	1854      	adds	r4, r2, r1
 8006026:	42a3      	cmp	r3, r4
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	d1e0      	bne.n	8005fee <_free_r+0x26>
 800602c:	681c      	ldr	r4, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6053      	str	r3, [r2, #4]
 8006032:	440c      	add	r4, r1
 8006034:	6014      	str	r4, [r2, #0]
 8006036:	e7da      	b.n	8005fee <_free_r+0x26>
 8006038:	d902      	bls.n	8006040 <_free_r+0x78>
 800603a:	230c      	movs	r3, #12
 800603c:	6003      	str	r3, [r0, #0]
 800603e:	e7d6      	b.n	8005fee <_free_r+0x26>
 8006040:	6825      	ldr	r5, [r4, #0]
 8006042:	1961      	adds	r1, r4, r5
 8006044:	428b      	cmp	r3, r1
 8006046:	bf04      	itt	eq
 8006048:	6819      	ldreq	r1, [r3, #0]
 800604a:	685b      	ldreq	r3, [r3, #4]
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	bf04      	itt	eq
 8006050:	1949      	addeq	r1, r1, r5
 8006052:	6021      	streq	r1, [r4, #0]
 8006054:	6054      	str	r4, [r2, #4]
 8006056:	e7ca      	b.n	8005fee <_free_r+0x26>
 8006058:	b003      	add	sp, #12
 800605a:	bd30      	pop	{r4, r5, pc}
 800605c:	20000328 	.word	0x20000328

08006060 <sbrk_aligned>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	4e0e      	ldr	r6, [pc, #56]	; (800609c <sbrk_aligned+0x3c>)
 8006064:	460c      	mov	r4, r1
 8006066:	6831      	ldr	r1, [r6, #0]
 8006068:	4605      	mov	r5, r0
 800606a:	b911      	cbnz	r1, 8006072 <sbrk_aligned+0x12>
 800606c:	f000 fe72 	bl	8006d54 <_sbrk_r>
 8006070:	6030      	str	r0, [r6, #0]
 8006072:	4621      	mov	r1, r4
 8006074:	4628      	mov	r0, r5
 8006076:	f000 fe6d 	bl	8006d54 <_sbrk_r>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d00a      	beq.n	8006094 <sbrk_aligned+0x34>
 800607e:	1cc4      	adds	r4, r0, #3
 8006080:	f024 0403 	bic.w	r4, r4, #3
 8006084:	42a0      	cmp	r0, r4
 8006086:	d007      	beq.n	8006098 <sbrk_aligned+0x38>
 8006088:	1a21      	subs	r1, r4, r0
 800608a:	4628      	mov	r0, r5
 800608c:	f000 fe62 	bl	8006d54 <_sbrk_r>
 8006090:	3001      	adds	r0, #1
 8006092:	d101      	bne.n	8006098 <sbrk_aligned+0x38>
 8006094:	f04f 34ff 	mov.w	r4, #4294967295
 8006098:	4620      	mov	r0, r4
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	2000032c 	.word	0x2000032c

080060a0 <_malloc_r>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	1ccd      	adds	r5, r1, #3
 80060a6:	f025 0503 	bic.w	r5, r5, #3
 80060aa:	3508      	adds	r5, #8
 80060ac:	2d0c      	cmp	r5, #12
 80060ae:	bf38      	it	cc
 80060b0:	250c      	movcc	r5, #12
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	4607      	mov	r7, r0
 80060b6:	db01      	blt.n	80060bc <_malloc_r+0x1c>
 80060b8:	42a9      	cmp	r1, r5
 80060ba:	d905      	bls.n	80060c8 <_malloc_r+0x28>
 80060bc:	230c      	movs	r3, #12
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	2600      	movs	r6, #0
 80060c2:	4630      	mov	r0, r6
 80060c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800619c <_malloc_r+0xfc>
 80060cc:	f000 f868 	bl	80061a0 <__malloc_lock>
 80060d0:	f8d8 3000 	ldr.w	r3, [r8]
 80060d4:	461c      	mov	r4, r3
 80060d6:	bb5c      	cbnz	r4, 8006130 <_malloc_r+0x90>
 80060d8:	4629      	mov	r1, r5
 80060da:	4638      	mov	r0, r7
 80060dc:	f7ff ffc0 	bl	8006060 <sbrk_aligned>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	4604      	mov	r4, r0
 80060e4:	d155      	bne.n	8006192 <_malloc_r+0xf2>
 80060e6:	f8d8 4000 	ldr.w	r4, [r8]
 80060ea:	4626      	mov	r6, r4
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	d145      	bne.n	800617c <_malloc_r+0xdc>
 80060f0:	2c00      	cmp	r4, #0
 80060f2:	d048      	beq.n	8006186 <_malloc_r+0xe6>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4638      	mov	r0, r7
 80060fa:	eb04 0903 	add.w	r9, r4, r3
 80060fe:	f000 fe29 	bl	8006d54 <_sbrk_r>
 8006102:	4581      	cmp	r9, r0
 8006104:	d13f      	bne.n	8006186 <_malloc_r+0xe6>
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	1a6d      	subs	r5, r5, r1
 800610a:	4629      	mov	r1, r5
 800610c:	4638      	mov	r0, r7
 800610e:	f7ff ffa7 	bl	8006060 <sbrk_aligned>
 8006112:	3001      	adds	r0, #1
 8006114:	d037      	beq.n	8006186 <_malloc_r+0xe6>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	442b      	add	r3, r5
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	f8d8 3000 	ldr.w	r3, [r8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d038      	beq.n	8006196 <_malloc_r+0xf6>
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	42a2      	cmp	r2, r4
 8006128:	d12b      	bne.n	8006182 <_malloc_r+0xe2>
 800612a:	2200      	movs	r2, #0
 800612c:	605a      	str	r2, [r3, #4]
 800612e:	e00f      	b.n	8006150 <_malloc_r+0xb0>
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	1b52      	subs	r2, r2, r5
 8006134:	d41f      	bmi.n	8006176 <_malloc_r+0xd6>
 8006136:	2a0b      	cmp	r2, #11
 8006138:	d917      	bls.n	800616a <_malloc_r+0xca>
 800613a:	1961      	adds	r1, r4, r5
 800613c:	42a3      	cmp	r3, r4
 800613e:	6025      	str	r5, [r4, #0]
 8006140:	bf18      	it	ne
 8006142:	6059      	strne	r1, [r3, #4]
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	bf08      	it	eq
 8006148:	f8c8 1000 	streq.w	r1, [r8]
 800614c:	5162      	str	r2, [r4, r5]
 800614e:	604b      	str	r3, [r1, #4]
 8006150:	4638      	mov	r0, r7
 8006152:	f104 060b 	add.w	r6, r4, #11
 8006156:	f000 f829 	bl	80061ac <__malloc_unlock>
 800615a:	f026 0607 	bic.w	r6, r6, #7
 800615e:	1d23      	adds	r3, r4, #4
 8006160:	1af2      	subs	r2, r6, r3
 8006162:	d0ae      	beq.n	80060c2 <_malloc_r+0x22>
 8006164:	1b9b      	subs	r3, r3, r6
 8006166:	50a3      	str	r3, [r4, r2]
 8006168:	e7ab      	b.n	80060c2 <_malloc_r+0x22>
 800616a:	42a3      	cmp	r3, r4
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	d1dd      	bne.n	800612c <_malloc_r+0x8c>
 8006170:	f8c8 2000 	str.w	r2, [r8]
 8006174:	e7ec      	b.n	8006150 <_malloc_r+0xb0>
 8006176:	4623      	mov	r3, r4
 8006178:	6864      	ldr	r4, [r4, #4]
 800617a:	e7ac      	b.n	80060d6 <_malloc_r+0x36>
 800617c:	4634      	mov	r4, r6
 800617e:	6876      	ldr	r6, [r6, #4]
 8006180:	e7b4      	b.n	80060ec <_malloc_r+0x4c>
 8006182:	4613      	mov	r3, r2
 8006184:	e7cc      	b.n	8006120 <_malloc_r+0x80>
 8006186:	230c      	movs	r3, #12
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	4638      	mov	r0, r7
 800618c:	f000 f80e 	bl	80061ac <__malloc_unlock>
 8006190:	e797      	b.n	80060c2 <_malloc_r+0x22>
 8006192:	6025      	str	r5, [r4, #0]
 8006194:	e7dc      	b.n	8006150 <_malloc_r+0xb0>
 8006196:	605b      	str	r3, [r3, #4]
 8006198:	deff      	udf	#255	; 0xff
 800619a:	bf00      	nop
 800619c:	20000328 	.word	0x20000328

080061a0 <__malloc_lock>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__malloc_lock+0x8>)
 80061a2:	f7ff bf08 	b.w	8005fb6 <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	20000324 	.word	0x20000324

080061ac <__malloc_unlock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	; (80061b4 <__malloc_unlock+0x8>)
 80061ae:	f7ff bf03 	b.w	8005fb8 <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	20000324 	.word	0x20000324

080061b8 <__ssputs_r>:
 80061b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	688e      	ldr	r6, [r1, #8]
 80061be:	461f      	mov	r7, r3
 80061c0:	42be      	cmp	r6, r7
 80061c2:	680b      	ldr	r3, [r1, #0]
 80061c4:	4682      	mov	sl, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	4690      	mov	r8, r2
 80061ca:	d82c      	bhi.n	8006226 <__ssputs_r+0x6e>
 80061cc:	898a      	ldrh	r2, [r1, #12]
 80061ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061d2:	d026      	beq.n	8006222 <__ssputs_r+0x6a>
 80061d4:	6965      	ldr	r5, [r4, #20]
 80061d6:	6909      	ldr	r1, [r1, #16]
 80061d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061dc:	eba3 0901 	sub.w	r9, r3, r1
 80061e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061e4:	1c7b      	adds	r3, r7, #1
 80061e6:	444b      	add	r3, r9
 80061e8:	106d      	asrs	r5, r5, #1
 80061ea:	429d      	cmp	r5, r3
 80061ec:	bf38      	it	cc
 80061ee:	461d      	movcc	r5, r3
 80061f0:	0553      	lsls	r3, r2, #21
 80061f2:	d527      	bpl.n	8006244 <__ssputs_r+0x8c>
 80061f4:	4629      	mov	r1, r5
 80061f6:	f7ff ff53 	bl	80060a0 <_malloc_r>
 80061fa:	4606      	mov	r6, r0
 80061fc:	b360      	cbz	r0, 8006258 <__ssputs_r+0xa0>
 80061fe:	6921      	ldr	r1, [r4, #16]
 8006200:	464a      	mov	r2, r9
 8006202:	f000 fdb7 	bl	8006d74 <memcpy>
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	6126      	str	r6, [r4, #16]
 8006214:	6165      	str	r5, [r4, #20]
 8006216:	444e      	add	r6, r9
 8006218:	eba5 0509 	sub.w	r5, r5, r9
 800621c:	6026      	str	r6, [r4, #0]
 800621e:	60a5      	str	r5, [r4, #8]
 8006220:	463e      	mov	r6, r7
 8006222:	42be      	cmp	r6, r7
 8006224:	d900      	bls.n	8006228 <__ssputs_r+0x70>
 8006226:	463e      	mov	r6, r7
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	4632      	mov	r2, r6
 800622c:	4641      	mov	r1, r8
 800622e:	f000 fd33 	bl	8006c98 <memmove>
 8006232:	68a3      	ldr	r3, [r4, #8]
 8006234:	1b9b      	subs	r3, r3, r6
 8006236:	60a3      	str	r3, [r4, #8]
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	4433      	add	r3, r6
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	2000      	movs	r0, #0
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	462a      	mov	r2, r5
 8006246:	f000 fda3 	bl	8006d90 <_realloc_r>
 800624a:	4606      	mov	r6, r0
 800624c:	2800      	cmp	r0, #0
 800624e:	d1e0      	bne.n	8006212 <__ssputs_r+0x5a>
 8006250:	6921      	ldr	r1, [r4, #16]
 8006252:	4650      	mov	r0, sl
 8006254:	f7ff feb8 	bl	8005fc8 <_free_r>
 8006258:	230c      	movs	r3, #12
 800625a:	f8ca 3000 	str.w	r3, [sl]
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	e7e9      	b.n	8006240 <__ssputs_r+0x88>

0800626c <_svfiprintf_r>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	4698      	mov	r8, r3
 8006272:	898b      	ldrh	r3, [r1, #12]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	b09d      	sub	sp, #116	; 0x74
 8006278:	4607      	mov	r7, r0
 800627a:	460d      	mov	r5, r1
 800627c:	4614      	mov	r4, r2
 800627e:	d50e      	bpl.n	800629e <_svfiprintf_r+0x32>
 8006280:	690b      	ldr	r3, [r1, #16]
 8006282:	b963      	cbnz	r3, 800629e <_svfiprintf_r+0x32>
 8006284:	2140      	movs	r1, #64	; 0x40
 8006286:	f7ff ff0b 	bl	80060a0 <_malloc_r>
 800628a:	6028      	str	r0, [r5, #0]
 800628c:	6128      	str	r0, [r5, #16]
 800628e:	b920      	cbnz	r0, 800629a <_svfiprintf_r+0x2e>
 8006290:	230c      	movs	r3, #12
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e0d0      	b.n	800643c <_svfiprintf_r+0x1d0>
 800629a:	2340      	movs	r3, #64	; 0x40
 800629c:	616b      	str	r3, [r5, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	9309      	str	r3, [sp, #36]	; 0x24
 80062a2:	2320      	movs	r3, #32
 80062a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ac:	2330      	movs	r3, #48	; 0x30
 80062ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006454 <_svfiprintf_r+0x1e8>
 80062b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062b6:	f04f 0901 	mov.w	r9, #1
 80062ba:	4623      	mov	r3, r4
 80062bc:	469a      	mov	sl, r3
 80062be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c2:	b10a      	cbz	r2, 80062c8 <_svfiprintf_r+0x5c>
 80062c4:	2a25      	cmp	r2, #37	; 0x25
 80062c6:	d1f9      	bne.n	80062bc <_svfiprintf_r+0x50>
 80062c8:	ebba 0b04 	subs.w	fp, sl, r4
 80062cc:	d00b      	beq.n	80062e6 <_svfiprintf_r+0x7a>
 80062ce:	465b      	mov	r3, fp
 80062d0:	4622      	mov	r2, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ff6f 	bl	80061b8 <__ssputs_r>
 80062da:	3001      	adds	r0, #1
 80062dc:	f000 80a9 	beq.w	8006432 <_svfiprintf_r+0x1c6>
 80062e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e2:	445a      	add	r2, fp
 80062e4:	9209      	str	r2, [sp, #36]	; 0x24
 80062e6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80a1 	beq.w	8006432 <_svfiprintf_r+0x1c6>
 80062f0:	2300      	movs	r3, #0
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062fa:	f10a 0a01 	add.w	sl, sl, #1
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	9307      	str	r3, [sp, #28]
 8006302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006306:	931a      	str	r3, [sp, #104]	; 0x68
 8006308:	4654      	mov	r4, sl
 800630a:	2205      	movs	r2, #5
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	4850      	ldr	r0, [pc, #320]	; (8006454 <_svfiprintf_r+0x1e8>)
 8006312:	f7f9 ff65 	bl	80001e0 <memchr>
 8006316:	9a04      	ldr	r2, [sp, #16]
 8006318:	b9d8      	cbnz	r0, 8006352 <_svfiprintf_r+0xe6>
 800631a:	06d0      	lsls	r0, r2, #27
 800631c:	bf44      	itt	mi
 800631e:	2320      	movmi	r3, #32
 8006320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006324:	0711      	lsls	r1, r2, #28
 8006326:	bf44      	itt	mi
 8006328:	232b      	movmi	r3, #43	; 0x2b
 800632a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632e:	f89a 3000 	ldrb.w	r3, [sl]
 8006332:	2b2a      	cmp	r3, #42	; 0x2a
 8006334:	d015      	beq.n	8006362 <_svfiprintf_r+0xf6>
 8006336:	9a07      	ldr	r2, [sp, #28]
 8006338:	4654      	mov	r4, sl
 800633a:	2000      	movs	r0, #0
 800633c:	f04f 0c0a 	mov.w	ip, #10
 8006340:	4621      	mov	r1, r4
 8006342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006346:	3b30      	subs	r3, #48	; 0x30
 8006348:	2b09      	cmp	r3, #9
 800634a:	d94d      	bls.n	80063e8 <_svfiprintf_r+0x17c>
 800634c:	b1b0      	cbz	r0, 800637c <_svfiprintf_r+0x110>
 800634e:	9207      	str	r2, [sp, #28]
 8006350:	e014      	b.n	800637c <_svfiprintf_r+0x110>
 8006352:	eba0 0308 	sub.w	r3, r0, r8
 8006356:	fa09 f303 	lsl.w	r3, r9, r3
 800635a:	4313      	orrs	r3, r2
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	46a2      	mov	sl, r4
 8006360:	e7d2      	b.n	8006308 <_svfiprintf_r+0x9c>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	1d19      	adds	r1, r3, #4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	9103      	str	r1, [sp, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfbb      	ittet	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	f042 0202 	orrlt.w	r2, r2, #2
 8006374:	9307      	strge	r3, [sp, #28]
 8006376:	9307      	strlt	r3, [sp, #28]
 8006378:	bfb8      	it	lt
 800637a:	9204      	strlt	r2, [sp, #16]
 800637c:	7823      	ldrb	r3, [r4, #0]
 800637e:	2b2e      	cmp	r3, #46	; 0x2e
 8006380:	d10c      	bne.n	800639c <_svfiprintf_r+0x130>
 8006382:	7863      	ldrb	r3, [r4, #1]
 8006384:	2b2a      	cmp	r3, #42	; 0x2a
 8006386:	d134      	bne.n	80063f2 <_svfiprintf_r+0x186>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	9203      	str	r2, [sp, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	bfb8      	it	lt
 8006394:	f04f 33ff 	movlt.w	r3, #4294967295
 8006398:	3402      	adds	r4, #2
 800639a:	9305      	str	r3, [sp, #20]
 800639c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006464 <_svfiprintf_r+0x1f8>
 80063a0:	7821      	ldrb	r1, [r4, #0]
 80063a2:	2203      	movs	r2, #3
 80063a4:	4650      	mov	r0, sl
 80063a6:	f7f9 ff1b 	bl	80001e0 <memchr>
 80063aa:	b138      	cbz	r0, 80063bc <_svfiprintf_r+0x150>
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	eba0 000a 	sub.w	r0, r0, sl
 80063b2:	2240      	movs	r2, #64	; 0x40
 80063b4:	4082      	lsls	r2, r0
 80063b6:	4313      	orrs	r3, r2
 80063b8:	3401      	adds	r4, #1
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c0:	4825      	ldr	r0, [pc, #148]	; (8006458 <_svfiprintf_r+0x1ec>)
 80063c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063c6:	2206      	movs	r2, #6
 80063c8:	f7f9 ff0a 	bl	80001e0 <memchr>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d038      	beq.n	8006442 <_svfiprintf_r+0x1d6>
 80063d0:	4b22      	ldr	r3, [pc, #136]	; (800645c <_svfiprintf_r+0x1f0>)
 80063d2:	bb1b      	cbnz	r3, 800641c <_svfiprintf_r+0x1b0>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	3307      	adds	r3, #7
 80063d8:	f023 0307 	bic.w	r3, r3, #7
 80063dc:	3308      	adds	r3, #8
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e2:	4433      	add	r3, r6
 80063e4:	9309      	str	r3, [sp, #36]	; 0x24
 80063e6:	e768      	b.n	80062ba <_svfiprintf_r+0x4e>
 80063e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ec:	460c      	mov	r4, r1
 80063ee:	2001      	movs	r0, #1
 80063f0:	e7a6      	b.n	8006340 <_svfiprintf_r+0xd4>
 80063f2:	2300      	movs	r3, #0
 80063f4:	3401      	adds	r4, #1
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	4619      	mov	r1, r3
 80063fa:	f04f 0c0a 	mov.w	ip, #10
 80063fe:	4620      	mov	r0, r4
 8006400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006404:	3a30      	subs	r2, #48	; 0x30
 8006406:	2a09      	cmp	r2, #9
 8006408:	d903      	bls.n	8006412 <_svfiprintf_r+0x1a6>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0c6      	beq.n	800639c <_svfiprintf_r+0x130>
 800640e:	9105      	str	r1, [sp, #20]
 8006410:	e7c4      	b.n	800639c <_svfiprintf_r+0x130>
 8006412:	fb0c 2101 	mla	r1, ip, r1, r2
 8006416:	4604      	mov	r4, r0
 8006418:	2301      	movs	r3, #1
 800641a:	e7f0      	b.n	80063fe <_svfiprintf_r+0x192>
 800641c:	ab03      	add	r3, sp, #12
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	462a      	mov	r2, r5
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <_svfiprintf_r+0x1f4>)
 8006424:	a904      	add	r1, sp, #16
 8006426:	4638      	mov	r0, r7
 8006428:	f3af 8000 	nop.w
 800642c:	1c42      	adds	r2, r0, #1
 800642e:	4606      	mov	r6, r0
 8006430:	d1d6      	bne.n	80063e0 <_svfiprintf_r+0x174>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	065b      	lsls	r3, r3, #25
 8006436:	f53f af2d 	bmi.w	8006294 <_svfiprintf_r+0x28>
 800643a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800643c:	b01d      	add	sp, #116	; 0x74
 800643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006442:	ab03      	add	r3, sp, #12
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	462a      	mov	r2, r5
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <_svfiprintf_r+0x1f4>)
 800644a:	a904      	add	r1, sp, #16
 800644c:	4638      	mov	r0, r7
 800644e:	f000 f9bd 	bl	80067cc <_printf_i>
 8006452:	e7eb      	b.n	800642c <_svfiprintf_r+0x1c0>
 8006454:	08007108 	.word	0x08007108
 8006458:	08007112 	.word	0x08007112
 800645c:	00000000 	.word	0x00000000
 8006460:	080061b9 	.word	0x080061b9
 8006464:	0800710e 	.word	0x0800710e

08006468 <__sfputc_r>:
 8006468:	6893      	ldr	r3, [r2, #8]
 800646a:	3b01      	subs	r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	b410      	push	{r4}
 8006470:	6093      	str	r3, [r2, #8]
 8006472:	da08      	bge.n	8006486 <__sfputc_r+0x1e>
 8006474:	6994      	ldr	r4, [r2, #24]
 8006476:	42a3      	cmp	r3, r4
 8006478:	db01      	blt.n	800647e <__sfputc_r+0x16>
 800647a:	290a      	cmp	r1, #10
 800647c:	d103      	bne.n	8006486 <__sfputc_r+0x1e>
 800647e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006482:	f000 bb73 	b.w	8006b6c <__swbuf_r>
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	1c58      	adds	r0, r3, #1
 800648a:	6010      	str	r0, [r2, #0]
 800648c:	7019      	strb	r1, [r3, #0]
 800648e:	4608      	mov	r0, r1
 8006490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006494:	4770      	bx	lr

08006496 <__sfputs_r>:
 8006496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006498:	4606      	mov	r6, r0
 800649a:	460f      	mov	r7, r1
 800649c:	4614      	mov	r4, r2
 800649e:	18d5      	adds	r5, r2, r3
 80064a0:	42ac      	cmp	r4, r5
 80064a2:	d101      	bne.n	80064a8 <__sfputs_r+0x12>
 80064a4:	2000      	movs	r0, #0
 80064a6:	e007      	b.n	80064b8 <__sfputs_r+0x22>
 80064a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ac:	463a      	mov	r2, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7ff ffda 	bl	8006468 <__sfputc_r>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d1f3      	bne.n	80064a0 <__sfputs_r+0xa>
 80064b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064bc <_vfiprintf_r>:
 80064bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	460d      	mov	r5, r1
 80064c2:	b09d      	sub	sp, #116	; 0x74
 80064c4:	4614      	mov	r4, r2
 80064c6:	4698      	mov	r8, r3
 80064c8:	4606      	mov	r6, r0
 80064ca:	b118      	cbz	r0, 80064d4 <_vfiprintf_r+0x18>
 80064cc:	6a03      	ldr	r3, [r0, #32]
 80064ce:	b90b      	cbnz	r3, 80064d4 <_vfiprintf_r+0x18>
 80064d0:	f7ff fc3a 	bl	8005d48 <__sinit>
 80064d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	d405      	bmi.n	80064e6 <_vfiprintf_r+0x2a>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	059a      	lsls	r2, r3, #22
 80064de:	d402      	bmi.n	80064e6 <_vfiprintf_r+0x2a>
 80064e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064e2:	f7ff fd68 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 80064e6:	89ab      	ldrh	r3, [r5, #12]
 80064e8:	071b      	lsls	r3, r3, #28
 80064ea:	d501      	bpl.n	80064f0 <_vfiprintf_r+0x34>
 80064ec:	692b      	ldr	r3, [r5, #16]
 80064ee:	b99b      	cbnz	r3, 8006518 <_vfiprintf_r+0x5c>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f000 fb78 	bl	8006be8 <__swsetup_r>
 80064f8:	b170      	cbz	r0, 8006518 <_vfiprintf_r+0x5c>
 80064fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064fc:	07dc      	lsls	r4, r3, #31
 80064fe:	d504      	bpl.n	800650a <_vfiprintf_r+0x4e>
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	b01d      	add	sp, #116	; 0x74
 8006506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	0598      	lsls	r0, r3, #22
 800650e:	d4f7      	bmi.n	8006500 <_vfiprintf_r+0x44>
 8006510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006512:	f7ff fd51 	bl	8005fb8 <__retarget_lock_release_recursive>
 8006516:	e7f3      	b.n	8006500 <_vfiprintf_r+0x44>
 8006518:	2300      	movs	r3, #0
 800651a:	9309      	str	r3, [sp, #36]	; 0x24
 800651c:	2320      	movs	r3, #32
 800651e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006522:	f8cd 800c 	str.w	r8, [sp, #12]
 8006526:	2330      	movs	r3, #48	; 0x30
 8006528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80066dc <_vfiprintf_r+0x220>
 800652c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006530:	f04f 0901 	mov.w	r9, #1
 8006534:	4623      	mov	r3, r4
 8006536:	469a      	mov	sl, r3
 8006538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800653c:	b10a      	cbz	r2, 8006542 <_vfiprintf_r+0x86>
 800653e:	2a25      	cmp	r2, #37	; 0x25
 8006540:	d1f9      	bne.n	8006536 <_vfiprintf_r+0x7a>
 8006542:	ebba 0b04 	subs.w	fp, sl, r4
 8006546:	d00b      	beq.n	8006560 <_vfiprintf_r+0xa4>
 8006548:	465b      	mov	r3, fp
 800654a:	4622      	mov	r2, r4
 800654c:	4629      	mov	r1, r5
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff ffa1 	bl	8006496 <__sfputs_r>
 8006554:	3001      	adds	r0, #1
 8006556:	f000 80a9 	beq.w	80066ac <_vfiprintf_r+0x1f0>
 800655a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800655c:	445a      	add	r2, fp
 800655e:	9209      	str	r2, [sp, #36]	; 0x24
 8006560:	f89a 3000 	ldrb.w	r3, [sl]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a1 	beq.w	80066ac <_vfiprintf_r+0x1f0>
 800656a:	2300      	movs	r3, #0
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006574:	f10a 0a01 	add.w	sl, sl, #1
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006580:	931a      	str	r3, [sp, #104]	; 0x68
 8006582:	4654      	mov	r4, sl
 8006584:	2205      	movs	r2, #5
 8006586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658a:	4854      	ldr	r0, [pc, #336]	; (80066dc <_vfiprintf_r+0x220>)
 800658c:	f7f9 fe28 	bl	80001e0 <memchr>
 8006590:	9a04      	ldr	r2, [sp, #16]
 8006592:	b9d8      	cbnz	r0, 80065cc <_vfiprintf_r+0x110>
 8006594:	06d1      	lsls	r1, r2, #27
 8006596:	bf44      	itt	mi
 8006598:	2320      	movmi	r3, #32
 800659a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659e:	0713      	lsls	r3, r2, #28
 80065a0:	bf44      	itt	mi
 80065a2:	232b      	movmi	r3, #43	; 0x2b
 80065a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a8:	f89a 3000 	ldrb.w	r3, [sl]
 80065ac:	2b2a      	cmp	r3, #42	; 0x2a
 80065ae:	d015      	beq.n	80065dc <_vfiprintf_r+0x120>
 80065b0:	9a07      	ldr	r2, [sp, #28]
 80065b2:	4654      	mov	r4, sl
 80065b4:	2000      	movs	r0, #0
 80065b6:	f04f 0c0a 	mov.w	ip, #10
 80065ba:	4621      	mov	r1, r4
 80065bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065c0:	3b30      	subs	r3, #48	; 0x30
 80065c2:	2b09      	cmp	r3, #9
 80065c4:	d94d      	bls.n	8006662 <_vfiprintf_r+0x1a6>
 80065c6:	b1b0      	cbz	r0, 80065f6 <_vfiprintf_r+0x13a>
 80065c8:	9207      	str	r2, [sp, #28]
 80065ca:	e014      	b.n	80065f6 <_vfiprintf_r+0x13a>
 80065cc:	eba0 0308 	sub.w	r3, r0, r8
 80065d0:	fa09 f303 	lsl.w	r3, r9, r3
 80065d4:	4313      	orrs	r3, r2
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	46a2      	mov	sl, r4
 80065da:	e7d2      	b.n	8006582 <_vfiprintf_r+0xc6>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	1d19      	adds	r1, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bfbb      	ittet	lt
 80065e8:	425b      	neglt	r3, r3
 80065ea:	f042 0202 	orrlt.w	r2, r2, #2
 80065ee:	9307      	strge	r3, [sp, #28]
 80065f0:	9307      	strlt	r3, [sp, #28]
 80065f2:	bfb8      	it	lt
 80065f4:	9204      	strlt	r2, [sp, #16]
 80065f6:	7823      	ldrb	r3, [r4, #0]
 80065f8:	2b2e      	cmp	r3, #46	; 0x2e
 80065fa:	d10c      	bne.n	8006616 <_vfiprintf_r+0x15a>
 80065fc:	7863      	ldrb	r3, [r4, #1]
 80065fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006600:	d134      	bne.n	800666c <_vfiprintf_r+0x1b0>
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	9203      	str	r2, [sp, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfb8      	it	lt
 800660e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006612:	3402      	adds	r4, #2
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80066ec <_vfiprintf_r+0x230>
 800661a:	7821      	ldrb	r1, [r4, #0]
 800661c:	2203      	movs	r2, #3
 800661e:	4650      	mov	r0, sl
 8006620:	f7f9 fdde 	bl	80001e0 <memchr>
 8006624:	b138      	cbz	r0, 8006636 <_vfiprintf_r+0x17a>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	eba0 000a 	sub.w	r0, r0, sl
 800662c:	2240      	movs	r2, #64	; 0x40
 800662e:	4082      	lsls	r2, r0
 8006630:	4313      	orrs	r3, r2
 8006632:	3401      	adds	r4, #1
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663a:	4829      	ldr	r0, [pc, #164]	; (80066e0 <_vfiprintf_r+0x224>)
 800663c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006640:	2206      	movs	r2, #6
 8006642:	f7f9 fdcd 	bl	80001e0 <memchr>
 8006646:	2800      	cmp	r0, #0
 8006648:	d03f      	beq.n	80066ca <_vfiprintf_r+0x20e>
 800664a:	4b26      	ldr	r3, [pc, #152]	; (80066e4 <_vfiprintf_r+0x228>)
 800664c:	bb1b      	cbnz	r3, 8006696 <_vfiprintf_r+0x1da>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	3307      	adds	r3, #7
 8006652:	f023 0307 	bic.w	r3, r3, #7
 8006656:	3308      	adds	r3, #8
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665c:	443b      	add	r3, r7
 800665e:	9309      	str	r3, [sp, #36]	; 0x24
 8006660:	e768      	b.n	8006534 <_vfiprintf_r+0x78>
 8006662:	fb0c 3202 	mla	r2, ip, r2, r3
 8006666:	460c      	mov	r4, r1
 8006668:	2001      	movs	r0, #1
 800666a:	e7a6      	b.n	80065ba <_vfiprintf_r+0xfe>
 800666c:	2300      	movs	r3, #0
 800666e:	3401      	adds	r4, #1
 8006670:	9305      	str	r3, [sp, #20]
 8006672:	4619      	mov	r1, r3
 8006674:	f04f 0c0a 	mov.w	ip, #10
 8006678:	4620      	mov	r0, r4
 800667a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800667e:	3a30      	subs	r2, #48	; 0x30
 8006680:	2a09      	cmp	r2, #9
 8006682:	d903      	bls.n	800668c <_vfiprintf_r+0x1d0>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0c6      	beq.n	8006616 <_vfiprintf_r+0x15a>
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	e7c4      	b.n	8006616 <_vfiprintf_r+0x15a>
 800668c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006690:	4604      	mov	r4, r0
 8006692:	2301      	movs	r3, #1
 8006694:	e7f0      	b.n	8006678 <_vfiprintf_r+0x1bc>
 8006696:	ab03      	add	r3, sp, #12
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	462a      	mov	r2, r5
 800669c:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <_vfiprintf_r+0x22c>)
 800669e:	a904      	add	r1, sp, #16
 80066a0:	4630      	mov	r0, r6
 80066a2:	f3af 8000 	nop.w
 80066a6:	4607      	mov	r7, r0
 80066a8:	1c78      	adds	r0, r7, #1
 80066aa:	d1d6      	bne.n	800665a <_vfiprintf_r+0x19e>
 80066ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ae:	07d9      	lsls	r1, r3, #31
 80066b0:	d405      	bmi.n	80066be <_vfiprintf_r+0x202>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	059a      	lsls	r2, r3, #22
 80066b6:	d402      	bmi.n	80066be <_vfiprintf_r+0x202>
 80066b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ba:	f7ff fc7d 	bl	8005fb8 <__retarget_lock_release_recursive>
 80066be:	89ab      	ldrh	r3, [r5, #12]
 80066c0:	065b      	lsls	r3, r3, #25
 80066c2:	f53f af1d 	bmi.w	8006500 <_vfiprintf_r+0x44>
 80066c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c8:	e71c      	b.n	8006504 <_vfiprintf_r+0x48>
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	462a      	mov	r2, r5
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <_vfiprintf_r+0x22c>)
 80066d2:	a904      	add	r1, sp, #16
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f879 	bl	80067cc <_printf_i>
 80066da:	e7e4      	b.n	80066a6 <_vfiprintf_r+0x1ea>
 80066dc:	08007108 	.word	0x08007108
 80066e0:	08007112 	.word	0x08007112
 80066e4:	00000000 	.word	0x00000000
 80066e8:	08006497 	.word	0x08006497
 80066ec:	0800710e 	.word	0x0800710e

080066f0 <_printf_common>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	4616      	mov	r6, r2
 80066f6:	4699      	mov	r9, r3
 80066f8:	688a      	ldr	r2, [r1, #8]
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006700:	4293      	cmp	r3, r2
 8006702:	bfb8      	it	lt
 8006704:	4613      	movlt	r3, r2
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800670c:	4607      	mov	r7, r0
 800670e:	460c      	mov	r4, r1
 8006710:	b10a      	cbz	r2, 8006716 <_printf_common+0x26>
 8006712:	3301      	adds	r3, #1
 8006714:	6033      	str	r3, [r6, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	0699      	lsls	r1, r3, #26
 800671a:	bf42      	ittt	mi
 800671c:	6833      	ldrmi	r3, [r6, #0]
 800671e:	3302      	addmi	r3, #2
 8006720:	6033      	strmi	r3, [r6, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	f015 0506 	ands.w	r5, r5, #6
 8006728:	d106      	bne.n	8006738 <_printf_common+0x48>
 800672a:	f104 0a19 	add.w	sl, r4, #25
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	6832      	ldr	r2, [r6, #0]
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	42ab      	cmp	r3, r5
 8006736:	dc26      	bgt.n	8006786 <_printf_common+0x96>
 8006738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800673c:	1e13      	subs	r3, r2, #0
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	2301      	movne	r3, #1
 8006744:	0692      	lsls	r2, r2, #26
 8006746:	d42b      	bmi.n	80067a0 <_printf_common+0xb0>
 8006748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d01e      	beq.n	8006794 <_printf_common+0xa4>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	f003 0306 	and.w	r3, r3, #6
 800675e:	2b04      	cmp	r3, #4
 8006760:	bf02      	ittt	eq
 8006762:	68e5      	ldreq	r5, [r4, #12]
 8006764:	6833      	ldreq	r3, [r6, #0]
 8006766:	1aed      	subeq	r5, r5, r3
 8006768:	68a3      	ldr	r3, [r4, #8]
 800676a:	bf0c      	ite	eq
 800676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006770:	2500      	movne	r5, #0
 8006772:	4293      	cmp	r3, r2
 8006774:	bfc4      	itt	gt
 8006776:	1a9b      	subgt	r3, r3, r2
 8006778:	18ed      	addgt	r5, r5, r3
 800677a:	2600      	movs	r6, #0
 800677c:	341a      	adds	r4, #26
 800677e:	42b5      	cmp	r5, r6
 8006780:	d11a      	bne.n	80067b8 <_printf_common+0xc8>
 8006782:	2000      	movs	r0, #0
 8006784:	e008      	b.n	8006798 <_printf_common+0xa8>
 8006786:	2301      	movs	r3, #1
 8006788:	4652      	mov	r2, sl
 800678a:	4649      	mov	r1, r9
 800678c:	4638      	mov	r0, r7
 800678e:	47c0      	blx	r8
 8006790:	3001      	adds	r0, #1
 8006792:	d103      	bne.n	800679c <_printf_common+0xac>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	3501      	adds	r5, #1
 800679e:	e7c6      	b.n	800672e <_printf_common+0x3e>
 80067a0:	18e1      	adds	r1, r4, r3
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	2030      	movs	r0, #48	; 0x30
 80067a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067aa:	4422      	add	r2, r4
 80067ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b4:	3302      	adds	r3, #2
 80067b6:	e7c7      	b.n	8006748 <_printf_common+0x58>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4622      	mov	r2, r4
 80067bc:	4649      	mov	r1, r9
 80067be:	4638      	mov	r0, r7
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d0e6      	beq.n	8006794 <_printf_common+0xa4>
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7d9      	b.n	800677e <_printf_common+0x8e>
	...

080067cc <_printf_i>:
 80067cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	7e0f      	ldrb	r7, [r1, #24]
 80067d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067d4:	2f78      	cmp	r7, #120	; 0x78
 80067d6:	4691      	mov	r9, r2
 80067d8:	4680      	mov	r8, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	469a      	mov	sl, r3
 80067de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067e2:	d807      	bhi.n	80067f4 <_printf_i+0x28>
 80067e4:	2f62      	cmp	r7, #98	; 0x62
 80067e6:	d80a      	bhi.n	80067fe <_printf_i+0x32>
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	f000 80d4 	beq.w	8006996 <_printf_i+0x1ca>
 80067ee:	2f58      	cmp	r7, #88	; 0x58
 80067f0:	f000 80c0 	beq.w	8006974 <_printf_i+0x1a8>
 80067f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067fc:	e03a      	b.n	8006874 <_printf_i+0xa8>
 80067fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006802:	2b15      	cmp	r3, #21
 8006804:	d8f6      	bhi.n	80067f4 <_printf_i+0x28>
 8006806:	a101      	add	r1, pc, #4	; (adr r1, 800680c <_printf_i+0x40>)
 8006808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800680c:	08006865 	.word	0x08006865
 8006810:	08006879 	.word	0x08006879
 8006814:	080067f5 	.word	0x080067f5
 8006818:	080067f5 	.word	0x080067f5
 800681c:	080067f5 	.word	0x080067f5
 8006820:	080067f5 	.word	0x080067f5
 8006824:	08006879 	.word	0x08006879
 8006828:	080067f5 	.word	0x080067f5
 800682c:	080067f5 	.word	0x080067f5
 8006830:	080067f5 	.word	0x080067f5
 8006834:	080067f5 	.word	0x080067f5
 8006838:	0800697d 	.word	0x0800697d
 800683c:	080068a5 	.word	0x080068a5
 8006840:	08006937 	.word	0x08006937
 8006844:	080067f5 	.word	0x080067f5
 8006848:	080067f5 	.word	0x080067f5
 800684c:	0800699f 	.word	0x0800699f
 8006850:	080067f5 	.word	0x080067f5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080067f5 	.word	0x080067f5
 800685c:	080067f5 	.word	0x080067f5
 8006860:	0800693f 	.word	0x0800693f
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	602a      	str	r2, [r5, #0]
 800686c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006874:	2301      	movs	r3, #1
 8006876:	e09f      	b.n	80069b8 <_printf_i+0x1ec>
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	0607      	lsls	r7, r0, #24
 800687e:	f103 0104 	add.w	r1, r3, #4
 8006882:	6029      	str	r1, [r5, #0]
 8006884:	d501      	bpl.n	800688a <_printf_i+0xbe>
 8006886:	681e      	ldr	r6, [r3, #0]
 8006888:	e003      	b.n	8006892 <_printf_i+0xc6>
 800688a:	0646      	lsls	r6, r0, #25
 800688c:	d5fb      	bpl.n	8006886 <_printf_i+0xba>
 800688e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006892:	2e00      	cmp	r6, #0
 8006894:	da03      	bge.n	800689e <_printf_i+0xd2>
 8006896:	232d      	movs	r3, #45	; 0x2d
 8006898:	4276      	negs	r6, r6
 800689a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689e:	485a      	ldr	r0, [pc, #360]	; (8006a08 <_printf_i+0x23c>)
 80068a0:	230a      	movs	r3, #10
 80068a2:	e012      	b.n	80068ca <_printf_i+0xfe>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	0605      	lsls	r5, r0, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0xe8>
 80068b0:	681e      	ldr	r6, [r3, #0]
 80068b2:	e002      	b.n	80068ba <_printf_i+0xee>
 80068b4:	0641      	lsls	r1, r0, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0xe4>
 80068b8:	881e      	ldrh	r6, [r3, #0]
 80068ba:	4853      	ldr	r0, [pc, #332]	; (8006a08 <_printf_i+0x23c>)
 80068bc:	2f6f      	cmp	r7, #111	; 0x6f
 80068be:	bf0c      	ite	eq
 80068c0:	2308      	moveq	r3, #8
 80068c2:	230a      	movne	r3, #10
 80068c4:	2100      	movs	r1, #0
 80068c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ca:	6865      	ldr	r5, [r4, #4]
 80068cc:	60a5      	str	r5, [r4, #8]
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	bfa2      	ittt	ge
 80068d2:	6821      	ldrge	r1, [r4, #0]
 80068d4:	f021 0104 	bicge.w	r1, r1, #4
 80068d8:	6021      	strge	r1, [r4, #0]
 80068da:	b90e      	cbnz	r6, 80068e0 <_printf_i+0x114>
 80068dc:	2d00      	cmp	r5, #0
 80068de:	d04b      	beq.n	8006978 <_printf_i+0x1ac>
 80068e0:	4615      	mov	r5, r2
 80068e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e6:	fb03 6711 	mls	r7, r3, r1, r6
 80068ea:	5dc7      	ldrb	r7, [r0, r7]
 80068ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068f0:	4637      	mov	r7, r6
 80068f2:	42bb      	cmp	r3, r7
 80068f4:	460e      	mov	r6, r1
 80068f6:	d9f4      	bls.n	80068e2 <_printf_i+0x116>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d10b      	bne.n	8006914 <_printf_i+0x148>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07de      	lsls	r6, r3, #31
 8006900:	d508      	bpl.n	8006914 <_printf_i+0x148>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	4299      	cmp	r1, r3
 8006908:	bfde      	ittt	le
 800690a:	2330      	movle	r3, #48	; 0x30
 800690c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006914:	1b52      	subs	r2, r2, r5
 8006916:	6122      	str	r2, [r4, #16]
 8006918:	f8cd a000 	str.w	sl, [sp]
 800691c:	464b      	mov	r3, r9
 800691e:	aa03      	add	r2, sp, #12
 8006920:	4621      	mov	r1, r4
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff fee4 	bl	80066f0 <_printf_common>
 8006928:	3001      	adds	r0, #1
 800692a:	d14a      	bne.n	80069c2 <_printf_i+0x1f6>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b004      	add	sp, #16
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f043 0320 	orr.w	r3, r3, #32
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	4833      	ldr	r0, [pc, #204]	; (8006a0c <_printf_i+0x240>)
 8006940:	2778      	movs	r7, #120	; 0x78
 8006942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	6829      	ldr	r1, [r5, #0]
 800694a:	061f      	lsls	r7, r3, #24
 800694c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006950:	d402      	bmi.n	8006958 <_printf_i+0x18c>
 8006952:	065f      	lsls	r7, r3, #25
 8006954:	bf48      	it	mi
 8006956:	b2b6      	uxthmi	r6, r6
 8006958:	07df      	lsls	r7, r3, #31
 800695a:	bf48      	it	mi
 800695c:	f043 0320 	orrmi.w	r3, r3, #32
 8006960:	6029      	str	r1, [r5, #0]
 8006962:	bf48      	it	mi
 8006964:	6023      	strmi	r3, [r4, #0]
 8006966:	b91e      	cbnz	r6, 8006970 <_printf_i+0x1a4>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	f023 0320 	bic.w	r3, r3, #32
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	2310      	movs	r3, #16
 8006972:	e7a7      	b.n	80068c4 <_printf_i+0xf8>
 8006974:	4824      	ldr	r0, [pc, #144]	; (8006a08 <_printf_i+0x23c>)
 8006976:	e7e4      	b.n	8006942 <_printf_i+0x176>
 8006978:	4615      	mov	r5, r2
 800697a:	e7bd      	b.n	80068f8 <_printf_i+0x12c>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	6826      	ldr	r6, [r4, #0]
 8006980:	6961      	ldr	r1, [r4, #20]
 8006982:	1d18      	adds	r0, r3, #4
 8006984:	6028      	str	r0, [r5, #0]
 8006986:	0635      	lsls	r5, r6, #24
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	d501      	bpl.n	8006990 <_printf_i+0x1c4>
 800698c:	6019      	str	r1, [r3, #0]
 800698e:	e002      	b.n	8006996 <_printf_i+0x1ca>
 8006990:	0670      	lsls	r0, r6, #25
 8006992:	d5fb      	bpl.n	800698c <_printf_i+0x1c0>
 8006994:	8019      	strh	r1, [r3, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	4615      	mov	r5, r2
 800699c:	e7bc      	b.n	8006918 <_printf_i+0x14c>
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	602a      	str	r2, [r5, #0]
 80069a4:	681d      	ldr	r5, [r3, #0]
 80069a6:	6862      	ldr	r2, [r4, #4]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4628      	mov	r0, r5
 80069ac:	f7f9 fc18 	bl	80001e0 <memchr>
 80069b0:	b108      	cbz	r0, 80069b6 <_printf_i+0x1ea>
 80069b2:	1b40      	subs	r0, r0, r5
 80069b4:	6060      	str	r0, [r4, #4]
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	2300      	movs	r3, #0
 80069bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c0:	e7aa      	b.n	8006918 <_printf_i+0x14c>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4649      	mov	r1, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	47d0      	blx	sl
 80069cc:	3001      	adds	r0, #1
 80069ce:	d0ad      	beq.n	800692c <_printf_i+0x160>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	079b      	lsls	r3, r3, #30
 80069d4:	d413      	bmi.n	80069fe <_printf_i+0x232>
 80069d6:	68e0      	ldr	r0, [r4, #12]
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	4298      	cmp	r0, r3
 80069dc:	bfb8      	it	lt
 80069de:	4618      	movlt	r0, r3
 80069e0:	e7a6      	b.n	8006930 <_printf_i+0x164>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4632      	mov	r2, r6
 80069e6:	4649      	mov	r1, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	47d0      	blx	sl
 80069ec:	3001      	adds	r0, #1
 80069ee:	d09d      	beq.n	800692c <_printf_i+0x160>
 80069f0:	3501      	adds	r5, #1
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	9903      	ldr	r1, [sp, #12]
 80069f6:	1a5b      	subs	r3, r3, r1
 80069f8:	42ab      	cmp	r3, r5
 80069fa:	dcf2      	bgt.n	80069e2 <_printf_i+0x216>
 80069fc:	e7eb      	b.n	80069d6 <_printf_i+0x20a>
 80069fe:	2500      	movs	r5, #0
 8006a00:	f104 0619 	add.w	r6, r4, #25
 8006a04:	e7f5      	b.n	80069f2 <_printf_i+0x226>
 8006a06:	bf00      	nop
 8006a08:	08007119 	.word	0x08007119
 8006a0c:	0800712a 	.word	0x0800712a

08006a10 <__sflush_r>:
 8006a10:	898a      	ldrh	r2, [r1, #12]
 8006a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a16:	4605      	mov	r5, r0
 8006a18:	0710      	lsls	r0, r2, #28
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	d458      	bmi.n	8006ad0 <__sflush_r+0xc0>
 8006a1e:	684b      	ldr	r3, [r1, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc05      	bgt.n	8006a30 <__sflush_r+0x20>
 8006a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dc02      	bgt.n	8006a30 <__sflush_r+0x20>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d0f9      	beq.n	8006a2a <__sflush_r+0x1a>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a3c:	682f      	ldr	r7, [r5, #0]
 8006a3e:	6a21      	ldr	r1, [r4, #32]
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	d032      	beq.n	8006aaa <__sflush_r+0x9a>
 8006a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	075a      	lsls	r2, r3, #29
 8006a4a:	d505      	bpl.n	8006a58 <__sflush_r+0x48>
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	1ac0      	subs	r0, r0, r3
 8006a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a52:	b10b      	cbz	r3, 8006a58 <__sflush_r+0x48>
 8006a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a56:	1ac0      	subs	r0, r0, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a5e:	6a21      	ldr	r1, [r4, #32]
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b0      	blx	r6
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	d106      	bne.n	8006a78 <__sflush_r+0x68>
 8006a6a:	6829      	ldr	r1, [r5, #0]
 8006a6c:	291d      	cmp	r1, #29
 8006a6e:	d82b      	bhi.n	8006ac8 <__sflush_r+0xb8>
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <__sflush_r+0x108>)
 8006a72:	410a      	asrs	r2, r1
 8006a74:	07d6      	lsls	r6, r2, #31
 8006a76:	d427      	bmi.n	8006ac8 <__sflush_r+0xb8>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	6062      	str	r2, [r4, #4]
 8006a7c:	04d9      	lsls	r1, r3, #19
 8006a7e:	6922      	ldr	r2, [r4, #16]
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	d504      	bpl.n	8006a8e <__sflush_r+0x7e>
 8006a84:	1c42      	adds	r2, r0, #1
 8006a86:	d101      	bne.n	8006a8c <__sflush_r+0x7c>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b903      	cbnz	r3, 8006a8e <__sflush_r+0x7e>
 8006a8c:	6560      	str	r0, [r4, #84]	; 0x54
 8006a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a90:	602f      	str	r7, [r5, #0]
 8006a92:	2900      	cmp	r1, #0
 8006a94:	d0c9      	beq.n	8006a2a <__sflush_r+0x1a>
 8006a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a9a:	4299      	cmp	r1, r3
 8006a9c:	d002      	beq.n	8006aa4 <__sflush_r+0x94>
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7ff fa92 	bl	8005fc8 <_free_r>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	6360      	str	r0, [r4, #52]	; 0x34
 8006aa8:	e7c0      	b.n	8006a2c <__sflush_r+0x1c>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b0      	blx	r6
 8006ab0:	1c41      	adds	r1, r0, #1
 8006ab2:	d1c8      	bne.n	8006a46 <__sflush_r+0x36>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0c5      	beq.n	8006a46 <__sflush_r+0x36>
 8006aba:	2b1d      	cmp	r3, #29
 8006abc:	d001      	beq.n	8006ac2 <__sflush_r+0xb2>
 8006abe:	2b16      	cmp	r3, #22
 8006ac0:	d101      	bne.n	8006ac6 <__sflush_r+0xb6>
 8006ac2:	602f      	str	r7, [r5, #0]
 8006ac4:	e7b1      	b.n	8006a2a <__sflush_r+0x1a>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	e7ad      	b.n	8006a2c <__sflush_r+0x1c>
 8006ad0:	690f      	ldr	r7, [r1, #16]
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	d0a9      	beq.n	8006a2a <__sflush_r+0x1a>
 8006ad6:	0793      	lsls	r3, r2, #30
 8006ad8:	680e      	ldr	r6, [r1, #0]
 8006ada:	bf08      	it	eq
 8006adc:	694b      	ldreq	r3, [r1, #20]
 8006ade:	600f      	str	r7, [r1, #0]
 8006ae0:	bf18      	it	ne
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	eba6 0807 	sub.w	r8, r6, r7
 8006ae8:	608b      	str	r3, [r1, #8]
 8006aea:	f1b8 0f00 	cmp.w	r8, #0
 8006aee:	dd9c      	ble.n	8006a2a <__sflush_r+0x1a>
 8006af0:	6a21      	ldr	r1, [r4, #32]
 8006af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006af4:	4643      	mov	r3, r8
 8006af6:	463a      	mov	r2, r7
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b0      	blx	r6
 8006afc:	2800      	cmp	r0, #0
 8006afe:	dc06      	bgt.n	8006b0e <__sflush_r+0xfe>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	e78e      	b.n	8006a2c <__sflush_r+0x1c>
 8006b0e:	4407      	add	r7, r0
 8006b10:	eba8 0800 	sub.w	r8, r8, r0
 8006b14:	e7e9      	b.n	8006aea <__sflush_r+0xda>
 8006b16:	bf00      	nop
 8006b18:	dfbffffe 	.word	0xdfbffffe

08006b1c <_fflush_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	4605      	mov	r5, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	b913      	cbnz	r3, 8006b2c <_fflush_r+0x10>
 8006b26:	2500      	movs	r5, #0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	b118      	cbz	r0, 8006b36 <_fflush_r+0x1a>
 8006b2e:	6a03      	ldr	r3, [r0, #32]
 8006b30:	b90b      	cbnz	r3, 8006b36 <_fflush_r+0x1a>
 8006b32:	f7ff f909 	bl	8005d48 <__sinit>
 8006b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f3      	beq.n	8006b26 <_fflush_r+0xa>
 8006b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b40:	07d0      	lsls	r0, r2, #31
 8006b42:	d404      	bmi.n	8006b4e <_fflush_r+0x32>
 8006b44:	0599      	lsls	r1, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_fflush_r+0x32>
 8006b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b4a:	f7ff fa34 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	4621      	mov	r1, r4
 8006b52:	f7ff ff5d 	bl	8006a10 <__sflush_r>
 8006b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b58:	07da      	lsls	r2, r3, #31
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	d4e4      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	d4e1      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b66:	f7ff fa27 	bl	8005fb8 <__retarget_lock_release_recursive>
 8006b6a:	e7dd      	b.n	8006b28 <_fflush_r+0xc>

08006b6c <__swbuf_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	460e      	mov	r6, r1
 8006b70:	4614      	mov	r4, r2
 8006b72:	4605      	mov	r5, r0
 8006b74:	b118      	cbz	r0, 8006b7e <__swbuf_r+0x12>
 8006b76:	6a03      	ldr	r3, [r0, #32]
 8006b78:	b90b      	cbnz	r3, 8006b7e <__swbuf_r+0x12>
 8006b7a:	f7ff f8e5 	bl	8005d48 <__sinit>
 8006b7e:	69a3      	ldr	r3, [r4, #24]
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	071a      	lsls	r2, r3, #28
 8006b86:	d525      	bpl.n	8006bd4 <__swbuf_r+0x68>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	b31b      	cbz	r3, 8006bd4 <__swbuf_r+0x68>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	6922      	ldr	r2, [r4, #16]
 8006b90:	1a98      	subs	r0, r3, r2
 8006b92:	6963      	ldr	r3, [r4, #20]
 8006b94:	b2f6      	uxtb	r6, r6
 8006b96:	4283      	cmp	r3, r0
 8006b98:	4637      	mov	r7, r6
 8006b9a:	dc04      	bgt.n	8006ba6 <__swbuf_r+0x3a>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f7ff ffbc 	bl	8006b1c <_fflush_r>
 8006ba4:	b9e0      	cbnz	r0, 8006be0 <__swbuf_r+0x74>
 8006ba6:	68a3      	ldr	r3, [r4, #8]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	60a3      	str	r3, [r4, #8]
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	701e      	strb	r6, [r3, #0]
 8006bb4:	6962      	ldr	r2, [r4, #20]
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d004      	beq.n	8006bc6 <__swbuf_r+0x5a>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	07db      	lsls	r3, r3, #31
 8006bc0:	d506      	bpl.n	8006bd0 <__swbuf_r+0x64>
 8006bc2:	2e0a      	cmp	r6, #10
 8006bc4:	d104      	bne.n	8006bd0 <__swbuf_r+0x64>
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7ff ffa7 	bl	8006b1c <_fflush_r>
 8006bce:	b938      	cbnz	r0, 8006be0 <__swbuf_r+0x74>
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 f806 	bl	8006be8 <__swsetup_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d0d5      	beq.n	8006b8c <__swbuf_r+0x20>
 8006be0:	f04f 37ff 	mov.w	r7, #4294967295
 8006be4:	e7f4      	b.n	8006bd0 <__swbuf_r+0x64>
	...

08006be8 <__swsetup_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <__swsetup_r+0xac>)
 8006bec:	4605      	mov	r5, r0
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	b118      	cbz	r0, 8006bfc <__swsetup_r+0x14>
 8006bf4:	6a03      	ldr	r3, [r0, #32]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <__swsetup_r+0x14>
 8006bf8:	f7ff f8a6 	bl	8005d48 <__sinit>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c02:	0718      	lsls	r0, r3, #28
 8006c04:	d422      	bmi.n	8006c4c <__swsetup_r+0x64>
 8006c06:	06d9      	lsls	r1, r3, #27
 8006c08:	d407      	bmi.n	8006c1a <__swsetup_r+0x32>
 8006c0a:	2309      	movs	r3, #9
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	e034      	b.n	8006c84 <__swsetup_r+0x9c>
 8006c1a:	0758      	lsls	r0, r3, #29
 8006c1c:	d512      	bpl.n	8006c44 <__swsetup_r+0x5c>
 8006c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c20:	b141      	cbz	r1, 8006c34 <__swsetup_r+0x4c>
 8006c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c26:	4299      	cmp	r1, r3
 8006c28:	d002      	beq.n	8006c30 <__swsetup_r+0x48>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7ff f9cc 	bl	8005fc8 <_free_r>
 8006c30:	2300      	movs	r3, #0
 8006c32:	6363      	str	r3, [r4, #52]	; 0x34
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f043 0308 	orr.w	r3, r3, #8
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	b94b      	cbnz	r3, 8006c64 <__swsetup_r+0x7c>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c5a:	d003      	beq.n	8006c64 <__swsetup_r+0x7c>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f8eb 	bl	8006e3a <__smakebuf_r>
 8006c64:	89a0      	ldrh	r0, [r4, #12]
 8006c66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c6a:	f010 0301 	ands.w	r3, r0, #1
 8006c6e:	d00a      	beq.n	8006c86 <__swsetup_r+0x9e>
 8006c70:	2300      	movs	r3, #0
 8006c72:	60a3      	str	r3, [r4, #8]
 8006c74:	6963      	ldr	r3, [r4, #20]
 8006c76:	425b      	negs	r3, r3
 8006c78:	61a3      	str	r3, [r4, #24]
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	b943      	cbnz	r3, 8006c90 <__swsetup_r+0xa8>
 8006c7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c82:	d1c4      	bne.n	8006c0e <__swsetup_r+0x26>
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	0781      	lsls	r1, r0, #30
 8006c88:	bf58      	it	pl
 8006c8a:	6963      	ldrpl	r3, [r4, #20]
 8006c8c:	60a3      	str	r3, [r4, #8]
 8006c8e:	e7f4      	b.n	8006c7a <__swsetup_r+0x92>
 8006c90:	2000      	movs	r0, #0
 8006c92:	e7f7      	b.n	8006c84 <__swsetup_r+0x9c>
 8006c94:	2000006c 	.word	0x2000006c

08006c98 <memmove>:
 8006c98:	4288      	cmp	r0, r1
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	eb01 0402 	add.w	r4, r1, r2
 8006ca0:	d902      	bls.n	8006ca8 <memmove+0x10>
 8006ca2:	4284      	cmp	r4, r0
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	d807      	bhi.n	8006cb8 <memmove+0x20>
 8006ca8:	1e43      	subs	r3, r0, #1
 8006caa:	42a1      	cmp	r1, r4
 8006cac:	d008      	beq.n	8006cc0 <memmove+0x28>
 8006cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cb6:	e7f8      	b.n	8006caa <memmove+0x12>
 8006cb8:	4402      	add	r2, r0
 8006cba:	4601      	mov	r1, r0
 8006cbc:	428a      	cmp	r2, r1
 8006cbe:	d100      	bne.n	8006cc2 <memmove+0x2a>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cca:	e7f7      	b.n	8006cbc <memmove+0x24>

08006ccc <_raise_r>:
 8006ccc:	291f      	cmp	r1, #31
 8006cce:	b538      	push	{r3, r4, r5, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	d904      	bls.n	8006ce0 <_raise_r+0x14>
 8006cd6:	2316      	movs	r3, #22
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ce2:	b112      	cbz	r2, 8006cea <_raise_r+0x1e>
 8006ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ce8:	b94b      	cbnz	r3, 8006cfe <_raise_r+0x32>
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 f830 	bl	8006d50 <_getpid_r>
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cfa:	f000 b817 	b.w	8006d2c <_kill_r>
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d00a      	beq.n	8006d18 <_raise_r+0x4c>
 8006d02:	1c59      	adds	r1, r3, #1
 8006d04:	d103      	bne.n	8006d0e <_raise_r+0x42>
 8006d06:	2316      	movs	r3, #22
 8006d08:	6003      	str	r3, [r0, #0]
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	e7e7      	b.n	8006cde <_raise_r+0x12>
 8006d0e:	2400      	movs	r4, #0
 8006d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d14:	4628      	mov	r0, r5
 8006d16:	4798      	blx	r3
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e7e0      	b.n	8006cde <_raise_r+0x12>

08006d1c <raise>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <raise+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f7ff bfd3 	b.w	8006ccc <_raise_r>
 8006d26:	bf00      	nop
 8006d28:	2000006c 	.word	0x2000006c

08006d2c <_kill_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4d07      	ldr	r5, [pc, #28]	; (8006d4c <_kill_r+0x20>)
 8006d30:	2300      	movs	r3, #0
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f7fa fa15 	bl	8001168 <_kill>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d102      	bne.n	8006d48 <_kill_r+0x1c>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b103      	cbz	r3, 8006d48 <_kill_r+0x1c>
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000320 	.word	0x20000320

08006d50 <_getpid_r>:
 8006d50:	f7fa ba02 	b.w	8001158 <_getpid>

08006d54 <_sbrk_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	; (8006d70 <_sbrk_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fa fa8a 	bl	8001278 <_sbrk>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_sbrk_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_sbrk_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000320 	.word	0x20000320

08006d74 <memcpy>:
 8006d74:	440a      	add	r2, r1
 8006d76:	4291      	cmp	r1, r2
 8006d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d7c:	d100      	bne.n	8006d80 <memcpy+0xc>
 8006d7e:	4770      	bx	lr
 8006d80:	b510      	push	{r4, lr}
 8006d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d8a:	4291      	cmp	r1, r2
 8006d8c:	d1f9      	bne.n	8006d82 <memcpy+0xe>
 8006d8e:	bd10      	pop	{r4, pc}

08006d90 <_realloc_r>:
 8006d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d94:	4680      	mov	r8, r0
 8006d96:	4614      	mov	r4, r2
 8006d98:	460e      	mov	r6, r1
 8006d9a:	b921      	cbnz	r1, 8006da6 <_realloc_r+0x16>
 8006d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	4611      	mov	r1, r2
 8006da2:	f7ff b97d 	b.w	80060a0 <_malloc_r>
 8006da6:	b92a      	cbnz	r2, 8006db4 <_realloc_r+0x24>
 8006da8:	f7ff f90e 	bl	8005fc8 <_free_r>
 8006dac:	4625      	mov	r5, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	f000 f8a0 	bl	8006ef8 <_malloc_usable_size_r>
 8006db8:	4284      	cmp	r4, r0
 8006dba:	4607      	mov	r7, r0
 8006dbc:	d802      	bhi.n	8006dc4 <_realloc_r+0x34>
 8006dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dc2:	d812      	bhi.n	8006dea <_realloc_r+0x5a>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f7ff f96a 	bl	80060a0 <_malloc_r>
 8006dcc:	4605      	mov	r5, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0ed      	beq.n	8006dae <_realloc_r+0x1e>
 8006dd2:	42bc      	cmp	r4, r7
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	bf28      	it	cs
 8006dda:	463a      	movcs	r2, r7
 8006ddc:	f7ff ffca 	bl	8006d74 <memcpy>
 8006de0:	4631      	mov	r1, r6
 8006de2:	4640      	mov	r0, r8
 8006de4:	f7ff f8f0 	bl	8005fc8 <_free_r>
 8006de8:	e7e1      	b.n	8006dae <_realloc_r+0x1e>
 8006dea:	4635      	mov	r5, r6
 8006dec:	e7df      	b.n	8006dae <_realloc_r+0x1e>

08006dee <__swhatbuf_r>:
 8006dee:	b570      	push	{r4, r5, r6, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df6:	2900      	cmp	r1, #0
 8006df8:	b096      	sub	sp, #88	; 0x58
 8006dfa:	4615      	mov	r5, r2
 8006dfc:	461e      	mov	r6, r3
 8006dfe:	da0d      	bge.n	8006e1c <__swhatbuf_r+0x2e>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e06:	f04f 0100 	mov.w	r1, #0
 8006e0a:	bf0c      	ite	eq
 8006e0c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e10:	2340      	movne	r3, #64	; 0x40
 8006e12:	2000      	movs	r0, #0
 8006e14:	6031      	str	r1, [r6, #0]
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	b016      	add	sp, #88	; 0x58
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	466a      	mov	r2, sp
 8006e1e:	f000 f849 	bl	8006eb4 <_fstat_r>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	dbec      	blt.n	8006e00 <__swhatbuf_r+0x12>
 8006e26:	9901      	ldr	r1, [sp, #4]
 8006e28:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e2c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e30:	4259      	negs	r1, r3
 8006e32:	4159      	adcs	r1, r3
 8006e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e38:	e7eb      	b.n	8006e12 <__swhatbuf_r+0x24>

08006e3a <__smakebuf_r>:
 8006e3a:	898b      	ldrh	r3, [r1, #12]
 8006e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e3e:	079d      	lsls	r5, r3, #30
 8006e40:	4606      	mov	r6, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	d507      	bpl.n	8006e56 <__smakebuf_r+0x1c>
 8006e46:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	b002      	add	sp, #8
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	ab01      	add	r3, sp, #4
 8006e58:	466a      	mov	r2, sp
 8006e5a:	f7ff ffc8 	bl	8006dee <__swhatbuf_r>
 8006e5e:	9900      	ldr	r1, [sp, #0]
 8006e60:	4605      	mov	r5, r0
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff f91c 	bl	80060a0 <_malloc_r>
 8006e68:	b948      	cbnz	r0, 8006e7e <__smakebuf_r+0x44>
 8006e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e6e:	059a      	lsls	r2, r3, #22
 8006e70:	d4ef      	bmi.n	8006e52 <__smakebuf_r+0x18>
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	f043 0302 	orr.w	r3, r3, #2
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	e7e3      	b.n	8006e46 <__smakebuf_r+0xc>
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	6020      	str	r0, [r4, #0]
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	9b00      	ldr	r3, [sp, #0]
 8006e8a:	6163      	str	r3, [r4, #20]
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	6120      	str	r0, [r4, #16]
 8006e90:	b15b      	cbz	r3, 8006eaa <__smakebuf_r+0x70>
 8006e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e96:	4630      	mov	r0, r6
 8006e98:	f000 f81e 	bl	8006ed8 <_isatty_r>
 8006e9c:	b128      	cbz	r0, 8006eaa <__smakebuf_r+0x70>
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	f023 0303 	bic.w	r3, r3, #3
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	431d      	orrs	r5, r3
 8006eae:	81a5      	strh	r5, [r4, #12]
 8006eb0:	e7cf      	b.n	8006e52 <__smakebuf_r+0x18>
	...

08006eb4 <_fstat_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	; (8006ed4 <_fstat_r+0x20>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	f7fa f9b0 	bl	8001226 <_fstat>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d102      	bne.n	8006ed0 <_fstat_r+0x1c>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	b103      	cbz	r3, 8006ed0 <_fstat_r+0x1c>
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000320 	.word	0x20000320

08006ed8 <_isatty_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	; (8006ef4 <_isatty_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa f9af 	bl	8001246 <_isatty>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_isatty_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_isatty_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20000320 	.word	0x20000320

08006ef8 <_malloc_usable_size_r>:
 8006ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006efc:	1f18      	subs	r0, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfbc      	itt	lt
 8006f02:	580b      	ldrlt	r3, [r1, r0]
 8006f04:	18c0      	addlt	r0, r0, r3
 8006f06:	4770      	bx	lr

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
