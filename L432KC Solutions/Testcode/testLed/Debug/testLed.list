
testLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006678  08006678  00016678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006898  08006898  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a0  080068a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080068a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000000c  080068b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080068b4  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105c1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ed  00000000  00000000  00030640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00032830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bec  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020980  00000000  00000000  00034354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001160b  00000000  00000000  00054cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c95cc  00000000  00000000  000662df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043e0  00000000  00000000  0012f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00133c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006660 	.word	0x08006660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08006660 	.word	0x08006660

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fcab 	bl	8001806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f84a 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 f986 	bl	80011c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f000 f966 	bl	8001188 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ebc:	f000 f934 	bl	8001128 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ec0:	f000 f8a4 	bl	800100c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  Set_LED(0, 0, 255, 0);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	22ff      	movs	r2, #255	; 0xff
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f9c4 	bl	8001258 <Set_LED>
  Set_LED(2, 0, 255, 0);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	22ff      	movs	r2, #255	; 0xff
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 f9be 	bl	8001258 <Set_LED>
  Set_LED(1, 0, 255, 0);
 8000edc:	2300      	movs	r3, #0
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 f9b8 	bl	8001258 <Set_LED>
Set_LED(3, 0, 255, 0);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	22ff      	movs	r2, #255	; 0xff
 8000eec:	2100      	movs	r1, #0
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 f9b2 	bl	8001258 <Set_LED>
Set_LED(4, 0, 255, 0);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2004      	movs	r0, #4
 8000efc:	f000 f9ac 	bl	8001258 <Set_LED>
Set_LED(5, 0, 255, 0);
 8000f00:	2300      	movs	r3, #0
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	2100      	movs	r1, #0
 8000f06:	2005      	movs	r0, #5
 8000f08:	f000 f9a6 	bl	8001258 <Set_LED>
Set_LED(6, 255, 0, 0);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2200      	movs	r2, #0
 8000f10:	21ff      	movs	r1, #255	; 0xff
 8000f12:	2006      	movs	r0, #6
 8000f14:	f000 f9a0 	bl	8001258 <Set_LED>
Set_LED(7, 255, 0, 0);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	21ff      	movs	r1, #255	; 0xff
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 f99a 	bl	8001258 <Set_LED>
Set_LED(8, 255, 0, 0);
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	21ff      	movs	r1, #255	; 0xff
 8000f2a:	2008      	movs	r0, #8
 8000f2c:	f000 f994 	bl	8001258 <Set_LED>
Set_LED(9, 255, 0, 0);
 8000f30:	2300      	movs	r3, #0
 8000f32:	2200      	movs	r2, #0
 8000f34:	21ff      	movs	r1, #255	; 0xff
 8000f36:	2009      	movs	r0, #9
 8000f38:	f000 f98e 	bl	8001258 <Set_LED>
  Set_Brightness(45);
 8000f3c:	202d      	movs	r0, #45	; 0x2d
 8000f3e:	f000 f9bb 	bl	80012b8 <Set_Brightness>
  WS2812_Send();
 8000f42:	f000 fa3b 	bl	80013bc <WS2812_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <main+0x9e>

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	; 0x58
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2244      	movs	r2, #68	; 0x44
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fab3 	bl	80054c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f001 f9a9 	bl	80022c4 <HAL_PWREx_ControlVoltageScaling>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f78:	f000 faac 	bl	80014d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f7c:	f001 f984 	bl	8002288 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <SystemClock_Config+0xc0>)
 8000f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <SystemClock_Config+0xc0>)
 8000f88:	f023 0318 	bic.w	r3, r3, #24
 8000f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f90:	2314      	movs	r3, #20
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fa0:	2360      	movs	r3, #96	; 0x60
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000fb0:	2324      	movs	r3, #36	; 0x24
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 f9d3 	bl	8002370 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fd0:	f000 fa80 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fdd3 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ff8:	f000 fa6c 	bl	80014d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ffc:	f002 f9e6 	bl	80033cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001000:	bf00      	nop
 8001002:	3758      	adds	r7, #88	; 0x58
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000

0800100c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b096      	sub	sp, #88	; 0x58
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	222c      	movs	r2, #44	; 0x2c
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fa42 	bl	80054c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <MX_TIM1_Init+0x114>)
 8001040:	4a38      	ldr	r2, [pc, #224]	; (8001124 <MX_TIM1_Init+0x118>)
 8001042:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <MX_TIM1_Init+0x114>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_TIM1_Init+0x114>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <MX_TIM1_Init+0x114>)
 8001052:	2259      	movs	r2, #89	; 0x59
 8001054:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_TIM1_Init+0x114>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <MX_TIM1_Init+0x114>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_TIM1_Init+0x114>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001068:	482d      	ldr	r0, [pc, #180]	; (8001120 <MX_TIM1_Init+0x114>)
 800106a:	f002 fab1 	bl	80035d0 <HAL_TIM_PWM_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001074:	f000 fa2e 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001084:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001088:	4619      	mov	r1, r3
 800108a:	4825      	ldr	r0, [pc, #148]	; (8001120 <MX_TIM1_Init+0x114>)
 800108c:	f003 fc04 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001096:	f000 fa1d 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109a:	2360      	movs	r3, #96	; 0x60
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ba:	2204      	movs	r2, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4818      	ldr	r0, [pc, #96]	; (8001120 <MX_TIM1_Init+0x114>)
 80010c0:	f002 fec0 	bl	8003e44 <HAL_TIM_PWM_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010ca:	f000 fa03 	bl	80014d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_TIM1_Init+0x114>)
 8001104:	f003 fc2e 	bl	8004964 <HAL_TIMEx_ConfigBreakDeadTime>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800110e:	f000 f9e1 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <MX_TIM1_Init+0x114>)
 8001114:	f000 fa5c 	bl	80015d0 <HAL_TIM_MspPostInit>

}
 8001118:	bf00      	nop
 800111a:	3758      	adds	r7, #88	; 0x58
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000028 	.word	0x20000028
 8001124:	40012c00 	.word	0x40012c00

08001128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <MX_USART2_UART_Init+0x5c>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800116c:	f003 fc90 	bl	8004a90 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001176:	f000 f9ad 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000bc 	.word	0x200000bc
 8001184:	40004400 	.word	0x40004400

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_DMA_Init+0x38>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <MX_DMA_Init+0x38>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6493      	str	r3, [r2, #72]	; 0x48
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_DMA_Init+0x38>)
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	200d      	movs	r0, #13
 80011ac:	f000 fc7b 	bl	8001aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011b0:	200d      	movs	r0, #13
 80011b2:	f000 fc94 	bl	8001ade <HAL_NVIC_EnableIRQ>

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_GPIO_Init+0x8c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <MX_GPIO_Init+0x8c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_GPIO_Init+0x8c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_GPIO_Init+0x8c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <MX_GPIO_Init+0x8c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_GPIO_Init+0x8c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_GPIO_Init+0x8c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <MX_GPIO_Init+0x8c>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_GPIO_Init+0x8c>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2108      	movs	r1, #8
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_GPIO_Init+0x90>)
 8001228:	f001 f816 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800122c:	2308      	movs	r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_GPIO_Init+0x90>)
 8001244:	f000 fe9e 	bl	8001f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400

08001258 <Set_LED>:

/* USER CODE BEGIN 4 */
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <Set_LED+0x58>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <Set_LED+0x58>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	460a      	mov	r2, r1
 8001280:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	b2d9      	uxtb	r1, r3
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <Set_LED+0x58>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	460a      	mov	r2, r1
 8001290:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2d9      	uxtb	r1, r3
 8001296:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <Set_LED+0x58>)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	460a      	mov	r2, r1
 80012a0:	70da      	strb	r2, [r3, #3]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000144 	.word	0x20000144
 80012b4:	00000000 	.word	0x00000000

080012b8 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0-45
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b2d      	cmp	r3, #45	; 0x2d
 80012c4:	dd01      	ble.n	80012ca <Set_Brightness+0x12>
 80012c6:	232d      	movs	r3, #45	; 0x2d
 80012c8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e060      	b.n	8001392 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80012d0:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <Set_Brightness+0xf8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <Set_Brightness+0xfc>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e04f      	b.n	8001386 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff f8cd 	bl	8000498 <__aeabi_f2d>
 80012fe:	a32a      	add	r3, pc, #168	; (adr r3, 80013a8 <Set_Brightness+0xf0>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f920 	bl	8000548 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <Set_Brightness+0x100>)
 8001316:	f7ff fa41 	bl	800079c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fbf3 	bl	8000b0c <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800132a:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <Set_Brightness+0xf8>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	441a      	add	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f89b 	bl	8000474 <__aeabi_i2d>
 800133e:	4604      	mov	r4, r0
 8001340:	460d      	mov	r5, r1
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff f8a8 	bl	8000498 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	ec43 2b10 	vmov	d0, r2, r3
 8001350:	f004 f8e6 	bl	8005520 <tan>
 8001354:	ec53 2b10 	vmov	r2, r3, d0
 8001358:	4620      	mov	r0, r4
 800135a:	4629      	mov	r1, r5
 800135c:	f7ff fa1e 	bl	800079c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fbb0 	bl	8000acc <__aeabi_d2uiz>
 800136c:	4603      	mov	r3, r0
 800136e:	b2d9      	uxtb	r1, r3
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <Set_Brightness+0xfc>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	441a      	add	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4413      	add	r3, r2
 800137c:	460a      	mov	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	3301      	adds	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b03      	cmp	r3, #3
 800138a:	ddac      	ble.n	80012e6 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b09      	cmp	r3, #9
 8001396:	dd9b      	ble.n	80012d0 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	53c8d4f1 	.word	0x53c8d4f1
 80013ac:	400921fb 	.word	0x400921fb
 80013b0:	20000144 	.word	0x20000144
 80013b4:	2000016c 	.word	0x2000016c
 80013b8:	40668000 	.word	0x40668000

080013bc <WS2812_Send>:

void WS2812_Send (void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	e036      	b.n	800143a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80013cc:	4a32      	ldr	r2, [pc, #200]	; (8001498 <WS2812_Send+0xdc>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	041a      	lsls	r2, r3, #16
 80013d8:	492f      	ldr	r1, [pc, #188]	; (8001498 <WS2812_Send+0xdc>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	789b      	ldrb	r3, [r3, #2]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	431a      	orrs	r2, r3
 80013e6:	492c      	ldr	r1, [pc, #176]	; (8001498 <WS2812_Send+0xdc>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	78db      	ldrb	r3, [r3, #3]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80013f4:	2317      	movs	r3, #23
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e019      	b.n	800142e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80013fa:	2201      	movs	r2, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <WS2812_Send+0xe0>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	213c      	movs	r1, #60	; 0x3c
 8001412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001416:	e004      	b.n	8001422 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8001418:	4a20      	ldr	r2, [pc, #128]	; (800149c <WS2812_Send+0xe0>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	211e      	movs	r1, #30
 800141e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dae2      	bge.n	80013fa <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	3301      	adds	r3, #1
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b09      	cmp	r3, #9
 800143e:	ddc5      	ble.n	80013cc <WS2812_Send+0x10>
		}

	}

	HAL_UART_Transmit(&huart2, (uint8_t*) pwmData, sizeof(pwmData), HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001448:	4914      	ldr	r1, [pc, #80]	; (800149c <WS2812_Send+0xe0>)
 800144a:	4815      	ldr	r0, [pc, #84]	; (80014a0 <WS2812_Send+0xe4>)
 800144c:	f003 fb6e 	bl	8004b2c <HAL_UART_Transmit>

	for (int i=0; i<50; i++)
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	e00a      	b.n	800146c <WS2812_Send+0xb0>
	{
		pwmData[indx] = 0;
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <WS2812_Send+0xe0>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2100      	movs	r1, #0
 800145c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b31      	cmp	r3, #49	; 0x31
 8001470:	ddf1      	ble.n	8001456 <WS2812_Send+0x9a>
	}

	HAL_TIM_PWM_Start_DMA(&TIM_HANDLE, TIM_CHANNEL, (uint32_t *)pwmData, sizeof(pwmData) / sizeof(uint16_t));
 8001472:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <WS2812_Send+0xe0>)
 8001478:	2104      	movs	r1, #4
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <WS2812_Send+0xe8>)
 800147c:	f002 f900 	bl	8003680 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001480:	bf00      	nop
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <WS2812_Send+0xec>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0fb      	beq.n	8001482 <WS2812_Send+0xc6>
	datasentflag = 0;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <WS2812_Send+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000016c 	.word	0x2000016c
 800149c:	20000194 	.word	0x20000194
 80014a0:	200000bc 	.word	0x200000bc
 80014a4:	20000028 	.word	0x20000028
 80014a8:	200003d8 	.word	0x200003d8

080014ac <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&TIM_HANDLE, TIM_CHANNEL);
 80014b4:	2104      	movs	r1, #4
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80014b8:	f002 fada 	bl	8003a70 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000028 	.word	0x20000028
 80014d0:	200003d8 	.word	0x200003d8

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_TIM_PWM_MspInit+0x98>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d13e      	bne.n	80015b8 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_TIM_PWM_MspInit+0x9c>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <HAL_TIM_PWM_MspInit+0x9c>)
 8001540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_TIM_PWM_MspInit+0x9c>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_TIM_PWM_MspInit+0xa4>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800155a:	2207      	movs	r2, #7
 800155c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8001560:	2210      	movs	r2, #16
 8001562:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8001572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001576:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800157a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800158e:	f000 fac1 	bl	8001b14 <HAL_DMA_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8001598:	f7ff ff9c 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_PWM_MspInit+0xa0>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2018      	movs	r0, #24
 80015ae:	f000 fa7a 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015b2:	2018      	movs	r0, #24
 80015b4:	f000 fa93 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	20000074 	.word	0x20000074
 80015cc:	40020030 	.word	0x40020030

080015d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_TIM_MspPostInit+0x68>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d11d      	bne.n	800162e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_TIM_MspPostInit+0x6c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_TIM_MspPostInit+0x6c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800161c:	2301      	movs	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f000 fcab 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	; 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2254      	movs	r2, #84	; 0x54
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f003 ff2e 	bl	80054c2 <memset>
  if(huart->Instance==USART2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_UART_MspInit+0xcc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d148      	bne.n	8001702 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fcaf 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001688:	f7ff ff24 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_UART_MspInit+0xd0>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_UART_MspInit+0xd0>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_UART_MspInit+0xd0>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_UART_MspInit+0xd0>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_UART_MspInit+0xd0>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_UART_MspInit+0xd0>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016bc:	2304      	movs	r3, #4
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016cc:	2307      	movs	r3, #7
 80016ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f000 fc53 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80016de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80016f0:	2303      	movs	r3, #3
 80016f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f000 fc41 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3778      	adds	r7, #120	; 0x78
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004400 	.word	0x40004400
 8001710:	40021000 	.word	0x40021000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f8a6 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Channel3_IRQHandler+0x10>)
 800176e:	f000 fb2a 	bl	8001dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000074 	.word	0x20000074

0800177c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001782:	f002 fa5d 	bl	8003c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000028 	.word	0x20000028

08001790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	; (80017f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <LoopForever+0xe>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <LoopForever+0x16>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f003 fe77 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e6:	f7ff fb5f 	bl	8000ea8 <main>

080017ea <LoopForever>:

LoopForever:
    b LoopForever
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017f8:	080068a8 	.word	0x080068a8
  ldr r2, =_sbss
 80017fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001800:	200003e0 	.word	0x200003e0

08001804 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_IRQHandler>

08001806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f93d 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f80e 	bl	8001838 <HAL_InitTick>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001828:	f7ff fe5a 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_InitTick+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d023      	beq.n	8001894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_InitTick+0x70>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_InitTick+0x6c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f949 	bl	8001afa <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d809      	bhi.n	8001888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 f913 	bl	8001aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_InitTick+0x74>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e007      	b.n	8001898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e004      	b.n	8001898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e001      	b.n	8001898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200003dc 	.word	0x200003dc

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200003dc 	.word	0x200003dc

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <__NVIC_EnableIRQ+0x38>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff29 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff3e 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff31 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e098      	b.n	8001c58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_DMA_Init+0x150>)
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d80f      	bhi.n	8001b52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <HAL_DMA_Init+0x154>)
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a4b      	ldr	r2, [pc, #300]	; (8001c6c <HAL_DMA_Init+0x158>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_DMA_Init+0x15c>)
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b50:	e00e      	b.n	8001b70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_DMA_Init+0x160>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a43      	ldr	r2, [pc, #268]	; (8001c6c <HAL_DMA_Init+0x158>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	009a      	lsls	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a42      	ldr	r2, [pc, #264]	; (8001c78 <HAL_DMA_Init+0x164>)
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bca:	d039      	beq.n	8001c40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <HAL_DMA_Init+0x15c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d11a      	bne.n	8001c0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_DMA_Init+0x168>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f003 031c 	and.w	r3, r3, #28
 8001be2:	210f      	movs	r1, #15
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4924      	ldr	r1, [pc, #144]	; (8001c7c <HAL_DMA_Init+0x168>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_DMA_Init+0x168>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f003 031c 	and.w	r3, r3, #28
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	491d      	ldr	r1, [pc, #116]	; (8001c7c <HAL_DMA_Init+0x168>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
 8001c0a:	e019      	b.n	8001c40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_DMA_Init+0x16c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f003 031c 	and.w	r3, r3, #28
 8001c18:	210f      	movs	r1, #15
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4917      	ldr	r1, [pc, #92]	; (8001c80 <HAL_DMA_Init+0x16c>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_DMA_Init+0x16c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f003 031c 	and.w	r3, r3, #28
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	4911      	ldr	r1, [pc, #68]	; (8001c80 <HAL_DMA_Init+0x16c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40020407 	.word	0x40020407
 8001c68:	bffdfff8 	.word	0xbffdfff8
 8001c6c:	cccccccd 	.word	0xcccccccd
 8001c70:	40020000 	.word	0x40020000
 8001c74:	bffdfbf8 	.word	0xbffdfbf8
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	400200a8 	.word	0x400200a8
 8001c80:	400204a8 	.word	0x400204a8

08001c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Start_IT+0x20>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e04b      	b.n	8001d3c <HAL_DMA_Start_IT+0xb8>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d13a      	bne.n	8001d2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f921 	bl	8001f24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 020e 	orr.w	r2, r2, #14
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e00f      	b.n	8001d1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 020a 	orr.w	r2, r2, #10
 8001d1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e005      	b.n	8001d3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
 8001d38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d005      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e029      	b.n	8001dbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020e 	bic.w	r2, r2, #14
 8001d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 021c 	and.w	r2, r3, #28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
    }
  }
  return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 031c 	and.w	r3, r3, #28
 8001de6:	2204      	movs	r2, #4
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d026      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x7a>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d021      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0204 	bic.w	r2, r2, #4
 8001e18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 021c 	and.w	r2, r3, #28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2104      	movs	r1, #4
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d071      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e3e:	e06c      	b.n	8001f1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f003 031c 	and.w	r3, r3, #28
 8001e48:	2202      	movs	r2, #2
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02e      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xec>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d029      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 020a 	bic.w	r2, r2, #10
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f003 021c 	and.w	r2, r3, #28
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2102      	movs	r1, #2
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d038      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001eb0:	e033      	b.n	8001f1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f003 031c 	and.w	r3, r3, #28
 8001eba:	2208      	movs	r2, #8
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02a      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x156>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d025      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 020e 	bic.w	r2, r2, #14
 8001ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	f003 021c 	and.w	r2, r3, #28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
}
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f003 021c 	and.w	r2, r3, #28
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d108      	bne.n	8001f68 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f66:	e007      	b.n	8001f78 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e148      	b.n	8002226 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 813a 	beq.w	8002220 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d005      	beq.n	8001fc4 <HAL_GPIO_Init+0x40>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d130      	bne.n	8002026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0201 	and.w	r2, r3, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d017      	beq.n	8002062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d123      	bne.n	80020b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	6939      	ldr	r1, [r7, #16]
 80020b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0203 	and.w	r2, r3, #3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8094 	beq.w	8002220 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f8:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6613      	str	r3, [r2, #96]	; 0x60
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002110:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_GPIO_Init+0x2c4>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1d4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a43      	ldr	r2, [pc, #268]	; (800224c <HAL_GPIO_Init+0x2c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1d0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a42      	ldr	r2, [pc, #264]	; (8002250 <HAL_GPIO_Init+0x2cc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1cc>
 800214c:	2302      	movs	r3, #2
 800214e:	e004      	b.n	800215a <HAL_GPIO_Init+0x1d6>
 8002150:	2307      	movs	r3, #7
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x1d6>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_GPIO_Init+0x1d6>
 8002158:	2300      	movs	r3, #0
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	f002 0203 	and.w	r2, r2, #3
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	4093      	lsls	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216a:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x2c4>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002178:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219c:	4a2d      	ldr	r2, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aeaf 	bne.w	8001f94 <HAL_GPIO_Init+0x10>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002274:	e002      	b.n	800227c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40007000 	.word	0x40007000

080022a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d2:	d130      	bne.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	d038      	beq.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2232      	movs	r2, #50	; 0x32
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	3301      	adds	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002308:	e002      	b.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b01      	subs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d102      	bne.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x60>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f2      	bne.n	800230a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	d110      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e00f      	b.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d007      	beq.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800234c:	4a05      	ldr	r2, [pc, #20]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002352:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83

08002370 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f000 bc02 	b.w	8002b88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002384:	4b96      	ldr	r3, [pc, #600]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238e:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80e4 	beq.w	800256e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_RCC_OscConfig+0x4c>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	f040 808b 	bne.w	80024ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f040 8087 	bne.w	80024ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023bc:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x64>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e3d9      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_RCC_OscConfig+0x7e>
 80023e4:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ec:	e005      	b.n	80023fa <HAL_RCC_OscConfig+0x8a>
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d223      	bcs.n	8002446 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fd8c 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e3ba      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	496d      	ldr	r1, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002430:	4b6b      	ldr	r3, [pc, #428]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	4968      	ldr	r1, [pc, #416]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	e025      	b.n	8002492 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002446:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a65      	ldr	r2, [pc, #404]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4960      	ldr	r1, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002464:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	495b      	ldr	r1, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fd4c 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e37a      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002492:	f000 fc81 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4950      	ldr	r1, [pc, #320]	; (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	4a4e      	ldr	r2, [pc, #312]	; (80025e8 <HAL_RCC_OscConfig+0x278>)
 80024b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <HAL_RCC_OscConfig+0x27c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f9be 	bl	8001838 <HAL_InitTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d052      	beq.n	800256c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	e35e      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d032      	beq.n	8002538 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a42      	ldr	r2, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024de:	f7ff f9fb 	bl	80018d8 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e6:	f7ff f9f7 	bl	80018d8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e347      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4930      	ldr	r1, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	492b      	ldr	r1, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 8002536:	e01a      	b.n	800256e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002544:	f7ff f9c8 	bl	80018d8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800254c:	f7ff f9c4 	bl	80018d8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e314      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1dc>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d073      	beq.n	8002662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x21c>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d10e      	bne.n	80025a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d063      	beq.n	8002660 <HAL_RCC_OscConfig+0x2f0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d15f      	bne.n	8002660 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e2f1      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0x24c>
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0x298>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c4:	d114      	bne.n	80025f0 <HAL_RCC_OscConfig+0x280>
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x298>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08006678 	.word	0x08006678
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004
 80025f0:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a9f      	ldr	r2, [pc, #636]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b9d      	ldr	r3, [pc, #628]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a9c      	ldr	r2, [pc, #624]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff f962 	bl	80018d8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff f95e 	bl	80018d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e2ae      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262a:	4b92      	ldr	r3, [pc, #584]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x2a8>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f94e 	bl	80018d8 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7ff f94a 	bl	80018d8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e29a      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002652:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x2d0>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d060      	beq.n	8002730 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x310>
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d119      	bne.n	80026ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d116      	bne.n	80026ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002680:	4b7c      	ldr	r3, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x328>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e277      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	4973      	ldr	r1, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ac:	e040      	b.n	8002730 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d023      	beq.n	80026fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b6:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6e      	ldr	r2, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff f909 	bl	80018d8 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff f905 	bl	80018d8 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e255      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026dc:	4b65      	ldr	r3, [pc, #404]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b62      	ldr	r3, [pc, #392]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	495f      	ldr	r1, [pc, #380]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	e018      	b.n	8002730 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5c      	ldr	r2, [pc, #368]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f8e5 	bl	80018d8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002712:	f7ff f8e1 	bl	80018d8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e231      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d03c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002744:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274a:	4a4a      	ldr	r2, [pc, #296]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff f8c0 	bl	80018d8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff f8bc 	bl	80018d8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e20c      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCC_OscConfig+0x3ec>
 800277c:	e01b      	b.n	80027b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002784:	4a3b      	ldr	r2, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7ff f8a3 	bl	80018d8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002796:	f7ff f89f 	bl	80018d8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1ef      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a8:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ef      	bne.n	8002796 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80a6 	beq.w	8002910 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a26      	ldr	r2, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d118      	bne.n	800282e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002808:	f7ff f866 	bl	80018d8 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7ff f862 	bl	80018d8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1b2      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d108      	bne.n	8002848 <HAL_RCC_OscConfig+0x4d8>
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002846:	e029      	b.n	800289c <HAL_RCC_OscConfig+0x52c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b05      	cmp	r3, #5
 800284e:	d115      	bne.n	800287c <HAL_RCC_OscConfig+0x50c>
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x52c>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
 800287c:	4b9a      	ldr	r3, [pc, #616]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	4a99      	ldr	r2, [pc, #612]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800288c:	4b96      	ldr	r3, [pc, #600]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a95      	ldr	r2, [pc, #596]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7ff f818 	bl	80018d8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7ff f814 	bl	80018d8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e162      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ed      	beq.n	80028ac <HAL_RCC_OscConfig+0x53c>
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7ff f801 	bl	80018d8 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe fffd 	bl	80018d8 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e14b      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f0:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ed      	bne.n	80028da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fe:	7ffb      	ldrb	r3, [r7, #31]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002904:	4b78      	ldr	r3, [pc, #480]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a77      	ldr	r2, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800290a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d03c      	beq.n	8002996 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01c      	beq.n	800295e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002924:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292a:	4a6f      	ldr	r2, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe ffd0 	bl	80018d8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800293c:	f7fe ffcc 	bl	80018d8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e11c      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ef      	beq.n	800293c <HAL_RCC_OscConfig+0x5cc>
 800295c:	e01b      	b.n	8002996 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002964:	4a60      	ldr	r2, [pc, #384]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe ffb3 	bl	80018d8 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002976:	f7fe ffaf 	bl	80018d8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0ff      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002988:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800298a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ef      	bne.n	8002976 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80f3 	beq.w	8002b86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f040 80c9 	bne.w	8002b3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d12c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	3b01      	subs	r3, #1
 80029ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d123      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d11b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d113      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d06b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d062      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a1e:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0ac      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a3a:	f7fe ff4d 	bl	80018d8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe ff49 	bl	80018d8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e099      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCC_OscConfig+0x77c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a70:	3a01      	subs	r2, #1
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7a:	0212      	lsls	r2, r2, #8
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a82:	0852      	lsrs	r2, r2, #1
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0552      	lsls	r2, r2, #21
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a8e:	0852      	lsrs	r2, r2, #1
 8002a90:	3a01      	subs	r2, #1
 8002a92:	0652      	lsls	r2, r2, #25
 8002a94:	4311      	orrs	r1, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a9a:	06d2      	lsls	r2, r2, #27
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	4912      	ldr	r1, [pc, #72]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002abc:	f7fe ff0c 	bl	80018d8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe ff08 	bl	80018d8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e058      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae2:	e050      	b.n	8002b86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e04f      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d144      	bne.n	8002b86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b14:	f7fe fee0 	bl	80018d8 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fedc 	bl	80018d8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e02c      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x7ac>
 8002b3a:	e024      	b.n	8002b86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d01f      	beq.n	8002b82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fec3 	bl	80018d8 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe febf 	bl	80018d8 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4905      	ldr	r1, [pc, #20]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCC_OscConfig+0x824>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
 8002b80:	e001      	b.n	8002b86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	feeefffc 	.word	0xfeeefffc

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0e7      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4970      	ldr	r1, [pc, #448]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0cf      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d908      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4960      	ldr	r1, [pc, #384]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04c      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a6      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e09a      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e086      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4943      	ldr	r1, [pc, #268]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe fe2a 	bl	80018d8 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe fe26 	bl	80018d8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d208      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	492b      	ldr	r1, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d210      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4910      	ldr	r1, [pc, #64]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4c:	f000 f824 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	490b      	ldr	r1, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1f4>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1fc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fd61 	bl	8001838 <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08006678 	.word	0x08006678
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d11e      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e004      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d134      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d003      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xac>
 8002e3c:	e005      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e40:	617b      	str	r3, [r7, #20]
      break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e46:	617b      	str	r3, [r7, #20]
      break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	0e5b      	lsrs	r3, r3, #25
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e90:	69bb      	ldr	r3, [r7, #24]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08006690 	.word	0x08006690
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	007a1200 	.word	0x007a1200

08002eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08006688 	.word	0x08006688

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef8:	f7ff ffda 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08006688 	.word	0x08006688

08002f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff f9b6 	bl	80022a8 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e014      	b.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f9a6 	bl	80022a8 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f70:	d10b      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d919      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f7c:	d902      	bls.n	8002f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7e:	2302      	movs	r3, #2
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e013      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e010      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d902      	bls.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f90:	2303      	movs	r3, #3
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e00a      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d102      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e004      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d101      	bne.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d031      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003004:	d01a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800300a:	d814      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003014:	d10f      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f9de 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003044:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	494e      	ldr	r1, [pc, #312]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 809e 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fc12 	bl	80018d8 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe fc0e 	bl	80018d8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030cc:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d15a      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01e      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d019      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003106:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003126:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d016      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fbce 	bl	80018d8 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	e00b      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe fbca 	bl	80018d8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d902      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	74fb      	strb	r3, [r7, #19]
            break;
 8003156:	e006      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ec      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317a:	4904      	ldr	r1, [pc, #16]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b8a      	ldr	r3, [pc, #552]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4a89      	ldr	r2, [pc, #548]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4980      	ldr	r1, [pc, #512]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	4978      	ldr	r1, [pc, #480]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	496f      	ldr	r1, [pc, #444]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321c:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	4967      	ldr	r1, [pc, #412]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800323e:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	495e      	ldr	r1, [pc, #376]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	4956      	ldr	r1, [pc, #344]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d028      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a4:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4945      	ldr	r1, [pc, #276]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a3f      	ldr	r2, [pc, #252]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ce:	60d3      	str	r3, [r2, #12]
 80032d0:	e011      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032da:	d10c      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f882 	bl	80033ec <RCCEx_PLLSAI1_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	492d      	ldr	r1, [pc, #180]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003320:	d106      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332c:	60d3      	str	r3, [r2, #12]
 800332e:	e011      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f853 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337e:	d10c      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f830 	bl	80033ec <RCCEx_PLLSAI1_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	4904      	ldr	r1, [pc, #16]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000

080033ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fa:	4b74      	ldr	r3, [pc, #464]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003406:	4b71      	ldr	r3, [pc, #452]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
       ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800341e:	4b6b      	ldr	r3, [pc, #428]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
       ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d047      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e044      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d018      	beq.n	8003472 <RCCEx_PLLSAI1_Config+0x86>
 8003440:	2b03      	cmp	r3, #3
 8003442:	d825      	bhi.n	8003490 <RCCEx_PLLSAI1_Config+0xa4>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x62>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d009      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x74>
 800344c:	e020      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11d      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e01a      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003460:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e013      	b.n	800349a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003472:	4b56      	ldr	r3, [pc, #344]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348e:	e006      	b.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e004      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349e:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	430b      	orrs	r3, r1
 80034bc:	4943      	ldr	r1, [pc, #268]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d17c      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c8:	4b40      	ldr	r3, [pc, #256]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3f      	ldr	r2, [pc, #252]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fe fa00 	bl	80018d8 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034da:	e009      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034dc:	f7fe f9fc 	bl	80018d8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	73fb      	strb	r3, [r7, #15]
        break;
 80034ee:	e005      	b.n	80034fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ef      	bne.n	80034dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d15f      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d110      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003508:	4b30      	ldr	r3, [pc, #192]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	0211      	lsls	r1, r2, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	06d2      	lsls	r2, r2, #27
 8003520:	430a      	orrs	r2, r1
 8003522:	492a      	ldr	r1, [pc, #168]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
 8003528:	e027      	b.n	800357a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d112      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6912      	ldr	r2, [r2, #16]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0552      	lsls	r2, r2, #21
 800354c:	430a      	orrs	r2, r1
 800354e:	491f      	ldr	r1, [pc, #124]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
 8003554:	e011      	b.n	800357a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800355e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	0211      	lsls	r1, r2, #8
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6952      	ldr	r2, [r2, #20]
 800356c:	0852      	lsrs	r2, r2, #1
 800356e:	3a01      	subs	r2, #1
 8003570:	0652      	lsls	r2, r2, #25
 8003572:	430a      	orrs	r2, r1
 8003574:	4915      	ldr	r1, [pc, #84]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003584:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe f9a7 	bl	80018d8 <HAL_GetTick>
 800358a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358c:	e009      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358e:	f7fe f9a3 	bl	80018d8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d902      	bls.n	80035a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	73fb      	strb	r3, [r7, #15]
          break;
 80035a0:	e005      	b.n	80035ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ef      	beq.n	800358e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e049      	b.n	8003676 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd ff96 	bl	8001528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 fe3a 	bl	8004288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e03c      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d109      	bne.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e02f      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d109      	bne.n	80036e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e022      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d109      	bne.n	80036fa <HAL_TIM_PWM_Start_DMA+0x7a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e015      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start_DMA+0x94>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e008      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	e18d      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e03c      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d109      	bne.n	8003762 <HAL_TIM_PWM_Start_DMA+0xe2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e02f      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d109      	bne.n	800377c <HAL_TIM_PWM_Start_DMA+0xfc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e022      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d109      	bne.n	8003796 <HAL_TIM_PWM_Start_DMA+0x116>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e015      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b10      	cmp	r3, #16
 800379a:	d109      	bne.n	80037b0 <HAL_TIM_PWM_Start_DMA+0x130>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e008      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d034      	beq.n	8003830 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x152>
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e139      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start_DMA+0x166>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	e026      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start_DMA+0x176>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	e01e      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start_DMA+0x186>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003804:	e016      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start_DMA+0x196>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003814:	e00e      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	e006      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382e:	e001      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e10a      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	f200 80ae 	bhi.w	8003998 <HAL_TIM_PWM_Start_DMA+0x318>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003879 	.word	0x08003879
 8003848:	08003999 	.word	0x08003999
 800384c:	08003999 	.word	0x08003999
 8003850:	08003999 	.word	0x08003999
 8003854:	080038c1 	.word	0x080038c1
 8003858:	08003999 	.word	0x08003999
 800385c:	08003999 	.word	0x08003999
 8003860:	08003999 	.word	0x08003999
 8003864:	08003909 	.word	0x08003909
 8003868:	08003999 	.word	0x08003999
 800386c:	08003999 	.word	0x08003999
 8003870:	08003999 	.word	0x08003999
 8003874:	08003951 	.word	0x08003951
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	4a75      	ldr	r2, [pc, #468]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	4a74      	ldr	r2, [pc, #464]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003886:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	4a73      	ldr	r2, [pc, #460]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800388e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3334      	adds	r3, #52	; 0x34
 800389c:	461a      	mov	r2, r3
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	f7fe f9f0 	bl	8001c84 <HAL_DMA_Start_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0cd      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	60da      	str	r2, [r3, #12]
      break;
 80038be:	e06e      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	4a63      	ldr	r2, [pc, #396]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	4a62      	ldr	r2, [pc, #392]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3338      	adds	r3, #56	; 0x38
 80038e4:	461a      	mov	r2, r3
 80038e6:	887b      	ldrh	r3, [r7, #2]
 80038e8:	f7fe f9cc 	bl	8001c84 <HAL_DMA_Start_IT>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0a9      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003904:	60da      	str	r2, [r3, #12]
      break;
 8003906:	e04a      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a50      	ldr	r2, [pc, #320]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003916:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4a4f      	ldr	r2, [pc, #316]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800391e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	333c      	adds	r3, #60	; 0x3c
 800392c:	461a      	mov	r2, r3
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	f7fe f9a8 	bl	8001c84 <HAL_DMA_Start_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e085      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394c:	60da      	str	r2, [r3, #12]
      break;
 800394e:	e026      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	4a3f      	ldr	r2, [pc, #252]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4a3e      	ldr	r2, [pc, #248]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800395e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4a3d      	ldr	r2, [pc, #244]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003966:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3340      	adds	r3, #64	; 0x40
 8003974:	461a      	mov	r2, r3
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	f7fe f984 	bl	8001c84 <HAL_DMA_Start_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e061      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003994:	60da      	str	r2, [r3, #12]
      break;
 8003996:	e002      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	bf00      	nop
  }

  if (status == HAL_OK)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d151      	bne.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 ff4d 	bl	800484c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x350>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x350>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_TIM_PWM_Start_DMA+0x354>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_TIM_PWM_Start_DMA+0x356>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x388>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x388>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d115      	bne.n	8003a34 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d015      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d011      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	e008      	b.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e000      	b.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	08004177 	.word	0x08004177
 8003a58:	0800421f 	.word	0x0800421f
 8003a5c:	080040e5 	.word	0x080040e5
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40014400 	.word	0x40014400
 8003a6c:	00010007 	.word	0x00010007

08003a70 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d855      	bhi.n	8003b30 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003b31 	.word	0x08003b31
 8003a94:	08003b31 	.word	0x08003b31
 8003a98:	08003b31 	.word	0x08003b31
 8003a9c:	08003add 	.word	0x08003add
 8003aa0:	08003b31 	.word	0x08003b31
 8003aa4:	08003b31 	.word	0x08003b31
 8003aa8:	08003b31 	.word	0x08003b31
 8003aac:	08003af9 	.word	0x08003af9
 8003ab0:	08003b31 	.word	0x08003b31
 8003ab4:	08003b31 	.word	0x08003b31
 8003ab8:	08003b31 	.word	0x08003b31
 8003abc:	08003b15 	.word	0x08003b15
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ace:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe f935 	bl	8001d44 <HAL_DMA_Abort_IT>
      break;
 8003ada:	e02c      	b.n	8003b36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe f927 	bl	8001d44 <HAL_DMA_Abort_IT>
      break;
 8003af6:	e01e      	b.n	8003b36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f919 	bl	8001d44 <HAL_DMA_Abort_IT>
      break;
 8003b12:	e010      	b.n	8003b36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe f90b 	bl	8001d44 <HAL_DMA_Abort_IT>
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d176      	bne.n	8003c2a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2200      	movs	r2, #0
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fe81 	bl	800484c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a39      	ldr	r2, [pc, #228]	; (8003c34 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a37      	ldr	r2, [pc, #220]	; (8003c38 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a36      	ldr	r2, [pc, #216]	; (8003c3c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d017      	beq.n	8003ba2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	f240 4344 	movw	r3, #1092	; 0x444
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	e023      	b.n	8003c2a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Stop_DMA+0x182>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	e01b      	b.n	8003c2a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Stop_DMA+0x192>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	e013      	b.n	8003c2a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c10:	e00b      	b.n	8003c2a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c20:	e003      	b.n	8003c2a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400

08003c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d020      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01b      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0202 	mvn.w	r2, #2
 8003c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fa02 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f9f4 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fd fc07 	bl	80014ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d020      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01b      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0204 	mvn.w	r2, #4
 8003cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f9dc 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9ce 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd fbe1 	bl	80014ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9b6 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9a8 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fd fbbb 	bl	80014ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0210 	mvn.w	r2, #16
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f990 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f982 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fd fb95 	bl	80014ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0201 	mvn.w	r2, #1
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f960 	bl	800406c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fe4c 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fe44 	bl	8004a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f952 	bl	80040bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0220 	mvn.w	r2, #32
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fe0c 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0ff      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b14      	cmp	r3, #20
 8003e6e:	f200 80f0 	bhi.w	8004052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08004053 	.word	0x08004053
 8003e80:	08004053 	.word	0x08004053
 8003e84:	08004053 	.word	0x08004053
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08004053 	.word	0x08004053
 8003e90:	08004053 	.word	0x08004053
 8003e94:	08004053 	.word	0x08004053
 8003e98:	08003f4f 	.word	0x08003f4f
 8003e9c:	08004053 	.word	0x08004053
 8003ea0:	08004053 	.word	0x08004053
 8003ea4:	08004053 	.word	0x08004053
 8003ea8:	08003f8f 	.word	0x08003f8f
 8003eac:	08004053 	.word	0x08004053
 8003eb0:	08004053 	.word	0x08004053
 8003eb4:	08004053 	.word	0x08004053
 8003eb8:	08003fd1 	.word	0x08003fd1
 8003ebc:	08004053 	.word	0x08004053
 8003ec0:	08004053 	.word	0x08004053
 8003ec4:	08004053 	.word	0x08004053
 8003ec8:	08004011 	.word	0x08004011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa3c 	bl	8004350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	619a      	str	r2, [r3, #24]
      break;
 8003f0a:	e0a5      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fa98 	bl	8004448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6999      	ldr	r1, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]
      break;
 8003f4c:	e084      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 faf1 	bl	800453c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0208 	orr.w	r2, r2, #8
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      break;
 8003f8c:	e064      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fb49 	bl	800462c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	61da      	str	r2, [r3, #28]
      break;
 8003fce:	e043      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fb86 	bl	80046e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800400e:	e023      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fbbe 	bl	8004798 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004050:	e002      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
      break;
 8004056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004060:	7dfb      	ldrb	r3, [r7, #23]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410a:	e02a      	b.n	8004162 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d107      	bne.n	8004126 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2202      	movs	r2, #2
 800411a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004124:	e01d      	b.n	8004162 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d107      	bne.n	8004140 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2204      	movs	r2, #4
 8004134:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800413e:	e010      	b.n	8004162 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d107      	bne.n	800415a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2208      	movs	r2, #8
 800414e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004158:	e003      	b.n	8004162 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff ffb4 	bl	80040d0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	771a      	strb	r2, [r3, #28]
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d10b      	bne.n	80041a6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d136      	bne.n	800420a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	e031      	b.n	800420a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d10b      	bne.n	80041c8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2202      	movs	r2, #2
 80041b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d125      	bne.n	800420a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c6:	e020      	b.n	800420a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d10b      	bne.n	80041ea <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2204      	movs	r2, #4
 80041d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d114      	bne.n	800420a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e8:	e00f      	b.n	800420a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d10a      	bne.n	800420a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2208      	movs	r2, #8
 80041f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7fd f94e 	bl	80014ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	771a      	strb	r2, [r3, #28]
}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d103      	bne.n	800423e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	771a      	strb	r2, [r3, #28]
 800423c:	e019      	b.n	8004272 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d103      	bne.n	8004250 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2202      	movs	r2, #2
 800424c:	771a      	strb	r2, [r3, #28]
 800424e:	e010      	b.n	8004272 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d103      	bne.n	8004262 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2204      	movs	r2, #4
 800425e:	771a      	strb	r2, [r3, #28]
 8004260:	e007      	b.n	8004272 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d102      	bne.n	8004272 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2208      	movs	r2, #8
 8004270:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff18 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	771a      	strb	r2, [r3, #28]
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <TIM_Base_SetConfig+0xbc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0x20>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d108      	bne.n	80042ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <TIM_Base_SetConfig+0xbc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0x52>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0x52>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <TIM_Base_SetConfig+0xc0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0x52>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <TIM_Base_SetConfig+0xc4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <TIM_Base_SetConfig+0xbc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0xa0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <TIM_Base_SetConfig+0xc0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xa0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <TIM_Base_SetConfig+0xc4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400

08004350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0201 	bic.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0302 	bic.w	r3, r3, #2
 800439c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a24      	ldr	r2, [pc, #144]	; (800443c <TIM_OC1_SetConfig+0xec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_OC1_SetConfig+0x70>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a23      	ldr	r2, [pc, #140]	; (8004440 <TIM_OC1_SetConfig+0xf0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC1_SetConfig+0x70>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <TIM_OC1_SetConfig+0xf4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d10c      	bne.n	80043da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0308 	bic.w	r3, r3, #8
 80043c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <TIM_OC1_SetConfig+0xec>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_OC1_SetConfig+0xa2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a16      	ldr	r2, [pc, #88]	; (8004440 <TIM_OC1_SetConfig+0xf0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC1_SetConfig+0xa2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <TIM_OC1_SetConfig+0xf4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d111      	bne.n	8004416 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400

08004448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 0210 	bic.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0320 	bic.w	r3, r3, #32
 8004496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a22      	ldr	r2, [pc, #136]	; (8004530 <TIM_OC2_SetConfig+0xe8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d10d      	bne.n	80044c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <TIM_OC2_SetConfig+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_OC2_SetConfig+0x98>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_OC2_SetConfig+0xec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_OC2_SetConfig+0x98>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <TIM_OC2_SetConfig+0xf0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d113      	bne.n	8004508 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40014000 	.word	0x40014000
 8004538:	40014400 	.word	0x40014400

0800453c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <TIM_OC3_SetConfig+0xe4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10d      	bne.n	80045ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <TIM_OC3_SetConfig+0xe4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <TIM_OC3_SetConfig+0x96>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <TIM_OC3_SetConfig+0xe8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_OC3_SetConfig+0x96>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <TIM_OC3_SetConfig+0xec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d113      	bne.n	80045fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400

0800462c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a14      	ldr	r2, [pc, #80]	; (80046dc <TIM_OC4_SetConfig+0xb0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_OC4_SetConfig+0x74>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <TIM_OC4_SetConfig+0xb4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC4_SetConfig+0x74>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <TIM_OC4_SetConfig+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d109      	bne.n	80046b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400

080046e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800472c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a13      	ldr	r2, [pc, #76]	; (800478c <TIM_OC5_SetConfig+0xa4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_OC5_SetConfig+0x6a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a12      	ldr	r2, [pc, #72]	; (8004790 <TIM_OC5_SetConfig+0xa8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC5_SetConfig+0x6a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a11      	ldr	r2, [pc, #68]	; (8004794 <TIM_OC5_SetConfig+0xac>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d109      	bne.n	8004766 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	bf00      	nop
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400

08004798 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	051b      	lsls	r3, r3, #20
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a14      	ldr	r2, [pc, #80]	; (8004840 <TIM_OC6_SetConfig+0xa8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_OC6_SetConfig+0x6c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <TIM_OC6_SetConfig+0xac>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_OC6_SetConfig+0x6c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <TIM_OC6_SetConfig+0xb0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d109      	bne.n	8004818 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	029b      	lsls	r3, r3, #10
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400

0800484c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2201      	movs	r2, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e04f      	b.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d004      	beq.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10c      	bne.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40014000 	.word	0x40014000

08004964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800497c:	2302      	movs	r3, #2
 800497e:	e060      	b.n	8004a42 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d115      	bne.n	8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	051b      	lsls	r3, r3, #20
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40012c00 	.word	0x40012c00

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e040      	b.n	8004b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fdc4 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fade 	bl	8005098 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8af 	bl	8004c40 <UART_SetConfig>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e01b      	b.n	8004b24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fb5d 	bl	80051dc <UART_CheckIdleState>
 8004b22:	4603      	mov	r3, r0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d178      	bne.n	8004c36 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x24>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e071      	b.n	8004c38 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2221      	movs	r2, #33	; 0x21
 8004b60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fc feb9 	bl	80018d8 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b80:	d108      	bne.n	8004b94 <HAL_UART_Transmit+0x68>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d104      	bne.n	8004b94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	e003      	b.n	8004b9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b9c:	e030      	b.n	8004c00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fbbf 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e03c      	b.n	8004c38 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	e008      	b.n	8004bee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b292      	uxth	r2, r2
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1c8      	bne.n	8004b9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fb88 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e005      	b.n	8004c38 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e000      	b.n	8004c38 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b08a      	sub	sp, #40	; 0x28
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4bb4      	ldr	r3, [pc, #720]	; (8004f40 <UART_SetConfig+0x300>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4aa9      	ldr	r2, [pc, #676]	; (8004f44 <UART_SetConfig+0x304>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4aa0      	ldr	r2, [pc, #640]	; (8004f48 <UART_SetConfig+0x308>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d126      	bne.n	8004d18 <UART_SetConfig+0xd8>
 8004cca:	4ba0      	ldr	r3, [pc, #640]	; (8004f4c <UART_SetConfig+0x30c>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d81b      	bhi.n	8004d10 <UART_SetConfig+0xd0>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0xa0>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e080      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e07c      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e078      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e074      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e070      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a8c      	ldr	r2, [pc, #560]	; (8004f50 <UART_SetConfig+0x310>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d138      	bne.n	8004d94 <UART_SetConfig+0x154>
 8004d22:	4b8a      	ldr	r3, [pc, #552]	; (8004f4c <UART_SetConfig+0x30c>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d82d      	bhi.n	8004d8c <UART_SetConfig+0x14c>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0xf8>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d8d 	.word	0x08004d8d
 8004d40:	08004d8d 	.word	0x08004d8d
 8004d44:	08004d8d 	.word	0x08004d8d
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d8d 	.word	0x08004d8d
 8004d50:	08004d8d 	.word	0x08004d8d
 8004d54:	08004d8d 	.word	0x08004d8d
 8004d58:	08004d75 	.word	0x08004d75
 8004d5c:	08004d8d 	.word	0x08004d8d
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e042      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e03e      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e03a      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d84:	2308      	movs	r3, #8
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e036      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e032      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6a      	ldr	r2, [pc, #424]	; (8004f44 <UART_SetConfig+0x304>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d12a      	bne.n	8004df4 <UART_SetConfig+0x1b4>
 8004d9e:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <UART_SetConfig+0x30c>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dac:	d01a      	beq.n	8004de4 <UART_SetConfig+0x1a4>
 8004dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db2:	d81b      	bhi.n	8004dec <UART_SetConfig+0x1ac>
 8004db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db8:	d00c      	beq.n	8004dd4 <UART_SetConfig+0x194>
 8004dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbe:	d815      	bhi.n	8004dec <UART_SetConfig+0x1ac>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <UART_SetConfig+0x18c>
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d008      	beq.n	8004ddc <UART_SetConfig+0x19c>
 8004dca:	e00f      	b.n	8004dec <UART_SetConfig+0x1ac>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e012      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e00e      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e00a      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004de4:	2308      	movs	r3, #8
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e006      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004dec:	2310      	movs	r3, #16
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e002      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a51      	ldr	r2, [pc, #324]	; (8004f44 <UART_SetConfig+0x304>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d17a      	bne.n	8004efa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d824      	bhi.n	8004e56 <UART_SetConfig+0x216>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x1d4>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e57 	.word	0x08004e57
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e57 	.word	0x08004e57
 8004e24:	08004e47 	.word	0x08004e47
 8004e28:	08004e57 	.word	0x08004e57
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e57 	.word	0x08004e57
 8004e34:	08004e4f 	.word	0x08004e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7fe f846 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	61f8      	str	r0, [r7, #28]
        break;
 8004e3e:	e010      	b.n	8004e62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e40:	4b44      	ldr	r3, [pc, #272]	; (8004f54 <UART_SetConfig+0x314>)
 8004e42:	61fb      	str	r3, [r7, #28]
        break;
 8004e44:	e00d      	b.n	8004e62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e46:	f7fd ffa7 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8004e4a:	61f8      	str	r0, [r7, #28]
        break;
 8004e4c:	e009      	b.n	8004e62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e52:	61fb      	str	r3, [r7, #28]
        break;
 8004e54:	e005      	b.n	8004e62 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8107 	beq.w	8005078 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d305      	bcc.n	8004e86 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d903      	bls.n	8004e8e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e8c:	e0f4      	b.n	8005078 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2200      	movs	r2, #0
 8004e92:	461c      	mov	r4, r3
 8004e94:	4615      	mov	r5, r2
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	022b      	lsls	r3, r5, #8
 8004ea0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ea4:	0222      	lsls	r2, r4, #8
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	6849      	ldr	r1, [r1, #4]
 8004eaa:	0849      	lsrs	r1, r1, #1
 8004eac:	2000      	movs	r0, #0
 8004eae:	4688      	mov	r8, r1
 8004eb0:	4681      	mov	r9, r0
 8004eb2:	eb12 0a08 	adds.w	sl, r2, r8
 8004eb6:	eb43 0b09 	adc.w	fp, r3, r9
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec8:	4650      	mov	r0, sl
 8004eca:	4659      	mov	r1, fp
 8004ecc:	f7fb fe6e 	bl	8000bac <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ede:	d308      	bcc.n	8004ef2 <UART_SetConfig+0x2b2>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee6:	d204      	bcs.n	8004ef2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	e0c2      	b.n	8005078 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef8:	e0be      	b.n	8005078 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f02:	d16a      	bne.n	8004fda <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d834      	bhi.n	8004f76 <UART_SetConfig+0x336>
 8004f0c:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <UART_SetConfig+0x2d4>)
 8004f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f12:	bf00      	nop
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f59 	.word	0x08004f59
 8004f1c:	08004f61 	.word	0x08004f61
 8004f20:	08004f77 	.word	0x08004f77
 8004f24:	08004f67 	.word	0x08004f67
 8004f28:	08004f77 	.word	0x08004f77
 8004f2c:	08004f77 	.word	0x08004f77
 8004f30:	08004f77 	.word	0x08004f77
 8004f34:	08004f6f 	.word	0x08004f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fd ffc6 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8004f3c:	61f8      	str	r0, [r7, #28]
        break;
 8004f3e:	e020      	b.n	8004f82 <UART_SetConfig+0x342>
 8004f40:	efff69f3 	.word	0xefff69f3
 8004f44:	40008000 	.word	0x40008000
 8004f48:	40013800 	.word	0x40013800
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40004400 	.word	0x40004400
 8004f54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7fd ffcc 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	61f8      	str	r0, [r7, #28]
        break;
 8004f5e:	e010      	b.n	8004f82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f60:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <UART_SetConfig+0x454>)
 8004f62:	61fb      	str	r3, [r7, #28]
        break;
 8004f64:	e00d      	b.n	8004f82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f66:	f7fd ff17 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8004f6a:	61f8      	str	r0, [r7, #28]
        break;
 8004f6c:	e009      	b.n	8004f82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f72:	61fb      	str	r3, [r7, #28]
        break;
 8004f74:	e005      	b.n	8004f82 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d077      	beq.n	8005078 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005a      	lsls	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	441a      	add	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b0f      	cmp	r3, #15
 8004fa2:	d916      	bls.n	8004fd2 <UART_SetConfig+0x392>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004faa:	d212      	bcs.n	8004fd2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f023 030f 	bic.w	r3, r3, #15
 8004fb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	8afb      	ldrh	r3, [r7, #22]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	8afa      	ldrh	r2, [r7, #22]
 8004fce:	60da      	str	r2, [r3, #12]
 8004fd0:	e052      	b.n	8005078 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fd8:	e04e      	b.n	8005078 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d827      	bhi.n	8005032 <UART_SetConfig+0x3f2>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x3a8>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005033 	.word	0x08005033
 8005004:	08005033 	.word	0x08005033
 8005008:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500c:	f7fd ff5c 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8005010:	61f8      	str	r0, [r7, #28]
        break;
 8005012:	e014      	b.n	800503e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fd ff6e 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8005018:	61f8      	str	r0, [r7, #28]
        break;
 800501a:	e010      	b.n	800503e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <UART_SetConfig+0x454>)
 800501e:	61fb      	str	r3, [r7, #28]
        break;
 8005020:	e00d      	b.n	800503e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005022:	f7fd feb9 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8005026:	61f8      	str	r0, [r7, #28]
        break;
 8005028:	e009      	b.n	800503e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	61fb      	str	r3, [r7, #28]
        break;
 8005030:	e005      	b.n	800503e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800503c:	bf00      	nop
    }

    if (pclk != 0U)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	085a      	lsrs	r2, r3, #1
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	441a      	add	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d909      	bls.n	8005072 <UART_SetConfig+0x432>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d205      	bcs.n	8005072 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	e002      	b.n	8005078 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005084:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005088:	4618      	mov	r0, r3
 800508a:	3728      	adds	r7, #40	; 0x28
 800508c:	46bd      	mov	sp, r7
 800508e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005092:	bf00      	nop
 8005094:	00f42400 	.word	0x00f42400

08005098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01a      	beq.n	80051ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005196:	d10a      	bne.n	80051ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b098      	sub	sp, #96	; 0x60
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051ec:	f7fc fb74 	bl	80018d8 <HAL_GetTick>
 80051f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d12e      	bne.n	800525e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005208:	2200      	movs	r2, #0
 800520a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f88c 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d021      	beq.n	800525e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522e:	653b      	str	r3, [r7, #80]	; 0x50
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
 800523a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800523e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e062      	b.n	8005324 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d149      	bne.n	8005300 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005274:	2200      	movs	r2, #0
 8005276:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f856 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d03c      	beq.n	8005300 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	623b      	str	r3, [r7, #32]
   return(result);
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30
 80052a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d8:	61fa      	str	r2, [r7, #28]
 80052da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	617b      	str	r3, [r7, #20]
   return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e011      	b.n	8005324 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3758      	adds	r7, #88	; 0x58
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533c:	e049      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d045      	beq.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fc fac7 	bl	80018d8 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <UART_WaitOnFlagUntilTimeout+0x30>
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e048      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d031      	beq.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d110      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2208      	movs	r2, #8
 8005382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f838 	bl	80053fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2208      	movs	r2, #8
 800538e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e029      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ac:	d111      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f81e 	bl	80053fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e00f      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d0a6      	beq.n	800533e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b095      	sub	sp, #84	; 0x54
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005420:	643b      	str	r3, [r7, #64]	; 0x40
 8005422:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	61fb      	str	r3, [r7, #28]
   return(result);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	64bb      	str	r3, [r7, #72]	; 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546c:	2b01      	cmp	r3, #1
 800546e:	d118      	bne.n	80054a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	60bb      	str	r3, [r7, #8]
   return(result);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 0310 	bic.w	r3, r3, #16
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6979      	ldr	r1, [r7, #20]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	613b      	str	r3, [r7, #16]
   return(result);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e6      	bne.n	8005470 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054b6:	bf00      	nop
 80054b8:	3754      	adds	r7, #84	; 0x54
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <memset>:
 80054c2:	4402      	add	r2, r0
 80054c4:	4603      	mov	r3, r0
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d100      	bne.n	80054cc <memset+0xa>
 80054ca:	4770      	bx	lr
 80054cc:	f803 1b01 	strb.w	r1, [r3], #1
 80054d0:	e7f9      	b.n	80054c6 <memset+0x4>
	...

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4d0d      	ldr	r5, [pc, #52]	; (800550c <__libc_init_array+0x38>)
 80054d8:	4c0d      	ldr	r4, [pc, #52]	; (8005510 <__libc_init_array+0x3c>)
 80054da:	1b64      	subs	r4, r4, r5
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	2600      	movs	r6, #0
 80054e0:	42a6      	cmp	r6, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	4d0b      	ldr	r5, [pc, #44]	; (8005514 <__libc_init_array+0x40>)
 80054e6:	4c0c      	ldr	r4, [pc, #48]	; (8005518 <__libc_init_array+0x44>)
 80054e8:	f001 f8ba 	bl	8006660 <_init>
 80054ec:	1b64      	subs	r4, r4, r5
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	2600      	movs	r6, #0
 80054f2:	42a6      	cmp	r6, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fc:	4798      	blx	r3
 80054fe:	3601      	adds	r6, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f855 3b04 	ldr.w	r3, [r5], #4
 8005506:	4798      	blx	r3
 8005508:	3601      	adds	r6, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	080068a0 	.word	0x080068a0
 8005510:	080068a0 	.word	0x080068a0
 8005514:	080068a0 	.word	0x080068a0
 8005518:	080068a4 	.word	0x080068a4
 800551c:	00000000 	.word	0x00000000

08005520 <tan>:
 8005520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005522:	ec53 2b10 	vmov	r2, r3, d0
 8005526:	4816      	ldr	r0, [pc, #88]	; (8005580 <tan+0x60>)
 8005528:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800552c:	4281      	cmp	r1, r0
 800552e:	dc07      	bgt.n	8005540 <tan+0x20>
 8005530:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005578 <tan+0x58>
 8005534:	2001      	movs	r0, #1
 8005536:	b005      	add	sp, #20
 8005538:	f85d eb04 	ldr.w	lr, [sp], #4
 800553c:	f000 b824 	b.w	8005588 <__kernel_tan>
 8005540:	4810      	ldr	r0, [pc, #64]	; (8005584 <tan+0x64>)
 8005542:	4281      	cmp	r1, r0
 8005544:	dd09      	ble.n	800555a <tan+0x3a>
 8005546:	ee10 0a10 	vmov	r0, s0
 800554a:	4619      	mov	r1, r3
 800554c:	f7fa fe44 	bl	80001d8 <__aeabi_dsub>
 8005550:	ec41 0b10 	vmov	d0, r0, r1
 8005554:	b005      	add	sp, #20
 8005556:	f85d fb04 	ldr.w	pc, [sp], #4
 800555a:	4668      	mov	r0, sp
 800555c:	f000 fa20 	bl	80059a0 <__ieee754_rem_pio2>
 8005560:	0040      	lsls	r0, r0, #1
 8005562:	f000 0002 	and.w	r0, r0, #2
 8005566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800556a:	ed9d 0b00 	vldr	d0, [sp]
 800556e:	f1c0 0001 	rsb	r0, r0, #1
 8005572:	f000 f809 	bl	8005588 <__kernel_tan>
 8005576:	e7ed      	b.n	8005554 <tan+0x34>
	...
 8005580:	3fe921fb 	.word	0x3fe921fb
 8005584:	7fefffff 	.word	0x7fefffff

08005588 <__kernel_tan>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	ed2d 8b06 	vpush	{d8-d10}
 8005590:	ec5b ab10 	vmov	sl, fp, d0
 8005594:	4be0      	ldr	r3, [pc, #896]	; (8005918 <__kernel_tan+0x390>)
 8005596:	b083      	sub	sp, #12
 8005598:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800559c:	429f      	cmp	r7, r3
 800559e:	ec59 8b11 	vmov	r8, r9, d1
 80055a2:	4606      	mov	r6, r0
 80055a4:	f8cd b000 	str.w	fp, [sp]
 80055a8:	dc61      	bgt.n	800566e <__kernel_tan+0xe6>
 80055aa:	ee10 0a10 	vmov	r0, s0
 80055ae:	4659      	mov	r1, fp
 80055b0:	f7fb fa64 	bl	8000a7c <__aeabi_d2iz>
 80055b4:	4605      	mov	r5, r0
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f040 8083 	bne.w	80056c2 <__kernel_tan+0x13a>
 80055bc:	1c73      	adds	r3, r6, #1
 80055be:	4652      	mov	r2, sl
 80055c0:	4313      	orrs	r3, r2
 80055c2:	433b      	orrs	r3, r7
 80055c4:	d112      	bne.n	80055ec <__kernel_tan+0x64>
 80055c6:	ec4b ab10 	vmov	d0, sl, fp
 80055ca:	f000 fbef 	bl	8005dac <fabs>
 80055ce:	49d3      	ldr	r1, [pc, #844]	; (800591c <__kernel_tan+0x394>)
 80055d0:	ec53 2b10 	vmov	r2, r3, d0
 80055d4:	2000      	movs	r0, #0
 80055d6:	f7fb f8e1 	bl	800079c <__aeabi_ddiv>
 80055da:	4682      	mov	sl, r0
 80055dc:	468b      	mov	fp, r1
 80055de:	ec4b ab10 	vmov	d0, sl, fp
 80055e2:	b003      	add	sp, #12
 80055e4:	ecbd 8b06 	vpop	{d8-d10}
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	2e01      	cmp	r6, #1
 80055ee:	d0f6      	beq.n	80055de <__kernel_tan+0x56>
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	4650      	mov	r0, sl
 80055f6:	4659      	mov	r1, fp
 80055f8:	f7fa fdf0 	bl	80001dc <__adddf3>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	460f      	mov	r7, r1
 8005602:	2000      	movs	r0, #0
 8005604:	49c6      	ldr	r1, [pc, #792]	; (8005920 <__kernel_tan+0x398>)
 8005606:	f7fb f8c9 	bl	800079c <__aeabi_ddiv>
 800560a:	e9cd 0100 	strd	r0, r1, [sp]
 800560e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005612:	462e      	mov	r6, r5
 8005614:	4652      	mov	r2, sl
 8005616:	462c      	mov	r4, r5
 8005618:	4630      	mov	r0, r6
 800561a:	461d      	mov	r5, r3
 800561c:	4639      	mov	r1, r7
 800561e:	465b      	mov	r3, fp
 8005620:	f7fa fdda 	bl	80001d8 <__aeabi_dsub>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4640      	mov	r0, r8
 800562a:	4649      	mov	r1, r9
 800562c:	f7fa fdd4 	bl	80001d8 <__aeabi_dsub>
 8005630:	4632      	mov	r2, r6
 8005632:	462b      	mov	r3, r5
 8005634:	f7fa ff88 	bl	8000548 <__aeabi_dmul>
 8005638:	4632      	mov	r2, r6
 800563a:	4680      	mov	r8, r0
 800563c:	4689      	mov	r9, r1
 800563e:	462b      	mov	r3, r5
 8005640:	4630      	mov	r0, r6
 8005642:	4639      	mov	r1, r7
 8005644:	f7fa ff80 	bl	8000548 <__aeabi_dmul>
 8005648:	4bb4      	ldr	r3, [pc, #720]	; (800591c <__kernel_tan+0x394>)
 800564a:	2200      	movs	r2, #0
 800564c:	f7fa fdc6 	bl	80001dc <__adddf3>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4640      	mov	r0, r8
 8005656:	4649      	mov	r1, r9
 8005658:	f7fa fdc0 	bl	80001dc <__adddf3>
 800565c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005660:	f7fa ff72 	bl	8000548 <__aeabi_dmul>
 8005664:	4622      	mov	r2, r4
 8005666:	462b      	mov	r3, r5
 8005668:	f7fa fdb8 	bl	80001dc <__adddf3>
 800566c:	e7b5      	b.n	80055da <__kernel_tan+0x52>
 800566e:	4bad      	ldr	r3, [pc, #692]	; (8005924 <__kernel_tan+0x39c>)
 8005670:	429f      	cmp	r7, r3
 8005672:	dd26      	ble.n	80056c2 <__kernel_tan+0x13a>
 8005674:	9b00      	ldr	r3, [sp, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da09      	bge.n	800568e <__kernel_tan+0x106>
 800567a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800567e:	469b      	mov	fp, r3
 8005680:	ee10 aa10 	vmov	sl, s0
 8005684:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005688:	ee11 8a10 	vmov	r8, s2
 800568c:	4699      	mov	r9, r3
 800568e:	4652      	mov	r2, sl
 8005690:	465b      	mov	r3, fp
 8005692:	a183      	add	r1, pc, #524	; (adr r1, 80058a0 <__kernel_tan+0x318>)
 8005694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005698:	f7fa fd9e 	bl	80001d8 <__aeabi_dsub>
 800569c:	4642      	mov	r2, r8
 800569e:	464b      	mov	r3, r9
 80056a0:	4604      	mov	r4, r0
 80056a2:	460d      	mov	r5, r1
 80056a4:	a180      	add	r1, pc, #512	; (adr r1, 80058a8 <__kernel_tan+0x320>)
 80056a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056aa:	f7fa fd95 	bl	80001d8 <__aeabi_dsub>
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	f7fa fd93 	bl	80001dc <__adddf3>
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	4682      	mov	sl, r0
 80056bc:	468b      	mov	fp, r1
 80056be:	f04f 0900 	mov.w	r9, #0
 80056c2:	4652      	mov	r2, sl
 80056c4:	465b      	mov	r3, fp
 80056c6:	4650      	mov	r0, sl
 80056c8:	4659      	mov	r1, fp
 80056ca:	f7fa ff3d 	bl	8000548 <__aeabi_dmul>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	ec43 2b18 	vmov	d8, r2, r3
 80056d6:	f7fa ff37 	bl	8000548 <__aeabi_dmul>
 80056da:	ec53 2b18 	vmov	r2, r3, d8
 80056de:	4604      	mov	r4, r0
 80056e0:	460d      	mov	r5, r1
 80056e2:	4650      	mov	r0, sl
 80056e4:	4659      	mov	r1, fp
 80056e6:	f7fa ff2f 	bl	8000548 <__aeabi_dmul>
 80056ea:	a371      	add	r3, pc, #452	; (adr r3, 80058b0 <__kernel_tan+0x328>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	ec41 0b19 	vmov	d9, r0, r1
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa ff26 	bl	8000548 <__aeabi_dmul>
 80056fc:	a36e      	add	r3, pc, #440	; (adr r3, 80058b8 <__kernel_tan+0x330>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f7fa fd6b 	bl	80001dc <__adddf3>
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	f7fa ff1d 	bl	8000548 <__aeabi_dmul>
 800570e:	a36c      	add	r3, pc, #432	; (adr r3, 80058c0 <__kernel_tan+0x338>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fa fd62 	bl	80001dc <__adddf3>
 8005718:	4622      	mov	r2, r4
 800571a:	462b      	mov	r3, r5
 800571c:	f7fa ff14 	bl	8000548 <__aeabi_dmul>
 8005720:	a369      	add	r3, pc, #420	; (adr r3, 80058c8 <__kernel_tan+0x340>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa fd59 	bl	80001dc <__adddf3>
 800572a:	4622      	mov	r2, r4
 800572c:	462b      	mov	r3, r5
 800572e:	f7fa ff0b 	bl	8000548 <__aeabi_dmul>
 8005732:	a367      	add	r3, pc, #412	; (adr r3, 80058d0 <__kernel_tan+0x348>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fd50 	bl	80001dc <__adddf3>
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	f7fa ff02 	bl	8000548 <__aeabi_dmul>
 8005744:	a364      	add	r3, pc, #400	; (adr r3, 80058d8 <__kernel_tan+0x350>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fd47 	bl	80001dc <__adddf3>
 800574e:	ec53 2b18 	vmov	r2, r3, d8
 8005752:	f7fa fef9 	bl	8000548 <__aeabi_dmul>
 8005756:	a362      	add	r3, pc, #392	; (adr r3, 80058e0 <__kernel_tan+0x358>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	ec41 0b1a 	vmov	d10, r0, r1
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fa fef0 	bl	8000548 <__aeabi_dmul>
 8005768:	a35f      	add	r3, pc, #380	; (adr r3, 80058e8 <__kernel_tan+0x360>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fa fd35 	bl	80001dc <__adddf3>
 8005772:	4622      	mov	r2, r4
 8005774:	462b      	mov	r3, r5
 8005776:	f7fa fee7 	bl	8000548 <__aeabi_dmul>
 800577a:	a35d      	add	r3, pc, #372	; (adr r3, 80058f0 <__kernel_tan+0x368>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa fd2c 	bl	80001dc <__adddf3>
 8005784:	4622      	mov	r2, r4
 8005786:	462b      	mov	r3, r5
 8005788:	f7fa fede 	bl	8000548 <__aeabi_dmul>
 800578c:	a35a      	add	r3, pc, #360	; (adr r3, 80058f8 <__kernel_tan+0x370>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa fd23 	bl	80001dc <__adddf3>
 8005796:	4622      	mov	r2, r4
 8005798:	462b      	mov	r3, r5
 800579a:	f7fa fed5 	bl	8000548 <__aeabi_dmul>
 800579e:	a358      	add	r3, pc, #352	; (adr r3, 8005900 <__kernel_tan+0x378>)
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fa fd1a 	bl	80001dc <__adddf3>
 80057a8:	4622      	mov	r2, r4
 80057aa:	462b      	mov	r3, r5
 80057ac:	f7fa fecc 	bl	8000548 <__aeabi_dmul>
 80057b0:	a355      	add	r3, pc, #340	; (adr r3, 8005908 <__kernel_tan+0x380>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa fd11 	bl	80001dc <__adddf3>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	ec51 0b1a 	vmov	r0, r1, d10
 80057c2:	f7fa fd0b 	bl	80001dc <__adddf3>
 80057c6:	ec53 2b19 	vmov	r2, r3, d9
 80057ca:	f7fa febd 	bl	8000548 <__aeabi_dmul>
 80057ce:	4642      	mov	r2, r8
 80057d0:	464b      	mov	r3, r9
 80057d2:	f7fa fd03 	bl	80001dc <__adddf3>
 80057d6:	ec53 2b18 	vmov	r2, r3, d8
 80057da:	f7fa feb5 	bl	8000548 <__aeabi_dmul>
 80057de:	4642      	mov	r2, r8
 80057e0:	464b      	mov	r3, r9
 80057e2:	f7fa fcfb 	bl	80001dc <__adddf3>
 80057e6:	a34a      	add	r3, pc, #296	; (adr r3, 8005910 <__kernel_tan+0x388>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	4604      	mov	r4, r0
 80057ee:	460d      	mov	r5, r1
 80057f0:	ec51 0b19 	vmov	r0, r1, d9
 80057f4:	f7fa fea8 	bl	8000548 <__aeabi_dmul>
 80057f8:	4622      	mov	r2, r4
 80057fa:	462b      	mov	r3, r5
 80057fc:	f7fa fcee 	bl	80001dc <__adddf3>
 8005800:	460b      	mov	r3, r1
 8005802:	ec41 0b18 	vmov	d8, r0, r1
 8005806:	4602      	mov	r2, r0
 8005808:	4659      	mov	r1, fp
 800580a:	4650      	mov	r0, sl
 800580c:	f7fa fce6 	bl	80001dc <__adddf3>
 8005810:	4b44      	ldr	r3, [pc, #272]	; (8005924 <__kernel_tan+0x39c>)
 8005812:	429f      	cmp	r7, r3
 8005814:	4604      	mov	r4, r0
 8005816:	460d      	mov	r5, r1
 8005818:	f340 8086 	ble.w	8005928 <__kernel_tan+0x3a0>
 800581c:	4630      	mov	r0, r6
 800581e:	f7fa fe29 	bl	8000474 <__aeabi_i2d>
 8005822:	4622      	mov	r2, r4
 8005824:	4680      	mov	r8, r0
 8005826:	4689      	mov	r9, r1
 8005828:	462b      	mov	r3, r5
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	f7fa fe8b 	bl	8000548 <__aeabi_dmul>
 8005832:	4642      	mov	r2, r8
 8005834:	4606      	mov	r6, r0
 8005836:	460f      	mov	r7, r1
 8005838:	464b      	mov	r3, r9
 800583a:	4620      	mov	r0, r4
 800583c:	4629      	mov	r1, r5
 800583e:	f7fa fccd 	bl	80001dc <__adddf3>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fa ffa7 	bl	800079c <__aeabi_ddiv>
 800584e:	ec53 2b18 	vmov	r2, r3, d8
 8005852:	f7fa fcc1 	bl	80001d8 <__aeabi_dsub>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4650      	mov	r0, sl
 800585c:	4659      	mov	r1, fp
 800585e:	f7fa fcbb 	bl	80001d8 <__aeabi_dsub>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	f7fa fcb9 	bl	80001dc <__adddf3>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fa fcb1 	bl	80001d8 <__aeabi_dsub>
 8005876:	9b00      	ldr	r3, [sp, #0]
 8005878:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800587c:	f00a 0a02 	and.w	sl, sl, #2
 8005880:	4604      	mov	r4, r0
 8005882:	f1ca 0001 	rsb	r0, sl, #1
 8005886:	460d      	mov	r5, r1
 8005888:	f7fa fdf4 	bl	8000474 <__aeabi_i2d>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fa fe58 	bl	8000548 <__aeabi_dmul>
 8005898:	e69f      	b.n	80055da <__kernel_tan+0x52>
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w
 80058a0:	54442d18 	.word	0x54442d18
 80058a4:	3fe921fb 	.word	0x3fe921fb
 80058a8:	33145c07 	.word	0x33145c07
 80058ac:	3c81a626 	.word	0x3c81a626
 80058b0:	74bf7ad4 	.word	0x74bf7ad4
 80058b4:	3efb2a70 	.word	0x3efb2a70
 80058b8:	32f0a7e9 	.word	0x32f0a7e9
 80058bc:	3f12b80f 	.word	0x3f12b80f
 80058c0:	1a8d1068 	.word	0x1a8d1068
 80058c4:	3f3026f7 	.word	0x3f3026f7
 80058c8:	fee08315 	.word	0xfee08315
 80058cc:	3f57dbc8 	.word	0x3f57dbc8
 80058d0:	e96e8493 	.word	0xe96e8493
 80058d4:	3f8226e3 	.word	0x3f8226e3
 80058d8:	1bb341fe 	.word	0x1bb341fe
 80058dc:	3faba1ba 	.word	0x3faba1ba
 80058e0:	db605373 	.word	0xdb605373
 80058e4:	bef375cb 	.word	0xbef375cb
 80058e8:	a03792a6 	.word	0xa03792a6
 80058ec:	3f147e88 	.word	0x3f147e88
 80058f0:	f2f26501 	.word	0xf2f26501
 80058f4:	3f4344d8 	.word	0x3f4344d8
 80058f8:	c9560328 	.word	0xc9560328
 80058fc:	3f6d6d22 	.word	0x3f6d6d22
 8005900:	8406d637 	.word	0x8406d637
 8005904:	3f9664f4 	.word	0x3f9664f4
 8005908:	1110fe7a 	.word	0x1110fe7a
 800590c:	3fc11111 	.word	0x3fc11111
 8005910:	55555563 	.word	0x55555563
 8005914:	3fd55555 	.word	0x3fd55555
 8005918:	3e2fffff 	.word	0x3e2fffff
 800591c:	3ff00000 	.word	0x3ff00000
 8005920:	bff00000 	.word	0xbff00000
 8005924:	3fe59427 	.word	0x3fe59427
 8005928:	2e01      	cmp	r6, #1
 800592a:	d02f      	beq.n	800598c <__kernel_tan+0x404>
 800592c:	460f      	mov	r7, r1
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4689      	mov	r9, r1
 8005934:	2000      	movs	r0, #0
 8005936:	4917      	ldr	r1, [pc, #92]	; (8005994 <__kernel_tan+0x40c>)
 8005938:	f7fa ff30 	bl	800079c <__aeabi_ddiv>
 800593c:	2600      	movs	r6, #0
 800593e:	e9cd 0100 	strd	r0, r1, [sp]
 8005942:	4652      	mov	r2, sl
 8005944:	465b      	mov	r3, fp
 8005946:	4630      	mov	r0, r6
 8005948:	4639      	mov	r1, r7
 800594a:	f7fa fc45 	bl	80001d8 <__aeabi_dsub>
 800594e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	ec51 0b18 	vmov	r0, r1, d8
 800595a:	f7fa fc3d 	bl	80001d8 <__aeabi_dsub>
 800595e:	4632      	mov	r2, r6
 8005960:	462b      	mov	r3, r5
 8005962:	f7fa fdf1 	bl	8000548 <__aeabi_dmul>
 8005966:	46b0      	mov	r8, r6
 8005968:	460f      	mov	r7, r1
 800596a:	4642      	mov	r2, r8
 800596c:	462b      	mov	r3, r5
 800596e:	4634      	mov	r4, r6
 8005970:	4649      	mov	r1, r9
 8005972:	4606      	mov	r6, r0
 8005974:	4640      	mov	r0, r8
 8005976:	f7fa fde7 	bl	8000548 <__aeabi_dmul>
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <__kernel_tan+0x410>)
 800597c:	2200      	movs	r2, #0
 800597e:	f7fa fc2d 	bl	80001dc <__adddf3>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4630      	mov	r0, r6
 8005988:	4639      	mov	r1, r7
 800598a:	e665      	b.n	8005658 <__kernel_tan+0xd0>
 800598c:	4682      	mov	sl, r0
 800598e:	468b      	mov	fp, r1
 8005990:	e625      	b.n	80055de <__kernel_tan+0x56>
 8005992:	bf00      	nop
 8005994:	bff00000 	.word	0xbff00000
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	00000000 	.word	0x00000000

080059a0 <__ieee754_rem_pio2>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	ed2d 8b02 	vpush	{d8}
 80059a8:	ec55 4b10 	vmov	r4, r5, d0
 80059ac:	4bca      	ldr	r3, [pc, #808]	; (8005cd8 <__ieee754_rem_pio2+0x338>)
 80059ae:	b08b      	sub	sp, #44	; 0x2c
 80059b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80059b4:	4598      	cmp	r8, r3
 80059b6:	4682      	mov	sl, r0
 80059b8:	9502      	str	r5, [sp, #8]
 80059ba:	dc08      	bgt.n	80059ce <__ieee754_rem_pio2+0x2e>
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	ed80 0b00 	vstr	d0, [r0]
 80059c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80059c8:	f04f 0b00 	mov.w	fp, #0
 80059cc:	e028      	b.n	8005a20 <__ieee754_rem_pio2+0x80>
 80059ce:	4bc3      	ldr	r3, [pc, #780]	; (8005cdc <__ieee754_rem_pio2+0x33c>)
 80059d0:	4598      	cmp	r8, r3
 80059d2:	dc78      	bgt.n	8005ac6 <__ieee754_rem_pio2+0x126>
 80059d4:	9b02      	ldr	r3, [sp, #8]
 80059d6:	4ec2      	ldr	r6, [pc, #776]	; (8005ce0 <__ieee754_rem_pio2+0x340>)
 80059d8:	2b00      	cmp	r3, #0
 80059da:	ee10 0a10 	vmov	r0, s0
 80059de:	a3b0      	add	r3, pc, #704	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x300>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	4629      	mov	r1, r5
 80059e6:	dd39      	ble.n	8005a5c <__ieee754_rem_pio2+0xbc>
 80059e8:	f7fa fbf6 	bl	80001d8 <__aeabi_dsub>
 80059ec:	45b0      	cmp	r8, r6
 80059ee:	4604      	mov	r4, r0
 80059f0:	460d      	mov	r5, r1
 80059f2:	d01b      	beq.n	8005a2c <__ieee754_rem_pio2+0x8c>
 80059f4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fbed 	bl	80001d8 <__aeabi_dsub>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9ca 2300 	strd	r2, r3, [sl]
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7fa fbe5 	bl	80001d8 <__aeabi_dsub>
 8005a0e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fbe0 	bl	80001d8 <__aeabi_dsub>
 8005a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a1c:	f04f 0b01 	mov.w	fp, #1
 8005a20:	4658      	mov	r0, fp
 8005a22:	b00b      	add	sp, #44	; 0x2c
 8005a24:	ecbd 8b02 	vpop	{d8}
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x310>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fbd1 	bl	80001d8 <__aeabi_dsub>
 8005a36:	a3a0      	add	r3, pc, #640	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460d      	mov	r5, r1
 8005a40:	f7fa fbca 	bl	80001d8 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	e9ca 2300 	strd	r2, r3, [sl]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fbc2 	bl	80001d8 <__aeabi_dsub>
 8005a54:	a398      	add	r3, pc, #608	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	e7db      	b.n	8005a14 <__ieee754_rem_pio2+0x74>
 8005a5c:	f7fa fbbe 	bl	80001dc <__adddf3>
 8005a60:	45b0      	cmp	r8, r6
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	d016      	beq.n	8005a96 <__ieee754_rem_pio2+0xf6>
 8005a68:	a38f      	add	r3, pc, #572	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fbb5 	bl	80001dc <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9ca 2300 	strd	r2, r3, [sl]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	f7fa fbab 	bl	80001d8 <__aeabi_dsub>
 8005a82:	a389      	add	r3, pc, #548	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f7fa fba8 	bl	80001dc <__adddf3>
 8005a8c:	f04f 3bff 	mov.w	fp, #4294967295
 8005a90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a94:	e7c4      	b.n	8005a20 <__ieee754_rem_pio2+0x80>
 8005a96:	a386      	add	r3, pc, #536	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x310>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fb9e 	bl	80001dc <__adddf3>
 8005aa0:	a385      	add	r3, pc, #532	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	f7fa fb97 	bl	80001dc <__adddf3>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	e9ca 2300 	strd	r2, r3, [sl]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fb8d 	bl	80001d8 <__aeabi_dsub>
 8005abe:	a37e      	add	r3, pc, #504	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	e7e0      	b.n	8005a88 <__ieee754_rem_pio2+0xe8>
 8005ac6:	4b87      	ldr	r3, [pc, #540]	; (8005ce4 <__ieee754_rem_pio2+0x344>)
 8005ac8:	4598      	cmp	r8, r3
 8005aca:	f300 80d8 	bgt.w	8005c7e <__ieee754_rem_pio2+0x2de>
 8005ace:	f000 f96d 	bl	8005dac <fabs>
 8005ad2:	ec55 4b10 	vmov	r4, r5, d0
 8005ad6:	ee10 0a10 	vmov	r0, s0
 8005ada:	a379      	add	r3, pc, #484	; (adr r3, 8005cc0 <__ieee754_rem_pio2+0x320>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fd31 	bl	8000548 <__aeabi_dmul>
 8005ae6:	4b80      	ldr	r3, [pc, #512]	; (8005ce8 <__ieee754_rem_pio2+0x348>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f7fa fb77 	bl	80001dc <__adddf3>
 8005aee:	f7fa ffc5 	bl	8000a7c <__aeabi_d2iz>
 8005af2:	4683      	mov	fp, r0
 8005af4:	f7fa fcbe 	bl	8000474 <__aeabi_i2d>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	ec43 2b18 	vmov	d8, r2, r3
 8005b00:	a367      	add	r3, pc, #412	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x300>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fd1f 	bl	8000548 <__aeabi_dmul>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa fb61 	bl	80001d8 <__aeabi_dsub>
 8005b16:	a364      	add	r3, pc, #400	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460f      	mov	r7, r1
 8005b20:	ec51 0b18 	vmov	r0, r1, d8
 8005b24:	f7fa fd10 	bl	8000548 <__aeabi_dmul>
 8005b28:	f1bb 0f1f 	cmp.w	fp, #31
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	dc0d      	bgt.n	8005b4e <__ieee754_rem_pio2+0x1ae>
 8005b32:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <__ieee754_rem_pio2+0x34c>)
 8005b34:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	d006      	beq.n	8005b4e <__ieee754_rem_pio2+0x1ae>
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa fb46 	bl	80001d8 <__aeabi_dsub>
 8005b4c:	e00e      	b.n	8005b6c <__ieee754_rem_pio2+0x1cc>
 8005b4e:	462b      	mov	r3, r5
 8005b50:	4622      	mov	r2, r4
 8005b52:	4630      	mov	r0, r6
 8005b54:	4639      	mov	r1, r7
 8005b56:	f7fa fb3f 	bl	80001d8 <__aeabi_dsub>
 8005b5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b64:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	dc02      	bgt.n	8005b72 <__ieee754_rem_pio2+0x1d2>
 8005b6c:	e9ca 0100 	strd	r0, r1, [sl]
 8005b70:	e039      	b.n	8005be6 <__ieee754_rem_pio2+0x246>
 8005b72:	a34f      	add	r3, pc, #316	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x310>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	ec51 0b18 	vmov	r0, r1, d8
 8005b7c:	f7fa fce4 	bl	8000548 <__aeabi_dmul>
 8005b80:	4604      	mov	r4, r0
 8005b82:	460d      	mov	r5, r1
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa fb24 	bl	80001d8 <__aeabi_dsub>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4680      	mov	r8, r0
 8005b96:	4689      	mov	r9, r1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa fb1c 	bl	80001d8 <__aeabi_dsub>
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	f7fa fb18 	bl	80001d8 <__aeabi_dsub>
 8005ba8:	a343      	add	r3, pc, #268	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	4604      	mov	r4, r0
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	ec51 0b18 	vmov	r0, r1, d8
 8005bb6:	f7fa fcc7 	bl	8000548 <__aeabi_dmul>
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f7fa fb0b 	bl	80001d8 <__aeabi_dsub>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	460d      	mov	r5, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fb03 	bl	80001d8 <__aeabi_dsub>
 8005bd2:	9a03      	ldr	r2, [sp, #12]
 8005bd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b31      	cmp	r3, #49	; 0x31
 8005bdc:	dc24      	bgt.n	8005c28 <__ieee754_rem_pio2+0x288>
 8005bde:	e9ca 0100 	strd	r0, r1, [sl]
 8005be2:	4646      	mov	r6, r8
 8005be4:	464f      	mov	r7, r9
 8005be6:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bea:	4630      	mov	r0, r6
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa faf1 	bl	80001d8 <__aeabi_dsub>
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	f7fa faed 	bl	80001d8 <__aeabi_dsub>
 8005bfe:	9b02      	ldr	r3, [sp, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c06:	f6bf af0b 	bge.w	8005a20 <__ieee754_rem_pio2+0x80>
 8005c0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c0e:	f8ca 3004 	str.w	r3, [sl, #4]
 8005c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c16:	f8ca 8000 	str.w	r8, [sl]
 8005c1a:	f8ca 0008 	str.w	r0, [sl, #8]
 8005c1e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005c22:	f1cb 0b00 	rsb	fp, fp, #0
 8005c26:	e6fb      	b.n	8005a20 <__ieee754_rem_pio2+0x80>
 8005c28:	a327      	add	r3, pc, #156	; (adr r3, 8005cc8 <__ieee754_rem_pio2+0x328>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	ec51 0b18 	vmov	r0, r1, d8
 8005c32:	f7fa fc89 	bl	8000548 <__aeabi_dmul>
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa fac9 	bl	80001d8 <__aeabi_dsub>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	4640      	mov	r0, r8
 8005c50:	4649      	mov	r1, r9
 8005c52:	f7fa fac1 	bl	80001d8 <__aeabi_dsub>
 8005c56:	4622      	mov	r2, r4
 8005c58:	462b      	mov	r3, r5
 8005c5a:	f7fa fabd 	bl	80001d8 <__aeabi_dsub>
 8005c5e:	a31c      	add	r3, pc, #112	; (adr r3, 8005cd0 <__ieee754_rem_pio2+0x330>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	ec51 0b18 	vmov	r0, r1, d8
 8005c6c:	f7fa fc6c 	bl	8000548 <__aeabi_dmul>
 8005c70:	4622      	mov	r2, r4
 8005c72:	462b      	mov	r3, r5
 8005c74:	f7fa fab0 	bl	80001d8 <__aeabi_dsub>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	e760      	b.n	8005b40 <__ieee754_rem_pio2+0x1a0>
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <__ieee754_rem_pio2+0x350>)
 8005c80:	4598      	cmp	r8, r3
 8005c82:	dd37      	ble.n	8005cf4 <__ieee754_rem_pio2+0x354>
 8005c84:	ee10 2a10 	vmov	r2, s0
 8005c88:	462b      	mov	r3, r5
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	f7fa faa3 	bl	80001d8 <__aeabi_dsub>
 8005c92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c96:	e9ca 0100 	strd	r0, r1, [sl]
 8005c9a:	e695      	b.n	80059c8 <__ieee754_rem_pio2+0x28>
 8005c9c:	f3af 8000 	nop.w
 8005ca0:	54400000 	.word	0x54400000
 8005ca4:	3ff921fb 	.word	0x3ff921fb
 8005ca8:	1a626331 	.word	0x1a626331
 8005cac:	3dd0b461 	.word	0x3dd0b461
 8005cb0:	1a600000 	.word	0x1a600000
 8005cb4:	3dd0b461 	.word	0x3dd0b461
 8005cb8:	2e037073 	.word	0x2e037073
 8005cbc:	3ba3198a 	.word	0x3ba3198a
 8005cc0:	6dc9c883 	.word	0x6dc9c883
 8005cc4:	3fe45f30 	.word	0x3fe45f30
 8005cc8:	2e000000 	.word	0x2e000000
 8005ccc:	3ba3198a 	.word	0x3ba3198a
 8005cd0:	252049c1 	.word	0x252049c1
 8005cd4:	397b839a 	.word	0x397b839a
 8005cd8:	3fe921fb 	.word	0x3fe921fb
 8005cdc:	4002d97b 	.word	0x4002d97b
 8005ce0:	3ff921fb 	.word	0x3ff921fb
 8005ce4:	413921fb 	.word	0x413921fb
 8005ce8:	3fe00000 	.word	0x3fe00000
 8005cec:	080066c0 	.word	0x080066c0
 8005cf0:	7fefffff 	.word	0x7fefffff
 8005cf4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005cf8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005cfc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005d00:	4620      	mov	r0, r4
 8005d02:	460d      	mov	r5, r1
 8005d04:	f7fa feba 	bl	8000a7c <__aeabi_d2iz>
 8005d08:	f7fa fbb4 	bl	8000474 <__aeabi_i2d>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4620      	mov	r0, r4
 8005d12:	4629      	mov	r1, r5
 8005d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d18:	f7fa fa5e 	bl	80001d8 <__aeabi_dsub>
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <__ieee754_rem_pio2+0x404>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f7fa fc12 	bl	8000548 <__aeabi_dmul>
 8005d24:	460d      	mov	r5, r1
 8005d26:	4604      	mov	r4, r0
 8005d28:	f7fa fea8 	bl	8000a7c <__aeabi_d2iz>
 8005d2c:	f7fa fba2 	bl	8000474 <__aeabi_i2d>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d3c:	f7fa fa4c 	bl	80001d8 <__aeabi_dsub>
 8005d40:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <__ieee754_rem_pio2+0x404>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	f7fa fc00 	bl	8000548 <__aeabi_dmul>
 8005d48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d4c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005d50:	2703      	movs	r7, #3
 8005d52:	2400      	movs	r4, #0
 8005d54:	2500      	movs	r5, #0
 8005d56:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	46b9      	mov	r9, r7
 8005d60:	3f01      	subs	r7, #1
 8005d62:	f7fa fe59 	bl	8000a18 <__aeabi_dcmpeq>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1f5      	bne.n	8005d56 <__ieee754_rem_pio2+0x3b6>
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <__ieee754_rem_pio2+0x408>)
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	2302      	movs	r3, #2
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	4632      	mov	r2, r6
 8005d74:	464b      	mov	r3, r9
 8005d76:	4651      	mov	r1, sl
 8005d78:	a804      	add	r0, sp, #16
 8005d7a:	f000 f821 	bl	8005dc0 <__kernel_rem_pio2>
 8005d7e:	9b02      	ldr	r3, [sp, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	4683      	mov	fp, r0
 8005d84:	f6bf ae4c 	bge.w	8005a20 <__ieee754_rem_pio2+0x80>
 8005d88:	e9da 2100 	ldrd	r2, r1, [sl]
 8005d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d90:	e9ca 2300 	strd	r2, r3, [sl]
 8005d94:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005d98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d9c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005da0:	e73f      	b.n	8005c22 <__ieee754_rem_pio2+0x282>
 8005da2:	bf00      	nop
 8005da4:	41700000 	.word	0x41700000
 8005da8:	08006740 	.word	0x08006740

08005dac <fabs>:
 8005dac:	ec51 0b10 	vmov	r0, r1, d0
 8005db0:	ee10 2a10 	vmov	r2, s0
 8005db4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005db8:	ec43 2b10 	vmov	d0, r2, r3
 8005dbc:	4770      	bx	lr
	...

08005dc0 <__kernel_rem_pio2>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	ed2d 8b02 	vpush	{d8}
 8005dc8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005dcc:	f112 0f14 	cmn.w	r2, #20
 8005dd0:	9306      	str	r3, [sp, #24]
 8005dd2:	9104      	str	r1, [sp, #16]
 8005dd4:	4bc2      	ldr	r3, [pc, #776]	; (80060e0 <__kernel_rem_pio2+0x320>)
 8005dd6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005dd8:	9009      	str	r0, [sp, #36]	; 0x24
 8005dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	9b06      	ldr	r3, [sp, #24]
 8005de2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005de6:	bfa8      	it	ge
 8005de8:	1ed4      	subge	r4, r2, #3
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	bfb2      	itee	lt
 8005dee:	2400      	movlt	r4, #0
 8005df0:	2318      	movge	r3, #24
 8005df2:	fb94 f4f3 	sdivge	r4, r4, r3
 8005df6:	f06f 0317 	mvn.w	r3, #23
 8005dfa:	fb04 3303 	mla	r3, r4, r3, r3
 8005dfe:	eb03 0a02 	add.w	sl, r3, r2
 8005e02:	9b00      	ldr	r3, [sp, #0]
 8005e04:	9a05      	ldr	r2, [sp, #20]
 8005e06:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80060d0 <__kernel_rem_pio2+0x310>
 8005e0a:	eb03 0802 	add.w	r8, r3, r2
 8005e0e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005e10:	1aa7      	subs	r7, r4, r2
 8005e12:	ae20      	add	r6, sp, #128	; 0x80
 8005e14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005e18:	2500      	movs	r5, #0
 8005e1a:	4545      	cmp	r5, r8
 8005e1c:	dd13      	ble.n	8005e46 <__kernel_rem_pio2+0x86>
 8005e1e:	9b06      	ldr	r3, [sp, #24]
 8005e20:	aa20      	add	r2, sp, #128	; 0x80
 8005e22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005e26:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005e2a:	f04f 0800 	mov.w	r8, #0
 8005e2e:	9b00      	ldr	r3, [sp, #0]
 8005e30:	4598      	cmp	r8, r3
 8005e32:	dc31      	bgt.n	8005e98 <__kernel_rem_pio2+0xd8>
 8005e34:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80060d0 <__kernel_rem_pio2+0x310>
 8005e38:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005e3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e40:	462f      	mov	r7, r5
 8005e42:	2600      	movs	r6, #0
 8005e44:	e01b      	b.n	8005e7e <__kernel_rem_pio2+0xbe>
 8005e46:	42ef      	cmn	r7, r5
 8005e48:	d407      	bmi.n	8005e5a <__kernel_rem_pio2+0x9a>
 8005e4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005e4e:	f7fa fb11 	bl	8000474 <__aeabi_i2d>
 8005e52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005e56:	3501      	adds	r5, #1
 8005e58:	e7df      	b.n	8005e1a <__kernel_rem_pio2+0x5a>
 8005e5a:	ec51 0b18 	vmov	r0, r1, d8
 8005e5e:	e7f8      	b.n	8005e52 <__kernel_rem_pio2+0x92>
 8005e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005e68:	f7fa fb6e 	bl	8000548 <__aeabi_dmul>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e74:	f7fa f9b2 	bl	80001dc <__adddf3>
 8005e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	9b05      	ldr	r3, [sp, #20]
 8005e80:	429e      	cmp	r6, r3
 8005e82:	f1a7 0708 	sub.w	r7, r7, #8
 8005e86:	ddeb      	ble.n	8005e60 <__kernel_rem_pio2+0xa0>
 8005e88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e8c:	f108 0801 	add.w	r8, r8, #1
 8005e90:	ecab 7b02 	vstmia	fp!, {d7}
 8005e94:	3508      	adds	r5, #8
 8005e96:	e7ca      	b.n	8005e2e <__kernel_rem_pio2+0x6e>
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	aa0c      	add	r2, sp, #48	; 0x30
 8005e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005ea4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005ea8:	9c00      	ldr	r4, [sp, #0]
 8005eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8005eac:	00e3      	lsls	r3, r4, #3
 8005eae:	9308      	str	r3, [sp, #32]
 8005eb0:	ab98      	add	r3, sp, #608	; 0x260
 8005eb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005eb6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005eba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005ebe:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ec0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005ec4:	46c3      	mov	fp, r8
 8005ec6:	46a1      	mov	r9, r4
 8005ec8:	f1b9 0f00 	cmp.w	r9, #0
 8005ecc:	f1a5 0508 	sub.w	r5, r5, #8
 8005ed0:	dc77      	bgt.n	8005fc2 <__kernel_rem_pio2+0x202>
 8005ed2:	ec47 6b10 	vmov	d0, r6, r7
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	f000 fac2 	bl	8006460 <scalbn>
 8005edc:	ec57 6b10 	vmov	r6, r7, d0
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005ee6:	ee10 0a10 	vmov	r0, s0
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa fb2c 	bl	8000548 <__aeabi_dmul>
 8005ef0:	ec41 0b10 	vmov	d0, r0, r1
 8005ef4:	f000 fb34 	bl	8006560 <floor>
 8005ef8:	4b7a      	ldr	r3, [pc, #488]	; (80060e4 <__kernel_rem_pio2+0x324>)
 8005efa:	ec51 0b10 	vmov	r0, r1, d0
 8005efe:	2200      	movs	r2, #0
 8005f00:	f7fa fb22 	bl	8000548 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa f964 	bl	80001d8 <__aeabi_dsub>
 8005f10:	460f      	mov	r7, r1
 8005f12:	4606      	mov	r6, r0
 8005f14:	f7fa fdb2 	bl	8000a7c <__aeabi_d2iz>
 8005f18:	9002      	str	r0, [sp, #8]
 8005f1a:	f7fa faab 	bl	8000474 <__aeabi_i2d>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4630      	mov	r0, r6
 8005f24:	4639      	mov	r1, r7
 8005f26:	f7fa f957 	bl	80001d8 <__aeabi_dsub>
 8005f2a:	f1ba 0f00 	cmp.w	sl, #0
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460f      	mov	r7, r1
 8005f32:	dd6d      	ble.n	8006010 <__kernel_rem_pio2+0x250>
 8005f34:	1e61      	subs	r1, r4, #1
 8005f36:	ab0c      	add	r3, sp, #48	; 0x30
 8005f38:	9d02      	ldr	r5, [sp, #8]
 8005f3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f3e:	f1ca 0018 	rsb	r0, sl, #24
 8005f42:	fa43 f200 	asr.w	r2, r3, r0
 8005f46:	4415      	add	r5, r2
 8005f48:	4082      	lsls	r2, r0
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	aa0c      	add	r2, sp, #48	; 0x30
 8005f4e:	9502      	str	r5, [sp, #8]
 8005f50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005f54:	f1ca 0217 	rsb	r2, sl, #23
 8005f58:	fa43 fb02 	asr.w	fp, r3, r2
 8005f5c:	f1bb 0f00 	cmp.w	fp, #0
 8005f60:	dd65      	ble.n	800602e <__kernel_rem_pio2+0x26e>
 8005f62:	9b02      	ldr	r3, [sp, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	3301      	adds	r3, #1
 8005f68:	9302      	str	r3, [sp, #8]
 8005f6a:	4615      	mov	r5, r2
 8005f6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005f70:	4294      	cmp	r4, r2
 8005f72:	f300 809f 	bgt.w	80060b4 <__kernel_rem_pio2+0x2f4>
 8005f76:	f1ba 0f00 	cmp.w	sl, #0
 8005f7a:	dd07      	ble.n	8005f8c <__kernel_rem_pio2+0x1cc>
 8005f7c:	f1ba 0f01 	cmp.w	sl, #1
 8005f80:	f000 80c1 	beq.w	8006106 <__kernel_rem_pio2+0x346>
 8005f84:	f1ba 0f02 	cmp.w	sl, #2
 8005f88:	f000 80c7 	beq.w	800611a <__kernel_rem_pio2+0x35a>
 8005f8c:	f1bb 0f02 	cmp.w	fp, #2
 8005f90:	d14d      	bne.n	800602e <__kernel_rem_pio2+0x26e>
 8005f92:	4632      	mov	r2, r6
 8005f94:	463b      	mov	r3, r7
 8005f96:	4954      	ldr	r1, [pc, #336]	; (80060e8 <__kernel_rem_pio2+0x328>)
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f7fa f91d 	bl	80001d8 <__aeabi_dsub>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	d043      	beq.n	800602e <__kernel_rem_pio2+0x26e>
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80060d8 <__kernel_rem_pio2+0x318>
 8005fac:	f000 fa58 	bl	8006460 <scalbn>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	ec53 2b10 	vmov	r2, r3, d0
 8005fb8:	f7fa f90e 	bl	80001d8 <__aeabi_dsub>
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	460f      	mov	r7, r1
 8005fc0:	e035      	b.n	800602e <__kernel_rem_pio2+0x26e>
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <__kernel_rem_pio2+0x32c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	4639      	mov	r1, r7
 8005fca:	f7fa fabd 	bl	8000548 <__aeabi_dmul>
 8005fce:	f7fa fd55 	bl	8000a7c <__aeabi_d2iz>
 8005fd2:	f7fa fa4f 	bl	8000474 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	ec43 2b18 	vmov	d8, r2, r3
 8005fde:	4b44      	ldr	r3, [pc, #272]	; (80060f0 <__kernel_rem_pio2+0x330>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f7fa fab1 	bl	8000548 <__aeabi_dmul>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa f8f3 	bl	80001d8 <__aeabi_dsub>
 8005ff2:	f7fa fd43 	bl	8000a7c <__aeabi_d2iz>
 8005ff6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ffa:	f84b 0b04 	str.w	r0, [fp], #4
 8005ffe:	ec51 0b18 	vmov	r0, r1, d8
 8006002:	f7fa f8eb 	bl	80001dc <__adddf3>
 8006006:	f109 39ff 	add.w	r9, r9, #4294967295
 800600a:	4606      	mov	r6, r0
 800600c:	460f      	mov	r7, r1
 800600e:	e75b      	b.n	8005ec8 <__kernel_rem_pio2+0x108>
 8006010:	d106      	bne.n	8006020 <__kernel_rem_pio2+0x260>
 8006012:	1e63      	subs	r3, r4, #1
 8006014:	aa0c      	add	r2, sp, #48	; 0x30
 8006016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800601e:	e79d      	b.n	8005f5c <__kernel_rem_pio2+0x19c>
 8006020:	4b34      	ldr	r3, [pc, #208]	; (80060f4 <__kernel_rem_pio2+0x334>)
 8006022:	2200      	movs	r2, #0
 8006024:	f7fa fd16 	bl	8000a54 <__aeabi_dcmpge>
 8006028:	2800      	cmp	r0, #0
 800602a:	d140      	bne.n	80060ae <__kernel_rem_pio2+0x2ee>
 800602c:	4683      	mov	fp, r0
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	4630      	mov	r0, r6
 8006034:	4639      	mov	r1, r7
 8006036:	f7fa fcef 	bl	8000a18 <__aeabi_dcmpeq>
 800603a:	2800      	cmp	r0, #0
 800603c:	f000 80c1 	beq.w	80061c2 <__kernel_rem_pio2+0x402>
 8006040:	1e65      	subs	r5, r4, #1
 8006042:	462b      	mov	r3, r5
 8006044:	2200      	movs	r2, #0
 8006046:	9900      	ldr	r1, [sp, #0]
 8006048:	428b      	cmp	r3, r1
 800604a:	da6d      	bge.n	8006128 <__kernel_rem_pio2+0x368>
 800604c:	2a00      	cmp	r2, #0
 800604e:	f000 808a 	beq.w	8006166 <__kernel_rem_pio2+0x3a6>
 8006052:	ab0c      	add	r3, sp, #48	; 0x30
 8006054:	f1aa 0a18 	sub.w	sl, sl, #24
 8006058:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80ae 	beq.w	80061be <__kernel_rem_pio2+0x3fe>
 8006062:	4650      	mov	r0, sl
 8006064:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80060d8 <__kernel_rem_pio2+0x318>
 8006068:	f000 f9fa 	bl	8006460 <scalbn>
 800606c:	1c6b      	adds	r3, r5, #1
 800606e:	00da      	lsls	r2, r3, #3
 8006070:	9205      	str	r2, [sp, #20]
 8006072:	ec57 6b10 	vmov	r6, r7, d0
 8006076:	aa70      	add	r2, sp, #448	; 0x1c0
 8006078:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80060ec <__kernel_rem_pio2+0x32c>
 800607c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006080:	462c      	mov	r4, r5
 8006082:	f04f 0800 	mov.w	r8, #0
 8006086:	2c00      	cmp	r4, #0
 8006088:	f280 80d4 	bge.w	8006234 <__kernel_rem_pio2+0x474>
 800608c:	462c      	mov	r4, r5
 800608e:	2c00      	cmp	r4, #0
 8006090:	f2c0 8102 	blt.w	8006298 <__kernel_rem_pio2+0x4d8>
 8006094:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <__kernel_rem_pio2+0x338>)
 8006096:	461e      	mov	r6, r3
 8006098:	ab70      	add	r3, sp, #448	; 0x1c0
 800609a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800609e:	1b2b      	subs	r3, r5, r4
 80060a0:	f04f 0900 	mov.w	r9, #0
 80060a4:	f04f 0a00 	mov.w	sl, #0
 80060a8:	2700      	movs	r7, #0
 80060aa:	9306      	str	r3, [sp, #24]
 80060ac:	e0e6      	b.n	800627c <__kernel_rem_pio2+0x4bc>
 80060ae:	f04f 0b02 	mov.w	fp, #2
 80060b2:	e756      	b.n	8005f62 <__kernel_rem_pio2+0x1a2>
 80060b4:	f8d8 3000 	ldr.w	r3, [r8]
 80060b8:	bb05      	cbnz	r5, 80060fc <__kernel_rem_pio2+0x33c>
 80060ba:	b123      	cbz	r3, 80060c6 <__kernel_rem_pio2+0x306>
 80060bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80060c0:	f8c8 3000 	str.w	r3, [r8]
 80060c4:	2301      	movs	r3, #1
 80060c6:	3201      	adds	r2, #1
 80060c8:	f108 0804 	add.w	r8, r8, #4
 80060cc:	461d      	mov	r5, r3
 80060ce:	e74f      	b.n	8005f70 <__kernel_rem_pio2+0x1b0>
	...
 80060dc:	3ff00000 	.word	0x3ff00000
 80060e0:	08006888 	.word	0x08006888
 80060e4:	40200000 	.word	0x40200000
 80060e8:	3ff00000 	.word	0x3ff00000
 80060ec:	3e700000 	.word	0x3e700000
 80060f0:	41700000 	.word	0x41700000
 80060f4:	3fe00000 	.word	0x3fe00000
 80060f8:	08006848 	.word	0x08006848
 80060fc:	1acb      	subs	r3, r1, r3
 80060fe:	f8c8 3000 	str.w	r3, [r8]
 8006102:	462b      	mov	r3, r5
 8006104:	e7df      	b.n	80060c6 <__kernel_rem_pio2+0x306>
 8006106:	1e62      	subs	r2, r4, #1
 8006108:	ab0c      	add	r3, sp, #48	; 0x30
 800610a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006112:	a90c      	add	r1, sp, #48	; 0x30
 8006114:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006118:	e738      	b.n	8005f8c <__kernel_rem_pio2+0x1cc>
 800611a:	1e62      	subs	r2, r4, #1
 800611c:	ab0c      	add	r3, sp, #48	; 0x30
 800611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006122:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006126:	e7f4      	b.n	8006112 <__kernel_rem_pio2+0x352>
 8006128:	a90c      	add	r1, sp, #48	; 0x30
 800612a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800612e:	3b01      	subs	r3, #1
 8006130:	430a      	orrs	r2, r1
 8006132:	e788      	b.n	8006046 <__kernel_rem_pio2+0x286>
 8006134:	3301      	adds	r3, #1
 8006136:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800613a:	2900      	cmp	r1, #0
 800613c:	d0fa      	beq.n	8006134 <__kernel_rem_pio2+0x374>
 800613e:	9a08      	ldr	r2, [sp, #32]
 8006140:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006144:	446a      	add	r2, sp
 8006146:	3a98      	subs	r2, #152	; 0x98
 8006148:	9208      	str	r2, [sp, #32]
 800614a:	9a06      	ldr	r2, [sp, #24]
 800614c:	a920      	add	r1, sp, #128	; 0x80
 800614e:	18a2      	adds	r2, r4, r2
 8006150:	18e3      	adds	r3, r4, r3
 8006152:	f104 0801 	add.w	r8, r4, #1
 8006156:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800615a:	9302      	str	r3, [sp, #8]
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	4543      	cmp	r3, r8
 8006160:	da04      	bge.n	800616c <__kernel_rem_pio2+0x3ac>
 8006162:	461c      	mov	r4, r3
 8006164:	e6a2      	b.n	8005eac <__kernel_rem_pio2+0xec>
 8006166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006168:	2301      	movs	r3, #1
 800616a:	e7e4      	b.n	8006136 <__kernel_rem_pio2+0x376>
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006172:	f7fa f97f 	bl	8000474 <__aeabi_i2d>
 8006176:	e8e5 0102 	strd	r0, r1, [r5], #8
 800617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617c:	46ab      	mov	fp, r5
 800617e:	461c      	mov	r4, r3
 8006180:	f04f 0900 	mov.w	r9, #0
 8006184:	2600      	movs	r6, #0
 8006186:	2700      	movs	r7, #0
 8006188:	9b05      	ldr	r3, [sp, #20]
 800618a:	4599      	cmp	r9, r3
 800618c:	dd06      	ble.n	800619c <__kernel_rem_pio2+0x3dc>
 800618e:	9b08      	ldr	r3, [sp, #32]
 8006190:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006194:	f108 0801 	add.w	r8, r8, #1
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	e7df      	b.n	800615c <__kernel_rem_pio2+0x39c>
 800619c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80061a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80061a4:	f7fa f9d0 	bl	8000548 <__aeabi_dmul>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4630      	mov	r0, r6
 80061ae:	4639      	mov	r1, r7
 80061b0:	f7fa f814 	bl	80001dc <__adddf3>
 80061b4:	f109 0901 	add.w	r9, r9, #1
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	e7e4      	b.n	8006188 <__kernel_rem_pio2+0x3c8>
 80061be:	3d01      	subs	r5, #1
 80061c0:	e747      	b.n	8006052 <__kernel_rem_pio2+0x292>
 80061c2:	ec47 6b10 	vmov	d0, r6, r7
 80061c6:	f1ca 0000 	rsb	r0, sl, #0
 80061ca:	f000 f949 	bl	8006460 <scalbn>
 80061ce:	ec57 6b10 	vmov	r6, r7, d0
 80061d2:	4ba0      	ldr	r3, [pc, #640]	; (8006454 <__kernel_rem_pio2+0x694>)
 80061d4:	ee10 0a10 	vmov	r0, s0
 80061d8:	2200      	movs	r2, #0
 80061da:	4639      	mov	r1, r7
 80061dc:	f7fa fc3a 	bl	8000a54 <__aeabi_dcmpge>
 80061e0:	b1f8      	cbz	r0, 8006222 <__kernel_rem_pio2+0x462>
 80061e2:	4b9d      	ldr	r3, [pc, #628]	; (8006458 <__kernel_rem_pio2+0x698>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7fa f9ad 	bl	8000548 <__aeabi_dmul>
 80061ee:	f7fa fc45 	bl	8000a7c <__aeabi_d2iz>
 80061f2:	4680      	mov	r8, r0
 80061f4:	f7fa f93e 	bl	8000474 <__aeabi_i2d>
 80061f8:	4b96      	ldr	r3, [pc, #600]	; (8006454 <__kernel_rem_pio2+0x694>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7fa f9a4 	bl	8000548 <__aeabi_dmul>
 8006200:	460b      	mov	r3, r1
 8006202:	4602      	mov	r2, r0
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	f7f9 ffe6 	bl	80001d8 <__aeabi_dsub>
 800620c:	f7fa fc36 	bl	8000a7c <__aeabi_d2iz>
 8006210:	1c65      	adds	r5, r4, #1
 8006212:	ab0c      	add	r3, sp, #48	; 0x30
 8006214:	f10a 0a18 	add.w	sl, sl, #24
 8006218:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800621c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006220:	e71f      	b.n	8006062 <__kernel_rem_pio2+0x2a2>
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	f7fa fc29 	bl	8000a7c <__aeabi_d2iz>
 800622a:	ab0c      	add	r3, sp, #48	; 0x30
 800622c:	4625      	mov	r5, r4
 800622e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006232:	e716      	b.n	8006062 <__kernel_rem_pio2+0x2a2>
 8006234:	ab0c      	add	r3, sp, #48	; 0x30
 8006236:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800623a:	f7fa f91b 	bl	8000474 <__aeabi_i2d>
 800623e:	4632      	mov	r2, r6
 8006240:	463b      	mov	r3, r7
 8006242:	f7fa f981 	bl	8000548 <__aeabi_dmul>
 8006246:	4642      	mov	r2, r8
 8006248:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800624c:	464b      	mov	r3, r9
 800624e:	4630      	mov	r0, r6
 8006250:	4639      	mov	r1, r7
 8006252:	f7fa f979 	bl	8000548 <__aeabi_dmul>
 8006256:	3c01      	subs	r4, #1
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	e713      	b.n	8006086 <__kernel_rem_pio2+0x2c6>
 800625e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006262:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006266:	f7fa f96f 	bl	8000548 <__aeabi_dmul>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4648      	mov	r0, r9
 8006270:	4651      	mov	r1, sl
 8006272:	f7f9 ffb3 	bl	80001dc <__adddf3>
 8006276:	3701      	adds	r7, #1
 8006278:	4681      	mov	r9, r0
 800627a:	468a      	mov	sl, r1
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	429f      	cmp	r7, r3
 8006280:	dc02      	bgt.n	8006288 <__kernel_rem_pio2+0x4c8>
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	429f      	cmp	r7, r3
 8006286:	ddea      	ble.n	800625e <__kernel_rem_pio2+0x49e>
 8006288:	9a06      	ldr	r2, [sp, #24]
 800628a:	ab48      	add	r3, sp, #288	; 0x120
 800628c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006290:	e9c6 9a00 	strd	r9, sl, [r6]
 8006294:	3c01      	subs	r4, #1
 8006296:	e6fa      	b.n	800608e <__kernel_rem_pio2+0x2ce>
 8006298:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800629a:	2b02      	cmp	r3, #2
 800629c:	dc0b      	bgt.n	80062b6 <__kernel_rem_pio2+0x4f6>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc39      	bgt.n	8006316 <__kernel_rem_pio2+0x556>
 80062a2:	d05d      	beq.n	8006360 <__kernel_rem_pio2+0x5a0>
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	f003 0007 	and.w	r0, r3, #7
 80062aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80062ae:	ecbd 8b02 	vpop	{d8}
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d1f3      	bne.n	80062a4 <__kernel_rem_pio2+0x4e4>
 80062bc:	9b05      	ldr	r3, [sp, #20]
 80062be:	9500      	str	r5, [sp, #0]
 80062c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80062c4:	eb0d 0403 	add.w	r4, sp, r3
 80062c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80062cc:	46a2      	mov	sl, r4
 80062ce:	9b00      	ldr	r3, [sp, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f1aa 0a08 	sub.w	sl, sl, #8
 80062d6:	dc69      	bgt.n	80063ac <__kernel_rem_pio2+0x5ec>
 80062d8:	46aa      	mov	sl, r5
 80062da:	f1ba 0f01 	cmp.w	sl, #1
 80062de:	f1a4 0408 	sub.w	r4, r4, #8
 80062e2:	f300 8083 	bgt.w	80063ec <__kernel_rem_pio2+0x62c>
 80062e6:	9c05      	ldr	r4, [sp, #20]
 80062e8:	ab48      	add	r3, sp, #288	; 0x120
 80062ea:	441c      	add	r4, r3
 80062ec:	2000      	movs	r0, #0
 80062ee:	2100      	movs	r1, #0
 80062f0:	2d01      	cmp	r5, #1
 80062f2:	f300 809a 	bgt.w	800642a <__kernel_rem_pio2+0x66a>
 80062f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80062fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80062fe:	f1bb 0f00 	cmp.w	fp, #0
 8006302:	f040 8098 	bne.w	8006436 <__kernel_rem_pio2+0x676>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	e9c3 7800 	strd	r7, r8, [r3]
 800630c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006310:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006314:	e7c6      	b.n	80062a4 <__kernel_rem_pio2+0x4e4>
 8006316:	9e05      	ldr	r6, [sp, #20]
 8006318:	ab48      	add	r3, sp, #288	; 0x120
 800631a:	441e      	add	r6, r3
 800631c:	462c      	mov	r4, r5
 800631e:	2000      	movs	r0, #0
 8006320:	2100      	movs	r1, #0
 8006322:	2c00      	cmp	r4, #0
 8006324:	da33      	bge.n	800638e <__kernel_rem_pio2+0x5ce>
 8006326:	f1bb 0f00 	cmp.w	fp, #0
 800632a:	d036      	beq.n	800639a <__kernel_rem_pio2+0x5da>
 800632c:	4602      	mov	r2, r0
 800632e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006332:	9c04      	ldr	r4, [sp, #16]
 8006334:	e9c4 2300 	strd	r2, r3, [r4]
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006340:	f7f9 ff4a 	bl	80001d8 <__aeabi_dsub>
 8006344:	ae4a      	add	r6, sp, #296	; 0x128
 8006346:	2401      	movs	r4, #1
 8006348:	42a5      	cmp	r5, r4
 800634a:	da29      	bge.n	80063a0 <__kernel_rem_pio2+0x5e0>
 800634c:	f1bb 0f00 	cmp.w	fp, #0
 8006350:	d002      	beq.n	8006358 <__kernel_rem_pio2+0x598>
 8006352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006356:	4619      	mov	r1, r3
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800635e:	e7a1      	b.n	80062a4 <__kernel_rem_pio2+0x4e4>
 8006360:	9c05      	ldr	r4, [sp, #20]
 8006362:	ab48      	add	r3, sp, #288	; 0x120
 8006364:	441c      	add	r4, r3
 8006366:	2000      	movs	r0, #0
 8006368:	2100      	movs	r1, #0
 800636a:	2d00      	cmp	r5, #0
 800636c:	da09      	bge.n	8006382 <__kernel_rem_pio2+0x5c2>
 800636e:	f1bb 0f00 	cmp.w	fp, #0
 8006372:	d002      	beq.n	800637a <__kernel_rem_pio2+0x5ba>
 8006374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006378:	4619      	mov	r1, r3
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	e9c3 0100 	strd	r0, r1, [r3]
 8006380:	e790      	b.n	80062a4 <__kernel_rem_pio2+0x4e4>
 8006382:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006386:	f7f9 ff29 	bl	80001dc <__adddf3>
 800638a:	3d01      	subs	r5, #1
 800638c:	e7ed      	b.n	800636a <__kernel_rem_pio2+0x5aa>
 800638e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006392:	f7f9 ff23 	bl	80001dc <__adddf3>
 8006396:	3c01      	subs	r4, #1
 8006398:	e7c3      	b.n	8006322 <__kernel_rem_pio2+0x562>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	e7c8      	b.n	8006332 <__kernel_rem_pio2+0x572>
 80063a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80063a4:	f7f9 ff1a 	bl	80001dc <__adddf3>
 80063a8:	3401      	adds	r4, #1
 80063aa:	e7cd      	b.n	8006348 <__kernel_rem_pio2+0x588>
 80063ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80063b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80063b4:	9b00      	ldr	r3, [sp, #0]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4632      	mov	r2, r6
 80063bc:	463b      	mov	r3, r7
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	f7f9 ff0b 	bl	80001dc <__adddf3>
 80063c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7f9 ff01 	bl	80001d8 <__aeabi_dsub>
 80063d6:	4632      	mov	r2, r6
 80063d8:	463b      	mov	r3, r7
 80063da:	f7f9 feff 	bl	80001dc <__adddf3>
 80063de:	ed9d 7b06 	vldr	d7, [sp, #24]
 80063e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063e6:	ed8a 7b00 	vstr	d7, [sl]
 80063ea:	e770      	b.n	80062ce <__kernel_rem_pio2+0x50e>
 80063ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80063f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80063f4:	4640      	mov	r0, r8
 80063f6:	4632      	mov	r2, r6
 80063f8:	463b      	mov	r3, r7
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7f9 feee 	bl	80001dc <__adddf3>
 8006400:	e9cd 0100 	strd	r0, r1, [sp]
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	f7f9 fee4 	bl	80001d8 <__aeabi_dsub>
 8006410:	4632      	mov	r2, r6
 8006412:	463b      	mov	r3, r7
 8006414:	f7f9 fee2 	bl	80001dc <__adddf3>
 8006418:	ed9d 7b00 	vldr	d7, [sp]
 800641c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006420:	ed84 7b00 	vstr	d7, [r4]
 8006424:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006428:	e757      	b.n	80062da <__kernel_rem_pio2+0x51a>
 800642a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800642e:	f7f9 fed5 	bl	80001dc <__adddf3>
 8006432:	3d01      	subs	r5, #1
 8006434:	e75c      	b.n	80062f0 <__kernel_rem_pio2+0x530>
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	9a04      	ldr	r2, [sp, #16]
 800643a:	601f      	str	r7, [r3, #0]
 800643c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006440:	605c      	str	r4, [r3, #4]
 8006442:	609d      	str	r5, [r3, #8]
 8006444:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006448:	60d3      	str	r3, [r2, #12]
 800644a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800644e:	6110      	str	r0, [r2, #16]
 8006450:	6153      	str	r3, [r2, #20]
 8006452:	e727      	b.n	80062a4 <__kernel_rem_pio2+0x4e4>
 8006454:	41700000 	.word	0x41700000
 8006458:	3e700000 	.word	0x3e700000
 800645c:	00000000 	.word	0x00000000

08006460 <scalbn>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	ec55 4b10 	vmov	r4, r5, d0
 8006466:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800646a:	4606      	mov	r6, r0
 800646c:	462b      	mov	r3, r5
 800646e:	b999      	cbnz	r1, 8006498 <scalbn+0x38>
 8006470:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006474:	4323      	orrs	r3, r4
 8006476:	d03f      	beq.n	80064f8 <scalbn+0x98>
 8006478:	4b35      	ldr	r3, [pc, #212]	; (8006550 <scalbn+0xf0>)
 800647a:	4629      	mov	r1, r5
 800647c:	ee10 0a10 	vmov	r0, s0
 8006480:	2200      	movs	r2, #0
 8006482:	f7fa f861 	bl	8000548 <__aeabi_dmul>
 8006486:	4b33      	ldr	r3, [pc, #204]	; (8006554 <scalbn+0xf4>)
 8006488:	429e      	cmp	r6, r3
 800648a:	4604      	mov	r4, r0
 800648c:	460d      	mov	r5, r1
 800648e:	da10      	bge.n	80064b2 <scalbn+0x52>
 8006490:	a327      	add	r3, pc, #156	; (adr r3, 8006530 <scalbn+0xd0>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	e01f      	b.n	80064d8 <scalbn+0x78>
 8006498:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800649c:	4291      	cmp	r1, r2
 800649e:	d10c      	bne.n	80064ba <scalbn+0x5a>
 80064a0:	ee10 2a10 	vmov	r2, s0
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7f9 fe98 	bl	80001dc <__adddf3>
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	e022      	b.n	80064f8 <scalbn+0x98>
 80064b2:	460b      	mov	r3, r1
 80064b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80064b8:	3936      	subs	r1, #54	; 0x36
 80064ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80064be:	4296      	cmp	r6, r2
 80064c0:	dd0d      	ble.n	80064de <scalbn+0x7e>
 80064c2:	2d00      	cmp	r5, #0
 80064c4:	a11c      	add	r1, pc, #112	; (adr r1, 8006538 <scalbn+0xd8>)
 80064c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ca:	da02      	bge.n	80064d2 <scalbn+0x72>
 80064cc:	a11c      	add	r1, pc, #112	; (adr r1, 8006540 <scalbn+0xe0>)
 80064ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d2:	a319      	add	r3, pc, #100	; (adr r3, 8006538 <scalbn+0xd8>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7fa f836 	bl	8000548 <__aeabi_dmul>
 80064dc:	e7e6      	b.n	80064ac <scalbn+0x4c>
 80064de:	1872      	adds	r2, r6, r1
 80064e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064e4:	428a      	cmp	r2, r1
 80064e6:	dcec      	bgt.n	80064c2 <scalbn+0x62>
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	dd08      	ble.n	80064fe <scalbn+0x9e>
 80064ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064f8:	ec45 4b10 	vmov	d0, r4, r5
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006502:	da08      	bge.n	8006516 <scalbn+0xb6>
 8006504:	2d00      	cmp	r5, #0
 8006506:	a10a      	add	r1, pc, #40	; (adr r1, 8006530 <scalbn+0xd0>)
 8006508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800650c:	dac0      	bge.n	8006490 <scalbn+0x30>
 800650e:	a10e      	add	r1, pc, #56	; (adr r1, 8006548 <scalbn+0xe8>)
 8006510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006514:	e7bc      	b.n	8006490 <scalbn+0x30>
 8006516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800651a:	3236      	adds	r2, #54	; 0x36
 800651c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006524:	4620      	mov	r0, r4
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <scalbn+0xf8>)
 8006528:	2200      	movs	r2, #0
 800652a:	e7d5      	b.n	80064d8 <scalbn+0x78>
 800652c:	f3af 8000 	nop.w
 8006530:	c2f8f359 	.word	0xc2f8f359
 8006534:	01a56e1f 	.word	0x01a56e1f
 8006538:	8800759c 	.word	0x8800759c
 800653c:	7e37e43c 	.word	0x7e37e43c
 8006540:	8800759c 	.word	0x8800759c
 8006544:	fe37e43c 	.word	0xfe37e43c
 8006548:	c2f8f359 	.word	0xc2f8f359
 800654c:	81a56e1f 	.word	0x81a56e1f
 8006550:	43500000 	.word	0x43500000
 8006554:	ffff3cb0 	.word	0xffff3cb0
 8006558:	3c900000 	.word	0x3c900000
 800655c:	00000000 	.word	0x00000000

08006560 <floor>:
 8006560:	ec51 0b10 	vmov	r0, r1, d0
 8006564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006570:	2e13      	cmp	r6, #19
 8006572:	ee10 5a10 	vmov	r5, s0
 8006576:	ee10 8a10 	vmov	r8, s0
 800657a:	460c      	mov	r4, r1
 800657c:	dc31      	bgt.n	80065e2 <floor+0x82>
 800657e:	2e00      	cmp	r6, #0
 8006580:	da14      	bge.n	80065ac <floor+0x4c>
 8006582:	a333      	add	r3, pc, #204	; (adr r3, 8006650 <floor+0xf0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fe28 	bl	80001dc <__adddf3>
 800658c:	2200      	movs	r2, #0
 800658e:	2300      	movs	r3, #0
 8006590:	f7fa fa6a 	bl	8000a68 <__aeabi_dcmpgt>
 8006594:	b138      	cbz	r0, 80065a6 <floor+0x46>
 8006596:	2c00      	cmp	r4, #0
 8006598:	da53      	bge.n	8006642 <floor+0xe2>
 800659a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800659e:	4325      	orrs	r5, r4
 80065a0:	d052      	beq.n	8006648 <floor+0xe8>
 80065a2:	4c2d      	ldr	r4, [pc, #180]	; (8006658 <floor+0xf8>)
 80065a4:	2500      	movs	r5, #0
 80065a6:	4621      	mov	r1, r4
 80065a8:	4628      	mov	r0, r5
 80065aa:	e024      	b.n	80065f6 <floor+0x96>
 80065ac:	4f2b      	ldr	r7, [pc, #172]	; (800665c <floor+0xfc>)
 80065ae:	4137      	asrs	r7, r6
 80065b0:	ea01 0307 	and.w	r3, r1, r7
 80065b4:	4303      	orrs	r3, r0
 80065b6:	d01e      	beq.n	80065f6 <floor+0x96>
 80065b8:	a325      	add	r3, pc, #148	; (adr r3, 8006650 <floor+0xf0>)
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f7f9 fe0d 	bl	80001dc <__adddf3>
 80065c2:	2200      	movs	r2, #0
 80065c4:	2300      	movs	r3, #0
 80065c6:	f7fa fa4f 	bl	8000a68 <__aeabi_dcmpgt>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d0eb      	beq.n	80065a6 <floor+0x46>
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	bfbe      	ittt	lt
 80065d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80065d6:	4133      	asrlt	r3, r6
 80065d8:	18e4      	addlt	r4, r4, r3
 80065da:	ea24 0407 	bic.w	r4, r4, r7
 80065de:	2500      	movs	r5, #0
 80065e0:	e7e1      	b.n	80065a6 <floor+0x46>
 80065e2:	2e33      	cmp	r6, #51	; 0x33
 80065e4:	dd0b      	ble.n	80065fe <floor+0x9e>
 80065e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065ea:	d104      	bne.n	80065f6 <floor+0x96>
 80065ec:	ee10 2a10 	vmov	r2, s0
 80065f0:	460b      	mov	r3, r1
 80065f2:	f7f9 fdf3 	bl	80001dc <__adddf3>
 80065f6:	ec41 0b10 	vmov	d0, r0, r1
 80065fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006602:	f04f 37ff 	mov.w	r7, #4294967295
 8006606:	40df      	lsrs	r7, r3
 8006608:	4238      	tst	r0, r7
 800660a:	d0f4      	beq.n	80065f6 <floor+0x96>
 800660c:	a310      	add	r3, pc, #64	; (adr r3, 8006650 <floor+0xf0>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 fde3 	bl	80001dc <__adddf3>
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	f7fa fa25 	bl	8000a68 <__aeabi_dcmpgt>
 800661e:	2800      	cmp	r0, #0
 8006620:	d0c1      	beq.n	80065a6 <floor+0x46>
 8006622:	2c00      	cmp	r4, #0
 8006624:	da0a      	bge.n	800663c <floor+0xdc>
 8006626:	2e14      	cmp	r6, #20
 8006628:	d101      	bne.n	800662e <floor+0xce>
 800662a:	3401      	adds	r4, #1
 800662c:	e006      	b.n	800663c <floor+0xdc>
 800662e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006632:	2301      	movs	r3, #1
 8006634:	40b3      	lsls	r3, r6
 8006636:	441d      	add	r5, r3
 8006638:	45a8      	cmp	r8, r5
 800663a:	d8f6      	bhi.n	800662a <floor+0xca>
 800663c:	ea25 0507 	bic.w	r5, r5, r7
 8006640:	e7b1      	b.n	80065a6 <floor+0x46>
 8006642:	2500      	movs	r5, #0
 8006644:	462c      	mov	r4, r5
 8006646:	e7ae      	b.n	80065a6 <floor+0x46>
 8006648:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800664c:	e7ab      	b.n	80065a6 <floor+0x46>
 800664e:	bf00      	nop
 8006650:	8800759c 	.word	0x8800759c
 8006654:	7e37e43c 	.word	0x7e37e43c
 8006658:	bff00000 	.word	0xbff00000
 800665c:	000fffff 	.word	0x000fffff

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
