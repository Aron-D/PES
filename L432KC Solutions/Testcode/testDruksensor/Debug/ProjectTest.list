
ProjectTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b940  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800bad0  0800bad0  0001bad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea0  0800bea0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bea8  0800bea8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800beb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  2000006c  0800bf1c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  0800bf1c  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000175c6  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e1f  00000000  00000000  000376a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ed  00000000  00000000  0003ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237dd  00000000  00000000  0003cb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a42  00000000  00000000  00060332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df0ef  00000000  00000000  00079d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ba8  00000000  00000000  00158e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015fa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bab8 	.word	0x0800bab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800bab8 	.word	0x0800bab8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b970 	b.w	8000f54 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	460d      	mov	r5, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	460f      	mov	r7, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0xe2>
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	b143      	cbz	r3, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	f1c3 0220 	rsb	r2, r3, #32
 8000cb0:	409f      	lsls	r7, r3
 8000cb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	409c      	lsls	r4, r3
 8000cba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cbe:	fa1f f58c 	uxth.w	r5, ip
 8000cc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc6:	0c22      	lsrs	r2, r4, #16
 8000cc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ccc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cd0:	fb01 f005 	mul.w	r0, r1, r5
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ce0:	f080 811c 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f240 8119 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000cea:	3902      	subs	r1, #2
 8000cec:	4462      	add	r2, ip
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	b2a4      	uxth	r4, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfe:	fb00 f505 	mul.w	r5, r0, r5
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x90>
 8000d06:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0e:	f080 8107 	bcs.w	8000f20 <__udivmoddi4+0x294>
 8000d12:	42a5      	cmp	r5, r4
 8000d14:	f240 8104 	bls.w	8000f20 <__udivmoddi4+0x294>
 8000d18:	4464      	add	r4, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11e      	cbz	r6, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40dc      	lsrs	r4, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0xbc>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80ed 	beq.w	8000f16 <__udivmoddi4+0x28a>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d149      	bne.n	8000de4 <__udivmoddi4+0x158>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d302      	bcc.n	8000d5a <__udivmoddi4+0xce>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	f200 80f8 	bhi.w	8000f4a <__udivmoddi4+0x2be>
 8000d5a:	1a84      	subs	r4, r0, r2
 8000d5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	4617      	mov	r7, r2
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d0e2      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	e9c6 4700 	strd	r4, r7, [r6]
 8000d6c:	e7df      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xe6>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f382 	clz	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7c:	1a8a      	subs	r2, r1, r2
 8000d7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	2101      	movs	r1, #1
 8000d88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d90:	0c22      	lsrs	r2, r4, #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb0e f005 	mul.w	r0, lr, r5
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000d9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000da2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4290      	cmp	r0, r2
 8000daa:	f200 80cb 	bhi.w	8000f44 <__udivmoddi4+0x2b8>
 8000dae:	4645      	mov	r5, r8
 8000db0:	1a12      	subs	r2, r2, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x14e>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x14c>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f200 80bb 	bhi.w	8000f4e <__udivmoddi4+0x2c2>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000de2:	e79f      	b.n	8000d24 <__udivmoddi4+0x98>
 8000de4:	f1c1 0720 	rsb	r7, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df2:	fa05 f401 	lsl.w	r4, r5, r1
 8000df6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfa:	40fd      	lsrs	r5, r7
 8000dfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb08 f50e 	mul.w	r5, r8, lr
 8000e18:	42a5      	cmp	r5, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e2c:	f080 8088 	bcs.w	8000f40 <__udivmoddi4+0x2b4>
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	f240 8085 	bls.w	8000f40 <__udivmoddi4+0x2b4>
 8000e36:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3a:	4464      	add	r4, ip
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	b29d      	uxth	r5, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e5c:	d26c      	bcs.n	8000f38 <__udivmoddi4+0x2ac>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	d96a      	bls.n	8000f38 <__udivmoddi4+0x2ac>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	42ac      	cmp	r4, r5
 8000e74:	46c8      	mov	r8, r9
 8000e76:	46ae      	mov	lr, r5
 8000e78:	d356      	bcc.n	8000f28 <__udivmoddi4+0x29c>
 8000e7a:	d053      	beq.n	8000f24 <__udivmoddi4+0x298>
 8000e7c:	b156      	cbz	r6, 8000e94 <__udivmoddi4+0x208>
 8000e7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e82:	eb64 040e 	sbc.w	r4, r4, lr
 8000e86:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8a:	40ca      	lsrs	r2, r1
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4317      	orrs	r7, r2
 8000e90:	e9c6 7400 	strd	r7, r4, [r6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eac:	409d      	lsls	r5, r3
 8000eae:	432a      	orrs	r2, r5
 8000eb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb4:	fa1f fe8c 	uxth.w	lr, ip
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ec0:	0c11      	lsrs	r1, r2, #16
 8000ec2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eca:	428d      	cmp	r5, r1
 8000ecc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x258>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eda:	d22f      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000edc:	428d      	cmp	r5, r1
 8000ede:	d92d      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4461      	add	r1, ip
 8000ee4:	1b49      	subs	r1, r1, r5
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eec:	fb07 1115 	mls	r1, r7, r5, r1
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x282>
 8000efc:	eb1c 0202 	adds.w	r2, ip, r2
 8000f00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f04:	d216      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000f06:	4291      	cmp	r1, r2
 8000f08:	d914      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	1a52      	subs	r2, r2, r1
 8000f10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f14:	e738      	b.n	8000d88 <__udivmoddi4+0xfc>
 8000f16:	4631      	mov	r1, r6
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e708      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	e6e6      	b.n	8000cee <__udivmoddi4+0x62>
 8000f20:	4610      	mov	r0, r2
 8000f22:	e6fb      	b.n	8000d1c <__udivmoddi4+0x90>
 8000f24:	4548      	cmp	r0, r9
 8000f26:	d2a9      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f28:	ebb9 0802 	subs.w	r8, r9, r2
 8000f2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f30:	3b01      	subs	r3, #1
 8000f32:	e7a3      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f34:	4645      	mov	r5, r8
 8000f36:	e7ea      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f38:	462b      	mov	r3, r5
 8000f3a:	e794      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e7d1      	b.n	8000ee4 <__udivmoddi4+0x258>
 8000f40:	46d0      	mov	r8, sl
 8000f42:	e77b      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f44:	3d02      	subs	r5, #2
 8000f46:	4462      	add	r2, ip
 8000f48:	e732      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e70a      	b.n	8000d64 <__udivmoddi4+0xd8>
 8000f4e:	4464      	add	r4, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e742      	b.n	8000dda <__udivmoddi4+0x14e>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e020      	b.n	8000fae <calculate_crc+0x56>
		crc ^= data[i];
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4413      	add	r3, r2
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	4053      	eors	r3, r2
 8000f78:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e010      	b.n	8000fa2 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da06      	bge.n	8000f96 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000f92:	75fb      	strb	r3, [r7, #23]
 8000f94:	e002      	b.n	8000f9c <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	d9eb      	bls.n	8000f80 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	3301      	adds	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3da      	bcc.n	8000f6c <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	733b      	strb	r3, [r7, #12]
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	889b      	ldrh	r3, [r3, #4]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b299      	uxth	r1, r3
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	231e      	movs	r3, #30
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f003 f86b 	bl	80040d0 <HAL_I2C_Master_Transmit>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001000:	2300      	movs	r3, #0
 8001002:	e000      	b.n	8001006 <sht3x_send_command+0x42>
	}

	return true;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	460a      	mov	r2, r1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	4613      	mov	r3, r2
 800101c:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29a      	uxth	r2, r3
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <sht3x_init+0x1e>
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <sht3x_init+0x74>)
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <sht3x_init+0x78>)
 8001052:	2138      	movs	r1, #56	; 0x38
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <sht3x_init+0x7c>)
 8001056:	f008 fad1 	bl	80095fc <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b299      	uxth	r1, r3
 8001066:	231e      	movs	r3, #30
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2303      	movs	r3, #3
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800107a:	f003 faf5 	bl	8004668 <HAL_I2C_Mem_Read>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001084:	2300      	movs	r3, #0
 8001086:	e00e      	b.n	80010a6 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2102      	movs	r1, #2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff62 	bl	8000f58 <calculate_crc>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <sht3x_init+0x68>
		return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <sht3x_init+0x6a>
	}

	return true;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800bad0 	.word	0x0800bad0
 80010b4:	0800bc04 	.word	0x0800bc04
 80010b8:	0800bb10 	.word	0x0800bb10

080010bc <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80010c8:	f642 4106 	movw	r1, #11270	; 0x2c06
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff ff79 	bl	8000fc4 <sht3x_send_command>

	HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f001 f9f0 	bl	80024b8 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f107 0214 	add.w	r2, r7, #20
 80010e8:	231e      	movs	r3, #30
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2306      	movs	r3, #6
 80010ee:	f003 f907 	bl	8004300 <HAL_I2C_Master_Receive>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e04f      	b.n	800119c <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff28 	bl	8000f58 <calculate_crc>
 8001108:	4603      	mov	r3, r0
 800110a:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	3303      	adds	r3, #3
 8001112:	2102      	movs	r1, #2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff1f 	bl	8000f58 <calculate_crc>
 800111a:	4603      	mov	r3, r0
 800111c:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 800111e:	7dbb      	ldrb	r3, [r7, #22]
 8001120:	7ffa      	ldrb	r2, [r7, #31]
 8001122:	429a      	cmp	r2, r3
 8001124:	d103      	bne.n	800112e <sht3x_read_temperature_and_humidity+0x72>
 8001126:	7e7b      	ldrb	r3, [r7, #25]
 8001128:	7fba      	ldrb	r2, [r7, #30]
 800112a:	429a      	cmp	r2, r3
 800112c:	d001      	beq.n	8001132 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 800112e:	2300      	movs	r3, #0
 8001130:	e034      	b.n	800119c <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8001132:	7d3b      	ldrb	r3, [r7, #20]
 8001134:	7d7a      	ldrb	r2, [r7, #21]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff68 	bl	800100e <uint8_to_uint16>
 800113e:	4603      	mov	r3, r0
 8001140:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	7e3a      	ldrb	r2, [r7, #24]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff60 	bl	800100e <uint8_to_uint16>
 800114e:	4603      	mov	r3, r0
 8001150:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001152:	8bbb      	ldrh	r3, [r7, #28]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011a4 <sht3x_read_temperature_and_humidity+0xe8>
 8001160:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001164:	eddf 6a10 	vldr	s13, [pc, #64]	; 80011a8 <sht3x_read_temperature_and_humidity+0xec>
 8001168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80011ac <sht3x_read_temperature_and_humidity+0xf0>
 8001170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800117a:	8b7b      	ldrh	r3, [r7, #26]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001184:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80011b0 <sht3x_read_temperature_and_humidity+0xf4>
 8001188:	ee27 7a87 	vmul.f32	s14, s15, s14
 800118c:	eddf 6a06 	vldr	s13, [pc, #24]	; 80011a8 <sht3x_read_temperature_and_humidity+0xec>
 8001190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edc3 7a00 	vstr	s15, [r3]

	return true;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	432f0000 	.word	0x432f0000
 80011a8:	477fff00 	.word	0x477fff00
 80011ac:	42340000 	.word	0x42340000
 80011b0:	42c80000 	.word	0x42c80000

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
//	HAL_StatusTypeDef ret;

//	int16_t val;
//	float temp_c;

	sht3x_handle_t handle = {
 80011ba:	4a66      	ldr	r2, [pc, #408]	; (8001354 <main+0x1a0>)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c2:	e883 0003 	stmia.w	r3, {r0, r1}
	    .i2c_handle = &hi2c3,
	    .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
	};

	if (!sht3x_init(&handle)) {
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff37 	bl	800103c <sht3x_init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <main+0x2c>
	    printf("SHT3x access failed.\n\r");
 80011da:	485f      	ldr	r0, [pc, #380]	; (8001358 <main+0x1a4>)
 80011dc:	f008 fb00 	bl	80097e0 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f001 f8f5 	bl	80023ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f8d4 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 faf4 	bl	80017d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 fad4 	bl	8001798 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 faa2 	bl	8001738 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011f4:	f000 f992 	bl	800151c <MX_I2C1_Init>
  MX_I2C3_Init();
 80011f8:	f000 f9d0 	bl	800159c <MX_I2C3_Init>
  MX_ADC1_Init();
 80011fc:	f000 f92a 	bl	8001454 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001200:	f000 fa0c 	bl	800161c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, "Hallo2!\n\r", 9, HAL_MAX_DELAY);
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2209      	movs	r2, #9
 800120a:	4954      	ldr	r1, [pc, #336]	; (800135c <main+0x1a8>)
 800120c:	4854      	ldr	r0, [pc, #336]	; (8001360 <main+0x1ac>)
 800120e:	f007 fd29 	bl	8008c64 <HAL_UART_Transmit>
  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	4953      	ldr	r1, [pc, #332]	; (8001364 <main+0x1b0>)
 8001216:	4854      	ldr	r0, [pc, #336]	; (8001368 <main+0x1b4>)
 8001218:	f003 f9d6 	bl	80045c8 <HAL_I2C_Slave_Receive_IT>

//    HAL_TIM_Base_Start(&TIM_HANDLE);
//    HAL_TIM_PWM_Start(&TIM_HANDLE, TIM_CHANNEL);
//    HAL_TIM_PWM_Start_DMA(&TIM_HANDLE, TIM_CHANNEL, fData, sizeof(fData) / sizeof(uint32_t));

  	  Set_LED(0, 255, 0, 0);
 800121c:	2300      	movs	r3, #0
 800121e:	2200      	movs	r2, #0
 8001220:	21ff      	movs	r1, #255	; 0xff
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fbd0 	bl	80019c8 <Set_LED>
  	  Set_LED(2, 255, 0, 0);
 8001228:	2300      	movs	r3, #0
 800122a:	2200      	movs	r2, #0
 800122c:	21ff      	movs	r1, #255	; 0xff
 800122e:	2002      	movs	r0, #2
 8001230:	f000 fbca 	bl	80019c8 <Set_LED>
  	  Set_LED(1, 255, 0, 0);
 8001234:	2300      	movs	r3, #0
 8001236:	2200      	movs	r2, #0
 8001238:	21ff      	movs	r1, #255	; 0xff
 800123a:	2001      	movs	r0, #1
 800123c:	f000 fbc4 	bl	80019c8 <Set_LED>
      Set_LED(3, 255, 0, 0);
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	21ff      	movs	r1, #255	; 0xff
 8001246:	2003      	movs	r0, #3
 8001248:	f000 fbbe 	bl	80019c8 <Set_LED>
      Set_LED(4, 255, 0, 0);
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	21ff      	movs	r1, #255	; 0xff
 8001252:	2004      	movs	r0, #4
 8001254:	f000 fbb8 	bl	80019c8 <Set_LED>
      Set_LED(5, 255, 0, 0);
 8001258:	2300      	movs	r3, #0
 800125a:	2200      	movs	r2, #0
 800125c:	21ff      	movs	r1, #255	; 0xff
 800125e:	2005      	movs	r0, #5
 8001260:	f000 fbb2 	bl	80019c8 <Set_LED>
      Set_LED(6, 255, 0, 0);
 8001264:	2300      	movs	r3, #0
 8001266:	2200      	movs	r2, #0
 8001268:	21ff      	movs	r1, #255	; 0xff
 800126a:	2006      	movs	r0, #6
 800126c:	f000 fbac 	bl	80019c8 <Set_LED>
      Set_LED(7, 255, 0, 0);
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	21ff      	movs	r1, #255	; 0xff
 8001276:	2007      	movs	r0, #7
 8001278:	f000 fba6 	bl	80019c8 <Set_LED>
      Set_LED(8, 255, 0, 0);
 800127c:	2300      	movs	r3, #0
 800127e:	2200      	movs	r2, #0
 8001280:	21ff      	movs	r1, #255	; 0xff
 8001282:	2008      	movs	r0, #8
 8001284:	f000 fba0 	bl	80019c8 <Set_LED>
      Set_LED(9, 255, 0, 0);
 8001288:	2300      	movs	r3, #0
 800128a:	2200      	movs	r2, #0
 800128c:	21ff      	movs	r1, #255	; 0xff
 800128e:	2009      	movs	r0, #9
 8001290:	f000 fb9a 	bl	80019c8 <Set_LED>
//
//	     ARGB_SetBrightness(100);  // Set global brightness to 40%
//
//	     ARGB_SetRGB(2, 0, 255, 0); // Set LED №3 with 255 Green
//  }
	  for (int i=0; i<64; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <main+0xfc>
	  	  {
	  		  Set_Brightness(i);
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f000 fbc4 	bl	8001a28 <Set_Brightness>
	  		  WS2812_Send();
 80012a0:	f000 fc44 	bl	8001b2c <WS2812_Send>
	  		  HAL_Delay (50);
 80012a4:	2032      	movs	r0, #50	; 0x32
 80012a6:	f001 f907 	bl	80024b8 <HAL_Delay>
	  for (int i=0; i<64; i++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b3f      	cmp	r3, #63	; 0x3f
 80012b4:	ddf1      	ble.n	800129a <main+0xe6>
	  	  }

	  	  for (int i=64; i>=0; i--)
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	e00a      	b.n	80012d2 <main+0x11e>
	  	  {
	  		  Set_Brightness(i);
 80012bc:	6938      	ldr	r0, [r7, #16]
 80012be:	f000 fbb3 	bl	8001a28 <Set_Brightness>
	  		  WS2812_Send();
 80012c2:	f000 fc33 	bl	8001b2c <WS2812_Send>
	  		  HAL_Delay (50);
 80012c6:	2032      	movs	r0, #50	; 0x32
 80012c8:	f001 f8f6 	bl	80024b8 <HAL_Delay>
	  	  for (int i=64; i>=0; i--)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	daf1      	bge.n	80012bc <main+0x108>
	  	  }


	  HAL_UART_Transmit(&huart2, (uint8_t *)pwmData, 8, HAL_MAX_DELAY);
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2208      	movs	r2, #8
 80012de:	4923      	ldr	r1, [pc, #140]	; (800136c <main+0x1b8>)
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <main+0x1ac>)
 80012e2:	f007 fcbf 	bl	8008c64 <HAL_UART_Transmit>
//      HAL_Delay(1000);
//      WS2812B_SendColor(0, 0, 255); // Blauw
//      HAL_Delay(1000);

	  float humidity;
	  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	491e      	ldr	r1, [pc, #120]	; (8001364 <main+0x1b0>)
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <main+0x1b4>)
 80012ec:	f003 f96c 	bl	80045c8 <HAL_I2C_Slave_Receive_IT>
	  sht3x_read_temperature_and_humidity(&handle, &temp, &humidity);
 80012f0:	463a      	mov	r2, r7
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	491e      	ldr	r1, [pc, #120]	; (8001370 <main+0x1bc>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fee0 	bl	80010bc <sht3x_read_temperature_and_humidity>
	  sprintf((char*) buf, "%u", (unsigned int) temp);
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <main+0x1bc>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	ee17 2a90 	vmov	r2, s15
 800130a:	491a      	ldr	r1, [pc, #104]	; (8001374 <main+0x1c0>)
 800130c:	481a      	ldr	r0, [pc, #104]	; (8001378 <main+0x1c4>)
 800130e:	f008 faad 	bl	800986c <siprintf>
	  //HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  //HAL_GPIO_TogglePin(LEDOUT_GPIO_Port, LEDOUT_Pin);
	  HAL_Delay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f001 f8d0 	bl	80024b8 <HAL_Delay>

	  //	nucleo druksensor aanmaak //

	    HAL_StatusTypeDef adcStatus;

	    adcStatus = HAL_ADC_Start(&hadc1);
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <main+0x1c8>)
 800131a:	f001 fbfb 	bl	8002b14 <HAL_ADC_Start>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]

	    adcStatus = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001322:	f04f 31ff 	mov.w	r1, #4294967295
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <main+0x1c8>)
 8001328:	f001 fc57 	bl	8002bda <HAL_ADC_PollForConversion>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]

	    pop = HAL_ADC_GetValue(&hadc1);
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <main+0x1c8>)
 8001332:	f001 fce1 	bl	8002cf8 <HAL_ADC_GetValue>
 8001336:	4603      	mov	r3, r0
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <main+0x1cc>)
 800133a:	6013      	str	r3, [r2, #0]

	    nummer = snprintf(buf2, sizeof(buf2), "Druksensor waarde: %lu\n\r", pop);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <main+0x1cc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <main+0x1d0>)
 8001342:	2132      	movs	r1, #50	; 0x32
 8001344:	4810      	ldr	r0, [pc, #64]	; (8001388 <main+0x1d4>)
 8001346:	f008 fa5d 	bl	8009804 <sniprintf>
 800134a:	4603      	mov	r3, r0
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <main+0x1d8>)
 800134e:	6013      	str	r3, [r2, #0]
  {
 8001350:	e7a0      	b.n	8001294 <main+0xe0>
 8001352:	bf00      	nop
 8001354:	0800bb68 	.word	0x0800bb68
 8001358:	0800bb24 	.word	0x0800bb24
 800135c:	0800bb3c 	.word	0x0800bb3c
 8001360:	20000228 	.word	0x20000228
 8001364:	200002b0 	.word	0x200002b0
 8001368:	200000ec 	.word	0x200000ec
 800136c:	2000034c 	.word	0x2000034c
 8001370:	20000000 	.word	0x20000000
 8001374:	0800bb48 	.word	0x0800bb48
 8001378:	200002b4 	.word	0x200002b4
 800137c:	20000088 	.word	0x20000088
 8001380:	200002c0 	.word	0x200002c0
 8001384:	0800bb4c 	.word	0x0800bb4c
 8001388:	200002c8 	.word	0x200002c8
 800138c:	200002c4 	.word	0x200002c4

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2244      	movs	r2, #68	; 0x44
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fac7 	bl	8009932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b6:	f005 f821 	bl	80063fc <HAL_PWREx_ControlVoltageScaling>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013c0:	f000 fc40 	bl	8001c44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013c4:	f004 fffc 	bl	80063c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <SystemClock_Config+0xc0>)
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <SystemClock_Config+0xc0>)
 80013d0:	f023 0318 	bic.w	r3, r3, #24
 80013d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013d8:	2314      	movs	r3, #20
 80013da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013f0:	2301      	movs	r3, #1
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80013f8:	2310      	movs	r3, #16
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f005 f84b 	bl	80064a8 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001418:	f000 fc14 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2303      	movs	r3, #3
 8001422:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fc4b 	bl	8006cd0 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001440:	f000 fc00 	bl	8001c44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001444:	f006 f85e 	bl	8007504 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001448:	bf00      	nop
 800144a:	3758      	adds	r7, #88	; 0x58
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000

08001454 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_ADC1_Init+0xbc>)
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <MX_ADC1_Init+0xc0>)
 800146e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_ADC1_Init+0xbc>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_ADC1_Init+0xbc>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_ADC1_Init+0xbc>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_ADC1_Init+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_ADC1_Init+0xbc>)
 800148a:	2204      	movs	r2, #4
 800148c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_ADC1_Init+0xbc>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_ADC1_Init+0xbc>)
 8001496:	2200      	movs	r2, #0
 8001498:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_ADC1_Init+0xbc>)
 800149c:	2201      	movs	r2, #1
 800149e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ca:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014cc:	f001 f9e0 	bl	8002890 <HAL_ADC_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80014d6:	f000 fbb5 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_ADC1_Init+0xc4>)
 80014dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014de:	2306      	movs	r3, #6
 80014e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014e6:	237f      	movs	r3, #127	; 0x7f
 80014e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ea:	2304      	movs	r3, #4
 80014ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_ADC1_Init+0xbc>)
 80014f8:	f001 fc0c 	bl	8002d14 <HAL_ADC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001502:	f000 fb9f 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000088 	.word	0x20000088
 8001514:	50040000 	.word	0x50040000
 8001518:	25b00200 	.word	0x25b00200

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_I2C1_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_I2C1_Init+0x74>)
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_I2C1_Init+0x7c>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_I2C1_Init+0x74>)
 800152e:	2220      	movs	r2, #32
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_I2C1_Init+0x74>)
 8001534:	2201      	movs	r2, #1
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <MX_I2C1_Init+0x74>)
 8001558:	f002 fd1e 	bl	8003f98 <HAL_I2C_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001562:	f000 fb6f 	bl	8001c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <MX_I2C1_Init+0x74>)
 800156a:	f004 fe91 	bl	8006290 <HAL_I2CEx_ConfigAnalogFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001574:	f000 fb66 	bl	8001c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_I2C1_Init+0x74>)
 800157c:	f004 fed3 	bl	8006326 <HAL_I2CEx_ConfigDigitalFilter>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001586:	f000 fb5d 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000ec 	.word	0x200000ec
 8001594:	40005400 	.word	0x40005400
 8001598:	00707cbb 	.word	0x00707cbb

0800159c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_I2C3_Init+0x74>)
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <MX_I2C3_Init+0x78>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_I2C3_Init+0x74>)
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <MX_I2C3_Init+0x7c>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_I2C3_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_I2C3_Init+0x74>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_I2C3_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_I2C3_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C3_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C3_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C3_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <MX_I2C3_Init+0x74>)
 80015d8:	f002 fcde 	bl	8003f98 <HAL_I2C_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015e2:	f000 fb2f 	bl	8001c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <MX_I2C3_Init+0x74>)
 80015ea:	f004 fe51 	bl	8006290 <HAL_I2CEx_ConfigAnalogFilter>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f000 fb26 	bl	8001c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_I2C3_Init+0x74>)
 80015fc:	f004 fe93 	bl	8006326 <HAL_I2CEx_ConfigDigitalFilter>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001606:	f000 fb1d 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000140 	.word	0x20000140
 8001614:	40005c00 	.word	0x40005c00
 8001618:	00707cbb 	.word	0x00707cbb

0800161c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	; 0x58
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	222c      	movs	r2, #44	; 0x2c
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f008 f972 	bl	8009932 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <MX_TIM1_Init+0x114>)
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <MX_TIM1_Init+0x118>)
 8001652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <MX_TIM1_Init+0x114>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <MX_TIM1_Init+0x114>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32-1;
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <MX_TIM1_Init+0x114>)
 8001662:	221f      	movs	r2, #31
 8001664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <MX_TIM1_Init+0x114>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <MX_TIM1_Init+0x114>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <MX_TIM1_Init+0x114>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001678:	482d      	ldr	r0, [pc, #180]	; (8001730 <MX_TIM1_Init+0x114>)
 800167a:	f006 f845 	bl	8007708 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001684:	f000 fade 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001694:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001698:	4619      	mov	r1, r3
 800169a:	4825      	ldr	r0, [pc, #148]	; (8001730 <MX_TIM1_Init+0x114>)
 800169c:	f007 f998 	bl	80089d0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80016a6:	f000 facd 	bl	8001c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 63;
 80016ae:	233f      	movs	r3, #63	; 0x3f
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ca:	2204      	movs	r2, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM1_Init+0x114>)
 80016d0:	f006 fc54 	bl	8007f7c <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016da:	f000 fab3 	bl	8001c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM1_Init+0x114>)
 8001714:	f007 f9c2 	bl	8008a9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800171e:	f000 fa91 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM1_Init+0x114>)
 8001724:	f000 fc4a 	bl	8001fbc <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3758      	adds	r7, #88	; 0x58
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000194 	.word	0x20000194
 8001734:	40012c00 	.word	0x40012c00

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_USART2_UART_Init+0x58>)
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <MX_USART2_UART_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USART2_UART_Init+0x58>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART2_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART2_UART_Init+0x58>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART2_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART2_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_USART2_UART_Init+0x58>)
 800177c:	f007 fa24 	bl	8008bc8 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 fa5d 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000228 	.word	0x20000228
 8001794:	40004400 	.word	0x40004400

08001798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_DMA_Init+0x38>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <MX_DMA_Init+0x38>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6493      	str	r3, [r2, #72]	; 0x48
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_DMA_Init+0x38>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	200d      	movs	r0, #13
 80017bc:	f001 ffed 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017c0:	200d      	movs	r0, #13
 80017c2:	f002 f806 	bl	80037d2 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <MX_GPIO_Init+0xd4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <MX_GPIO_Init+0xd4>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <MX_GPIO_Init+0xd4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <MX_GPIO_Init+0xd4>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <MX_GPIO_Init+0xd4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <MX_GPIO_Init+0xd4>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <MX_GPIO_Init+0xd4>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <MX_GPIO_Init+0xd4>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MX_GPIO_Init+0xd4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDOUT_Pin|output1_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f640 0108 	movw	r1, #2056	; 0x808
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f002 fb94 	bl	8003f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2108      	movs	r1, #8
 8001844:	4819      	ldr	r0, [pc, #100]	; (80018ac <MX_GPIO_Init+0xd8>)
 8001846:	f002 fb8f 	bl	8003f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDOUT_Pin output1_Pin */
  GPIO_InitStruct.Pin = LEDOUT_Pin|output1_Pin;
 800184a:	f640 0308 	movw	r3, #2056	; 0x808
 800184e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f002 fa15 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800186a:	2302      	movs	r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4619      	mov	r1, r3
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <MX_GPIO_Init+0xd8>)
 800187e:	f002 fa09 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001882:	2308      	movs	r3, #8
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_GPIO_Init+0xd8>)
 800189a:	f002 f9fb 	bl	8003c94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48000400 	.word	0x48000400

080018b0 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (received_command == 0x01) {
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d132      	bne.n	8001926 <HAL_I2C_SlaveRxCpltCallback+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received TEMP flag, returning temp: ", 40, HAL_MAX_DELAY);
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	2228      	movs	r2, #40	; 0x28
 80018c6:	4937      	ldr	r1, [pc, #220]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0xf4>)
 80018c8:	4837      	ldr	r0, [pc, #220]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 80018ca:	f007 f9cb 	bl	8008c64 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 80018d0:	f7fe fc7e 	bl	80001d0 <strlen>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	4933      	ldr	r1, [pc, #204]	; (80019ac <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 80018de:	4832      	ldr	r0, [pc, #200]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 80018e0:	f007 f9c0 	bl	8008c64 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	2202      	movs	r2, #2
 80018ea:	4931      	ldr	r1, [pc, #196]	; (80019b0 <HAL_I2C_SlaveRxCpltCallback+0x100>)
 80018ec:	482e      	ldr	r0, [pc, #184]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 80018ee:	f007 f9b9 	bl	8008c64 <HAL_UART_Transmit>
	    if (HAL_I2C_Slave_Transmit_IT(&hi2c1, buf, strlen((char*)buf)) != HAL_OK) {
 80018f2:	482e      	ldr	r0, [pc, #184]	; (80019ac <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 80018f4:	f7fe fc6c 	bl	80001d0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	492b      	ldr	r1, [pc, #172]	; (80019ac <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 8001900:	482c      	ldr	r0, [pc, #176]	; (80019b4 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 8001902:	f002 fdf3 	bl	80044ec <HAL_I2C_Slave_Transmit_IT>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_I2C_SlaveRxCpltCallback+0x6a>
	    	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2228      	movs	r2, #40	; 0x28
 8001912:	4929      	ldr	r1, [pc, #164]	; (80019b8 <HAL_I2C_SlaveRxCpltCallback+0x108>)
 8001914:	4824      	ldr	r0, [pc, #144]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8001916:	f007 f9a5 	bl	8008c64 <HAL_UART_Transmit>
	    }
	    HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	4920      	ldr	r1, [pc, #128]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 800191e:	4825      	ldr	r0, [pc, #148]	; (80019b4 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 8001920:	f002 fe52 	bl	80045c8 <HAL_I2C_Slave_Receive_IT>
		}
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);*/
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
	}
}
 8001924:	e038      	b.n	8001998 <HAL_I2C_SlaveRxCpltCallback+0xe8>
	} else if (received_command == 0x02) {
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d112      	bne.n	8001954 <HAL_I2C_SlaveRxCpltCallback+0xa4>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDON flag, turning LED ON\n\r", 40, HAL_MAX_DELAY);
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	2228      	movs	r2, #40	; 0x28
 8001934:	4921      	ldr	r1, [pc, #132]	; (80019bc <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8001938:	f007 f994 	bl	8008c64 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2108      	movs	r1, #8
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f002 fb10 	bl	8003f68 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	4915      	ldr	r1, [pc, #84]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 800194e:	f002 fe3b 	bl	80045c8 <HAL_I2C_Slave_Receive_IT>
}
 8001952:	e021      	b.n	8001998 <HAL_I2C_SlaveRxCpltCallback+0xe8>
	} else if (received_command == 0x03) {
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d112      	bne.n	8001982 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDOFF flag, turning LED OFF\n\r", 40, HAL_MAX_DELAY);
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	2228      	movs	r2, #40	; 0x28
 8001962:	4917      	ldr	r1, [pc, #92]	; (80019c0 <HAL_I2C_SlaveRxCpltCallback+0x110>)
 8001964:	4810      	ldr	r0, [pc, #64]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8001966:	f007 f97d 	bl	8008c64 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2108      	movs	r1, #8
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f002 faf9 	bl	8003f68 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8001976:	2201      	movs	r2, #1
 8001978:	4909      	ldr	r1, [pc, #36]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <HAL_I2C_SlaveRxCpltCallback+0x104>)
 800197c:	f002 fe24 	bl	80045c8 <HAL_I2C_Slave_Receive_IT>
}
 8001980:	e00a      	b.n	8001998 <HAL_I2C_SlaveRxCpltCallback+0xe8>
	} else if (received_command == 0x04) {
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b04      	cmp	r3, #4
 8001988:	d006      	beq.n	8001998 <HAL_I2C_SlaveRxCpltCallback+0xe8>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	2205      	movs	r2, #5
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8001994:	f007 f966 	bl	8008c64 <HAL_UART_Transmit>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200002b0 	.word	0x200002b0
 80019a4:	0800bb70 	.word	0x0800bb70
 80019a8:	20000228 	.word	0x20000228
 80019ac:	200002b4 	.word	0x200002b4
 80019b0:	0800bb98 	.word	0x0800bb98
 80019b4:	200000ec 	.word	0x200000ec
 80019b8:	0800bb9c 	.word	0x0800bb9c
 80019bc:	0800bbac 	.word	0x0800bbac
 80019c0:	0800bbd4 	.word	0x0800bbd4
 80019c4:	0800bbfc 	.word	0x0800bbfc

080019c8 <Set_LED>:
//    WS2812B_SendByte(red);
//    WS2812B_SendByte(blue);
//}

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	b2d9      	uxtb	r1, r3
 80019da:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <Set_LED+0x58>)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	b2d9      	uxtb	r1, r3
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <Set_LED+0x58>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	460a      	mov	r2, r1
 80019f0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	b2d9      	uxtb	r1, r3
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <Set_LED+0x58>)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	460a      	mov	r2, r1
 8001a00:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <Set_LED+0x58>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	460a      	mov	r2, r1
 8001a10:	70da      	strb	r2, [r3, #3]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200002fc 	.word	0x200002fc
 8001a24:	00000000 	.word	0x00000000

08001a28 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0-45
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 64) brightness = 64;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b40      	cmp	r3, #64	; 0x40
 8001a34:	dd01      	ble.n	8001a3a <Set_Brightness+0x12>
 8001a36:	2340      	movs	r3, #64	; 0x40
 8001a38:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e060      	b.n	8001b02 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8001a40:	4a37      	ldr	r2, [pc, #220]	; (8001b20 <Set_Brightness+0xf8>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001a48:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <Set_Brightness+0xfc>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8001a50:	2301      	movs	r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	e04f      	b.n	8001af6 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a64:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7fe fd6d 	bl	8000548 <__aeabi_f2d>
 8001a6e:	a32a      	add	r3, pc, #168	; (adr r3, 8001b18 <Set_Brightness+0xf0>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <Set_Brightness+0x100>)
 8001a86:	f7fe fee1 	bl	800084c <__aeabi_ddiv>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f893 	bl	8000bbc <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <Set_Brightness+0xf8>)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	441a      	add	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ec43 2b10 	vmov	d0, r2, r3
 8001ac0:	f008 ff5a 	bl	800a978 <tan>
 8001ac4:	ec53 2b10 	vmov	r2, r3, d0
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe febe 	bl	800084c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f850 	bl	8000b7c <__aeabi_d2uiz>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b2d9      	uxtb	r1, r3
 8001ae0:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <Set_Brightness+0xfc>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	441a      	add	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4413      	add	r3, r2
 8001aec:	460a      	mov	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	3301      	adds	r3, #1
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	ddac      	ble.n	8001a56 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	dd9b      	ble.n	8001a40 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	53c8d4f1 	.word	0x53c8d4f1
 8001b1c:	400921fb 	.word	0x400921fb
 8001b20:	200002fc 	.word	0x200002fc
 8001b24:	20000324 	.word	0x20000324
 8001b28:	40668000 	.word	0x40668000

08001b2c <WS2812_Send>:

void WS2812_Send (void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e036      	b.n	8001baa <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001b3c:	4a32      	ldr	r2, [pc, #200]	; (8001c08 <WS2812_Send+0xdc>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	492f      	ldr	r1, [pc, #188]	; (8001c08 <WS2812_Send+0xdc>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	789b      	ldrb	r3, [r3, #2]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	431a      	orrs	r2, r3
 8001b56:	492c      	ldr	r1, [pc, #176]	; (8001c08 <WS2812_Send+0xdc>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	78db      	ldrb	r3, [r3, #3]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001b64:	2317      	movs	r3, #23
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e019      	b.n	8001b9e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <WS2812_Send+0xe0>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	213c      	movs	r1, #60	; 0x3c
 8001b82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001b86:	e004      	b.n	8001b92 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8001b88:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <WS2812_Send+0xe0>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	211e      	movs	r1, #30
 8001b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dae2      	bge.n	8001b6a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	ddc5      	ble.n	8001b3c <WS2812_Send+0x10>
		}

	}

	HAL_UART_Transmit(&huart2, (uint8_t*) pwmData, sizeof(pwmData), HAL_MAX_DELAY);
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001bb8:	4914      	ldr	r1, [pc, #80]	; (8001c0c <WS2812_Send+0xe0>)
 8001bba:	4815      	ldr	r0, [pc, #84]	; (8001c10 <WS2812_Send+0xe4>)
 8001bbc:	f007 f852 	bl	8008c64 <HAL_UART_Transmit>

	for (int i=0; i<50; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	e00a      	b.n	8001bdc <WS2812_Send+0xb0>
	{
		pwmData[indx] = 0;
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <WS2812_Send+0xe0>)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2100      	movs	r1, #0
 8001bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b31      	cmp	r3, #49	; 0x31
 8001be0:	ddf1      	ble.n	8001bc6 <WS2812_Send+0x9a>
	}

	HAL_TIM_PWM_Start_DMA(&TIM_HANDLE, TIM_CHANNEL, (uint32_t *)pwmData, sizeof(pwmData) / sizeof(uint16_t));
 8001be2:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <WS2812_Send+0xe0>)
 8001be8:	2104      	movs	r1, #4
 8001bea:	480a      	ldr	r0, [pc, #40]	; (8001c14 <WS2812_Send+0xe8>)
 8001bec:	f005 fde4 	bl	80077b8 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001bf0:	bf00      	nop
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <WS2812_Send+0xec>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0fb      	beq.n	8001bf2 <WS2812_Send+0xc6>
	datasentflag = 0;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <WS2812_Send+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000324 	.word	0x20000324
 8001c0c:	2000034c 	.word	0x2000034c
 8001c10:	20000228 	.word	0x20000228
 8001c14:	20000194 	.word	0x20000194
 8001c18:	20000590 	.word	0x20000590

08001c1c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&TIM_HANDLE, TIM_CHANNEL);
 8001c24:	2104      	movs	r1, #4
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001c28:	f005 ffbe 	bl	8007ba8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000194 	.word	0x20000194
 8001c40:	20000590 	.word	0x20000590

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_MspInit+0x44>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_MspInit+0x44>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_MspInit+0x44>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_MspInit+0x44>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_MspInit+0x44>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_MspInit+0x44>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b09e      	sub	sp, #120	; 0x78
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	2254      	movs	r2, #84	; 0x54
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f007 fe3a 	bl	8009932 <memset>
  if(hadc->Instance==ADC1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d143      	bne.n	8001d50 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ccc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cd2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fa0e 	bl	8007118 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001d02:	f7ff ff9f 	bl	8001c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = druksensor_Pin;
 8001d36:	2310      	movs	r3, #16
 8001d38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d3a:	230b      	movs	r3, #11
 8001d3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(druksensor_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4c:	f001 ffa2 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3778      	adds	r7, #120	; 0x78
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	50040000 	.word	0x50040000
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0a2      	sub	sp, #136	; 0x88
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	2254      	movs	r2, #84	; 0x54
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f007 fdd6 	bl	8009932 <memset>
  if(hi2c->Instance==I2C1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_I2C_MspInit+0x1a4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d148      	bne.n	8001e22 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d90:	2340      	movs	r3, #64	; 0x40
 8001d92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 f9bb 	bl	8007118 <HAL_RCCEx_PeriphCLKConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001da8:	f7ff ff4c 	bl	8001c44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dac:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	4a55      	ldr	r2, [pc, #340]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001de0:	4619      	mov	r1, r3
 8001de2:	484a      	ldr	r0, [pc, #296]	; (8001f0c <HAL_I2C_MspInit+0x1ac>)
 8001de4:	f001 ff56 	bl	8003c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	4a46      	ldr	r2, [pc, #280]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001dee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df2:	6593      	str	r3, [r2, #88]	; 0x58
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	201f      	movs	r0, #31
 8001e06:	f001 fcc8 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e0a:	201f      	movs	r0, #31
 8001e0c:	f001 fce1 	bl	80037d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2020      	movs	r0, #32
 8001e16:	f001 fcc0 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e1a:	2020      	movs	r0, #32
 8001e1c:	f001 fcd9 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e20:	e06c      	b.n	8001efc <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <HAL_I2C_MspInit+0x1b0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d167      	bne.n	8001efc <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 f96c 	bl	8007118 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_MspInit+0xea>
      Error_Handler();
 8001e46:	f7ff fefd 	bl	8001c44 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a2e      	ldr	r2, [pc, #184]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a28      	ldr	r2, [pc, #160]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7e:	2312      	movs	r3, #18
 8001e80:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f001 fefa 	bl	8003c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4813      	ldr	r0, [pc, #76]	; (8001f0c <HAL_I2C_MspInit+0x1ac>)
 8001ec0:	f001 fee8 	bl	8003c94 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001eca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_I2C_MspInit+0x1a8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2048      	movs	r0, #72	; 0x48
 8001ee2:	f001 fc5a 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001ee6:	2048      	movs	r0, #72	; 0x48
 8001ee8:	f001 fc73 	bl	80037d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2049      	movs	r0, #73	; 0x49
 8001ef2:	f001 fc52 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001ef6:	2049      	movs	r0, #73	; 0x49
 8001ef8:	f001 fc6b 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 8001efc:	bf00      	nop
 8001efe:	3788      	adds	r7, #136	; 0x88
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	40005c00 	.word	0x40005c00

08001f14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_TIM_PWM_MspInit+0x98>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d13e      	bne.n	8001fa4 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x9c>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x9c>)
 8001f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f30:	6613      	str	r3, [r2, #96]	; 0x60
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x9c>)
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f42:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f46:	2207      	movs	r2, #7
 8001f48:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001f78:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f7a:	f001 fc45 	bl	8003808 <HAL_DMA_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8001f84:	f7ff fe5e 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2018      	movs	r0, #24
 8001f9a:	f001 fbfe 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f9e:	2018      	movs	r0, #24
 8001fa0:	f001 fc17 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	200001e0 	.word	0x200001e0
 8001fb8:	40020030 	.word	0x40020030

08001fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_TIM_MspPostInit+0x68>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d11d      	bne.n	800201a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_TIM_MspPostInit+0x6c>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_TIM_MspPostInit+0x6c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_TIM_MspPostInit+0x6c>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f001 fe3d 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b09e      	sub	sp, #120	; 0x78
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	2254      	movs	r2, #84	; 0x54
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f007 fc70 	bl	8009932 <memset>
  if(huart->Instance==USART2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <HAL_UART_MspInit+0xcc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d148      	bne.n	80020ee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800205c:	2302      	movs	r3, #2
 800205e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002060:	2300      	movs	r3, #0
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	4618      	mov	r0, r3
 800206a:	f005 f855 	bl	8007118 <HAL_RCCEx_PeriphCLKConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002074:	f7ff fde6 	bl	8001c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_UART_MspInit+0xd0>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_UART_MspInit+0xd0>)
 800207e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_UART_MspInit+0xd0>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_UART_MspInit+0xd0>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_UART_MspInit+0xd0>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_UART_MspInit+0xd0>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80020a8:	2304      	movs	r3, #4
 80020aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b8:	2307      	movs	r3, #7
 80020ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f001 fde5 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80020dc:	2303      	movs	r3, #3
 80020de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ea:	f001 fdd3 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3778      	adds	r7, #120	; 0x78
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40004400 	.word	0x40004400
 80020fc:	40021000 	.word	0x40021000

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f000 f994 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA1_Channel3_IRQHandler+0x10>)
 800215a:	f001 fcae 	bl	8003aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200001e0 	.word	0x200001e0

08002168 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800216e:	f005 fe03 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000194 	.word	0x20000194

0800217c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <I2C1_EV_IRQHandler+0x10>)
 8002182:	f002 fb8b 	bl	800489c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200000ec 	.word	0x200000ec

08002190 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <I2C1_ER_IRQHandler+0x10>)
 8002196:	f002 fb9b 	bl	80048d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000ec 	.word	0x200000ec

080021a4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <I2C3_EV_IRQHandler+0x10>)
 80021aa:	f002 fb77 	bl	800489c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000140 	.word	0x20000140

080021b8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <I2C3_ER_IRQHandler+0x10>)
 80021be:	f002 fb87 	bl	80048d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000140 	.word	0x20000140

080021cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_kill>:

int _kill(int pid, int sig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021e6:	f007 fbf3 	bl	80099d0 <__errno>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2216      	movs	r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
  return -1;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_exit>:

void _exit (int status)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ffe7 	bl	80021dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800220e:	e7fe      	b.n	800220e <_exit+0x12>

08002210 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e00a      	b.n	8002238 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002222:	f3af 8000 	nop.w
 8002226:	4601      	mov	r1, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	b2ca      	uxtb	r2, r1
 8002230:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf0      	blt.n	8002222 <_read+0x12>
  }

  return len;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e009      	b.n	8002270 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbf1      	blt.n	800225c <_write+0x12>
  }
  return len;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_close>:

int _close(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022aa:	605a      	str	r2, [r3, #4]
  return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_isatty>:

int _isatty(int file)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <_sbrk+0x5c>)
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <_sbrk+0x60>)
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <_sbrk+0x64>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <_sbrk+0x68>)
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	429a      	cmp	r2, r3
 800231a:	d207      	bcs.n	800232c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800231c:	f007 fb58 	bl	80099d0 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	220c      	movs	r2, #12
 8002324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	e009      	b.n	8002340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <_sbrk+0x64>)
 800233c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20010000 	.word	0x20010000
 800234c:	00000400 	.word	0x00000400
 8002350:	20000594 	.word	0x20000594
 8002354:	200006e8 	.word	0x200006e8

08002358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <SystemInit+0x20>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <SystemInit+0x20>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002380:	f7ff ffea 	bl	8002358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	; (80023bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <LoopForever+0xe>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	; (80023c8 <LoopForever+0x16>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f007 fb17 	bl	80099dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ae:	f7fe ff01 	bl	80011b4 <main>

080023b2 <LoopForever>:

LoopForever:
    b LoopForever
 80023b2:	e7fe      	b.n	80023b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023c0:	0800beb0 	.word	0x0800beb0
  ldr r2, =_sbss
 80023c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023c8:	200006e8 	.word	0x200006e8

080023cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_IRQHandler>

080023ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f001 f9d3 	bl	8003784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023de:	2000      	movs	r0, #0
 80023e0:	f000 f80e 	bl	8002400 <HAL_InitTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	e001      	b.n	80023f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f0:	f7ff fc2e 	bl	8001c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_InitTick+0x6c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_InitTick+0x70>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_InitTick+0x6c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f001 f9df 	bl	80037ee <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d809      	bhi.n	8002450 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f001 f9a9 	bl	800379a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_InitTick+0x74>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e007      	b.n	8002460 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e004      	b.n	8002460 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e001      	b.n	8002460 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000000c 	.word	0x2000000c
 8002470:	20000004 	.word	0x20000004
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	2000000c 	.word	0x2000000c
 800249c:	20000598 	.word	0x20000598

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000598 	.word	0x20000598

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000000c 	.word	0x2000000c

08002500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <LL_ADC_SetOffset+0x44>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	03fff000 	.word	0x03fff000

080025b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3360      	adds	r3, #96	; 0x60
 80025be:	461a      	mov	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3360      	adds	r3, #96	; 0x60
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3330      	adds	r3, #48	; 0x30
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	211f      	movs	r1, #31
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 011f 	and.w	r1, r3, #31
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	431a      	orrs	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002684:	bf00      	nop
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3314      	adds	r3, #20
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	0e5b      	lsrs	r3, r3, #25
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0d1b      	lsrs	r3, r3, #20
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2107      	movs	r1, #7
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	401a      	ands	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0d1b      	lsrs	r3, r3, #20
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0318 	and.w	r3, r3, #24
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <LL_ADC_SetChannelSingleDiff+0x44>)
 800270c:	40d9      	lsrs	r1, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	400b      	ands	r3, r1
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	0007ffff 	.word	0x0007ffff

08002730 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6093      	str	r3, [r2, #8]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002768:	d101      	bne.n	800276e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <LL_ADC_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d101      	bne.n	800285a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d101      	bne.n	8002880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e126      	b.n	8002af8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff f9ed 	bl	8001c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff3f 	bl	8002754 <LL_ADC_IsDeepPowerDownEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff25 	bl	8002730 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff5a 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff3e 	bl	800277c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002900:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <HAL_ADC_Init+0x270>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_ADC_Init+0x274>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002914:	e002      	b.n	800291c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff3c 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff75 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80bf 	bne.w	8002ae6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80bb 	bne.w	8002ae6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff35 	bl	80027f4 <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	485d      	ldr	r0, [pc, #372]	; (8002b08 <HAL_ADC_Init+0x278>)
 8002992:	f7ff ff2f 	bl	80027f4 <LL_ADC_IsEnabled>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	485a      	ldr	r0, [pc, #360]	; (8002b0c <HAL_ADC_Init+0x27c>)
 80029a4:	f7ff fdac 	bl	8002500 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d106      	bne.n	80029e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	3b01      	subs	r3, #1
 80029dc:	045b      	lsls	r3, r3, #17
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_ADC_Init+0x280>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff25 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002a1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d13d      	bne.n	8002aa2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d13a      	bne.n	8002aa2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a30:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a38:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a48:	f023 0302 	bic.w	r3, r3, #2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	69b9      	ldr	r1, [r7, #24]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d118      	bne.n	8002a92 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a82:	430a      	orrs	r2, r1
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	611a      	str	r2, [r3, #16]
 8002a90:	e007      	b.n	8002aa2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f023 010f 	bic.w	r1, r3, #15
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac2:	e007      	b.n	8002ad4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020f 	bic.w	r2, r2, #15
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f023 0303 	bic.w	r3, r3, #3
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ae4:	e007      	b.n	8002af6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000004 	.word	0x20000004
 8002b04:	053e2d63 	.word	0x053e2d63
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	50040300 	.word	0x50040300
 8002b10:	fff0c007 	.word	0xfff0c007

08002b14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe8e 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d14f      	bne.n	8002bcc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_Start+0x26>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e04b      	b.n	8002bd2 <HAL_ADC_Start+0xbe>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fcc8 	bl	80034d8 <ADC_Enable>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d137      	bne.n	8002bc2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d106      	bne.n	8002b82 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f023 0206 	bic.w	r2, r3, #6
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	221c      	movs	r2, #28
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fe2d 	bl	800281a <LL_ADC_REG_StartConversion>
 8002bc0:	e006      	b.n	8002bd0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bca:	e001      	b.n	8002bd0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d102      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bec:	2308      	movs	r3, #8
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e010      	b.n	8002c14 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e06f      	b.n	8002cf0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002c10:	2304      	movs	r3, #4
 8002c12:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c14:	f7ff fc44 	bl	80024a0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c1a:	e021      	b.n	8002c60 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d01d      	beq.n	8002c60 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c24:	f7ff fc3c 	bl	80024a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <HAL_ADC_PollForConversion+0x60>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d112      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e047      	b.n	8002cf0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0d6      	beq.n	8002c1c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fcc7 	bl	8002612 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01c      	beq.n	8002cc4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7e5b      	ldrb	r3, [r3, #25]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d111      	bne.n	8002cc4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d104      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e008      	b.n	8002cee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b0b6      	sub	sp, #216	; 0xd8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x22>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e3bb      	b.n	80034ae <HAL_ADC_ConfigChannel+0x79a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fd7d 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 83a0 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d824      	bhi.n	8002daa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	3b02      	subs	r3, #2
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d81b      	bhi.n	8002da2 <HAL_ADC_ConfigChannel+0x8e>
 8002d6a:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <HAL_ADC_ConfigChannel+0x5c>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d89 	.word	0x08002d89
 8002d78:	08002d91 	.word	0x08002d91
 8002d7c:	08002d99 	.word	0x08002d99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d80:	230c      	movs	r3, #12
 8002d82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d86:	e010      	b.n	8002daa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d88:	2312      	movs	r3, #18
 8002d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d8e:	e00c      	b.n	8002daa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d90:	2318      	movs	r3, #24
 8002d92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d96:	e008      	b.n	8002daa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002da0:	e003      	b.n	8002daa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002da2:	2306      	movs	r3, #6
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002da8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002db8:	f7ff fc3e 	bl	8002638 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fd3e 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002dc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd4a 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002dd4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 81a4 	bne.w	800312a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 819f 	bne.w	800312a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f7ff fc49 	bl	8002690 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00a      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6919      	ldr	r1, [r3, #16]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f7ff fb9a 	bl	8002568 <LL_ADC_SetOffset>
 8002e34:	e179      	b.n	800312a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fbb7 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x14e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fbac 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	e01e      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x18c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fba1 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e004      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	e018      	b.n	8002eea <HAL_ADC_ConfigChannel+0x1d6>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e004      	b.n	8002eea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d106      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fb70 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fb54 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x214>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fb49 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 021f 	and.w	r2, r3, #31
 8002f26:	e01e      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x252>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fb3e 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f56:	2320      	movs	r3, #32
 8002f58:	e004      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x26a>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0e9b      	lsrs	r3, r3, #26
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	e018      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x29c>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e004      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d106      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fb0d 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff faf1 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x2da>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2102      	movs	r1, #2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fae6 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	e01e      	b.n	800302c <HAL_ADC_ConfigChannel+0x318>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fadb 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800300c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e004      	b.n	800302a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x330>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	e014      	b.n	800306e <HAL_ADC_ConfigChannel+0x35a>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e004      	b.n	800306e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800306e:	429a      	cmp	r2, r3
 8003070:	d106      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	2102      	movs	r1, #2
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff faae 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2103      	movs	r1, #3
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fa92 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x398>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2103      	movs	r1, #3
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fa87 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	e017      	b.n	80030dc <HAL_ADC_ConfigChannel+0x3c8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2103      	movs	r1, #3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fa7c 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80030c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x3e0>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	e011      	b.n	8003118 <HAL_ADC_ConfigChannel+0x404>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003104:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003118:	429a      	cmp	r2, r3
 800311a:	d106      	bne.n	800312a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	2103      	movs	r1, #3
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fa59 	bl	80025dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fb60 	bl	80027f4 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 8140 	bne.w	80033bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	461a      	mov	r2, r3
 800314a:	f7ff facd 	bl	80026e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4a8f      	ldr	r2, [pc, #572]	; (8003390 <HAL_ADC_ConfigChannel+0x67c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	f040 8131 	bne.w	80033bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x46e>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	3301      	adds	r3, #1
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2b09      	cmp	r3, #9
 8003178:	bf94      	ite	ls
 800317a:	2301      	movls	r3, #1
 800317c:	2300      	movhi	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e019      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x4a2>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003192:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800319a:	2320      	movs	r3, #32
 800319c:	e003      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800319e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b09      	cmp	r3, #9
 80031ae:	bf94      	ite	ls
 80031b0:	2301      	movls	r3, #1
 80031b2:	2300      	movhi	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d079      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d107      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x4c2>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d4:	e015      	b.n	8003202 <HAL_ADC_ConfigChannel+0x4ee>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80031e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80031e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80031ee:	2320      	movs	r3, #32
 80031f0:	e003      	b.n	80031fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80031f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	069b      	lsls	r3, r3, #26
 80031fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x50e>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0e9b      	lsrs	r3, r3, #26
 8003214:	3301      	adds	r3, #1
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	e017      	b.n	8003252 <HAL_ADC_ConfigChannel+0x53e>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800323e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	ea42 0103 	orr.w	r1, r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x564>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	3301      	adds	r3, #1
 800326a:	f003 021f 	and.w	r2, r3, #31
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	051b      	lsls	r3, r3, #20
 8003276:	e018      	b.n	80032aa <HAL_ADC_ConfigChannel+0x596>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f003 021f 	and.w	r2, r3, #31
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032aa:	430b      	orrs	r3, r1
 80032ac:	e081      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x5b6>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	3301      	adds	r3, #1
 80032c2:	069b      	lsls	r3, r3, #26
 80032c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c8:	e015      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x5e2>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e003      	b.n	80032ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	069b      	lsls	r3, r3, #26
 80032f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x602>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	0e9b      	lsrs	r3, r3, #26
 8003308:	3301      	adds	r3, #1
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	e017      	b.n	8003346 <HAL_ADC_ConfigChannel+0x632>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	61bb      	str	r3, [r7, #24]
  return result;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x65e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	3301      	adds	r3, #1
 800335e:	f003 021f 	and.w	r2, r3, #31
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	3b1e      	subs	r3, #30
 800336a:	051b      	lsls	r3, r3, #20
 800336c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003370:	e01e      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x69c>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	60fb      	str	r3, [r7, #12]
  return result;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e006      	b.n	800339c <HAL_ADC_ConfigChannel+0x688>
 800338e:	bf00      	nop
 8003390:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3301      	adds	r3, #1
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	3b1e      	subs	r3, #30
 80033aa:	051b      	lsls	r3, r3, #20
 80033ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7ff f96a 	bl	8002690 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_ADC_ConfigChannel+0x7a4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d06c      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c8:	483c      	ldr	r0, [pc, #240]	; (80034bc <HAL_ADC_ConfigChannel+0x7a8>)
 80033ca:	f7ff f8bf 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 80033ce:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <HAL_ADC_ConfigChannel+0x7ac>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d127      	bne.n	800342c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d121      	bne.n	800342c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a35      	ldr	r2, [pc, #212]	; (80034c4 <HAL_ADC_ConfigChannel+0x7b0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d157      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fa:	4619      	mov	r1, r3
 80033fc:	482f      	ldr	r0, [pc, #188]	; (80034bc <HAL_ADC_ConfigChannel+0x7a8>)
 80033fe:	f7ff f892 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	4a30      	ldr	r2, [pc, #192]	; (80034cc <HAL_ADC_ConfigChannel+0x7b8>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	099b      	lsrs	r3, r3, #6
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800341c:	e002      	b.n	8003424 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3b01      	subs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f9      	bne.n	800341e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800342a:	e03a      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d113      	bne.n	800345e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d12a      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800344c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003454:	4619      	mov	r1, r3
 8003456:	4819      	ldr	r0, [pc, #100]	; (80034bc <HAL_ADC_ConfigChannel+0x7a8>)
 8003458:	f7ff f865 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800345c:	e021      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d11c      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800346c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <HAL_ADC_ConfigChannel+0x7b0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d111      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800347e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003486:	4619      	mov	r1, r3
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <HAL_ADC_ConfigChannel+0x7a8>)
 800348a:	f7ff f84c 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
 800348e:	e008      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	37d8      	adds	r7, #216	; 0xd8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	80080000 	.word	0x80080000
 80034bc:	50040300 	.word	0x50040300
 80034c0:	c7520000 	.word	0xc7520000
 80034c4:	50040000 	.word	0x50040000
 80034c8:	20000004 	.word	0x20000004
 80034cc:	053e2d63 	.word	0x053e2d63
 80034d0:	cb840000 	.word	0xcb840000
 80034d4:	80000001 	.word	0x80000001

080034d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f983 	bl	80027f4 <LL_ADC_IsEnabled>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d169      	bne.n	80035c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <ADC_Enable+0xfc>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e055      	b.n	80035ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f952 	bl	80027cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003528:	482b      	ldr	r0, [pc, #172]	; (80035d8 <ADC_Enable+0x100>)
 800352a:	f7ff f80f 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 800352e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <ADC_Enable+0x104>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <ADC_Enable+0x108>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003552:	e002      	b.n	800355a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3b01      	subs	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f9      	bne.n	8003554 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003560:	f7fe ff9e 	bl	80024a0 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003566:	e028      	b.n	80035ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff f941 	bl	80027f4 <LL_ADC_IsEnabled>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f925 	bl	80027cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003582:	f7fe ff8d 	bl	80024a0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d914      	bls.n	80035ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d00d      	beq.n	80035ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d1cf      	bne.n	8003568 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	8000003f 	.word	0x8000003f
 80035d8:	50040300 	.word	0x50040300
 80035dc:	20000004 	.word	0x20000004
 80035e0:	053e2d63 	.word	0x053e2d63

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800360c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003616:	4a04      	ldr	r2, [pc, #16]	; (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	60d3      	str	r3, [r2, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	; (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	; (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf28      	it	cs
 80036f6:	2304      	movcs	r3, #4
 80036f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <NVIC_EncodePriority+0x30>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b03      	subs	r3, #3
 8003706:	e000      	b.n	800370a <NVIC_EncodePriority+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	401a      	ands	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43d9      	mvns	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	4313      	orrs	r3, r2
         );
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003750:	d301      	bcc.n	8003756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003752:	2301      	movs	r3, #1
 8003754:	e00f      	b.n	8003776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <SysTick_Config+0x40>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375e:	210f      	movs	r1, #15
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f7ff ff8e 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <SysTick_Config+0x40>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <SysTick_Config+0x40>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010

08003784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff29 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ac:	f7ff ff3e 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	f7ff ff8e 	bl	80036d8 <NVIC_EncodePriority>
 80037bc:	4602      	mov	r2, r0
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff5d 	bl	8003684 <__NVIC_SetPriority>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff31 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ffa2 	bl	8003740 <SysTick_Config>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e098      	b.n	800394c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b4d      	ldr	r3, [pc, #308]	; (8003958 <HAL_DMA_Init+0x150>)
 8003822:	429a      	cmp	r2, r3
 8003824:	d80f      	bhi.n	8003846 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_DMA_Init+0x154>)
 800382e:	4413      	add	r3, r2
 8003830:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_DMA_Init+0x158>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	009a      	lsls	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_DMA_Init+0x15c>)
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
 8003844:	e00e      	b.n	8003864 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <HAL_DMA_Init+0x160>)
 800384e:	4413      	add	r3, r2
 8003850:	4a43      	ldr	r2, [pc, #268]	; (8003960 <HAL_DMA_Init+0x158>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	009a      	lsls	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_DMA_Init+0x164>)
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038be:	d039      	beq.n	8003934 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_DMA_Init+0x15c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d11a      	bne.n	8003900 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_DMA_Init+0x168>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f003 031c 	and.w	r3, r3, #28
 80038d6:	210f      	movs	r1, #15
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	4924      	ldr	r1, [pc, #144]	; (8003970 <HAL_DMA_Init+0x168>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_DMA_Init+0x168>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f003 031c 	and.w	r3, r3, #28
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	491d      	ldr	r1, [pc, #116]	; (8003970 <HAL_DMA_Init+0x168>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
 80038fe:	e019      	b.n	8003934 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_DMA_Init+0x16c>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 031c 	and.w	r3, r3, #28
 800390c:	210f      	movs	r1, #15
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	4917      	ldr	r1, [pc, #92]	; (8003974 <HAL_DMA_Init+0x16c>)
 8003916:	4013      	ands	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_DMA_Init+0x16c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 031c 	and.w	r3, r3, #28
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	4911      	ldr	r1, [pc, #68]	; (8003974 <HAL_DMA_Init+0x16c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	40020407 	.word	0x40020407
 800395c:	bffdfff8 	.word	0xbffdfff8
 8003960:	cccccccd 	.word	0xcccccccd
 8003964:	40020000 	.word	0x40020000
 8003968:	bffdfbf8 	.word	0xbffdfbf8
 800396c:	40020400 	.word	0x40020400
 8003970:	400200a8 	.word	0x400200a8
 8003974:	400204a8 	.word	0x400204a8

08003978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_DMA_Start_IT+0x20>
 8003994:	2302      	movs	r3, #2
 8003996:	e04b      	b.n	8003a30 <HAL_DMA_Start_IT+0xb8>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d13a      	bne.n	8003a22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f92f 	bl	8003c34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 020e 	orr.w	r2, r2, #14
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00f      	b.n	8003a10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 020a 	orr.w	r2, r2, #10
 8003a0e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e005      	b.n	8003a2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d005      	beq.n	8003a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e029      	b.n	8003ab0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020e 	bic.w	r2, r2, #14
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 021c 	and.w	r2, r3, #28
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
    }
  }
  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f003 031c 	and.w	r3, r3, #28
 8003ada:	2204      	movs	r2, #4
 8003adc:	409a      	lsls	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d026      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x7a>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d021      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0204 	bic.w	r2, r2, #4
 8003b0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f003 021c 	and.w	r2, r3, #28
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2104      	movs	r1, #4
 8003b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d071      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b32:	e06c      	b.n	8003c0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	f003 031c 	and.w	r3, r3, #28
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02e      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xec>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d029      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020a 	bic.w	r2, r2, #10
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f003 021c 	and.w	r2, r3, #28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2102      	movs	r1, #2
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d038      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ba4:	e033      	b.n	8003c0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f003 031c 	and.w	r3, r3, #28
 8003bae:	2208      	movs	r2, #8
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x156>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d025      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020e 	bic.w	r2, r2, #14
 8003bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	f003 021c 	and.w	r2, r3, #28
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f202 	lsl.w	r2, r1, r2
 8003be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
}
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c26:	b2db      	uxtb	r3, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f003 021c 	and.w	r2, r3, #28
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d108      	bne.n	8003c78 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c76:	e007      	b.n	8003c88 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca2:	e148      	b.n	8003f36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 813a 	beq.w	8003f30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d005      	beq.n	8003cd4 <HAL_GPIO_Init+0x40>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d130      	bne.n	8003d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 0201 	and.w	r2, r3, #1
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d017      	beq.n	8003d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d123      	bne.n	8003dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	08da      	lsrs	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3208      	adds	r2, #8
 8003d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	6939      	ldr	r1, [r7, #16]
 8003dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0203 	and.w	r2, r3, #3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8094 	beq.w	8003f30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e08:	4b52      	ldr	r3, [pc, #328]	; (8003f54 <HAL_GPIO_Init+0x2c0>)
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	4a51      	ldr	r2, [pc, #324]	; (8003f54 <HAL_GPIO_Init+0x2c0>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6613      	str	r3, [r2, #96]	; 0x60
 8003e14:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <HAL_GPIO_Init+0x2c0>)
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e20:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_GPIO_Init+0x2c4>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	3302      	adds	r3, #2
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e4a:	d00d      	beq.n	8003e68 <HAL_GPIO_Init+0x1d4>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a43      	ldr	r2, [pc, #268]	; (8003f5c <HAL_GPIO_Init+0x2c8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <HAL_GPIO_Init+0x1d0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a42      	ldr	r2, [pc, #264]	; (8003f60 <HAL_GPIO_Init+0x2cc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_GPIO_Init+0x1cc>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e004      	b.n	8003e6a <HAL_GPIO_Init+0x1d6>
 8003e60:	2307      	movs	r3, #7
 8003e62:	e002      	b.n	8003e6a <HAL_GPIO_Init+0x1d6>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_GPIO_Init+0x1d6>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	f002 0203 	and.w	r2, r2, #3
 8003e70:	0092      	lsls	r2, r2, #2
 8003e72:	4093      	lsls	r3, r2
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e7a:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_GPIO_Init+0x2c4>)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ed6:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f06:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3301      	adds	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f aeaf 	bne.w	8003ca4 <HAL_GPIO_Init+0x10>
  }
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	48000400 	.word	0x48000400
 8003f60:	48000800 	.word	0x48000800
 8003f64:	40010400 	.word	0x40010400

08003f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
 8003f74:	4613      	mov	r3, r2
 8003f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f78:	787b      	ldrb	r3, [r7, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e08d      	b.n	80040c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fece 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fe8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	e006      	b.n	8004020 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800401e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d108      	bne.n	800403a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	e007      	b.n	800404a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800406c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	461a      	mov	r2, r3
 80040dc:	460b      	mov	r3, r1
 80040de:	817b      	strh	r3, [r7, #10]
 80040e0:	4613      	mov	r3, r2
 80040e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	f040 80fd 	bne.w	80042ec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_I2C_Master_Transmit+0x30>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0f6      	b.n	80042ee <HAL_I2C_Master_Transmit+0x21e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004108:	f7fe f9ca 	bl	80024a0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2319      	movs	r3, #25
 8004114:	2201      	movs	r2, #1
 8004116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f001 fd69 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0e1      	b.n	80042ee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2221      	movs	r2, #33	; 0x21
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2210      	movs	r2, #16
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	893a      	ldrh	r2, [r7, #8]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2bff      	cmp	r3, #255	; 0xff
 800415a:	d906      	bls.n	800416a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	22ff      	movs	r2, #255	; 0xff
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e007      	b.n	800417a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004178:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d024      	beq.n	80041cc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	4b4e      	ldr	r3, [pc, #312]	; (80042f8 <HAL_I2C_Master_Transmit+0x228>)
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f001 ff4f 	bl	8006068 <I2C_TransferConfig>
 80041ca:	e066      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <HAL_I2C_Master_Transmit+0x228>)
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f001 ff44 	bl	8006068 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041e0:	e05b      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f001 fd52 	bl	8005c90 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e07b      	b.n	80042ee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	781a      	ldrb	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d034      	beq.n	800429a <HAL_I2C_Master_Transmit+0x1ca>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d130      	bne.n	800429a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2200      	movs	r2, #0
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f001 fcd5 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e04d      	b.n	80042ee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	2bff      	cmp	r3, #255	; 0xff
 800425a:	d90e      	bls.n	800427a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	22ff      	movs	r2, #255	; 0xff
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	b2da      	uxtb	r2, r3
 8004268:	8979      	ldrh	r1, [r7, #10]
 800426a:	2300      	movs	r3, #0
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 fef8 	bl	8006068 <I2C_TransferConfig>
 8004278:	e00f      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	b2da      	uxtb	r2, r3
 800428a:	8979      	ldrh	r1, [r7, #10]
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f001 fee7 	bl	8006068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d19e      	bne.n	80041e2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	6a39      	ldr	r1, [r7, #32]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f001 fd38 	bl	8005d1e <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e01a      	b.n	80042ee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2220      	movs	r2, #32
 80042be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <HAL_I2C_Master_Transmit+0x22c>)
 80042cc:	400b      	ands	r3, r1
 80042ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	80002000 	.word	0x80002000
 80042fc:	fe00e800 	.word	0xfe00e800

08004300 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	461a      	mov	r2, r3
 800430c:	460b      	mov	r3, r1
 800430e:	817b      	strh	r3, [r7, #10]
 8004310:	4613      	mov	r3, r2
 8004312:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b20      	cmp	r3, #32
 800431e:	f040 80db 	bne.w	80044d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_I2C_Master_Receive+0x30>
 800432c:	2302      	movs	r3, #2
 800432e:	e0d4      	b.n	80044da <HAL_I2C_Master_Receive+0x1da>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004338:	f7fe f8b2 	bl	80024a0 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2319      	movs	r3, #25
 8004344:	2201      	movs	r2, #1
 8004346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 fc51 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0bf      	b.n	80044da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2222      	movs	r2, #34	; 0x22
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2210      	movs	r2, #16
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	893a      	ldrh	r2, [r7, #8]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2bff      	cmp	r3, #255	; 0xff
 800438a:	d90e      	bls.n	80043aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	22ff      	movs	r2, #255	; 0xff
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	8979      	ldrh	r1, [r7, #10]
 800439a:	4b52      	ldr	r3, [pc, #328]	; (80044e4 <HAL_I2C_Master_Receive+0x1e4>)
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f001 fe60 	bl	8006068 <I2C_TransferConfig>
 80043a8:	e06d      	b.n	8004486 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	8979      	ldrh	r1, [r7, #10]
 80043bc:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <HAL_I2C_Master_Receive+0x1e4>)
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f001 fe4f 	bl	8006068 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043ca:	e05c      	b.n	8004486 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	6a39      	ldr	r1, [r7, #32]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f001 fce7 	bl	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e07c      	b.n	80044da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d034      	beq.n	8004486 <HAL_I2C_Master_Receive+0x186>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d130      	bne.n	8004486 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2200      	movs	r2, #0
 800442c:	2180      	movs	r1, #128	; 0x80
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f001 fbdf 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e04d      	b.n	80044da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2bff      	cmp	r3, #255	; 0xff
 8004446:	d90e      	bls.n	8004466 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	22ff      	movs	r2, #255	; 0xff
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	b2da      	uxtb	r2, r3
 8004454:	8979      	ldrh	r1, [r7, #10]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f001 fe02 	bl	8006068 <I2C_TransferConfig>
 8004464:	e00f      	b.n	8004486 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	b2da      	uxtb	r2, r3
 8004476:	8979      	ldrh	r1, [r7, #10]
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f001 fdf1 	bl	8006068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d19d      	bne.n	80043cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	6a39      	ldr	r1, [r7, #32]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f001 fc42 	bl	8005d1e <I2C_WaitOnSTOPFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e01a      	b.n	80044da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2220      	movs	r2, #32
 80044aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <HAL_I2C_Master_Receive+0x1e8>)
 80044b8:	400b      	ands	r3, r1
 80044ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	80002400 	.word	0x80002400
 80044e8:	fe00e800 	.word	0xfe00e800

080044ec <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b20      	cmp	r3, #32
 8004504:	d156      	bne.n	80045b4 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_I2C_Slave_Transmit_IT+0x28>
 8004510:	2302      	movs	r3, #2
 8004512:	e050      	b.n	80045b6 <HAL_I2C_Slave_Transmit_IT+0xca>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004540:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8004562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800456c:	d117      	bne.n	800459e <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80045a6:	f248 0101 	movw	r1, #32769	; 0x8001
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 fd8e 	bl	80060cc <I2C_Enable_IRQ>

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	ffff0000 	.word	0xffff0000
 80045c4:	08004a43 	.word	0x08004a43

080045c8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d139      	bne.n	8004656 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_I2C_Slave_Receive_IT+0x28>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e033      	b.n	8004658 <HAL_I2C_Slave_Receive_IT+0x90>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2222      	movs	r2, #34	; 0x22
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800461c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <HAL_I2C_Slave_Receive_IT+0x98>)
 8004638:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800463e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8004648:	f248 0102 	movw	r1, #32770	; 0x8002
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f001 fd3d 	bl	80060cc <I2C_Enable_IRQ>

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	ffff0000 	.word	0xffff0000
 8004664:	08004a43 	.word	0x08004a43

08004668 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	f040 80fd 	bne.w	800488a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_I2C_Mem_Read+0x34>
 8004696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0f1      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x4e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e0ea      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046be:	f7fd feef 	bl	80024a0 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2319      	movs	r3, #25
 80046ca:	2201      	movs	r2, #1
 80046cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f001 fa8e 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0d5      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2222      	movs	r2, #34	; 0x22
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004708:	88f8      	ldrh	r0, [r7, #6]
 800470a:	893a      	ldrh	r2, [r7, #8]
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4603      	mov	r3, r0
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fd71 	bl	8005200 <I2C_RequestMemoryRead>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0ad      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2bff      	cmp	r3, #255	; 0xff
 8004738:	d90e      	bls.n	8004758 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	b2da      	uxtb	r2, r3
 8004746:	8979      	ldrh	r1, [r7, #10]
 8004748:	4b52      	ldr	r3, [pc, #328]	; (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f001 fc89 	bl	8006068 <I2C_TransferConfig>
 8004756:	e00f      	b.n	8004778 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	b2da      	uxtb	r2, r3
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	4b4a      	ldr	r3, [pc, #296]	; (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f001 fc78 	bl	8006068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	2200      	movs	r2, #0
 8004780:	2104      	movs	r1, #4
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f001 fa35 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07c      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d034      	beq.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d130      	bne.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f001 fa06 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e04d      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2bff      	cmp	r3, #255	; 0xff
 80047f8:	d90e      	bls.n	8004818 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	; 0xff
 80047fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	b2da      	uxtb	r2, r3
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	2300      	movs	r3, #0
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f001 fc29 	bl	8006068 <I2C_TransferConfig>
 8004816:	e00f      	b.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	b2da      	uxtb	r2, r3
 8004828:	8979      	ldrh	r1, [r7, #10]
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f001 fc18 	bl	8006068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d19a      	bne.n	8004778 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 fa69 	bl	8005d1e <I2C_WaitOnSTOPFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e01a      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2220      	movs	r2, #32
 800485c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_I2C_Mem_Read+0x230>)
 800486a:	400b      	ands	r3, r1
 800486c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	80002400 	.word	0x80002400
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
  }
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00f      	beq.n	8004912 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004910:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00f      	beq.n	800493c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f043 0208 	orr.w	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800493a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00f      	beq.n	8004966 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	f043 0202 	orr.w	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004964:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 030b 	and.w	r3, r3, #11
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 ffe1 	bl	8005940 <I2C_ITError>
  }
}
 800497e:	bf00      	nop
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
 80049ce:	4613      	mov	r3, r2
 80049d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <I2C_Slave_ISR_IT+0x24>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0e1      	b.n	8004c2a <I2C_Slave_ISR_IT+0x1e8>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a82:	6939      	ldr	r1, [r7, #16]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fdf5 	bl	8005674 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d04b      	beq.n	8004b2c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d046      	beq.n	8004b2c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d128      	bne.n	8004afa <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b28      	cmp	r3, #40	; 0x28
 8004ab2:	d108      	bne.n	8004ac6 <I2C_Slave_ISR_IT+0x84>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aba:	d104      	bne.n	8004ac6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004abc:	6939      	ldr	r1, [r7, #16]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 feea 	bl	8005898 <I2C_ITListenCplt>
 8004ac4:	e031      	b.n	8004b2a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b29      	cmp	r3, #41	; 0x29
 8004ad0:	d10e      	bne.n	8004af0 <I2C_Slave_ISR_IT+0xae>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad8:	d00a      	beq.n	8004af0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f001 f843 	bl	8005b6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fc9e 	bl	800542a <I2C_ITSlaveSeqCplt>
 8004aee:	e01c      	b.n	8004b2a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2210      	movs	r2, #16
 8004af6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004af8:	e08f      	b.n	8004c1a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2210      	movs	r2, #16
 8004b00:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f043 0204 	orr.w	r2, r3, #4
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <I2C_Slave_ISR_IT+0xda>
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b1a:	d17e      	bne.n	8004c1a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	4619      	mov	r1, r3
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 ff0c 	bl	8005940 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b28:	e077      	b.n	8004c1a <I2C_Slave_ISR_IT+0x1d8>
 8004b2a:	e076      	b.n	8004c1a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02f      	beq.n	8004b96 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02a      	beq.n	8004b96 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d14b      	bne.n	8004c1e <I2C_Slave_ISR_IT+0x1dc>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b8c:	d047      	beq.n	8004c1e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fc4b 	bl	800542a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004b94:	e043      	b.n	8004c1e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004baa:	6939      	ldr	r1, [r7, #16]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fb7b 	bl	80052a8 <I2C_ITAddrCplt>
 8004bb2:	e035      	b.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d030      	beq.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d02b      	beq.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d018      	beq.n	8004c04 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c02:	e00d      	b.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c0a:	d002      	beq.n	8004c12 <I2C_Slave_ISR_IT+0x1d0>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fc09 	bl	800542a <I2C_ITSlaveSeqCplt>
 8004c18:	e002      	b.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004c1e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af02      	add	r7, sp, #8
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <I2C_Master_ISR_DMA+0x1a>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0d9      	b.n	8004e00 <I2C_Master_ISR_DMA+0x1ce>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d011      	beq.n	8004c8c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	f043 0204 	orr.w	r2, r3, #4
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c7c:	2120      	movs	r1, #32
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f001 fa24 	bl	80060cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 ff72 	bl	8005b6e <I2C_Flush_TXDR>
 8004c8a:	e0b4      	b.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d071      	beq.n	8004d7a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d06c      	beq.n	8004d7a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cae:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04e      	beq.n	8004d58 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2bff      	cmp	r3, #255	; 0xff
 8004cd0:	d906      	bls.n	8004ce0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	22ff      	movs	r2, #255	; 0xff
 8004cd6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e010      	b.n	8004d02 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cf2:	d003      	beq.n	8004cfc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e002      	b.n	8004d02 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d00:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	8a79      	ldrh	r1, [r7, #18]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f001 f9a9 	bl	8006068 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b22      	cmp	r3, #34	; 0x22
 8004d32:	d108      	bne.n	8004d46 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d44:	e057      	b.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d56:	e04e      	b.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d66:	d003      	beq.n	8004d70 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fb21 	bl	80053b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004d6e:	e042      	b.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d70:	2140      	movs	r1, #64	; 0x40
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fde4 	bl	8005940 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004d78:	e03d      	b.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d028      	beq.n	8004dd6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d023      	beq.n	8004dd6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d119      	bne.n	8004dcc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da6:	d025      	beq.n	8004df4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db0:	d108      	bne.n	8004dc4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004dc2:	e017      	b.n	8004df4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 faf3 	bl	80053b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004dca:	e013      	b.n	8004df4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004dcc:	2140      	movs	r1, #64	; 0x40
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fdb6 	bl	8005940 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004dd4:	e00e      	b.n	8004df4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fb79 	bl	80054e4 <I2C_ITMasterCplt>
 8004df2:	e000      	b.n	8004df6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004df4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004e14:	4b8d      	ldr	r3, [pc, #564]	; (800504c <I2C_Mem_ISR_DMA+0x244>)
 8004e16:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <I2C_Mem_ISR_DMA+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e10e      	b.n	8005044 <I2C_Mem_ISR_DMA+0x23c>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d016      	beq.n	8004e66 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2210      	movs	r2, #16
 8004e48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004e56:	2120      	movs	r1, #32
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f001 f937 	bl	80060cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fe85 	bl	8005b6e <I2C_Flush_TXDR>
 8004e64:	e0e9      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00e      	beq.n	8004e8e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e8c:	e0d5      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05f      	beq.n	8004f58 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d05a      	beq.n	8004f58 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f001 f995 	bl	80061d4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004eaa:	2110      	movs	r1, #16
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f001 f90d 	bl	80060cc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d048      	beq.n	8004f4e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2bff      	cmp	r3, #255	; 0xff
 8004ec4:	d910      	bls.n	8004ee8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	b299      	uxth	r1, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f001 f8c1 	bl	8006068 <I2C_TransferConfig>
 8004ee6:	e011      	b.n	8004f0c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f001 f8ae 	bl	8006068 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b22      	cmp	r3, #34	; 0x22
 8004f28:	d108      	bne.n	8004f3c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f3a:	e07e      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f4c:	e075      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f4e:	2140      	movs	r1, #64	; 0x40
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fcf5 	bl	8005940 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004f56:	e070      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05d      	beq.n	800501e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d058      	beq.n	800501e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f001 f930 	bl	80061d4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f74:	2110      	movs	r1, #16
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f001 f8a8 	bl	80060cc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b22      	cmp	r3, #34	; 0x22
 8004f86:	d101      	bne.n	8004f8c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004f88:	4b31      	ldr	r3, [pc, #196]	; (8005050 <I2C_Mem_ISR_DMA+0x248>)
 8004f8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2bff      	cmp	r3, #255	; 0xff
 8004f94:	d910      	bls.n	8004fb8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	22ff      	movs	r2, #255	; 0xff
 8004f9a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	b299      	uxth	r1, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f001 f859 	bl	8006068 <I2C_TransferConfig>
 8004fb6:	e011      	b.n	8004fdc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	b299      	uxth	r1, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f001 f846 	bl	8006068 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b22      	cmp	r3, #34	; 0x22
 8004ff8:	d108      	bne.n	800500c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005008:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800500a:	e016      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800501a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800501c:	e00d      	b.n	800503a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fa55 	bl	80054e4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	80002000 	.word	0x80002000
 8005050:	80002400 	.word	0x80002400

08005054 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <I2C_Slave_ISR_DMA+0x24>
 8005074:	2302      	movs	r3, #2
 8005076:	e0bf      	b.n	80051f8 <I2C_Slave_ISR_DMA+0x1a4>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 faec 	bl	8005674 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8095 	beq.w	80051d2 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 808f 	beq.w	80051d2 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d07d      	beq.n	80051c4 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00c      	beq.n	80050ea <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80050e6:	2301      	movs	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8005108:	2301      	movs	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d128      	bne.n	8005164 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b28      	cmp	r3, #40	; 0x28
 800511c:	d108      	bne.n	8005130 <I2C_Slave_ISR_DMA+0xdc>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005124:	d104      	bne.n	8005130 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fbb5 	bl	8005898 <I2C_ITListenCplt>
 800512e:	e048      	b.n	80051c2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b29      	cmp	r3, #41	; 0x29
 800513a:	d10e      	bne.n	800515a <I2C_Slave_ISR_DMA+0x106>
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005142:	d00a      	beq.n	800515a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2210      	movs	r2, #16
 800514a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fd0e 	bl	8005b6e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f969 	bl	800542a <I2C_ITSlaveSeqCplt>
 8005158:	e033      	b.n	80051c2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2210      	movs	r2, #16
 8005160:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005162:	e034      	b.n	80051ce <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2210      	movs	r2, #16
 800516a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f043 0204 	orr.w	r2, r3, #4
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <I2C_Slave_ISR_DMA+0x13a>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800518c:	d11f      	bne.n	80051ce <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b21      	cmp	r3, #33	; 0x21
 8005192:	d002      	beq.n	800519a <I2C_Slave_ISR_DMA+0x146>
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	2b29      	cmp	r3, #41	; 0x29
 8005198:	d103      	bne.n	80051a2 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
 80051a0:	e008      	b.n	80051b4 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b22      	cmp	r3, #34	; 0x22
 80051a6:	d002      	beq.n	80051ae <I2C_Slave_ISR_DMA+0x15a>
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	2b2a      	cmp	r3, #42	; 0x2a
 80051ac:	d102      	bne.n	80051b4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2222      	movs	r2, #34	; 0x22
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	4619      	mov	r1, r3
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fbc0 	bl	8005940 <I2C_ITError>
      if (treatdmanack == 1U)
 80051c0:	e005      	b.n	80051ce <I2C_Slave_ISR_DMA+0x17a>
 80051c2:	e004      	b.n	80051ce <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2210      	movs	r2, #16
 80051ca:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051cc:	e00f      	b.n	80051ee <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80051ce:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051d0:	e00d      	b.n	80051ee <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f85d 	bl	80052a8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	817b      	strh	r3, [r7, #10]
 8005212:	460b      	mov	r3, r1
 8005214:	813b      	strh	r3, [r7, #8]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <I2C_RequestMemoryRead+0xa4>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 ff1e 	bl	8006068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	69b9      	ldr	r1, [r7, #24]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fd2d 	bl	8005c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e02c      	b.n	800529a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d105      	bne.n	8005252 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005246:	893b      	ldrh	r3, [r7, #8]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
 8005250:	e015      	b.n	800527e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005252:	893b      	ldrh	r3, [r7, #8]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	b29b      	uxth	r3, r3
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	69b9      	ldr	r1, [r7, #24]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fd13 	bl	8005c90 <I2C_WaitOnTXISFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e012      	b.n	800529a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005274:	893b      	ldrh	r3, [r7, #8]
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2200      	movs	r2, #0
 8005286:	2140      	movs	r1, #64	; 0x40
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fcb2 	bl	8005bf2 <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	80002000 	.word	0x80002000

080052a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052be:	2b28      	cmp	r3, #40	; 0x28
 80052c0:	d16a      	bne.n	8005398 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80052e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80052fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d138      	bne.n	8005378 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005306:	897b      	ldrh	r3, [r7, #10]
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	b29a      	uxth	r2, r3
 800530c:	89bb      	ldrh	r3, [r7, #12]
 800530e:	4053      	eors	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	2b00      	cmp	r3, #0
 8005318:	d11c      	bne.n	8005354 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532c:	2b02      	cmp	r3, #2
 800532e:	d13b      	bne.n	80053a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2208      	movs	r2, #8
 800533c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005346:	89ba      	ldrh	r2, [r7, #12]
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff fb38 	bl	80049c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005352:	e029      	b.n	80053a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005354:	893b      	ldrh	r3, [r7, #8]
 8005356:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 ff39 	bl	80061d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800536a:	89ba      	ldrh	r2, [r7, #12]
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fb26 	bl	80049c2 <HAL_I2C_AddrCallback>
}
 8005376:	e017      	b.n	80053a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 ff29 	bl	80061d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800538a:	89ba      	ldrh	r2, [r7, #12]
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fb16 	bl	80049c2 <HAL_I2C_AddrCallback>
}
 8005396:	e007      	b.n	80053a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2208      	movs	r2, #8
 800539e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b21      	cmp	r3, #33	; 0x21
 80053ca:	d115      	bne.n	80053f8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2211      	movs	r2, #17
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053e0:	2101      	movs	r1, #1
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fef6 	bl	80061d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fac8 	bl	8004986 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053f6:	e014      	b.n	8005422 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2212      	movs	r2, #18
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800540c:	2102      	movs	r1, #2
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fee0 	bl	80061d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fabc 	bl	800499a <HAL_I2C_MasterRxCpltCallback>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e00c      	b.n	8005478 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005476:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b29      	cmp	r3, #41	; 0x29
 8005482:	d112      	bne.n	80054aa <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2228      	movs	r2, #40	; 0x28
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2221      	movs	r2, #33	; 0x21
 8005490:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005492:	2101      	movs	r1, #1
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fe9d 	bl	80061d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fa83 	bl	80049ae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80054a8:	e017      	b.n	80054da <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b2a      	cmp	r3, #42	; 0x2a
 80054b4:	d111      	bne.n	80054da <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2228      	movs	r2, #40	; 0x28
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2222      	movs	r2, #34	; 0x22
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80054c4:	2102      	movs	r1, #2
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fe84 	bl	80061d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fc f9eb 	bl	80018b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2220      	movs	r2, #32
 80054f8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b21      	cmp	r3, #33	; 0x21
 8005504:	d107      	bne.n	8005516 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005506:	2101      	movs	r1, #1
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fe63 	bl	80061d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2211      	movs	r2, #17
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
 8005514:	e00c      	b.n	8005530 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b22      	cmp	r3, #34	; 0x22
 8005520:	d106      	bne.n	8005530 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005522:	2102      	movs	r1, #2
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fe55 	bl	80061d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2212      	movs	r2, #18
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b4c      	ldr	r3, [pc, #304]	; (800566c <I2C_ITMasterCplt+0x188>)
 800553c:	400b      	ands	r3, r1
 800553e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a49      	ldr	r2, [pc, #292]	; (8005670 <I2C_ITMasterCplt+0x18c>)
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b60      	cmp	r3, #96	; 0x60
 8005574:	d10a      	bne.n	800558c <I2C_ITMasterCplt+0xa8>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2db      	uxtb	r3, r3
 8005588:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800558a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 faee 	bl	8005b6e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b60      	cmp	r3, #96	; 0x60
 80055a2:	d002      	beq.n	80055aa <I2C_ITMasterCplt+0xc6>
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d006      	beq.n	80055b8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9c5 	bl	8005940 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80055b6:	e054      	b.n	8005662 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b21      	cmp	r3, #33	; 0x21
 80055c2:	d124      	bne.n	800560e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d10b      	bne.n	80055f6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff f9ff 	bl	80049f2 <HAL_I2C_MemTxCpltCallback>
}
 80055f4:	e035      	b.n	8005662 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff f9bd 	bl	8004986 <HAL_I2C_MasterTxCpltCallback>
}
 800560c:	e029      	b.n	8005662 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b22      	cmp	r3, #34	; 0x22
 8005618:	d123      	bne.n	8005662 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d10b      	bne.n	800564c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff f9de 	bl	8004a06 <HAL_I2C_MemRxCpltCallback>
}
 800564a:	e00a      	b.n	8005662 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff f99c 	bl	800499a <HAL_I2C_MasterRxCpltCallback>
}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	fe00e800 	.word	0xfe00e800
 8005670:	ffff0000 	.word	0xffff0000

08005674 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005690:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2220      	movs	r2, #32
 8005698:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b21      	cmp	r3, #33	; 0x21
 800569e:	d002      	beq.n	80056a6 <I2C_ITSlaveCplt+0x32>
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b29      	cmp	r3, #41	; 0x29
 80056a4:	d108      	bne.n	80056b8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80056a6:	f248 0101 	movw	r1, #32769	; 0x8001
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fd92 	bl	80061d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2221      	movs	r2, #33	; 0x21
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
 80056b6:	e019      	b.n	80056ec <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b22      	cmp	r3, #34	; 0x22
 80056bc:	d002      	beq.n	80056c4 <I2C_ITSlaveCplt+0x50>
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b2a      	cmp	r3, #42	; 0x2a
 80056c2:	d108      	bne.n	80056d6 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80056c4:	f248 0102 	movw	r1, #32770	; 0x8002
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fd83 	bl	80061d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2222      	movs	r2, #34	; 0x22
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
 80056d4:	e00a      	b.n	80056ec <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b28      	cmp	r3, #40	; 0x28
 80056da:	d107      	bne.n	80056ec <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80056dc:	f248 0103 	movw	r1, #32771	; 0x8003
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fd77 	bl	80061d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b62      	ldr	r3, [pc, #392]	; (8005890 <I2C_ITSlaveCplt+0x21c>)
 8005708:	400b      	ands	r3, r1
 800570a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa2e 	bl	8005b6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800572a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01f      	beq.n	8005774 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005742:	e017      	b.n	8005774 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d012      	beq.n	8005774 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	b29a      	uxth	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d020      	beq.n	80057c0 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f043 0204 	orr.w	r2, r3, #4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8a4 	bl	8005940 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b28      	cmp	r3, #40	; 0x28
 8005802:	d141      	bne.n	8005888 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f846 	bl	8005898 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800580c:	e03c      	b.n	8005888 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005816:	d014      	beq.n	8005842 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fe06 	bl	800542a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <I2C_ITSlaveCplt+0x220>)
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff f8cf 	bl	80049de <HAL_I2C_ListenCpltCallback>
}
 8005840:	e022      	b.n	8005888 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b22      	cmp	r3, #34	; 0x22
 800584c:	d10e      	bne.n	800586c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fc f823 	bl	80018b0 <HAL_I2C_SlaveRxCpltCallback>
}
 800586a:	e00d      	b.n	8005888 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff f893 	bl	80049ae <HAL_I2C_SlaveTxCpltCallback>
}
 8005888:	bf00      	nop
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	fe00e800 	.word	0xfe00e800
 8005894:	ffff0000 	.word	0xffff0000

08005898 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <I2C_ITListenCplt+0xa4>)
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d022      	beq.n	8005914 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d012      	beq.n	8005914 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	f043 0204 	orr.w	r2, r3, #4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005914:	f248 0103 	movw	r1, #32771	; 0x8003
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fc5b 	bl	80061d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2210      	movs	r2, #16
 8005924:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff f855 	bl	80049de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	ffff0000 	.word	0xffff0000

08005940 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005950:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a6d      	ldr	r2, [pc, #436]	; (8005b14 <I2C_ITError+0x1d4>)
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b28      	cmp	r3, #40	; 0x28
 8005976:	d005      	beq.n	8005984 <I2C_ITError+0x44>
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b29      	cmp	r3, #41	; 0x29
 800597c:	d002      	beq.n	8005984 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b2a      	cmp	r3, #42	; 0x2a
 8005982:	d10b      	bne.n	800599c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005984:	2103      	movs	r1, #3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fc24 	bl	80061d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2228      	movs	r2, #40	; 0x28
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a60      	ldr	r2, [pc, #384]	; (8005b18 <I2C_ITError+0x1d8>)
 8005998:	635a      	str	r2, [r3, #52]	; 0x34
 800599a:	e030      	b.n	80059fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800599c:	f248 0103 	movw	r1, #32771	; 0x8003
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fc17 	bl	80061d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8e1 	bl	8005b6e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b60      	cmp	r3, #96	; 0x60
 80059b6:	d01f      	beq.n	80059f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d114      	bne.n	80059f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d109      	bne.n	80059f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2210      	movs	r2, #16
 80059e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e8:	f043 0204 	orr.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2220      	movs	r2, #32
 80059f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d039      	beq.n	8005a80 <I2C_ITError+0x140>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b11      	cmp	r3, #17
 8005a10:	d002      	beq.n	8005a18 <I2C_ITError+0xd8>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b21      	cmp	r3, #33	; 0x21
 8005a16:	d133      	bne.n	8005a80 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a26:	d107      	bne.n	8005a38 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe f8eb 	bl	8003c18 <HAL_DMA_GetState>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d017      	beq.n	8005a78 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	4a33      	ldr	r2, [pc, #204]	; (8005b1c <I2C_ITError+0x1dc>)
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fd ffeb 	bl	8003a38 <HAL_DMA_Abort_IT>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d04d      	beq.n	8005b04 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a72:	4610      	mov	r0, r2
 8005a74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a76:	e045      	b.n	8005b04 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f851 	bl	8005b20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a7e:	e041      	b.n	8005b04 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d039      	beq.n	8005afc <I2C_ITError+0x1bc>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b12      	cmp	r3, #18
 8005a8c:	d002      	beq.n	8005a94 <I2C_ITError+0x154>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b22      	cmp	r3, #34	; 0x22
 8005a92:	d133      	bne.n	8005afc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa2:	d107      	bne.n	8005ab4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ab2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe f8ad 	bl	8003c18 <HAL_DMA_GetState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d017      	beq.n	8005af4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <I2C_ITError+0x1dc>)
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fd ffad 	bl	8003a38 <HAL_DMA_Abort_IT>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aee:	4610      	mov	r0, r2
 8005af0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005af2:	e009      	b.n	8005b08 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f813 	bl	8005b20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005afa:	e005      	b.n	8005b08 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f80f 	bl	8005b20 <I2C_TreatErrorCallback>
  }
}
 8005b02:	e002      	b.n	8005b0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b08:	bf00      	nop
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	ffff0000 	.word	0xffff0000
 8005b18:	08004a43 	.word	0x08004a43
 8005b1c:	08005bb7 	.word	0x08005bb7

08005b20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d10e      	bne.n	8005b52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fe ff6f 	bl	8004a2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b50:	e009      	b.n	8005b66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fe ff5a 	bl	8004a1a <HAL_I2C_ErrorCallback>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d103      	bne.n	8005b8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d007      	beq.n	8005baa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	619a      	str	r2, [r3, #24]
  }
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be0:	2200      	movs	r2, #0
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff ff9b 	bl	8005b20 <I2C_TreatErrorCallback>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c02:	e031      	b.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d02d      	beq.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0c:	f7fc fc48 	bl	80024a0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d302      	bcc.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d122      	bne.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d113      	bne.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e00f      	b.n	8005c88 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d0be      	beq.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c9c:	e033      	b.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f900 	bl	8005ea8 <I2C_IsErrorOccurred>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e031      	b.n	8005d16 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d025      	beq.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fc fbf1 	bl	80024a0 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11a      	bne.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d013      	beq.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e007      	b.n	8005d16 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d1c4      	bne.n	8005c9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d2a:	e02f      	b.n	8005d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f8b9 	bl	8005ea8 <I2C_IsErrorOccurred>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e02d      	b.n	8005d9c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d40:	f7fc fbae 	bl	80024a0 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d302      	bcc.n	8005d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11a      	bne.n	8005d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d013      	beq.n	8005d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e007      	b.n	8005d9c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d1c8      	bne.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db0:	e06b      	b.n	8005e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f876 	bl	8005ea8 <I2C_IsErrorOccurred>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e069      	b.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d138      	bne.n	8005e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d105      	bne.n	8005dee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e055      	b.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d107      	bne.n	8005e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2210      	movs	r2, #16
 8005e02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2204      	movs	r2, #4
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
 8005e0a:	e002      	b.n	8005e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2220      	movs	r2, #32
 8005e18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6859      	ldr	r1, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b1f      	ldr	r3, [pc, #124]	; (8005ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005e26:	400b      	ands	r3, r1
 8005e28:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e029      	b.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fc fb2b 	bl	80024a0 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d116      	bne.n	8005e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d00f      	beq.n	8005e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f043 0220 	orr.w	r2, r3, #32
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e007      	b.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d18c      	bne.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	fe00e800 	.word	0xfe00e800

08005ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d068      	beq.n	8005fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005edc:	e049      	b.n	8005f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d045      	beq.n	8005f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fc fadb 	bl	80024a0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <I2C_IsErrorOccurred+0x54>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d13a      	bne.n	8005f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1e:	d121      	bne.n	8005f64 <I2C_IsErrorOccurred+0xbc>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f26:	d01d      	beq.n	8005f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f28:	7cfb      	ldrb	r3, [r7, #19]
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d01a      	beq.n	8005f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f3e:	f7fc faaf 	bl	80024a0 <HAL_GetTick>
 8005f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f44:	e00e      	b.n	8005f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f46:	f7fc faab 	bl	80024a0 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b19      	cmp	r3, #25
 8005f52:	d907      	bls.n	8005f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	f043 0320 	orr.w	r3, r3, #32
 8005f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005f62:	e006      	b.n	8005f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d1e9      	bne.n	8005f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d003      	beq.n	8005f88 <I2C_IsErrorOccurred+0xe0>
 8005f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0aa      	beq.n	8005ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2220      	movs	r2, #32
 8005f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f043 0304 	orr.w	r3, r3, #4
 8005f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f043 0308 	orr.w	r3, r3, #8
 8005fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01c      	beq.n	8006056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff fda6 	bl	8005b6e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <I2C_IsErrorOccurred+0x1bc>)
 800602e:	400b      	ands	r3, r1
 8006030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800605a:	4618      	mov	r0, r3
 800605c:	3728      	adds	r7, #40	; 0x28
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	fe00e800 	.word	0xfe00e800

08006068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	817b      	strh	r3, [r7, #10]
 8006076:	4613      	mov	r3, r2
 8006078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800607a:	897b      	ldrh	r3, [r7, #10]
 800607c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006080:	7a7b      	ldrb	r3, [r7, #9]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	4313      	orrs	r3, r2
 8006092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	0d5b      	lsrs	r3, r3, #21
 80060a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <I2C_TransferConfig+0x60>)
 80060a8:	430b      	orrs	r3, r1
 80060aa:	43db      	mvns	r3, r3
 80060ac:	ea02 0103 	and.w	r1, r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	03ff63ff 	.word	0x03ff63ff

080060cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	4a39      	ldr	r2, [pc, #228]	; (80061c8 <I2C_Enable_IRQ+0xfc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d032      	beq.n	800614c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80060ea:	4a38      	ldr	r2, [pc, #224]	; (80061cc <I2C_Enable_IRQ+0x100>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d02d      	beq.n	800614c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80060f4:	4a36      	ldr	r2, [pc, #216]	; (80061d0 <I2C_Enable_IRQ+0x104>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d028      	beq.n	800614c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da03      	bge.n	800610a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006108:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800610a:	887b      	ldrh	r3, [r7, #2]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800611a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800611c:	887b      	ldrh	r3, [r7, #2]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800612c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d103      	bne.n	800613c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800613a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	2b20      	cmp	r3, #32
 8006140:	d133      	bne.n	80061aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f043 0320 	orr.w	r3, r3, #32
 8006148:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800614a:	e02e      	b.n	80061aa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800614c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da03      	bge.n	800615c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800615a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800615c:	887b      	ldrh	r3, [r7, #2]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800616c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800616e:	887b      	ldrh	r3, [r7, #2]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800617e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	2b10      	cmp	r3, #16
 8006184:	d103      	bne.n	800618e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800618c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800618e:	887b      	ldrh	r3, [r7, #2]
 8006190:	2b20      	cmp	r3, #32
 8006192:	d103      	bne.n	800619c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800619a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800619c:	887b      	ldrh	r3, [r7, #2]
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d103      	bne.n	80061aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	601a      	str	r2, [r3, #0]
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	08004c33 	.word	0x08004c33
 80061cc:	08005055 	.word	0x08005055
 80061d0:	08004e09 	.word	0x08004e09

080061d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80061e4:	887b      	ldrh	r3, [r7, #2]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00f      	beq.n	800620e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80061f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006202:	2b28      	cmp	r3, #40	; 0x28
 8006204:	d003      	beq.n	800620e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800620c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800620e:	887b      	ldrh	r3, [r7, #2]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00f      	beq.n	8006238 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800621e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800622c:	2b28      	cmp	r3, #40	; 0x28
 800622e:	d003      	beq.n	8006238 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006236:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006238:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	da03      	bge.n	8006248 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006246:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006248:	887b      	ldrh	r3, [r7, #2]
 800624a:	2b10      	cmp	r3, #16
 800624c:	d103      	bne.n	8006256 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006254:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006256:	887b      	ldrh	r3, [r7, #2]
 8006258:	2b20      	cmp	r3, #32
 800625a:	d103      	bne.n	8006264 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f043 0320 	orr.w	r3, r3, #32
 8006262:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006264:	887b      	ldrh	r3, [r7, #2]
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d103      	bne.n	8006272 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006270:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6819      	ldr	r1, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	43da      	mvns	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	400a      	ands	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d138      	bne.n	8006318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e032      	b.n	800631a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	; 0x24
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b20      	cmp	r3, #32
 800633a:	d139      	bne.n	80063b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006346:	2302      	movs	r3, #2
 8006348:	e033      	b.n	80063b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2224      	movs	r2, #36	; 0x24
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006378:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a04      	ldr	r2, [pc, #16]	; (80063dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ce:	6013      	str	r3, [r2, #0]
}
 80063d0:	bf00      	nop
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40007000 	.word	0x40007000

080063e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40007000 	.word	0x40007000

080063fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640a:	d130      	bne.n	800646e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800640c:	4b23      	ldr	r3, [pc, #140]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006418:	d038      	beq.n	800648c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800641a:	4b20      	ldr	r3, [pc, #128]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006428:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800642a:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2232      	movs	r2, #50	; 0x32
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006436:	fba2 2303 	umull	r2, r3, r2, r3
 800643a:	0c9b      	lsrs	r3, r3, #18
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006440:	e002      	b.n	8006448 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3b01      	subs	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006448:	4b14      	ldr	r3, [pc, #80]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006454:	d102      	bne.n	800645c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f2      	bne.n	8006442 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006468:	d110      	bne.n	800648c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e00f      	b.n	800648e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800646e:	4b0b      	ldr	r3, [pc, #44]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647a:	d007      	beq.n	800648c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006484:	4a05      	ldr	r2, [pc, #20]	; (800649c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800648a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40007000 	.word	0x40007000
 80064a0:	20000004 	.word	0x20000004
 80064a4:	431bde83 	.word	0x431bde83

080064a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d102      	bne.n	80064bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f000 bc02 	b.w	8006cc0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064bc:	4b96      	ldr	r3, [pc, #600]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064c6:	4b94      	ldr	r3, [pc, #592]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80e4 	beq.w	80066a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <HAL_RCC_OscConfig+0x4c>
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b0c      	cmp	r3, #12
 80064e8:	f040 808b 	bne.w	8006602 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	f040 8087 	bne.w	8006602 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064f4:	4b88      	ldr	r3, [pc, #544]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_RCC_OscConfig+0x64>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e3d9      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	4b81      	ldr	r3, [pc, #516]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_RCC_OscConfig+0x7e>
 800651c:	4b7e      	ldr	r3, [pc, #504]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006524:	e005      	b.n	8006532 <HAL_RCC_OscConfig+0x8a>
 8006526:	4b7c      	ldr	r3, [pc, #496]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006532:	4293      	cmp	r3, r2
 8006534:	d223      	bcs.n	800657e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fd8c 	bl	8007058 <RCC_SetFlashLatencyFromMSIRange>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e3ba      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800654a:	4b73      	ldr	r3, [pc, #460]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a72      	ldr	r2, [pc, #456]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006550:	f043 0308 	orr.w	r3, r3, #8
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b70      	ldr	r3, [pc, #448]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	496d      	ldr	r1, [pc, #436]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006564:	4313      	orrs	r3, r2
 8006566:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006568:	4b6b      	ldr	r3, [pc, #428]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	4968      	ldr	r1, [pc, #416]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
 800657c:	e025      	b.n	80065ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800657e:	4b66      	ldr	r3, [pc, #408]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a65      	ldr	r2, [pc, #404]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	4b63      	ldr	r3, [pc, #396]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	4960      	ldr	r1, [pc, #384]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800659c:	4b5e      	ldr	r3, [pc, #376]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	495b      	ldr	r1, [pc, #364]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fd4c 	bl	8007058 <RCC_SetFlashLatencyFromMSIRange>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e37a      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065ca:	f000 fc81 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4b51      	ldr	r3, [pc, #324]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	4950      	ldr	r1, [pc, #320]	; (800671c <HAL_RCC_OscConfig+0x274>)
 80065dc:	5ccb      	ldrb	r3, [r1, r3]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	fa22 f303 	lsr.w	r3, r2, r3
 80065e6:	4a4e      	ldr	r2, [pc, #312]	; (8006720 <HAL_RCC_OscConfig+0x278>)
 80065e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065ea:	4b4e      	ldr	r3, [pc, #312]	; (8006724 <HAL_RCC_OscConfig+0x27c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fb ff06 	bl	8002400 <HAL_InitTick>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d052      	beq.n	80066a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	e35e      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d032      	beq.n	8006670 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a42      	ldr	r2, [pc, #264]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006616:	f7fb ff43 	bl	80024a0 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800661e:	f7fb ff3f 	bl	80024a0 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e347      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006630:	4b39      	ldr	r3, [pc, #228]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800663c:	4b36      	ldr	r3, [pc, #216]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a35      	ldr	r2, [pc, #212]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006642:	f043 0308 	orr.w	r3, r3, #8
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	4b33      	ldr	r3, [pc, #204]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4930      	ldr	r1, [pc, #192]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006656:	4313      	orrs	r3, r2
 8006658:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800665a:	4b2f      	ldr	r3, [pc, #188]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	492b      	ldr	r1, [pc, #172]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800666a:	4313      	orrs	r3, r2
 800666c:	604b      	str	r3, [r1, #4]
 800666e:	e01a      	b.n	80066a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006670:	4b29      	ldr	r3, [pc, #164]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a28      	ldr	r2, [pc, #160]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800667c:	f7fb ff10 	bl	80024a0 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006684:	f7fb ff0c 	bl	80024a0 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e314      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006696:	4b20      	ldr	r3, [pc, #128]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x1dc>
 80066a2:	e000      	b.n	80066a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d073      	beq.n	800679a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_OscConfig+0x21c>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b0c      	cmp	r3, #12
 80066bc:	d10e      	bne.n	80066dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d10b      	bne.n	80066dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c4:	4b14      	ldr	r3, [pc, #80]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d063      	beq.n	8006798 <HAL_RCC_OscConfig+0x2f0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d15f      	bne.n	8006798 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e2f1      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d106      	bne.n	80066f4 <HAL_RCC_OscConfig+0x24c>
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a0b      	ldr	r2, [pc, #44]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e025      	b.n	8006740 <HAL_RCC_OscConfig+0x298>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066fc:	d114      	bne.n	8006728 <HAL_RCC_OscConfig+0x280>
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a05      	ldr	r2, [pc, #20]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a02      	ldr	r2, [pc, #8]	; (8006718 <HAL_RCC_OscConfig+0x270>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e013      	b.n	8006740 <HAL_RCC_OscConfig+0x298>
 8006718:	40021000 	.word	0x40021000
 800671c:	0800bc10 	.word	0x0800bc10
 8006720:	20000004 	.word	0x20000004
 8006724:	20000008 	.word	0x20000008
 8006728:	4ba0      	ldr	r3, [pc, #640]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a9f      	ldr	r2, [pc, #636]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800672e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4b9d      	ldr	r3, [pc, #628]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a9c      	ldr	r2, [pc, #624]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800673a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d013      	beq.n	8006770 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fb feaa 	bl	80024a0 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fb fea6 	bl	80024a0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e2ae      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006762:	4b92      	ldr	r3, [pc, #584]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x2a8>
 800676e:	e014      	b.n	800679a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fb fe96 	bl	80024a0 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fb fe92 	bl	80024a0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	; 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e29a      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800678a:	4b88      	ldr	r3, [pc, #544]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x2d0>
 8006796:	e000      	b.n	800679a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d060      	beq.n	8006868 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_OscConfig+0x310>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b0c      	cmp	r3, #12
 80067b0:	d119      	bne.n	80067e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d116      	bne.n	80067e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067b8:	4b7c      	ldr	r3, [pc, #496]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_OscConfig+0x328>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e277      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d0:	4b76      	ldr	r3, [pc, #472]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	4973      	ldr	r1, [pc, #460]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067e4:	e040      	b.n	8006868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d023      	beq.n	8006836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067ee:	4b6f      	ldr	r3, [pc, #444]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a6e      	ldr	r2, [pc, #440]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80067f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fb fe51 	bl	80024a0 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006802:	f7fb fe4d 	bl	80024a0 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e255      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006814:	4b65      	ldr	r3, [pc, #404]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f0      	beq.n	8006802 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006820:	4b62      	ldr	r3, [pc, #392]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	495f      	ldr	r1, [pc, #380]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006830:	4313      	orrs	r3, r2
 8006832:	604b      	str	r3, [r1, #4]
 8006834:	e018      	b.n	8006868 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006836:	4b5d      	ldr	r3, [pc, #372]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a5c      	ldr	r2, [pc, #368]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800683c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006842:	f7fb fe2d 	bl	80024a0 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800684a:	f7fb fe29 	bl	80024a0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e231      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800685c:	4b53      	ldr	r3, [pc, #332]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d03c      	beq.n	80068ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01c      	beq.n	80068b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800687c:	4b4b      	ldr	r3, [pc, #300]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800687e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006882:	4a4a      	ldr	r2, [pc, #296]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fb fe08 	bl	80024a0 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006894:	f7fb fe04 	bl	80024a0 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e20c      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068a6:	4b41      	ldr	r3, [pc, #260]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80068a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0ef      	beq.n	8006894 <HAL_RCC_OscConfig+0x3ec>
 80068b4:	e01b      	b.n	80068ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068b6:	4b3d      	ldr	r3, [pc, #244]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80068b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068bc:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c6:	f7fb fdeb 	bl	80024a0 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ce:	f7fb fde7 	bl	80024a0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e1ef      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068e0:	4b32      	ldr	r3, [pc, #200]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ef      	bne.n	80068ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a6 	beq.w	8006a48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fc:	2300      	movs	r3, #0
 80068fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006900:	4b2a      	ldr	r3, [pc, #168]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10d      	bne.n	8006928 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800690c:	4b27      	ldr	r3, [pc, #156]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800690e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006910:	4a26      	ldr	r2, [pc, #152]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006916:	6593      	str	r3, [r2, #88]	; 0x58
 8006918:	4b24      	ldr	r3, [pc, #144]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006920:	60bb      	str	r3, [r7, #8]
 8006922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006924:	2301      	movs	r3, #1
 8006926:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006928:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <HAL_RCC_OscConfig+0x508>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d118      	bne.n	8006966 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006934:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <HAL_RCC_OscConfig+0x508>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_RCC_OscConfig+0x508>)
 800693a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006940:	f7fb fdae 	bl	80024a0 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006948:	f7fb fdaa 	bl	80024a0 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e1b2      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <HAL_RCC_OscConfig+0x508>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d108      	bne.n	8006980 <HAL_RCC_OscConfig+0x4d8>
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800697e:	e029      	b.n	80069d4 <HAL_RCC_OscConfig+0x52c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b05      	cmp	r3, #5
 8006986:	d115      	bne.n	80069b4 <HAL_RCC_OscConfig+0x50c>
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	4a07      	ldr	r2, [pc, #28]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 8006990:	f043 0304 	orr.w	r3, r3, #4
 8006994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	4a03      	ldr	r2, [pc, #12]	; (80069ac <HAL_RCC_OscConfig+0x504>)
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069a8:	e014      	b.n	80069d4 <HAL_RCC_OscConfig+0x52c>
 80069aa:	bf00      	nop
 80069ac:	40021000 	.word	0x40021000
 80069b0:	40007000 	.word	0x40007000
 80069b4:	4b9a      	ldr	r3, [pc, #616]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 80069b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ba:	4a99      	ldr	r2, [pc, #612]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069c4:	4b96      	ldr	r3, [pc, #600]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ca:	4a95      	ldr	r2, [pc, #596]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fb fd60 	bl	80024a0 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e2:	e00a      	b.n	80069fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e4:	f7fb fd5c 	bl	80024a0 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e162      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069fa:	4b89      	ldr	r3, [pc, #548]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ed      	beq.n	80069e4 <HAL_RCC_OscConfig+0x53c>
 8006a08:	e015      	b.n	8006a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0a:	f7fb fd49 	bl	80024a0 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fb fd45 	bl	80024a0 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e14b      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a28:	4b7d      	ldr	r3, [pc, #500]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1ed      	bne.n	8006a12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a36:	7ffb      	ldrb	r3, [r7, #31]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d105      	bne.n	8006a48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a3c:	4b78      	ldr	r3, [pc, #480]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a40:	4a77      	ldr	r2, [pc, #476]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03c      	beq.n	8006ace <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01c      	beq.n	8006a96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a5c:	4b70      	ldr	r3, [pc, #448]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a62:	4a6f      	ldr	r2, [pc, #444]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6c:	f7fb fd18 	bl	80024a0 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a74:	f7fb fd14 	bl	80024a0 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e11c      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a86:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ef      	beq.n	8006a74 <HAL_RCC_OscConfig+0x5cc>
 8006a94:	e01b      	b.n	8006ace <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a96:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a9c:	4a60      	ldr	r2, [pc, #384]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fb fcfb 	bl	80024a0 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006aae:	f7fb fcf7 	bl	80024a0 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e0ff      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ac0:	4b57      	ldr	r3, [pc, #348]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1ef      	bne.n	8006aae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80f3 	beq.w	8006cbe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	f040 80c9 	bne.w	8006c74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ae2:	4b4f      	ldr	r3, [pc, #316]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f003 0203 	and.w	r2, r3, #3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d12c      	bne.n	8006b50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	3b01      	subs	r3, #1
 8006b02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d123      	bne.n	8006b50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d11b      	bne.n	8006b50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d113      	bne.n	8006b50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	3b01      	subs	r3, #1
 8006b36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d109      	bne.n	8006b50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d06b      	beq.n	8006c28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b0c      	cmp	r3, #12
 8006b54:	d062      	beq.n	8006c1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b56:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e0ac      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b66:	4b2e      	ldr	r3, [pc, #184]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b72:	f7fb fc95 	bl	80024a0 <HAL_GetTick>
 8006b76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b7a:	f7fb fc91 	bl	80024a0 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e099      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b8c:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f0      	bne.n	8006b7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b98:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <HAL_RCC_OscConfig+0x77c>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ba8:	3a01      	subs	r2, #1
 8006baa:	0112      	lsls	r2, r2, #4
 8006bac:	4311      	orrs	r1, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bb2:	0212      	lsls	r2, r2, #8
 8006bb4:	4311      	orrs	r1, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006bba:	0852      	lsrs	r2, r2, #1
 8006bbc:	3a01      	subs	r2, #1
 8006bbe:	0552      	lsls	r2, r2, #21
 8006bc0:	4311      	orrs	r1, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006bc6:	0852      	lsrs	r2, r2, #1
 8006bc8:	3a01      	subs	r2, #1
 8006bca:	0652      	lsls	r2, r2, #25
 8006bcc:	4311      	orrs	r1, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bd2:	06d2      	lsls	r2, r2, #27
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	4912      	ldr	r1, [pc, #72]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bf4:	f7fb fc54 	bl	80024a0 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfc:	f7fb fc50 	bl	80024a0 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e058      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <HAL_RCC_OscConfig+0x778>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c1a:	e050      	b.n	8006cbe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e04f      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
 8006c20:	40021000 	.word	0x40021000
 8006c24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d144      	bne.n	8006cbe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c34:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c40:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c4c:	f7fb fc28 	bl	80024a0 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fb fc24 	bl	80024a0 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e02c      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x7ac>
 8006c72:	e024      	b.n	8006cbe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b0c      	cmp	r3, #12
 8006c78:	d01f      	beq.n	8006cba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c7a:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a12      	ldr	r2, [pc, #72]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fb fc0b 	bl	80024a0 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fb fc07 	bl	80024a0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e00f      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	4905      	ldr	r1, [pc, #20]	; (8006cc8 <HAL_RCC_OscConfig+0x820>)
 8006cb2:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <HAL_RCC_OscConfig+0x824>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60cb      	str	r3, [r1, #12]
 8006cb8:	e001      	b.n	8006cbe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	feeefffc 	.word	0xfeeefffc

08006cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0e7      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce4:	4b75      	ldr	r3, [pc, #468]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d910      	bls.n	8006d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf2:	4b72      	ldr	r3, [pc, #456]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 0207 	bic.w	r2, r3, #7
 8006cfa:	4970      	ldr	r1, [pc, #448]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d02:	4b6e      	ldr	r3, [pc, #440]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d001      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0cf      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	4b66      	ldr	r3, [pc, #408]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d908      	bls.n	8006d42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d30:	4b63      	ldr	r3, [pc, #396]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4960      	ldr	r1, [pc, #384]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d04c      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d107      	bne.n	8006d66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d56:	4b5a      	ldr	r3, [pc, #360]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d121      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e0a6      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d6e:	4b54      	ldr	r3, [pc, #336]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d115      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e09a      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d86:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e08e      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d96:	4b4a      	ldr	r3, [pc, #296]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e086      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006da6:	4b46      	ldr	r3, [pc, #280]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4943      	ldr	r1, [pc, #268]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db8:	f7fb fb72 	bl	80024a0 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7fb fb6e 	bl	80024a0 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e06e      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	4b3a      	ldr	r3, [pc, #232]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 020c 	and.w	r2, r3, #12
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1eb      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d208      	bcs.n	8006e16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e04:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	492b      	ldr	r1, [pc, #172]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d210      	bcs.n	8006e46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f023 0207 	bic.w	r2, r3, #7
 8006e2c:	4923      	ldr	r1, [pc, #140]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e34:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <HAL_RCC_ClockConfig+0x1ec>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e036      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e52:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	4918      	ldr	r1, [pc, #96]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e70:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4910      	ldr	r1, [pc, #64]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e84:	f000 f824 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	091b      	lsrs	r3, r3, #4
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	490b      	ldr	r1, [pc, #44]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8006e96:	5ccb      	ldrb	r3, [r1, r3]
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea0:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8006ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <HAL_RCC_ClockConfig+0x1fc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fb faa9 	bl	8002400 <HAL_InitTick>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40022000 	.word	0x40022000
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	0800bc10 	.word	0x0800bc10
 8006ec8:	20000004 	.word	0x20000004
 8006ecc:	20000008 	.word	0x20000008

08006ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	; 0x24
 8006ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ede:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ee8:	4b3b      	ldr	r3, [pc, #236]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x34>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	d121      	bne.n	8006f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d11e      	bne.n	8006f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f04:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f10:	4b31      	ldr	r3, [pc, #196]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f16:	0a1b      	lsrs	r3, r3, #8
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	e005      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f20:	4b2d      	ldr	r3, [pc, #180]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f2c:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10d      	bne.n	8006f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f40:	e00a      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d102      	bne.n	8006f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	e004      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f54:	4b23      	ldr	r3, [pc, #140]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b0c      	cmp	r3, #12
 8006f5c:	d134      	bne.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCC_GetSysClockFreq+0xa6>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d003      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0xac>
 8006f74:	e005      	b.n	8006f82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f78:	617b      	str	r3, [r7, #20]
      break;
 8006f7a:	e005      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f7c:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f7e:	617b      	str	r3, [r7, #20]
      break;
 8006f80:	e002      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	617b      	str	r3, [r7, #20]
      break;
 8006f86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f88:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	3301      	adds	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	fb03 f202 	mul.w	r2, r3, r2
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	0e5b      	lsrs	r3, r3, #25
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	3301      	adds	r3, #1
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3724      	adds	r7, #36	; 0x24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	0800bc28 	.word	0x0800bc28
 8006fe0:	00f42400 	.word	0x00f42400
 8006fe4:	007a1200 	.word	0x007a1200

08006fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000004 	.word	0x20000004

08007000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007004:	f7ff fff0 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007008:	4602      	mov	r2, r0
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	4904      	ldr	r1, [pc, #16]	; (8007028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007016:	5ccb      	ldrb	r3, [r1, r3]
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007020:	4618      	mov	r0, r3
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40021000 	.word	0x40021000
 8007028:	0800bc20 	.word	0x0800bc20

0800702c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007030:	f7ff ffda 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007034:	4602      	mov	r2, r0
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	0adb      	lsrs	r3, r3, #11
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	4904      	ldr	r1, [pc, #16]	; (8007054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007042:	5ccb      	ldrb	r3, [r1, r3]
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40021000 	.word	0x40021000
 8007054:	0800bc20 	.word	0x0800bc20

08007058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007064:	4b2a      	ldr	r3, [pc, #168]	; (8007110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007070:	f7ff f9b6 	bl	80063e0 <HAL_PWREx_GetVoltageRange>
 8007074:	6178      	str	r0, [r7, #20]
 8007076:	e014      	b.n	80070a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800707a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707c:	4a24      	ldr	r2, [pc, #144]	; (8007110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800707e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007082:	6593      	str	r3, [r2, #88]	; 0x58
 8007084:	4b22      	ldr	r3, [pc, #136]	; (8007110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007090:	f7ff f9a6 	bl	80063e0 <HAL_PWREx_GetVoltageRange>
 8007094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007096:	4b1e      	ldr	r3, [pc, #120]	; (8007110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709a:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800709c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a8:	d10b      	bne.n	80070c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d919      	bls.n	80070e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2ba0      	cmp	r3, #160	; 0xa0
 80070b4:	d902      	bls.n	80070bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070b6:	2302      	movs	r3, #2
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	e013      	b.n	80070e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070bc:	2301      	movs	r3, #1
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	e010      	b.n	80070e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b80      	cmp	r3, #128	; 0x80
 80070c6:	d902      	bls.n	80070ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80070c8:	2303      	movs	r3, #3
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	e00a      	b.n	80070e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d102      	bne.n	80070da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070d4:	2302      	movs	r3, #2
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	e004      	b.n	80070e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b70      	cmp	r3, #112	; 0x70
 80070de:	d101      	bne.n	80070e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070e0:	2301      	movs	r3, #1
 80070e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f023 0207 	bic.w	r2, r3, #7
 80070ec:	4909      	ldr	r1, [pc, #36]	; (8007114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80070f4:	4b07      	ldr	r3, [pc, #28]	; (8007114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d001      	beq.n	8007106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40021000 	.word	0x40021000
 8007114:	40022000 	.word	0x40022000

08007118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007120:	2300      	movs	r3, #0
 8007122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007124:	2300      	movs	r3, #0
 8007126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007130:	2b00      	cmp	r3, #0
 8007132:	d031      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800713c:	d01a      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800713e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007142:	d814      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007148:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800714c:	d10f      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800714e:	4b5d      	ldr	r3, [pc, #372]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4a5c      	ldr	r2, [pc, #368]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007158:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800715a:	e00c      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f9de 	bl	8007524 <RCCEx_PLLSAI1_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800716c:	e003      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	74fb      	strb	r3, [r7, #19]
      break;
 8007172:	e000      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007176:	7cfb      	ldrb	r3, [r7, #19]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10b      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800717c:	4b51      	ldr	r3, [pc, #324]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	494e      	ldr	r1, [pc, #312]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800718c:	4313      	orrs	r3, r2
 800718e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007192:	e001      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 809e 	beq.w	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071a6:	2300      	movs	r3, #0
 80071a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071aa:	4b46      	ldr	r3, [pc, #280]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e000      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80071ba:	2300      	movs	r3, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c0:	4b40      	ldr	r3, [pc, #256]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c4:	4a3f      	ldr	r2, [pc, #252]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ca:	6593      	str	r3, [r2, #88]	; 0x58
 80071cc:	4b3d      	ldr	r3, [pc, #244]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d8:	2301      	movs	r3, #1
 80071da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071dc:	4b3a      	ldr	r3, [pc, #232]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a39      	ldr	r2, [pc, #228]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80071e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071e8:	f7fb f95a 	bl	80024a0 <HAL_GetTick>
 80071ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071ee:	e009      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f0:	f7fb f956 	bl	80024a0 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d902      	bls.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	74fb      	strb	r3, [r7, #19]
        break;
 8007202:	e005      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007204:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0ef      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007210:	7cfb      	ldrb	r3, [r7, #19]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d15a      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007216:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007220:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	429a      	cmp	r2, r3
 8007230:	d019      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800723e:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007244:	4a1f      	ldr	r2, [pc, #124]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800724a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800724e:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800725e:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d016      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fb f916 	bl	80024a0 <HAL_GetTick>
 8007274:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007276:	e00b      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007278:	f7fb f912 	bl	80024a0 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	f241 3288 	movw	r2, #5000	; 0x1388
 8007286:	4293      	cmp	r3, r2
 8007288:	d902      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	74fb      	strb	r3, [r7, #19]
            break;
 800728e:	e006      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007290:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0ec      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800729e:	7cfb      	ldrb	r3, [r7, #19]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b2:	4904      	ldr	r1, [pc, #16]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80072ba:	e009      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072bc:	7cfb      	ldrb	r3, [r7, #19]
 80072be:	74bb      	strb	r3, [r7, #18]
 80072c0:	e006      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80072c2:	bf00      	nop
 80072c4:	40021000 	.word	0x40021000
 80072c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072d0:	7c7b      	ldrb	r3, [r7, #17]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d105      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072d6:	4b8a      	ldr	r3, [pc, #552]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	4a89      	ldr	r2, [pc, #548]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072ee:	4b84      	ldr	r3, [pc, #528]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f023 0203 	bic.w	r2, r3, #3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4980      	ldr	r1, [pc, #512]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007310:	4b7b      	ldr	r3, [pc, #492]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007316:	f023 020c 	bic.w	r2, r3, #12
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	4978      	ldr	r1, [pc, #480]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007332:	4b73      	ldr	r3, [pc, #460]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	496f      	ldr	r1, [pc, #444]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007354:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007362:	4967      	ldr	r1, [pc, #412]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007376:	4b62      	ldr	r3, [pc, #392]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	495e      	ldr	r1, [pc, #376]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007398:	4b59      	ldr	r3, [pc, #356]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	4956      	ldr	r1, [pc, #344]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073ba:	4b51      	ldr	r3, [pc, #324]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	494d      	ldr	r1, [pc, #308]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d028      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073dc:	4b48      	ldr	r3, [pc, #288]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	4945      	ldr	r1, [pc, #276]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073fa:	d106      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073fc:	4b40      	ldr	r3, [pc, #256]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	4a3f      	ldr	r2, [pc, #252]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007406:	60d3      	str	r3, [r2, #12]
 8007408:	e011      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007412:	d10c      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3304      	adds	r3, #4
 8007418:	2101      	movs	r1, #1
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f882 	bl	8007524 <RCCEx_PLLSAI1_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007424:	7cfb      	ldrb	r3, [r7, #19]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800742a:	7cfb      	ldrb	r3, [r7, #19]
 800742c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d028      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800743a:	4b31      	ldr	r3, [pc, #196]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007448:	492d      	ldr	r1, [pc, #180]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007458:	d106      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800745a:	4b29      	ldr	r3, [pc, #164]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	4a28      	ldr	r2, [pc, #160]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007464:	60d3      	str	r3, [r2, #12]
 8007466:	e011      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007470:	d10c      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3304      	adds	r3, #4
 8007476:	2101      	movs	r1, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f853 	bl	8007524 <RCCEx_PLLSAI1_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007482:	7cfb      	ldrb	r3, [r7, #19]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007488:	7cfb      	ldrb	r3, [r7, #19]
 800748a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01c      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007498:	4b19      	ldr	r3, [pc, #100]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a6:	4916      	ldr	r1, [pc, #88]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074b6:	d10c      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	2102      	movs	r1, #2
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f830 	bl	8007524 <RCCEx_PLLSAI1_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074c8:	7cfb      	ldrb	r3, [r7, #19]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80074f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40021000 	.word	0x40021000

08007504 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a04      	ldr	r2, [pc, #16]	; (8007520 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800750e:	f043 0304 	orr.w	r3, r3, #4
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40021000 	.word	0x40021000

08007524 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007532:	4b74      	ldr	r3, [pc, #464]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d018      	beq.n	8007570 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800753e:	4b71      	ldr	r3, [pc, #452]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f003 0203 	and.w	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d10d      	bne.n	800756a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
       ||
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007556:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	091b      	lsrs	r3, r3, #4
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
       ||
 8007566:	429a      	cmp	r2, r3
 8007568:	d047      	beq.n	80075fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	e044      	b.n	80075fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d018      	beq.n	80075aa <RCCEx_PLLSAI1_Config+0x86>
 8007578:	2b03      	cmp	r3, #3
 800757a:	d825      	bhi.n	80075c8 <RCCEx_PLLSAI1_Config+0xa4>
 800757c:	2b01      	cmp	r3, #1
 800757e:	d002      	beq.n	8007586 <RCCEx_PLLSAI1_Config+0x62>
 8007580:	2b02      	cmp	r3, #2
 8007582:	d009      	beq.n	8007598 <RCCEx_PLLSAI1_Config+0x74>
 8007584:	e020      	b.n	80075c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007586:	4b5f      	ldr	r3, [pc, #380]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11d      	bne.n	80075ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007596:	e01a      	b.n	80075ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007598:	4b5a      	ldr	r3, [pc, #360]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d116      	bne.n	80075d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075a8:	e013      	b.n	80075d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075aa:	4b56      	ldr	r3, [pc, #344]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10f      	bne.n	80075d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075b6:	4b53      	ldr	r3, [pc, #332]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075c6:	e006      	b.n	80075d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
      break;
 80075cc:	e004      	b.n	80075d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10d      	bne.n	80075fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80075de:	4b49      	ldr	r3, [pc, #292]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	430b      	orrs	r3, r1
 80075f4:	4943      	ldr	r1, [pc, #268]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d17c      	bne.n	80076fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007600:	4b40      	ldr	r3, [pc, #256]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3f      	ldr	r2, [pc, #252]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800760a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760c:	f7fa ff48 	bl	80024a0 <HAL_GetTick>
 8007610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007612:	e009      	b.n	8007628 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007614:	f7fa ff44 	bl	80024a0 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d902      	bls.n	8007628 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	73fb      	strb	r3, [r7, #15]
        break;
 8007626:	e005      	b.n	8007634 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1ef      	bne.n	8007614 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d15f      	bne.n	80076fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d110      	bne.n	8007662 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007640:	4b30      	ldr	r3, [pc, #192]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007648:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6892      	ldr	r2, [r2, #8]
 8007650:	0211      	lsls	r1, r2, #8
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68d2      	ldr	r2, [r2, #12]
 8007656:	06d2      	lsls	r2, r2, #27
 8007658:	430a      	orrs	r2, r1
 800765a:	492a      	ldr	r1, [pc, #168]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800765c:	4313      	orrs	r3, r2
 800765e:	610b      	str	r3, [r1, #16]
 8007660:	e027      	b.n	80076b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d112      	bne.n	800768e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007668:	4b26      	ldr	r3, [pc, #152]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6892      	ldr	r2, [r2, #8]
 8007678:	0211      	lsls	r1, r2, #8
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6912      	ldr	r2, [r2, #16]
 800767e:	0852      	lsrs	r2, r2, #1
 8007680:	3a01      	subs	r2, #1
 8007682:	0552      	lsls	r2, r2, #21
 8007684:	430a      	orrs	r2, r1
 8007686:	491f      	ldr	r1, [pc, #124]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007688:	4313      	orrs	r3, r2
 800768a:	610b      	str	r3, [r1, #16]
 800768c:	e011      	b.n	80076b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800768e:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007696:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6892      	ldr	r2, [r2, #8]
 800769e:	0211      	lsls	r1, r2, #8
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6952      	ldr	r2, [r2, #20]
 80076a4:	0852      	lsrs	r2, r2, #1
 80076a6:	3a01      	subs	r2, #1
 80076a8:	0652      	lsls	r2, r2, #25
 80076aa:	430a      	orrs	r2, r1
 80076ac:	4915      	ldr	r1, [pc, #84]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a13      	ldr	r2, [pc, #76]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076be:	f7fa feef 	bl	80024a0 <HAL_GetTick>
 80076c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076c4:	e009      	b.n	80076da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076c6:	f7fa feeb 	bl	80024a0 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d902      	bls.n	80076da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	73fb      	strb	r3, [r7, #15]
          break;
 80076d8:	e005      	b.n	80076e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0ef      	beq.n	80076c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	4903      	ldr	r1, [pc, #12]	; (8007704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40021000 	.word	0x40021000

08007708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e049      	b.n	80077ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fa fbf0 	bl	8001f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f000 fe3a 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	bf0c      	ite	eq
 80077dc:	2301      	moveq	r3, #1
 80077de:	2300      	movne	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e03c      	b.n	800785e <HAL_TIM_PWM_Start_DMA+0xa6>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d109      	bne.n	80077fe <HAL_TIM_PWM_Start_DMA+0x46>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	bf0c      	ite	eq
 80077f6:	2301      	moveq	r3, #1
 80077f8:	2300      	movne	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	e02f      	b.n	800785e <HAL_TIM_PWM_Start_DMA+0xa6>
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d109      	bne.n	8007818 <HAL_TIM_PWM_Start_DMA+0x60>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	bf0c      	ite	eq
 8007810:	2301      	moveq	r3, #1
 8007812:	2300      	movne	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	e022      	b.n	800785e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b0c      	cmp	r3, #12
 800781c:	d109      	bne.n	8007832 <HAL_TIM_PWM_Start_DMA+0x7a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	bf0c      	ite	eq
 800782a:	2301      	moveq	r3, #1
 800782c:	2300      	movne	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	e015      	b.n	800785e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b10      	cmp	r3, #16
 8007836:	d109      	bne.n	800784c <HAL_TIM_PWM_Start_DMA+0x94>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e008      	b.n	800785e <HAL_TIM_PWM_Start_DMA+0xa6>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b02      	cmp	r3, #2
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007862:	2302      	movs	r3, #2
 8007864:	e18d      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_TIM_PWM_Start_DMA+0xc8>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e03c      	b.n	80078fa <HAL_TIM_PWM_Start_DMA+0x142>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d109      	bne.n	800789a <HAL_TIM_PWM_Start_DMA+0xe2>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	e02f      	b.n	80078fa <HAL_TIM_PWM_Start_DMA+0x142>
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d109      	bne.n	80078b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	bf0c      	ite	eq
 80078ac:	2301      	moveq	r3, #1
 80078ae:	2300      	movne	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	e022      	b.n	80078fa <HAL_TIM_PWM_Start_DMA+0x142>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b0c      	cmp	r3, #12
 80078b8:	d109      	bne.n	80078ce <HAL_TIM_PWM_Start_DMA+0x116>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	bf0c      	ite	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	2300      	movne	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	e015      	b.n	80078fa <HAL_TIM_PWM_Start_DMA+0x142>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d109      	bne.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x130>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	e008      	b.n	80078fa <HAL_TIM_PWM_Start_DMA+0x142>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d034      	beq.n	8007968 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_TIM_PWM_Start_DMA+0x152>
 8007904:	887b      	ldrh	r3, [r7, #2]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e139      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start_DMA+0x166>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800791c:	e026      	b.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b04      	cmp	r3, #4
 8007922:	d104      	bne.n	800792e <HAL_TIM_PWM_Start_DMA+0x176>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800792c:	e01e      	b.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b08      	cmp	r3, #8
 8007932:	d104      	bne.n	800793e <HAL_TIM_PWM_Start_DMA+0x186>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800793c:	e016      	b.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b0c      	cmp	r3, #12
 8007942:	d104      	bne.n	800794e <HAL_TIM_PWM_Start_DMA+0x196>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800794c:	e00e      	b.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b10      	cmp	r3, #16
 8007952:	d104      	bne.n	800795e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800795c:	e006      	b.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007966:	e001      	b.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e10a      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b0c      	cmp	r3, #12
 8007970:	f200 80ae 	bhi.w	8007ad0 <HAL_TIM_PWM_Start_DMA+0x318>
 8007974:	a201      	add	r2, pc, #4	; (adr r2, 800797c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	080079b1 	.word	0x080079b1
 8007980:	08007ad1 	.word	0x08007ad1
 8007984:	08007ad1 	.word	0x08007ad1
 8007988:	08007ad1 	.word	0x08007ad1
 800798c:	080079f9 	.word	0x080079f9
 8007990:	08007ad1 	.word	0x08007ad1
 8007994:	08007ad1 	.word	0x08007ad1
 8007998:	08007ad1 	.word	0x08007ad1
 800799c:	08007a41 	.word	0x08007a41
 80079a0:	08007ad1 	.word	0x08007ad1
 80079a4:	08007ad1 	.word	0x08007ad1
 80079a8:	08007ad1 	.word	0x08007ad1
 80079ac:	08007a89 	.word	0x08007a89
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	4a75      	ldr	r2, [pc, #468]	; (8007b8c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	4a74      	ldr	r2, [pc, #464]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80079be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	4a73      	ldr	r2, [pc, #460]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80079c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3334      	adds	r3, #52	; 0x34
 80079d4:	461a      	mov	r2, r3
 80079d6:	887b      	ldrh	r3, [r7, #2]
 80079d8:	f7fb ffce 	bl	8003978 <HAL_DMA_Start_IT>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e0cd      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f4:	60da      	str	r2, [r3, #12]
      break;
 80079f6:	e06e      	b.n	8007ad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	4a63      	ldr	r2, [pc, #396]	; (8007b8c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80079fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	4a62      	ldr	r2, [pc, #392]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	4a61      	ldr	r2, [pc, #388]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3338      	adds	r3, #56	; 0x38
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	887b      	ldrh	r3, [r7, #2]
 8007a20:	f7fb ffaa 	bl	8003978 <HAL_DMA_Start_IT>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e0a9      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a3c:	60da      	str	r2, [r3, #12]
      break;
 8007a3e:	e04a      	b.n	8007ad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a51      	ldr	r2, [pc, #324]	; (8007b8c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	4a50      	ldr	r2, [pc, #320]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4a4f      	ldr	r2, [pc, #316]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	333c      	adds	r3, #60	; 0x3c
 8007a64:	461a      	mov	r2, r3
 8007a66:	887b      	ldrh	r3, [r7, #2]
 8007a68:	f7fb ff86 	bl	8003978 <HAL_DMA_Start_IT>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e085      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a84:	60da      	str	r2, [r3, #12]
      break;
 8007a86:	e026      	b.n	8007ad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	4a3f      	ldr	r2, [pc, #252]	; (8007b8c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	4a3e      	ldr	r2, [pc, #248]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	4a3d      	ldr	r2, [pc, #244]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3340      	adds	r3, #64	; 0x40
 8007aac:	461a      	mov	r2, r3
 8007aae:	887b      	ldrh	r3, [r7, #2]
 8007ab0:	f7fb ff62 	bl	8003978 <HAL_DMA_Start_IT>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e061      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007acc:	60da      	str	r2, [r3, #12]
      break;
 8007ace:	e002      	b.n	8007ad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d151      	bne.n	8007b80 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 ff4d 	bl	8008984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIM_PWM_Start_DMA+0x350>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIM_PWM_Start_DMA+0x350>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a27      	ldr	r2, [pc, #156]	; (8007ba0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d101      	bne.n	8007b0c <HAL_TIM_PWM_Start_DMA+0x354>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e000      	b.n	8007b0e <HAL_TIM_PWM_Start_DMA+0x356>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_TIM_PWM_Start_DMA+0x388>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_PWM_Start_DMA+0x388>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a18      	ldr	r2, [pc, #96]	; (8007b9c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d115      	bne.n	8007b6c <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b06      	cmp	r3, #6
 8007b50:	d015      	beq.n	8007b7e <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b58:	d011      	beq.n	8007b7e <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0201 	orr.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6a:	e008      	b.n	8007b7e <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e000      	b.n	8007b80 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	080082af 	.word	0x080082af
 8007b90:	08008357 	.word	0x08008357
 8007b94:	0800821d 	.word	0x0800821d
 8007b98:	40012c00 	.word	0x40012c00
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	00010007 	.word	0x00010007

08007ba8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b0c      	cmp	r3, #12
 8007bba:	d855      	bhi.n	8007c68 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007bbc:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bf9 	.word	0x08007bf9
 8007bc8:	08007c69 	.word	0x08007c69
 8007bcc:	08007c69 	.word	0x08007c69
 8007bd0:	08007c69 	.word	0x08007c69
 8007bd4:	08007c15 	.word	0x08007c15
 8007bd8:	08007c69 	.word	0x08007c69
 8007bdc:	08007c69 	.word	0x08007c69
 8007be0:	08007c69 	.word	0x08007c69
 8007be4:	08007c31 	.word	0x08007c31
 8007be8:	08007c69 	.word	0x08007c69
 8007bec:	08007c69 	.word	0x08007c69
 8007bf0:	08007c69 	.word	0x08007c69
 8007bf4:	08007c4d 	.word	0x08007c4d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fb ff13 	bl	8003a38 <HAL_DMA_Abort_IT>
      break;
 8007c12:	e02c      	b.n	8007c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fb ff05 	bl	8003a38 <HAL_DMA_Abort_IT>
      break;
 8007c2e:	e01e      	b.n	8007c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fb fef7 	bl	8003a38 <HAL_DMA_Abort_IT>
      break;
 8007c4a:	e010      	b.n	8007c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fb fee9 	bl	8003a38 <HAL_DMA_Abort_IT>
      break;
 8007c66:	e002      	b.n	8007c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d176      	bne.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fe81 	bl	8008984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a39      	ldr	r2, [pc, #228]	; (8007d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d009      	beq.n	8007ca0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a37      	ldr	r2, [pc, #220]	; (8007d70 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a36      	ldr	r2, [pc, #216]	; (8007d74 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d017      	beq.n	8007cda <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6a1a      	ldr	r2, [r3, #32]
 8007cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10f      	bne.n	8007cda <HAL_TIM_PWM_Stop_DMA+0x132>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a1a      	ldr	r2, [r3, #32]
 8007cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <HAL_TIM_PWM_Stop_DMA+0x132>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6a1a      	ldr	r2, [r3, #32]
 8007ce0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10f      	bne.n	8007d0a <HAL_TIM_PWM_Stop_DMA+0x162>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6a1a      	ldr	r2, [r3, #32]
 8007cf0:	f240 4344 	movw	r3, #1092	; 0x444
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d107      	bne.n	8007d0a <HAL_TIM_PWM_Stop_DMA+0x162>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0201 	bic.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d104      	bne.n	8007d1a <HAL_TIM_PWM_Stop_DMA+0x172>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d18:	e023      	b.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d104      	bne.n	8007d2a <HAL_TIM_PWM_Stop_DMA+0x182>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d28:	e01b      	b.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d104      	bne.n	8007d3a <HAL_TIM_PWM_Stop_DMA+0x192>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d38:	e013      	b.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b0c      	cmp	r3, #12
 8007d3e:	d104      	bne.n	8007d4a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d48:	e00b      	b.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d104      	bne.n	8007d5a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d58:	e003      	b.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40012c00 	.word	0x40012c00
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400

08007d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d020      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01b      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0202 	mvn.w	r2, #2
 8007dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa02 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9f4 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f9 ff23 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d020      	beq.n	8007e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01b      	beq.n	8007e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f06f 0204 	mvn.w	r2, #4
 8007df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f9dc 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007e14:	e005      	b.n	8007e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9ce 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7f9 fefd 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d020      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01b      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0208 	mvn.w	r2, #8
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f9b6 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f9a8 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7f9 fed7 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d020      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01b      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0210 	mvn.w	r2, #16
 8007e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2208      	movs	r2, #8
 8007e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f990 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007eac:	e005      	b.n	8007eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f982 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7f9 feb1 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0201 	mvn.w	r2, #1
 8007edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f960 	bl	80081a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fe4c 	bl	8008ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fe44 	bl	8008bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00c      	beq.n	8007f50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f952 	bl	80081f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0220 	mvn.w	r2, #32
 8007f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fe0c 	bl	8008b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0ff      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b14      	cmp	r3, #20
 8007fa6:	f200 80f0 	bhi.w	800818a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007faa:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	0800818b 	.word	0x0800818b
 8007fb8:	0800818b 	.word	0x0800818b
 8007fbc:	0800818b 	.word	0x0800818b
 8007fc0:	08008045 	.word	0x08008045
 8007fc4:	0800818b 	.word	0x0800818b
 8007fc8:	0800818b 	.word	0x0800818b
 8007fcc:	0800818b 	.word	0x0800818b
 8007fd0:	08008087 	.word	0x08008087
 8007fd4:	0800818b 	.word	0x0800818b
 8007fd8:	0800818b 	.word	0x0800818b
 8007fdc:	0800818b 	.word	0x0800818b
 8007fe0:	080080c7 	.word	0x080080c7
 8007fe4:	0800818b 	.word	0x0800818b
 8007fe8:	0800818b 	.word	0x0800818b
 8007fec:	0800818b 	.word	0x0800818b
 8007ff0:	08008109 	.word	0x08008109
 8007ff4:	0800818b 	.word	0x0800818b
 8007ff8:	0800818b 	.word	0x0800818b
 8007ffc:	0800818b 	.word	0x0800818b
 8008000:	08008149 	.word	0x08008149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fa3c 	bl	8008488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0208 	orr.w	r2, r2, #8
 800801e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0204 	bic.w	r2, r2, #4
 800802e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6999      	ldr	r1, [r3, #24]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	619a      	str	r2, [r3, #24]
      break;
 8008042:	e0a5      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fa98 	bl	8008580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800805e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800806e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6999      	ldr	r1, [r3, #24]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	021a      	lsls	r2, r3, #8
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	619a      	str	r2, [r3, #24]
      break;
 8008084:	e084      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 faf1 	bl	8008674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0208 	orr.w	r2, r2, #8
 80080a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0204 	bic.w	r2, r2, #4
 80080b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69d9      	ldr	r1, [r3, #28]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	61da      	str	r2, [r3, #28]
      break;
 80080c4:	e064      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fb49 	bl	8008764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69d9      	ldr	r1, [r3, #28]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	021a      	lsls	r2, r3, #8
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	61da      	str	r2, [r3, #28]
      break;
 8008106:	e043      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68b9      	ldr	r1, [r7, #8]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fb86 	bl	8008820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0208 	orr.w	r2, r2, #8
 8008122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0204 	bic.w	r2, r2, #4
 8008132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008146:	e023      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fbbe 	bl	80088d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008188:	e002      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
      break;
 800818e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop

080081a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d107      	bne.n	8008244 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008242:	e02a      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d107      	bne.n	800825e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2202      	movs	r2, #2
 8008252:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800825c:	e01d      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d107      	bne.n	8008278 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2204      	movs	r2, #4
 800826c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008276:	e010      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d107      	bne.n	8008292 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2208      	movs	r2, #8
 8008286:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008290:	e003      	b.n	800829a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff ffb4 	bl	8008208 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	771a      	strb	r2, [r3, #28]
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d10b      	bne.n	80082de <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d136      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082dc:	e031      	b.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d10b      	bne.n	8008300 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2202      	movs	r2, #2
 80082ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d125      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082fe:	e020      	b.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d10b      	bne.n	8008322 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2204      	movs	r2, #4
 800830e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d114      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008320:	e00f      	b.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d10a      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2208      	movs	r2, #8
 8008330:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7f9 fc6a 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	771a      	strb	r2, [r3, #28]
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d103      	bne.n	8008376 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	771a      	strb	r2, [r3, #28]
 8008374:	e019      	b.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d103      	bne.n	8008388 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2202      	movs	r2, #2
 8008384:	771a      	strb	r2, [r3, #28]
 8008386:	e010      	b.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d103      	bne.n	800839a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2204      	movs	r2, #4
 8008396:	771a      	strb	r2, [r3, #28]
 8008398:	e007      	b.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d102      	bne.n	80083aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2208      	movs	r2, #8
 80083a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff ff18 	bl	80081e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	771a      	strb	r2, [r3, #28]
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a2a      	ldr	r2, [pc, #168]	; (800847c <TIM_Base_SetConfig+0xbc>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_Base_SetConfig+0x20>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083de:	d108      	bne.n	80083f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a21      	ldr	r2, [pc, #132]	; (800847c <TIM_Base_SetConfig+0xbc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00b      	beq.n	8008412 <TIM_Base_SetConfig+0x52>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008400:	d007      	beq.n	8008412 <TIM_Base_SetConfig+0x52>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <TIM_Base_SetConfig+0xc0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_Base_SetConfig+0x52>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <TIM_Base_SetConfig+0xc4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d108      	bne.n	8008424 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a0c      	ldr	r2, [pc, #48]	; (800847c <TIM_Base_SetConfig+0xbc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d007      	beq.n	8008460 <TIM_Base_SetConfig+0xa0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a0b      	ldr	r2, [pc, #44]	; (8008480 <TIM_Base_SetConfig+0xc0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_Base_SetConfig+0xa0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0a      	ldr	r2, [pc, #40]	; (8008484 <TIM_Base_SetConfig+0xc4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d103      	bne.n	8008468 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	615a      	str	r2, [r3, #20]
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40012c00 	.word	0x40012c00
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400

08008488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f023 0201 	bic.w	r2, r3, #1
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0303 	bic.w	r3, r3, #3
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f023 0302 	bic.w	r3, r3, #2
 80084d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a24      	ldr	r2, [pc, #144]	; (8008574 <TIM_OC1_SetConfig+0xec>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d007      	beq.n	80084f8 <TIM_OC1_SetConfig+0x70>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a23      	ldr	r2, [pc, #140]	; (8008578 <TIM_OC1_SetConfig+0xf0>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d003      	beq.n	80084f8 <TIM_OC1_SetConfig+0x70>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a22      	ldr	r2, [pc, #136]	; (800857c <TIM_OC1_SetConfig+0xf4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d10c      	bne.n	8008512 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f023 0308 	bic.w	r3, r3, #8
 80084fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f023 0304 	bic.w	r3, r3, #4
 8008510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a17      	ldr	r2, [pc, #92]	; (8008574 <TIM_OC1_SetConfig+0xec>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d007      	beq.n	800852a <TIM_OC1_SetConfig+0xa2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a16      	ldr	r2, [pc, #88]	; (8008578 <TIM_OC1_SetConfig+0xf0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d003      	beq.n	800852a <TIM_OC1_SetConfig+0xa2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a15      	ldr	r2, [pc, #84]	; (800857c <TIM_OC1_SetConfig+0xf4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d111      	bne.n	800854e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	bf00      	nop
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	40012c00 	.word	0x40012c00
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400

08008580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f023 0210 	bic.w	r2, r3, #16
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f023 0320 	bic.w	r3, r3, #32
 80085ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a22      	ldr	r2, [pc, #136]	; (8008668 <TIM_OC2_SetConfig+0xe8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d10d      	bne.n	8008600 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a19      	ldr	r2, [pc, #100]	; (8008668 <TIM_OC2_SetConfig+0xe8>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <TIM_OC2_SetConfig+0x98>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a18      	ldr	r2, [pc, #96]	; (800866c <TIM_OC2_SetConfig+0xec>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_OC2_SetConfig+0x98>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a17      	ldr	r2, [pc, #92]	; (8008670 <TIM_OC2_SetConfig+0xf0>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d113      	bne.n	8008640 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	40012c00 	.word	0x40012c00
 800866c:	40014000 	.word	0x40014000
 8008670:	40014400 	.word	0x40014400

08008674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a21      	ldr	r2, [pc, #132]	; (8008758 <TIM_OC3_SetConfig+0xe4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d10d      	bne.n	80086f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <TIM_OC3_SetConfig+0xe4>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_OC3_SetConfig+0x96>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <TIM_OC3_SetConfig+0xe8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_OC3_SetConfig+0x96>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a16      	ldr	r2, [pc, #88]	; (8008760 <TIM_OC3_SetConfig+0xec>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d113      	bne.n	8008732 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40012c00 	.word	0x40012c00
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400

08008764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	031b      	lsls	r3, r3, #12
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a14      	ldr	r2, [pc, #80]	; (8008814 <TIM_OC4_SetConfig+0xb0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_OC4_SetConfig+0x74>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a13      	ldr	r2, [pc, #76]	; (8008818 <TIM_OC4_SetConfig+0xb4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_OC4_SetConfig+0x74>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a12      	ldr	r2, [pc, #72]	; (800881c <TIM_OC4_SetConfig+0xb8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d109      	bne.n	80087ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	019b      	lsls	r3, r3, #6
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	621a      	str	r2, [r3, #32]
}
 8008806:	bf00      	nop
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40014000 	.word	0x40014000
 800881c:	40014400 	.word	0x40014400

08008820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a13      	ldr	r2, [pc, #76]	; (80088c4 <TIM_OC5_SetConfig+0xa4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_OC5_SetConfig+0x6a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <TIM_OC5_SetConfig+0xa8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_OC5_SetConfig+0x6a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a11      	ldr	r2, [pc, #68]	; (80088cc <TIM_OC5_SetConfig+0xac>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d109      	bne.n	800889e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	621a      	str	r2, [r3, #32]
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40014000 	.word	0x40014000
 80088cc:	40014400 	.word	0x40014400

080088d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4313      	orrs	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	051b      	lsls	r3, r3, #20
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a14      	ldr	r2, [pc, #80]	; (8008978 <TIM_OC6_SetConfig+0xa8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d007      	beq.n	800893c <TIM_OC6_SetConfig+0x6c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a13      	ldr	r2, [pc, #76]	; (800897c <TIM_OC6_SetConfig+0xac>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d003      	beq.n	800893c <TIM_OC6_SetConfig+0x6c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <TIM_OC6_SetConfig+0xb0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d109      	bne.n	8008950 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008942:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	029b      	lsls	r3, r3, #10
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40014000 	.word	0x40014000
 8008980:	40014400 	.word	0x40014400

08008984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f003 031f 	and.w	r3, r3, #31
 8008996:	2201      	movs	r2, #1
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a1a      	ldr	r2, [r3, #32]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	43db      	mvns	r3, r3
 80089a6:	401a      	ands	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1a      	ldr	r2, [r3, #32]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	431a      	orrs	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e04f      	b.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d108      	bne.n	8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a14      	ldr	r2, [pc, #80]	; (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d009      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a50:	d004      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d10c      	bne.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40014000 	.word	0x40014000

08008a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e060      	b.n	8008b7a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	041b      	lsls	r3, r3, #16
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a14      	ldr	r2, [pc, #80]	; (8008b88 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d115      	bne.n	8008b68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	051b      	lsls	r3, r3, #20
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40012c00 	.word	0x40012c00

08008b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e040      	b.n	8008c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7f9 fa1e 	bl	800202c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2224      	movs	r2, #36	; 0x24
 8008bf4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0201 	bic.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fade 	bl	80091d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f8af 	bl	8008d78 <UART_SetConfig>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d101      	bne.n	8008c24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e01b      	b.n	8008c5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fb5d 	bl	8009314 <UART_CheckIdleState>
 8008c5a:	4603      	mov	r3, r0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08a      	sub	sp, #40	; 0x28
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	4613      	mov	r3, r2
 8008c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c78:	2b20      	cmp	r3, #32
 8008c7a:	d178      	bne.n	8008d6e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <HAL_UART_Transmit+0x24>
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e071      	b.n	8008d70 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2221      	movs	r2, #33	; 0x21
 8008c98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c9a:	f7f9 fc01 	bl	80024a0 <HAL_GetTick>
 8008c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	88fa      	ldrh	r2, [r7, #6]
 8008ca4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	88fa      	ldrh	r2, [r7, #6]
 8008cac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cb8:	d108      	bne.n	8008ccc <HAL_UART_Transmit+0x68>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	e003      	b.n	8008cd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cd4:	e030      	b.n	8008d38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2180      	movs	r1, #128	; 0x80
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fbbf 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d004      	beq.n	8008cf6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e03c      	b.n	8008d70 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	881a      	ldrh	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d08:	b292      	uxth	r2, r2
 8008d0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	3302      	adds	r3, #2
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	e008      	b.n	8008d26 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	781a      	ldrb	r2, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	b292      	uxth	r2, r2
 8008d1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3301      	adds	r3, #1
 8008d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1c8      	bne.n	8008cd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2140      	movs	r1, #64	; 0x40
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fb88 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d004      	beq.n	8008d64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e005      	b.n	8008d70 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2220      	movs	r2, #32
 8008d68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e000      	b.n	8008d70 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008d6e:	2302      	movs	r3, #2
  }
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d7c:	b08a      	sub	sp, #40	; 0x28
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	431a      	orrs	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	431a      	orrs	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4bb4      	ldr	r3, [pc, #720]	; (8009078 <UART_SetConfig+0x300>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	6812      	ldr	r2, [r2, #0]
 8008dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008db0:	430b      	orrs	r3, r1
 8008db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4aa9      	ldr	r2, [pc, #676]	; (800907c <UART_SetConfig+0x304>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d004      	beq.n	8008de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de0:	4313      	orrs	r3, r2
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df4:	430a      	orrs	r2, r1
 8008df6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4aa0      	ldr	r2, [pc, #640]	; (8009080 <UART_SetConfig+0x308>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d126      	bne.n	8008e50 <UART_SetConfig+0xd8>
 8008e02:	4ba0      	ldr	r3, [pc, #640]	; (8009084 <UART_SetConfig+0x30c>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d81b      	bhi.n	8008e48 <UART_SetConfig+0xd0>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <UART_SetConfig+0xa0>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e2e:	e080      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008e30:	2302      	movs	r3, #2
 8008e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e36:	e07c      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008e38:	2304      	movs	r3, #4
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e3e:	e078      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008e40:	2308      	movs	r3, #8
 8008e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e46:	e074      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e4e:	e070      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a8c      	ldr	r2, [pc, #560]	; (8009088 <UART_SetConfig+0x310>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d138      	bne.n	8008ecc <UART_SetConfig+0x154>
 8008e5a:	4b8a      	ldr	r3, [pc, #552]	; (8009084 <UART_SetConfig+0x30c>)
 8008e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e60:	f003 030c 	and.w	r3, r3, #12
 8008e64:	2b0c      	cmp	r3, #12
 8008e66:	d82d      	bhi.n	8008ec4 <UART_SetConfig+0x14c>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <UART_SetConfig+0xf8>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008ea5 	.word	0x08008ea5
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008ec5 	.word	0x08008ec5
 8008e7c:	08008ec5 	.word	0x08008ec5
 8008e80:	08008eb5 	.word	0x08008eb5
 8008e84:	08008ec5 	.word	0x08008ec5
 8008e88:	08008ec5 	.word	0x08008ec5
 8008e8c:	08008ec5 	.word	0x08008ec5
 8008e90:	08008ead 	.word	0x08008ead
 8008e94:	08008ec5 	.word	0x08008ec5
 8008e98:	08008ec5 	.word	0x08008ec5
 8008e9c:	08008ec5 	.word	0x08008ec5
 8008ea0:	08008ebd 	.word	0x08008ebd
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eaa:	e042      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008eac:	2302      	movs	r3, #2
 8008eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eb2:	e03e      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eba:	e03a      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008ebc:	2308      	movs	r3, #8
 8008ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ec2:	e036      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008ec4:	2310      	movs	r3, #16
 8008ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eca:	e032      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a6a      	ldr	r2, [pc, #424]	; (800907c <UART_SetConfig+0x304>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d12a      	bne.n	8008f2c <UART_SetConfig+0x1b4>
 8008ed6:	4b6b      	ldr	r3, [pc, #428]	; (8009084 <UART_SetConfig+0x30c>)
 8008ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008edc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ee4:	d01a      	beq.n	8008f1c <UART_SetConfig+0x1a4>
 8008ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008eea:	d81b      	bhi.n	8008f24 <UART_SetConfig+0x1ac>
 8008eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef0:	d00c      	beq.n	8008f0c <UART_SetConfig+0x194>
 8008ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef6:	d815      	bhi.n	8008f24 <UART_SetConfig+0x1ac>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <UART_SetConfig+0x18c>
 8008efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f00:	d008      	beq.n	8008f14 <UART_SetConfig+0x19c>
 8008f02:	e00f      	b.n	8008f24 <UART_SetConfig+0x1ac>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f0a:	e012      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f12:	e00e      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008f14:	2304      	movs	r3, #4
 8008f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f1a:	e00a      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f22:	e006      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008f24:	2310      	movs	r3, #16
 8008f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f2a:	e002      	b.n	8008f32 <UART_SetConfig+0x1ba>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a51      	ldr	r2, [pc, #324]	; (800907c <UART_SetConfig+0x304>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d17a      	bne.n	8009032 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d824      	bhi.n	8008f8e <UART_SetConfig+0x216>
 8008f44:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <UART_SetConfig+0x1d4>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	08008f71 	.word	0x08008f71
 8008f50:	08008f8f 	.word	0x08008f8f
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f8f 	.word	0x08008f8f
 8008f5c:	08008f7f 	.word	0x08008f7f
 8008f60:	08008f8f 	.word	0x08008f8f
 8008f64:	08008f8f 	.word	0x08008f8f
 8008f68:	08008f8f 	.word	0x08008f8f
 8008f6c:	08008f87 	.word	0x08008f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fe f846 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8008f74:	61f8      	str	r0, [r7, #28]
        break;
 8008f76:	e010      	b.n	8008f9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f78:	4b44      	ldr	r3, [pc, #272]	; (800908c <UART_SetConfig+0x314>)
 8008f7a:	61fb      	str	r3, [r7, #28]
        break;
 8008f7c:	e00d      	b.n	8008f9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f7e:	f7fd ffa7 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 8008f82:	61f8      	str	r0, [r7, #28]
        break;
 8008f84:	e009      	b.n	8008f9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f8a:	61fb      	str	r3, [r7, #28]
        break;
 8008f8c:	e005      	b.n	8008f9a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8107 	beq.w	80091b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4413      	add	r3, r2
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d305      	bcc.n	8008fbe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d903      	bls.n	8008fc6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008fc4:	e0f4      	b.n	80091b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	461c      	mov	r4, r3
 8008fcc:	4615      	mov	r5, r2
 8008fce:	f04f 0200 	mov.w	r2, #0
 8008fd2:	f04f 0300 	mov.w	r3, #0
 8008fd6:	022b      	lsls	r3, r5, #8
 8008fd8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008fdc:	0222      	lsls	r2, r4, #8
 8008fde:	68f9      	ldr	r1, [r7, #12]
 8008fe0:	6849      	ldr	r1, [r1, #4]
 8008fe2:	0849      	lsrs	r1, r1, #1
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	4688      	mov	r8, r1
 8008fe8:	4681      	mov	r9, r0
 8008fea:	eb12 0a08 	adds.w	sl, r2, r8
 8008fee:	eb43 0b09 	adc.w	fp, r3, r9
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009000:	4650      	mov	r0, sl
 8009002:	4659      	mov	r1, fp
 8009004:	f7f7 fe2a 	bl	8000c5c <__aeabi_uldivmod>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4613      	mov	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009016:	d308      	bcc.n	800902a <UART_SetConfig+0x2b2>
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800901e:	d204      	bcs.n	800902a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	60da      	str	r2, [r3, #12]
 8009028:	e0c2      	b.n	80091b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009030:	e0be      	b.n	80091b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800903a:	d16a      	bne.n	8009112 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800903c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009040:	2b08      	cmp	r3, #8
 8009042:	d834      	bhi.n	80090ae <UART_SetConfig+0x336>
 8009044:	a201      	add	r2, pc, #4	; (adr r2, 800904c <UART_SetConfig+0x2d4>)
 8009046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904a:	bf00      	nop
 800904c:	08009071 	.word	0x08009071
 8009050:	08009091 	.word	0x08009091
 8009054:	08009099 	.word	0x08009099
 8009058:	080090af 	.word	0x080090af
 800905c:	0800909f 	.word	0x0800909f
 8009060:	080090af 	.word	0x080090af
 8009064:	080090af 	.word	0x080090af
 8009068:	080090af 	.word	0x080090af
 800906c:	080090a7 	.word	0x080090a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009070:	f7fd ffc6 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8009074:	61f8      	str	r0, [r7, #28]
        break;
 8009076:	e020      	b.n	80090ba <UART_SetConfig+0x342>
 8009078:	efff69f3 	.word	0xefff69f3
 800907c:	40008000 	.word	0x40008000
 8009080:	40013800 	.word	0x40013800
 8009084:	40021000 	.word	0x40021000
 8009088:	40004400 	.word	0x40004400
 800908c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009090:	f7fd ffcc 	bl	800702c <HAL_RCC_GetPCLK2Freq>
 8009094:	61f8      	str	r0, [r7, #28]
        break;
 8009096:	e010      	b.n	80090ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009098:	4b4c      	ldr	r3, [pc, #304]	; (80091cc <UART_SetConfig+0x454>)
 800909a:	61fb      	str	r3, [r7, #28]
        break;
 800909c:	e00d      	b.n	80090ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800909e:	f7fd ff17 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 80090a2:	61f8      	str	r0, [r7, #28]
        break;
 80090a4:	e009      	b.n	80090ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090aa:	61fb      	str	r3, [r7, #28]
        break;
 80090ac:	e005      	b.n	80090ba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d077      	beq.n	80091b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	005a      	lsls	r2, r3, #1
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	441a      	add	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	d916      	bls.n	800910a <UART_SetConfig+0x392>
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e2:	d212      	bcs.n	800910a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f023 030f 	bic.w	r3, r3, #15
 80090ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	085b      	lsrs	r3, r3, #1
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	8afb      	ldrh	r3, [r7, #22]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	8afa      	ldrh	r2, [r7, #22]
 8009106:	60da      	str	r2, [r3, #12]
 8009108:	e052      	b.n	80091b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009110:	e04e      	b.n	80091b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009116:	2b08      	cmp	r3, #8
 8009118:	d827      	bhi.n	800916a <UART_SetConfig+0x3f2>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <UART_SetConfig+0x3a8>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	0800916b 	.word	0x0800916b
 8009130:	0800915b 	.word	0x0800915b
 8009134:	0800916b 	.word	0x0800916b
 8009138:	0800916b 	.word	0x0800916b
 800913c:	0800916b 	.word	0x0800916b
 8009140:	08009163 	.word	0x08009163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009144:	f7fd ff5c 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8009148:	61f8      	str	r0, [r7, #28]
        break;
 800914a:	e014      	b.n	8009176 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800914c:	f7fd ff6e 	bl	800702c <HAL_RCC_GetPCLK2Freq>
 8009150:	61f8      	str	r0, [r7, #28]
        break;
 8009152:	e010      	b.n	8009176 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009154:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <UART_SetConfig+0x454>)
 8009156:	61fb      	str	r3, [r7, #28]
        break;
 8009158:	e00d      	b.n	8009176 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800915a:	f7fd feb9 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 800915e:	61f8      	str	r0, [r7, #28]
        break;
 8009160:	e009      	b.n	8009176 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009166:	61fb      	str	r3, [r7, #28]
        break;
 8009168:	e005      	b.n	8009176 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009174:	bf00      	nop
    }

    if (pclk != 0U)
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d019      	beq.n	80091b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	085a      	lsrs	r2, r3, #1
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	441a      	add	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	fbb2 f3f3 	udiv	r3, r2, r3
 800918e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d909      	bls.n	80091aa <UART_SetConfig+0x432>
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919c:	d205      	bcs.n	80091aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60da      	str	r2, [r3, #12]
 80091a8:	e002      	b.n	80091b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80091bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3728      	adds	r7, #40	; 0x28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ca:	bf00      	nop
 80091cc:	00f42400 	.word	0x00f42400

080091d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	f003 0310 	and.w	r3, r3, #16
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01a      	beq.n	80092e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ce:	d10a      	bne.n	80092e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	605a      	str	r2, [r3, #4]
  }
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b098      	sub	sp, #96	; 0x60
 8009318:	af02      	add	r7, sp, #8
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009324:	f7f9 f8bc 	bl	80024a0 <HAL_GetTick>
 8009328:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b08      	cmp	r3, #8
 8009336:	d12e      	bne.n	8009396 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009340:	2200      	movs	r2, #0
 8009342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f88c 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d021      	beq.n	8009396 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009366:	653b      	str	r3, [r7, #80]	; 0x50
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009370:	647b      	str	r3, [r7, #68]	; 0x44
 8009372:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800937e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e6      	bne.n	8009352 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e062      	b.n	800945c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d149      	bne.n	8009438 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ac:	2200      	movs	r2, #0
 80093ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f856 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d03c      	beq.n	8009438 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	623b      	str	r3, [r7, #32]
   return(result);
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093dc:	633b      	str	r3, [r7, #48]	; 0x30
 80093de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e6      	bne.n	80093be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	64bb      	str	r3, [r7, #72]	; 0x48
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3308      	adds	r3, #8
 800940e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009410:	61fa      	str	r2, [r7, #28]
 8009412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	69b9      	ldr	r1, [r7, #24]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	617b      	str	r3, [r7, #20]
   return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e5      	bne.n	80093f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e011      	b.n	800945c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3758      	adds	r7, #88	; 0x58
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	4613      	mov	r3, r2
 8009472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009474:	e049      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947c:	d045      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800947e:	f7f9 f80f 	bl	80024a0 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	429a      	cmp	r2, r3
 800948c:	d302      	bcc.n	8009494 <UART_WaitOnFlagUntilTimeout+0x30>
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e048      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d031      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d110      	bne.n	80094d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2208      	movs	r2, #8
 80094ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f838 	bl	8009532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2208      	movs	r2, #8
 80094c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e029      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e4:	d111      	bne.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f81e 	bl	8009532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e00f      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69da      	ldr	r2, [r3, #28]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4013      	ands	r3, r2
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	429a      	cmp	r2, r3
 8009526:	d0a6      	beq.n	8009476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009532:	b480      	push	{r7}
 8009534:	b095      	sub	sp, #84	; 0x54
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800954e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009558:	643b      	str	r3, [r7, #64]	; 0x40
 800955a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800955e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	61fb      	str	r3, [r7, #28]
   return(result);
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	64bb      	str	r3, [r7, #72]	; 0x48
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800958c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e5      	bne.n	800956c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d118      	bne.n	80095da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f023 0310 	bic.w	r3, r3, #16
 80095bc:	647b      	str	r3, [r7, #68]	; 0x44
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c6:	61bb      	str	r3, [r7, #24]
 80095c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ca:	6979      	ldr	r1, [r7, #20]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	e841 2300 	strex	r3, r2, [r1]
 80095d2:	613b      	str	r3, [r7, #16]
   return(result);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e6      	bne.n	80095a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80095ee:	bf00      	nop
 80095f0:	3754      	adds	r7, #84	; 0x54
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <__assert_func>:
 80095fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095fe:	4614      	mov	r4, r2
 8009600:	461a      	mov	r2, r3
 8009602:	4b09      	ldr	r3, [pc, #36]	; (8009628 <__assert_func+0x2c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4605      	mov	r5, r0
 8009608:	68d8      	ldr	r0, [r3, #12]
 800960a:	b14c      	cbz	r4, 8009620 <__assert_func+0x24>
 800960c:	4b07      	ldr	r3, [pc, #28]	; (800962c <__assert_func+0x30>)
 800960e:	9100      	str	r1, [sp, #0]
 8009610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009614:	4906      	ldr	r1, [pc, #24]	; (8009630 <__assert_func+0x34>)
 8009616:	462b      	mov	r3, r5
 8009618:	f000 f8b2 	bl	8009780 <fiprintf>
 800961c:	f000 fa05 	bl	8009a2a <abort>
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <__assert_func+0x38>)
 8009622:	461c      	mov	r4, r3
 8009624:	e7f3      	b.n	800960e <__assert_func+0x12>
 8009626:	bf00      	nop
 8009628:	20000068 	.word	0x20000068
 800962c:	0800bc58 	.word	0x0800bc58
 8009630:	0800bc65 	.word	0x0800bc65
 8009634:	0800bc93 	.word	0x0800bc93

08009638 <std>:
 8009638:	2300      	movs	r3, #0
 800963a:	b510      	push	{r4, lr}
 800963c:	4604      	mov	r4, r0
 800963e:	e9c0 3300 	strd	r3, r3, [r0]
 8009642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009646:	6083      	str	r3, [r0, #8]
 8009648:	8181      	strh	r1, [r0, #12]
 800964a:	6643      	str	r3, [r0, #100]	; 0x64
 800964c:	81c2      	strh	r2, [r0, #14]
 800964e:	6183      	str	r3, [r0, #24]
 8009650:	4619      	mov	r1, r3
 8009652:	2208      	movs	r2, #8
 8009654:	305c      	adds	r0, #92	; 0x5c
 8009656:	f000 f96c 	bl	8009932 <memset>
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <std+0x58>)
 800965c:	6263      	str	r3, [r4, #36]	; 0x24
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <std+0x5c>)
 8009660:	62a3      	str	r3, [r4, #40]	; 0x28
 8009662:	4b0d      	ldr	r3, [pc, #52]	; (8009698 <std+0x60>)
 8009664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009666:	4b0d      	ldr	r3, [pc, #52]	; (800969c <std+0x64>)
 8009668:	6323      	str	r3, [r4, #48]	; 0x30
 800966a:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <std+0x68>)
 800966c:	6224      	str	r4, [r4, #32]
 800966e:	429c      	cmp	r4, r3
 8009670:	d006      	beq.n	8009680 <std+0x48>
 8009672:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009676:	4294      	cmp	r4, r2
 8009678:	d002      	beq.n	8009680 <std+0x48>
 800967a:	33d0      	adds	r3, #208	; 0xd0
 800967c:	429c      	cmp	r4, r3
 800967e:	d105      	bne.n	800968c <std+0x54>
 8009680:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009688:	f000 b9cc 	b.w	8009a24 <__retarget_lock_init_recursive>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	bf00      	nop
 8009690:	080098ad 	.word	0x080098ad
 8009694:	080098cf 	.word	0x080098cf
 8009698:	08009907 	.word	0x08009907
 800969c:	0800992b 	.word	0x0800992b
 80096a0:	2000059c 	.word	0x2000059c

080096a4 <stdio_exit_handler>:
 80096a4:	4a02      	ldr	r2, [pc, #8]	; (80096b0 <stdio_exit_handler+0xc>)
 80096a6:	4903      	ldr	r1, [pc, #12]	; (80096b4 <stdio_exit_handler+0x10>)
 80096a8:	4803      	ldr	r0, [pc, #12]	; (80096b8 <stdio_exit_handler+0x14>)
 80096aa:	f000 b87b 	b.w	80097a4 <_fwalk_sglue>
 80096ae:	bf00      	nop
 80096b0:	20000010 	.word	0x20000010
 80096b4:	0800a58d 	.word	0x0800a58d
 80096b8:	2000001c 	.word	0x2000001c

080096bc <cleanup_stdio>:
 80096bc:	6841      	ldr	r1, [r0, #4]
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <cleanup_stdio+0x34>)
 80096c0:	4299      	cmp	r1, r3
 80096c2:	b510      	push	{r4, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	d001      	beq.n	80096cc <cleanup_stdio+0x10>
 80096c8:	f000 ff60 	bl	800a58c <_fflush_r>
 80096cc:	68a1      	ldr	r1, [r4, #8]
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <cleanup_stdio+0x38>)
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d002      	beq.n	80096da <cleanup_stdio+0x1e>
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 ff59 	bl	800a58c <_fflush_r>
 80096da:	68e1      	ldr	r1, [r4, #12]
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <cleanup_stdio+0x3c>)
 80096de:	4299      	cmp	r1, r3
 80096e0:	d004      	beq.n	80096ec <cleanup_stdio+0x30>
 80096e2:	4620      	mov	r0, r4
 80096e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e8:	f000 bf50 	b.w	800a58c <_fflush_r>
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	bf00      	nop
 80096f0:	2000059c 	.word	0x2000059c
 80096f4:	20000604 	.word	0x20000604
 80096f8:	2000066c 	.word	0x2000066c

080096fc <global_stdio_init.part.0>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <global_stdio_init.part.0+0x30>)
 8009700:	4c0b      	ldr	r4, [pc, #44]	; (8009730 <global_stdio_init.part.0+0x34>)
 8009702:	4a0c      	ldr	r2, [pc, #48]	; (8009734 <global_stdio_init.part.0+0x38>)
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	4620      	mov	r0, r4
 8009708:	2200      	movs	r2, #0
 800970a:	2104      	movs	r1, #4
 800970c:	f7ff ff94 	bl	8009638 <std>
 8009710:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009714:	2201      	movs	r2, #1
 8009716:	2109      	movs	r1, #9
 8009718:	f7ff ff8e 	bl	8009638 <std>
 800971c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009720:	2202      	movs	r2, #2
 8009722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009726:	2112      	movs	r1, #18
 8009728:	f7ff bf86 	b.w	8009638 <std>
 800972c:	200006d4 	.word	0x200006d4
 8009730:	2000059c 	.word	0x2000059c
 8009734:	080096a5 	.word	0x080096a5

08009738 <__sfp_lock_acquire>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__sfp_lock_acquire+0x8>)
 800973a:	f000 b974 	b.w	8009a26 <__retarget_lock_acquire_recursive>
 800973e:	bf00      	nop
 8009740:	200006dd 	.word	0x200006dd

08009744 <__sfp_lock_release>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__sfp_lock_release+0x8>)
 8009746:	f000 b96f 	b.w	8009a28 <__retarget_lock_release_recursive>
 800974a:	bf00      	nop
 800974c:	200006dd 	.word	0x200006dd

08009750 <__sinit>:
 8009750:	b510      	push	{r4, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	f7ff fff0 	bl	8009738 <__sfp_lock_acquire>
 8009758:	6a23      	ldr	r3, [r4, #32]
 800975a:	b11b      	cbz	r3, 8009764 <__sinit+0x14>
 800975c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009760:	f7ff bff0 	b.w	8009744 <__sfp_lock_release>
 8009764:	4b04      	ldr	r3, [pc, #16]	; (8009778 <__sinit+0x28>)
 8009766:	6223      	str	r3, [r4, #32]
 8009768:	4b04      	ldr	r3, [pc, #16]	; (800977c <__sinit+0x2c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1f5      	bne.n	800975c <__sinit+0xc>
 8009770:	f7ff ffc4 	bl	80096fc <global_stdio_init.part.0>
 8009774:	e7f2      	b.n	800975c <__sinit+0xc>
 8009776:	bf00      	nop
 8009778:	080096bd 	.word	0x080096bd
 800977c:	200006d4 	.word	0x200006d4

08009780 <fiprintf>:
 8009780:	b40e      	push	{r1, r2, r3}
 8009782:	b503      	push	{r0, r1, lr}
 8009784:	4601      	mov	r1, r0
 8009786:	ab03      	add	r3, sp, #12
 8009788:	4805      	ldr	r0, [pc, #20]	; (80097a0 <fiprintf+0x20>)
 800978a:	f853 2b04 	ldr.w	r2, [r3], #4
 800978e:	6800      	ldr	r0, [r0, #0]
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	f000 fbcb 	bl	8009f2c <_vfiprintf_r>
 8009796:	b002      	add	sp, #8
 8009798:	f85d eb04 	ldr.w	lr, [sp], #4
 800979c:	b003      	add	sp, #12
 800979e:	4770      	bx	lr
 80097a0:	20000068 	.word	0x20000068

080097a4 <_fwalk_sglue>:
 80097a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a8:	4607      	mov	r7, r0
 80097aa:	4688      	mov	r8, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	2600      	movs	r6, #0
 80097b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b4:	f1b9 0901 	subs.w	r9, r9, #1
 80097b8:	d505      	bpl.n	80097c6 <_fwalk_sglue+0x22>
 80097ba:	6824      	ldr	r4, [r4, #0]
 80097bc:	2c00      	cmp	r4, #0
 80097be:	d1f7      	bne.n	80097b0 <_fwalk_sglue+0xc>
 80097c0:	4630      	mov	r0, r6
 80097c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d907      	bls.n	80097dc <_fwalk_sglue+0x38>
 80097cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d0:	3301      	adds	r3, #1
 80097d2:	d003      	beq.n	80097dc <_fwalk_sglue+0x38>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4638      	mov	r0, r7
 80097d8:	47c0      	blx	r8
 80097da:	4306      	orrs	r6, r0
 80097dc:	3568      	adds	r5, #104	; 0x68
 80097de:	e7e9      	b.n	80097b4 <_fwalk_sglue+0x10>

080097e0 <iprintf>:
 80097e0:	b40f      	push	{r0, r1, r2, r3}
 80097e2:	b507      	push	{r0, r1, r2, lr}
 80097e4:	4906      	ldr	r1, [pc, #24]	; (8009800 <iprintf+0x20>)
 80097e6:	ab04      	add	r3, sp, #16
 80097e8:	6808      	ldr	r0, [r1, #0]
 80097ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ee:	6881      	ldr	r1, [r0, #8]
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	f000 fb9b 	bl	8009f2c <_vfiprintf_r>
 80097f6:	b003      	add	sp, #12
 80097f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097fc:	b004      	add	sp, #16
 80097fe:	4770      	bx	lr
 8009800:	20000068 	.word	0x20000068

08009804 <sniprintf>:
 8009804:	b40c      	push	{r2, r3}
 8009806:	b530      	push	{r4, r5, lr}
 8009808:	4b17      	ldr	r3, [pc, #92]	; (8009868 <sniprintf+0x64>)
 800980a:	1e0c      	subs	r4, r1, #0
 800980c:	681d      	ldr	r5, [r3, #0]
 800980e:	b09d      	sub	sp, #116	; 0x74
 8009810:	da08      	bge.n	8009824 <sniprintf+0x20>
 8009812:	238b      	movs	r3, #139	; 0x8b
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f04f 30ff 	mov.w	r0, #4294967295
 800981a:	b01d      	add	sp, #116	; 0x74
 800981c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009820:	b002      	add	sp, #8
 8009822:	4770      	bx	lr
 8009824:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009828:	f8ad 3014 	strh.w	r3, [sp, #20]
 800982c:	bf14      	ite	ne
 800982e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009832:	4623      	moveq	r3, r4
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800983c:	9002      	str	r0, [sp, #8]
 800983e:	9006      	str	r0, [sp, #24]
 8009840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009846:	ab21      	add	r3, sp, #132	; 0x84
 8009848:	a902      	add	r1, sp, #8
 800984a:	4628      	mov	r0, r5
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	f000 fa45 	bl	8009cdc <_svfiprintf_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	bfbc      	itt	lt
 8009856:	238b      	movlt	r3, #139	; 0x8b
 8009858:	602b      	strlt	r3, [r5, #0]
 800985a:	2c00      	cmp	r4, #0
 800985c:	d0dd      	beq.n	800981a <sniprintf+0x16>
 800985e:	9b02      	ldr	r3, [sp, #8]
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	e7d9      	b.n	800981a <sniprintf+0x16>
 8009866:	bf00      	nop
 8009868:	20000068 	.word	0x20000068

0800986c <siprintf>:
 800986c:	b40e      	push	{r1, r2, r3}
 800986e:	b500      	push	{lr}
 8009870:	b09c      	sub	sp, #112	; 0x70
 8009872:	ab1d      	add	r3, sp, #116	; 0x74
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	9006      	str	r0, [sp, #24]
 8009878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800987c:	4809      	ldr	r0, [pc, #36]	; (80098a4 <siprintf+0x38>)
 800987e:	9107      	str	r1, [sp, #28]
 8009880:	9104      	str	r1, [sp, #16]
 8009882:	4909      	ldr	r1, [pc, #36]	; (80098a8 <siprintf+0x3c>)
 8009884:	f853 2b04 	ldr.w	r2, [r3], #4
 8009888:	9105      	str	r1, [sp, #20]
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	a902      	add	r1, sp, #8
 8009890:	f000 fa24 	bl	8009cdc <_svfiprintf_r>
 8009894:	9b02      	ldr	r3, [sp, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	b01c      	add	sp, #112	; 0x70
 800989c:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a0:	b003      	add	sp, #12
 80098a2:	4770      	bx	lr
 80098a4:	20000068 	.word	0x20000068
 80098a8:	ffff0208 	.word	0xffff0208

080098ac <__sread>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	460c      	mov	r4, r1
 80098b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b4:	f000 f868 	bl	8009988 <_read_r>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	bfab      	itete	ge
 80098bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098be:	89a3      	ldrhlt	r3, [r4, #12]
 80098c0:	181b      	addge	r3, r3, r0
 80098c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098c6:	bfac      	ite	ge
 80098c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80098ca:	81a3      	strhlt	r3, [r4, #12]
 80098cc:	bd10      	pop	{r4, pc}

080098ce <__swrite>:
 80098ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	461f      	mov	r7, r3
 80098d4:	898b      	ldrh	r3, [r1, #12]
 80098d6:	05db      	lsls	r3, r3, #23
 80098d8:	4605      	mov	r5, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	4616      	mov	r6, r2
 80098de:	d505      	bpl.n	80098ec <__swrite+0x1e>
 80098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e4:	2302      	movs	r3, #2
 80098e6:	2200      	movs	r2, #0
 80098e8:	f000 f83c 	bl	8009964 <_lseek_r>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098f6:	81a3      	strh	r3, [r4, #12]
 80098f8:	4632      	mov	r2, r6
 80098fa:	463b      	mov	r3, r7
 80098fc:	4628      	mov	r0, r5
 80098fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	f000 b853 	b.w	80099ac <_write_r>

08009906 <__sseek>:
 8009906:	b510      	push	{r4, lr}
 8009908:	460c      	mov	r4, r1
 800990a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990e:	f000 f829 	bl	8009964 <_lseek_r>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	bf15      	itete	ne
 8009918:	6560      	strne	r0, [r4, #84]	; 0x54
 800991a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800991e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009922:	81a3      	strheq	r3, [r4, #12]
 8009924:	bf18      	it	ne
 8009926:	81a3      	strhne	r3, [r4, #12]
 8009928:	bd10      	pop	{r4, pc}

0800992a <__sclose>:
 800992a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992e:	f000 b809 	b.w	8009944 <_close_r>

08009932 <memset>:
 8009932:	4402      	add	r2, r0
 8009934:	4603      	mov	r3, r0
 8009936:	4293      	cmp	r3, r2
 8009938:	d100      	bne.n	800993c <memset+0xa>
 800993a:	4770      	bx	lr
 800993c:	f803 1b01 	strb.w	r1, [r3], #1
 8009940:	e7f9      	b.n	8009936 <memset+0x4>
	...

08009944 <_close_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4d06      	ldr	r5, [pc, #24]	; (8009960 <_close_r+0x1c>)
 8009948:	2300      	movs	r3, #0
 800994a:	4604      	mov	r4, r0
 800994c:	4608      	mov	r0, r1
 800994e:	602b      	str	r3, [r5, #0]
 8009950:	f7f8 fc97 	bl	8002282 <_close>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_close_r+0x1a>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	b103      	cbz	r3, 800995e <_close_r+0x1a>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	200006d8 	.word	0x200006d8

08009964 <_lseek_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_lseek_r+0x20>)
 8009968:	4604      	mov	r4, r0
 800996a:	4608      	mov	r0, r1
 800996c:	4611      	mov	r1, r2
 800996e:	2200      	movs	r2, #0
 8009970:	602a      	str	r2, [r5, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f7f8 fcac 	bl	80022d0 <_lseek>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_lseek_r+0x1e>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_lseek_r+0x1e>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200006d8 	.word	0x200006d8

08009988 <_read_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_read_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 fc3a 	bl	8002210 <_read>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_read_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_read_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	200006d8 	.word	0x200006d8

080099ac <_write_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d07      	ldr	r5, [pc, #28]	; (80099cc <_write_r+0x20>)
 80099b0:	4604      	mov	r4, r0
 80099b2:	4608      	mov	r0, r1
 80099b4:	4611      	mov	r1, r2
 80099b6:	2200      	movs	r2, #0
 80099b8:	602a      	str	r2, [r5, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	f7f8 fc45 	bl	800224a <_write>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_write_r+0x1e>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_write_r+0x1e>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	200006d8 	.word	0x200006d8

080099d0 <__errno>:
 80099d0:	4b01      	ldr	r3, [pc, #4]	; (80099d8 <__errno+0x8>)
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000068 	.word	0x20000068

080099dc <__libc_init_array>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	4d0d      	ldr	r5, [pc, #52]	; (8009a14 <__libc_init_array+0x38>)
 80099e0:	4c0d      	ldr	r4, [pc, #52]	; (8009a18 <__libc_init_array+0x3c>)
 80099e2:	1b64      	subs	r4, r4, r5
 80099e4:	10a4      	asrs	r4, r4, #2
 80099e6:	2600      	movs	r6, #0
 80099e8:	42a6      	cmp	r6, r4
 80099ea:	d109      	bne.n	8009a00 <__libc_init_array+0x24>
 80099ec:	4d0b      	ldr	r5, [pc, #44]	; (8009a1c <__libc_init_array+0x40>)
 80099ee:	4c0c      	ldr	r4, [pc, #48]	; (8009a20 <__libc_init_array+0x44>)
 80099f0:	f002 f862 	bl	800bab8 <_init>
 80099f4:	1b64      	subs	r4, r4, r5
 80099f6:	10a4      	asrs	r4, r4, #2
 80099f8:	2600      	movs	r6, #0
 80099fa:	42a6      	cmp	r6, r4
 80099fc:	d105      	bne.n	8009a0a <__libc_init_array+0x2e>
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a04:	4798      	blx	r3
 8009a06:	3601      	adds	r6, #1
 8009a08:	e7ee      	b.n	80099e8 <__libc_init_array+0xc>
 8009a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a0e:	4798      	blx	r3
 8009a10:	3601      	adds	r6, #1
 8009a12:	e7f2      	b.n	80099fa <__libc_init_array+0x1e>
 8009a14:	0800bea8 	.word	0x0800bea8
 8009a18:	0800bea8 	.word	0x0800bea8
 8009a1c:	0800bea8 	.word	0x0800bea8
 8009a20:	0800beac 	.word	0x0800beac

08009a24 <__retarget_lock_init_recursive>:
 8009a24:	4770      	bx	lr

08009a26 <__retarget_lock_acquire_recursive>:
 8009a26:	4770      	bx	lr

08009a28 <__retarget_lock_release_recursive>:
 8009a28:	4770      	bx	lr

08009a2a <abort>:
 8009a2a:	b508      	push	{r3, lr}
 8009a2c:	2006      	movs	r0, #6
 8009a2e:	f000 fead 	bl	800a78c <raise>
 8009a32:	2001      	movs	r0, #1
 8009a34:	f7f8 fbe2 	bl	80021fc <_exit>

08009a38 <_free_r>:
 8009a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	d044      	beq.n	8009ac8 <_free_r+0x90>
 8009a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a42:	9001      	str	r0, [sp, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f1a1 0404 	sub.w	r4, r1, #4
 8009a4a:	bfb8      	it	lt
 8009a4c:	18e4      	addlt	r4, r4, r3
 8009a4e:	f000 f8df 	bl	8009c10 <__malloc_lock>
 8009a52:	4a1e      	ldr	r2, [pc, #120]	; (8009acc <_free_r+0x94>)
 8009a54:	9801      	ldr	r0, [sp, #4]
 8009a56:	6813      	ldr	r3, [r2, #0]
 8009a58:	b933      	cbnz	r3, 8009a68 <_free_r+0x30>
 8009a5a:	6063      	str	r3, [r4, #4]
 8009a5c:	6014      	str	r4, [r2, #0]
 8009a5e:	b003      	add	sp, #12
 8009a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a64:	f000 b8da 	b.w	8009c1c <__malloc_unlock>
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	d908      	bls.n	8009a7e <_free_r+0x46>
 8009a6c:	6825      	ldr	r5, [r4, #0]
 8009a6e:	1961      	adds	r1, r4, r5
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf01      	itttt	eq
 8009a74:	6819      	ldreq	r1, [r3, #0]
 8009a76:	685b      	ldreq	r3, [r3, #4]
 8009a78:	1949      	addeq	r1, r1, r5
 8009a7a:	6021      	streq	r1, [r4, #0]
 8009a7c:	e7ed      	b.n	8009a5a <_free_r+0x22>
 8009a7e:	461a      	mov	r2, r3
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	b10b      	cbz	r3, 8009a88 <_free_r+0x50>
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d9fa      	bls.n	8009a7e <_free_r+0x46>
 8009a88:	6811      	ldr	r1, [r2, #0]
 8009a8a:	1855      	adds	r5, r2, r1
 8009a8c:	42a5      	cmp	r5, r4
 8009a8e:	d10b      	bne.n	8009aa8 <_free_r+0x70>
 8009a90:	6824      	ldr	r4, [r4, #0]
 8009a92:	4421      	add	r1, r4
 8009a94:	1854      	adds	r4, r2, r1
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	6011      	str	r1, [r2, #0]
 8009a9a:	d1e0      	bne.n	8009a5e <_free_r+0x26>
 8009a9c:	681c      	ldr	r4, [r3, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	6053      	str	r3, [r2, #4]
 8009aa2:	440c      	add	r4, r1
 8009aa4:	6014      	str	r4, [r2, #0]
 8009aa6:	e7da      	b.n	8009a5e <_free_r+0x26>
 8009aa8:	d902      	bls.n	8009ab0 <_free_r+0x78>
 8009aaa:	230c      	movs	r3, #12
 8009aac:	6003      	str	r3, [r0, #0]
 8009aae:	e7d6      	b.n	8009a5e <_free_r+0x26>
 8009ab0:	6825      	ldr	r5, [r4, #0]
 8009ab2:	1961      	adds	r1, r4, r5
 8009ab4:	428b      	cmp	r3, r1
 8009ab6:	bf04      	itt	eq
 8009ab8:	6819      	ldreq	r1, [r3, #0]
 8009aba:	685b      	ldreq	r3, [r3, #4]
 8009abc:	6063      	str	r3, [r4, #4]
 8009abe:	bf04      	itt	eq
 8009ac0:	1949      	addeq	r1, r1, r5
 8009ac2:	6021      	streq	r1, [r4, #0]
 8009ac4:	6054      	str	r4, [r2, #4]
 8009ac6:	e7ca      	b.n	8009a5e <_free_r+0x26>
 8009ac8:	b003      	add	sp, #12
 8009aca:	bd30      	pop	{r4, r5, pc}
 8009acc:	200006e0 	.word	0x200006e0

08009ad0 <sbrk_aligned>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4e0e      	ldr	r6, [pc, #56]	; (8009b0c <sbrk_aligned+0x3c>)
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6831      	ldr	r1, [r6, #0]
 8009ad8:	4605      	mov	r5, r0
 8009ada:	b911      	cbnz	r1, 8009ae2 <sbrk_aligned+0x12>
 8009adc:	f000 fe72 	bl	800a7c4 <_sbrk_r>
 8009ae0:	6030      	str	r0, [r6, #0]
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 fe6d 	bl	800a7c4 <_sbrk_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	d00a      	beq.n	8009b04 <sbrk_aligned+0x34>
 8009aee:	1cc4      	adds	r4, r0, #3
 8009af0:	f024 0403 	bic.w	r4, r4, #3
 8009af4:	42a0      	cmp	r0, r4
 8009af6:	d007      	beq.n	8009b08 <sbrk_aligned+0x38>
 8009af8:	1a21      	subs	r1, r4, r0
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 fe62 	bl	800a7c4 <_sbrk_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d101      	bne.n	8009b08 <sbrk_aligned+0x38>
 8009b04:	f04f 34ff 	mov.w	r4, #4294967295
 8009b08:	4620      	mov	r0, r4
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	200006e4 	.word	0x200006e4

08009b10 <_malloc_r>:
 8009b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	1ccd      	adds	r5, r1, #3
 8009b16:	f025 0503 	bic.w	r5, r5, #3
 8009b1a:	3508      	adds	r5, #8
 8009b1c:	2d0c      	cmp	r5, #12
 8009b1e:	bf38      	it	cc
 8009b20:	250c      	movcc	r5, #12
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	4607      	mov	r7, r0
 8009b26:	db01      	blt.n	8009b2c <_malloc_r+0x1c>
 8009b28:	42a9      	cmp	r1, r5
 8009b2a:	d905      	bls.n	8009b38 <_malloc_r+0x28>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	2600      	movs	r6, #0
 8009b32:	4630      	mov	r0, r6
 8009b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c0c <_malloc_r+0xfc>
 8009b3c:	f000 f868 	bl	8009c10 <__malloc_lock>
 8009b40:	f8d8 3000 	ldr.w	r3, [r8]
 8009b44:	461c      	mov	r4, r3
 8009b46:	bb5c      	cbnz	r4, 8009ba0 <_malloc_r+0x90>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	f7ff ffc0 	bl	8009ad0 <sbrk_aligned>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	4604      	mov	r4, r0
 8009b54:	d155      	bne.n	8009c02 <_malloc_r+0xf2>
 8009b56:	f8d8 4000 	ldr.w	r4, [r8]
 8009b5a:	4626      	mov	r6, r4
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	d145      	bne.n	8009bec <_malloc_r+0xdc>
 8009b60:	2c00      	cmp	r4, #0
 8009b62:	d048      	beq.n	8009bf6 <_malloc_r+0xe6>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	4631      	mov	r1, r6
 8009b68:	4638      	mov	r0, r7
 8009b6a:	eb04 0903 	add.w	r9, r4, r3
 8009b6e:	f000 fe29 	bl	800a7c4 <_sbrk_r>
 8009b72:	4581      	cmp	r9, r0
 8009b74:	d13f      	bne.n	8009bf6 <_malloc_r+0xe6>
 8009b76:	6821      	ldr	r1, [r4, #0]
 8009b78:	1a6d      	subs	r5, r5, r1
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f7ff ffa7 	bl	8009ad0 <sbrk_aligned>
 8009b82:	3001      	adds	r0, #1
 8009b84:	d037      	beq.n	8009bf6 <_malloc_r+0xe6>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	442b      	add	r3, r5
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d038      	beq.n	8009c06 <_malloc_r+0xf6>
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	42a2      	cmp	r2, r4
 8009b98:	d12b      	bne.n	8009bf2 <_malloc_r+0xe2>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	e00f      	b.n	8009bc0 <_malloc_r+0xb0>
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	1b52      	subs	r2, r2, r5
 8009ba4:	d41f      	bmi.n	8009be6 <_malloc_r+0xd6>
 8009ba6:	2a0b      	cmp	r2, #11
 8009ba8:	d917      	bls.n	8009bda <_malloc_r+0xca>
 8009baa:	1961      	adds	r1, r4, r5
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	6025      	str	r5, [r4, #0]
 8009bb0:	bf18      	it	ne
 8009bb2:	6059      	strne	r1, [r3, #4]
 8009bb4:	6863      	ldr	r3, [r4, #4]
 8009bb6:	bf08      	it	eq
 8009bb8:	f8c8 1000 	streq.w	r1, [r8]
 8009bbc:	5162      	str	r2, [r4, r5]
 8009bbe:	604b      	str	r3, [r1, #4]
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f104 060b 	add.w	r6, r4, #11
 8009bc6:	f000 f829 	bl	8009c1c <__malloc_unlock>
 8009bca:	f026 0607 	bic.w	r6, r6, #7
 8009bce:	1d23      	adds	r3, r4, #4
 8009bd0:	1af2      	subs	r2, r6, r3
 8009bd2:	d0ae      	beq.n	8009b32 <_malloc_r+0x22>
 8009bd4:	1b9b      	subs	r3, r3, r6
 8009bd6:	50a3      	str	r3, [r4, r2]
 8009bd8:	e7ab      	b.n	8009b32 <_malloc_r+0x22>
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	6862      	ldr	r2, [r4, #4]
 8009bde:	d1dd      	bne.n	8009b9c <_malloc_r+0x8c>
 8009be0:	f8c8 2000 	str.w	r2, [r8]
 8009be4:	e7ec      	b.n	8009bc0 <_malloc_r+0xb0>
 8009be6:	4623      	mov	r3, r4
 8009be8:	6864      	ldr	r4, [r4, #4]
 8009bea:	e7ac      	b.n	8009b46 <_malloc_r+0x36>
 8009bec:	4634      	mov	r4, r6
 8009bee:	6876      	ldr	r6, [r6, #4]
 8009bf0:	e7b4      	b.n	8009b5c <_malloc_r+0x4c>
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	e7cc      	b.n	8009b90 <_malloc_r+0x80>
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	603b      	str	r3, [r7, #0]
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f000 f80e 	bl	8009c1c <__malloc_unlock>
 8009c00:	e797      	b.n	8009b32 <_malloc_r+0x22>
 8009c02:	6025      	str	r5, [r4, #0]
 8009c04:	e7dc      	b.n	8009bc0 <_malloc_r+0xb0>
 8009c06:	605b      	str	r3, [r3, #4]
 8009c08:	deff      	udf	#255	; 0xff
 8009c0a:	bf00      	nop
 8009c0c:	200006e0 	.word	0x200006e0

08009c10 <__malloc_lock>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__malloc_lock+0x8>)
 8009c12:	f7ff bf08 	b.w	8009a26 <__retarget_lock_acquire_recursive>
 8009c16:	bf00      	nop
 8009c18:	200006dc 	.word	0x200006dc

08009c1c <__malloc_unlock>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__malloc_unlock+0x8>)
 8009c1e:	f7ff bf03 	b.w	8009a28 <__retarget_lock_release_recursive>
 8009c22:	bf00      	nop
 8009c24:	200006dc 	.word	0x200006dc

08009c28 <__ssputs_r>:
 8009c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	688e      	ldr	r6, [r1, #8]
 8009c2e:	461f      	mov	r7, r3
 8009c30:	42be      	cmp	r6, r7
 8009c32:	680b      	ldr	r3, [r1, #0]
 8009c34:	4682      	mov	sl, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4690      	mov	r8, r2
 8009c3a:	d82c      	bhi.n	8009c96 <__ssputs_r+0x6e>
 8009c3c:	898a      	ldrh	r2, [r1, #12]
 8009c3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c42:	d026      	beq.n	8009c92 <__ssputs_r+0x6a>
 8009c44:	6965      	ldr	r5, [r4, #20]
 8009c46:	6909      	ldr	r1, [r1, #16]
 8009c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4c:	eba3 0901 	sub.w	r9, r3, r1
 8009c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c54:	1c7b      	adds	r3, r7, #1
 8009c56:	444b      	add	r3, r9
 8009c58:	106d      	asrs	r5, r5, #1
 8009c5a:	429d      	cmp	r5, r3
 8009c5c:	bf38      	it	cc
 8009c5e:	461d      	movcc	r5, r3
 8009c60:	0553      	lsls	r3, r2, #21
 8009c62:	d527      	bpl.n	8009cb4 <__ssputs_r+0x8c>
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7ff ff53 	bl	8009b10 <_malloc_r>
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	b360      	cbz	r0, 8009cc8 <__ssputs_r+0xa0>
 8009c6e:	6921      	ldr	r1, [r4, #16]
 8009c70:	464a      	mov	r2, r9
 8009c72:	f000 fdb7 	bl	800a7e4 <memcpy>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	6126      	str	r6, [r4, #16]
 8009c84:	6165      	str	r5, [r4, #20]
 8009c86:	444e      	add	r6, r9
 8009c88:	eba5 0509 	sub.w	r5, r5, r9
 8009c8c:	6026      	str	r6, [r4, #0]
 8009c8e:	60a5      	str	r5, [r4, #8]
 8009c90:	463e      	mov	r6, r7
 8009c92:	42be      	cmp	r6, r7
 8009c94:	d900      	bls.n	8009c98 <__ssputs_r+0x70>
 8009c96:	463e      	mov	r6, r7
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	f000 fd33 	bl	800a708 <memmove>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	1b9b      	subs	r3, r3, r6
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	4433      	add	r3, r6
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	f000 fda3 	bl	800a800 <_realloc_r>
 8009cba:	4606      	mov	r6, r0
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1e0      	bne.n	8009c82 <__ssputs_r+0x5a>
 8009cc0:	6921      	ldr	r1, [r4, #16]
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f7ff feb8 	bl	8009a38 <_free_r>
 8009cc8:	230c      	movs	r3, #12
 8009cca:	f8ca 3000 	str.w	r3, [sl]
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cda:	e7e9      	b.n	8009cb0 <__ssputs_r+0x88>

08009cdc <_svfiprintf_r>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	898b      	ldrh	r3, [r1, #12]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	b09d      	sub	sp, #116	; 0x74
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	d50e      	bpl.n	8009d0e <_svfiprintf_r+0x32>
 8009cf0:	690b      	ldr	r3, [r1, #16]
 8009cf2:	b963      	cbnz	r3, 8009d0e <_svfiprintf_r+0x32>
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	f7ff ff0b 	bl	8009b10 <_malloc_r>
 8009cfa:	6028      	str	r0, [r5, #0]
 8009cfc:	6128      	str	r0, [r5, #16]
 8009cfe:	b920      	cbnz	r0, 8009d0a <_svfiprintf_r+0x2e>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e0d0      	b.n	8009eac <_svfiprintf_r+0x1d0>
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	616b      	str	r3, [r5, #20]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	2320      	movs	r3, #32
 8009d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1c:	2330      	movs	r3, #48	; 0x30
 8009d1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ec4 <_svfiprintf_r+0x1e8>
 8009d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d26:	f04f 0901 	mov.w	r9, #1
 8009d2a:	4623      	mov	r3, r4
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d32:	b10a      	cbz	r2, 8009d38 <_svfiprintf_r+0x5c>
 8009d34:	2a25      	cmp	r2, #37	; 0x25
 8009d36:	d1f9      	bne.n	8009d2c <_svfiprintf_r+0x50>
 8009d38:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x7a>
 8009d3e:	465b      	mov	r3, fp
 8009d40:	4622      	mov	r2, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	4638      	mov	r0, r7
 8009d46:	f7ff ff6f 	bl	8009c28 <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80a9 	beq.w	8009ea2 <_svfiprintf_r+0x1c6>
 8009d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d52:	445a      	add	r2, fp
 8009d54:	9209      	str	r2, [sp, #36]	; 0x24
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80a1 	beq.w	8009ea2 <_svfiprintf_r+0x1c6>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6a:	f10a 0a01 	add.w	sl, sl, #1
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d76:	931a      	str	r3, [sp, #104]	; 0x68
 8009d78:	4654      	mov	r4, sl
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	4850      	ldr	r0, [pc, #320]	; (8009ec4 <_svfiprintf_r+0x1e8>)
 8009d82:	f7f6 fa2d 	bl	80001e0 <memchr>
 8009d86:	9a04      	ldr	r2, [sp, #16]
 8009d88:	b9d8      	cbnz	r0, 8009dc2 <_svfiprintf_r+0xe6>
 8009d8a:	06d0      	lsls	r0, r2, #27
 8009d8c:	bf44      	itt	mi
 8009d8e:	2320      	movmi	r3, #32
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d94:	0711      	lsls	r1, r2, #28
 8009d96:	bf44      	itt	mi
 8009d98:	232b      	movmi	r3, #43	; 0x2b
 8009d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b2a      	cmp	r3, #42	; 0x2a
 8009da4:	d015      	beq.n	8009dd2 <_svfiprintf_r+0xf6>
 8009da6:	9a07      	ldr	r2, [sp, #28]
 8009da8:	4654      	mov	r4, sl
 8009daa:	2000      	movs	r0, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4621      	mov	r1, r4
 8009db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d94d      	bls.n	8009e58 <_svfiprintf_r+0x17c>
 8009dbc:	b1b0      	cbz	r0, 8009dec <_svfiprintf_r+0x110>
 8009dbe:	9207      	str	r2, [sp, #28]
 8009dc0:	e014      	b.n	8009dec <_svfiprintf_r+0x110>
 8009dc2:	eba0 0308 	sub.w	r3, r0, r8
 8009dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	e7d2      	b.n	8009d78 <_svfiprintf_r+0x9c>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	1d19      	adds	r1, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9103      	str	r1, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfbb      	ittet	lt
 8009dde:	425b      	neglt	r3, r3
 8009de0:	f042 0202 	orrlt.w	r2, r2, #2
 8009de4:	9307      	strge	r3, [sp, #28]
 8009de6:	9307      	strlt	r3, [sp, #28]
 8009de8:	bfb8      	it	lt
 8009dea:	9204      	strlt	r2, [sp, #16]
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	2b2e      	cmp	r3, #46	; 0x2e
 8009df0:	d10c      	bne.n	8009e0c <_svfiprintf_r+0x130>
 8009df2:	7863      	ldrb	r3, [r4, #1]
 8009df4:	2b2a      	cmp	r3, #42	; 0x2a
 8009df6:	d134      	bne.n	8009e62 <_svfiprintf_r+0x186>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9203      	str	r2, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfb8      	it	lt
 8009e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e08:	3402      	adds	r4, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ed4 <_svfiprintf_r+0x1f8>
 8009e10:	7821      	ldrb	r1, [r4, #0]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7f6 f9e3 	bl	80001e0 <memchr>
 8009e1a:	b138      	cbz	r0, 8009e2c <_svfiprintf_r+0x150>
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	eba0 000a 	sub.w	r0, r0, sl
 8009e22:	2240      	movs	r2, #64	; 0x40
 8009e24:	4082      	lsls	r2, r0
 8009e26:	4313      	orrs	r3, r2
 8009e28:	3401      	adds	r4, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e30:	4825      	ldr	r0, [pc, #148]	; (8009ec8 <_svfiprintf_r+0x1ec>)
 8009e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e36:	2206      	movs	r2, #6
 8009e38:	f7f6 f9d2 	bl	80001e0 <memchr>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d038      	beq.n	8009eb2 <_svfiprintf_r+0x1d6>
 8009e40:	4b22      	ldr	r3, [pc, #136]	; (8009ecc <_svfiprintf_r+0x1f0>)
 8009e42:	bb1b      	cbnz	r3, 8009e8c <_svfiprintf_r+0x1b0>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	3307      	adds	r3, #7
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e52:	4433      	add	r3, r6
 8009e54:	9309      	str	r3, [sp, #36]	; 0x24
 8009e56:	e768      	b.n	8009d2a <_svfiprintf_r+0x4e>
 8009e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	2001      	movs	r0, #1
 8009e60:	e7a6      	b.n	8009db0 <_svfiprintf_r+0xd4>
 8009e62:	2300      	movs	r3, #0
 8009e64:	3401      	adds	r4, #1
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e74:	3a30      	subs	r2, #48	; 0x30
 8009e76:	2a09      	cmp	r2, #9
 8009e78:	d903      	bls.n	8009e82 <_svfiprintf_r+0x1a6>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c6      	beq.n	8009e0c <_svfiprintf_r+0x130>
 8009e7e:	9105      	str	r1, [sp, #20]
 8009e80:	e7c4      	b.n	8009e0c <_svfiprintf_r+0x130>
 8009e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e86:	4604      	mov	r4, r0
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7f0      	b.n	8009e6e <_svfiprintf_r+0x192>
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	462a      	mov	r2, r5
 8009e92:	4b0f      	ldr	r3, [pc, #60]	; (8009ed0 <_svfiprintf_r+0x1f4>)
 8009e94:	a904      	add	r1, sp, #16
 8009e96:	4638      	mov	r0, r7
 8009e98:	f3af 8000 	nop.w
 8009e9c:	1c42      	adds	r2, r0, #1
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	d1d6      	bne.n	8009e50 <_svfiprintf_r+0x174>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	065b      	lsls	r3, r3, #25
 8009ea6:	f53f af2d 	bmi.w	8009d04 <_svfiprintf_r+0x28>
 8009eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eac:	b01d      	add	sp, #116	; 0x74
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <_svfiprintf_r+0x1f4>)
 8009eba:	a904      	add	r1, sp, #16
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f000 f9bd 	bl	800a23c <_printf_i>
 8009ec2:	e7eb      	b.n	8009e9c <_svfiprintf_r+0x1c0>
 8009ec4:	0800bc94 	.word	0x0800bc94
 8009ec8:	0800bc9e 	.word	0x0800bc9e
 8009ecc:	00000000 	.word	0x00000000
 8009ed0:	08009c29 	.word	0x08009c29
 8009ed4:	0800bc9a 	.word	0x0800bc9a

08009ed8 <__sfputc_r>:
 8009ed8:	6893      	ldr	r3, [r2, #8]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	b410      	push	{r4}
 8009ee0:	6093      	str	r3, [r2, #8]
 8009ee2:	da08      	bge.n	8009ef6 <__sfputc_r+0x1e>
 8009ee4:	6994      	ldr	r4, [r2, #24]
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	db01      	blt.n	8009eee <__sfputc_r+0x16>
 8009eea:	290a      	cmp	r1, #10
 8009eec:	d103      	bne.n	8009ef6 <__sfputc_r+0x1e>
 8009eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef2:	f000 bb73 	b.w	800a5dc <__swbuf_r>
 8009ef6:	6813      	ldr	r3, [r2, #0]
 8009ef8:	1c58      	adds	r0, r3, #1
 8009efa:	6010      	str	r0, [r2, #0]
 8009efc:	7019      	strb	r1, [r3, #0]
 8009efe:	4608      	mov	r0, r1
 8009f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <__sfputs_r>:
 8009f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	4614      	mov	r4, r2
 8009f0e:	18d5      	adds	r5, r2, r3
 8009f10:	42ac      	cmp	r4, r5
 8009f12:	d101      	bne.n	8009f18 <__sfputs_r+0x12>
 8009f14:	2000      	movs	r0, #0
 8009f16:	e007      	b.n	8009f28 <__sfputs_r+0x22>
 8009f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1c:	463a      	mov	r2, r7
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff ffda 	bl	8009ed8 <__sfputc_r>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d1f3      	bne.n	8009f10 <__sfputs_r+0xa>
 8009f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f2c <_vfiprintf_r>:
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	460d      	mov	r5, r1
 8009f32:	b09d      	sub	sp, #116	; 0x74
 8009f34:	4614      	mov	r4, r2
 8009f36:	4698      	mov	r8, r3
 8009f38:	4606      	mov	r6, r0
 8009f3a:	b118      	cbz	r0, 8009f44 <_vfiprintf_r+0x18>
 8009f3c:	6a03      	ldr	r3, [r0, #32]
 8009f3e:	b90b      	cbnz	r3, 8009f44 <_vfiprintf_r+0x18>
 8009f40:	f7ff fc06 	bl	8009750 <__sinit>
 8009f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d405      	bmi.n	8009f56 <_vfiprintf_r+0x2a>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d402      	bmi.n	8009f56 <_vfiprintf_r+0x2a>
 8009f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f52:	f7ff fd68 	bl	8009a26 <__retarget_lock_acquire_recursive>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	071b      	lsls	r3, r3, #28
 8009f5a:	d501      	bpl.n	8009f60 <_vfiprintf_r+0x34>
 8009f5c:	692b      	ldr	r3, [r5, #16]
 8009f5e:	b99b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x5c>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4630      	mov	r0, r6
 8009f64:	f000 fb78 	bl	800a658 <__swsetup_r>
 8009f68:	b170      	cbz	r0, 8009f88 <_vfiprintf_r+0x5c>
 8009f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f6c:	07dc      	lsls	r4, r3, #31
 8009f6e:	d504      	bpl.n	8009f7a <_vfiprintf_r+0x4e>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	b01d      	add	sp, #116	; 0x74
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	0598      	lsls	r0, r3, #22
 8009f7e:	d4f7      	bmi.n	8009f70 <_vfiprintf_r+0x44>
 8009f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f82:	f7ff fd51 	bl	8009a28 <__retarget_lock_release_recursive>
 8009f86:	e7f3      	b.n	8009f70 <_vfiprintf_r+0x44>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f96:	2330      	movs	r3, #48	; 0x30
 8009f98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a14c <_vfiprintf_r+0x220>
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fa0:	f04f 0901 	mov.w	r9, #1
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	469a      	mov	sl, r3
 8009fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fac:	b10a      	cbz	r2, 8009fb2 <_vfiprintf_r+0x86>
 8009fae:	2a25      	cmp	r2, #37	; 0x25
 8009fb0:	d1f9      	bne.n	8009fa6 <_vfiprintf_r+0x7a>
 8009fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb6:	d00b      	beq.n	8009fd0 <_vfiprintf_r+0xa4>
 8009fb8:	465b      	mov	r3, fp
 8009fba:	4622      	mov	r2, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffa1 	bl	8009f06 <__sfputs_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f000 80a9 	beq.w	800a11c <_vfiprintf_r+0x1f0>
 8009fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fcc:	445a      	add	r2, fp
 8009fce:	9209      	str	r2, [sp, #36]	; 0x24
 8009fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80a1 	beq.w	800a11c <_vfiprintf_r+0x1f0>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe4:	f10a 0a01 	add.w	sl, sl, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffa:	4854      	ldr	r0, [pc, #336]	; (800a14c <_vfiprintf_r+0x220>)
 8009ffc:	f7f6 f8f0 	bl	80001e0 <memchr>
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	b9d8      	cbnz	r0, 800a03c <_vfiprintf_r+0x110>
 800a004:	06d1      	lsls	r1, r2, #27
 800a006:	bf44      	itt	mi
 800a008:	2320      	movmi	r3, #32
 800a00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00e:	0713      	lsls	r3, r2, #28
 800a010:	bf44      	itt	mi
 800a012:	232b      	movmi	r3, #43	; 0x2b
 800a014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a018:	f89a 3000 	ldrb.w	r3, [sl]
 800a01c:	2b2a      	cmp	r3, #42	; 0x2a
 800a01e:	d015      	beq.n	800a04c <_vfiprintf_r+0x120>
 800a020:	9a07      	ldr	r2, [sp, #28]
 800a022:	4654      	mov	r4, sl
 800a024:	2000      	movs	r0, #0
 800a026:	f04f 0c0a 	mov.w	ip, #10
 800a02a:	4621      	mov	r1, r4
 800a02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a030:	3b30      	subs	r3, #48	; 0x30
 800a032:	2b09      	cmp	r3, #9
 800a034:	d94d      	bls.n	800a0d2 <_vfiprintf_r+0x1a6>
 800a036:	b1b0      	cbz	r0, 800a066 <_vfiprintf_r+0x13a>
 800a038:	9207      	str	r2, [sp, #28]
 800a03a:	e014      	b.n	800a066 <_vfiprintf_r+0x13a>
 800a03c:	eba0 0308 	sub.w	r3, r0, r8
 800a040:	fa09 f303 	lsl.w	r3, r9, r3
 800a044:	4313      	orrs	r3, r2
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	46a2      	mov	sl, r4
 800a04a:	e7d2      	b.n	8009ff2 <_vfiprintf_r+0xc6>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	1d19      	adds	r1, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9103      	str	r1, [sp, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfbb      	ittet	lt
 800a058:	425b      	neglt	r3, r3
 800a05a:	f042 0202 	orrlt.w	r2, r2, #2
 800a05e:	9307      	strge	r3, [sp, #28]
 800a060:	9307      	strlt	r3, [sp, #28]
 800a062:	bfb8      	it	lt
 800a064:	9204      	strlt	r2, [sp, #16]
 800a066:	7823      	ldrb	r3, [r4, #0]
 800a068:	2b2e      	cmp	r3, #46	; 0x2e
 800a06a:	d10c      	bne.n	800a086 <_vfiprintf_r+0x15a>
 800a06c:	7863      	ldrb	r3, [r4, #1]
 800a06e:	2b2a      	cmp	r3, #42	; 0x2a
 800a070:	d134      	bne.n	800a0dc <_vfiprintf_r+0x1b0>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	1d1a      	adds	r2, r3, #4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	9203      	str	r2, [sp, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bfb8      	it	lt
 800a07e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a082:	3402      	adds	r4, #2
 800a084:	9305      	str	r3, [sp, #20]
 800a086:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a15c <_vfiprintf_r+0x230>
 800a08a:	7821      	ldrb	r1, [r4, #0]
 800a08c:	2203      	movs	r2, #3
 800a08e:	4650      	mov	r0, sl
 800a090:	f7f6 f8a6 	bl	80001e0 <memchr>
 800a094:	b138      	cbz	r0, 800a0a6 <_vfiprintf_r+0x17a>
 800a096:	9b04      	ldr	r3, [sp, #16]
 800a098:	eba0 000a 	sub.w	r0, r0, sl
 800a09c:	2240      	movs	r2, #64	; 0x40
 800a09e:	4082      	lsls	r2, r0
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	3401      	adds	r4, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0aa:	4829      	ldr	r0, [pc, #164]	; (800a150 <_vfiprintf_r+0x224>)
 800a0ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0b0:	2206      	movs	r2, #6
 800a0b2:	f7f6 f895 	bl	80001e0 <memchr>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d03f      	beq.n	800a13a <_vfiprintf_r+0x20e>
 800a0ba:	4b26      	ldr	r3, [pc, #152]	; (800a154 <_vfiprintf_r+0x228>)
 800a0bc:	bb1b      	cbnz	r3, 800a106 <_vfiprintf_r+0x1da>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	3307      	adds	r3, #7
 800a0c2:	f023 0307 	bic.w	r3, r3, #7
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	9303      	str	r3, [sp, #12]
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	443b      	add	r3, r7
 800a0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d0:	e768      	b.n	8009fa4 <_vfiprintf_r+0x78>
 800a0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	2001      	movs	r0, #1
 800a0da:	e7a6      	b.n	800a02a <_vfiprintf_r+0xfe>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	3401      	adds	r4, #1
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f04f 0c0a 	mov.w	ip, #10
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ee:	3a30      	subs	r2, #48	; 0x30
 800a0f0:	2a09      	cmp	r2, #9
 800a0f2:	d903      	bls.n	800a0fc <_vfiprintf_r+0x1d0>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0c6      	beq.n	800a086 <_vfiprintf_r+0x15a>
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	e7c4      	b.n	800a086 <_vfiprintf_r+0x15a>
 800a0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a100:	4604      	mov	r4, r0
 800a102:	2301      	movs	r3, #1
 800a104:	e7f0      	b.n	800a0e8 <_vfiprintf_r+0x1bc>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	462a      	mov	r2, r5
 800a10c:	4b12      	ldr	r3, [pc, #72]	; (800a158 <_vfiprintf_r+0x22c>)
 800a10e:	a904      	add	r1, sp, #16
 800a110:	4630      	mov	r0, r6
 800a112:	f3af 8000 	nop.w
 800a116:	4607      	mov	r7, r0
 800a118:	1c78      	adds	r0, r7, #1
 800a11a:	d1d6      	bne.n	800a0ca <_vfiprintf_r+0x19e>
 800a11c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a11e:	07d9      	lsls	r1, r3, #31
 800a120:	d405      	bmi.n	800a12e <_vfiprintf_r+0x202>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	059a      	lsls	r2, r3, #22
 800a126:	d402      	bmi.n	800a12e <_vfiprintf_r+0x202>
 800a128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12a:	f7ff fc7d 	bl	8009a28 <__retarget_lock_release_recursive>
 800a12e:	89ab      	ldrh	r3, [r5, #12]
 800a130:	065b      	lsls	r3, r3, #25
 800a132:	f53f af1d 	bmi.w	8009f70 <_vfiprintf_r+0x44>
 800a136:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a138:	e71c      	b.n	8009f74 <_vfiprintf_r+0x48>
 800a13a:	ab03      	add	r3, sp, #12
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	462a      	mov	r2, r5
 800a140:	4b05      	ldr	r3, [pc, #20]	; (800a158 <_vfiprintf_r+0x22c>)
 800a142:	a904      	add	r1, sp, #16
 800a144:	4630      	mov	r0, r6
 800a146:	f000 f879 	bl	800a23c <_printf_i>
 800a14a:	e7e4      	b.n	800a116 <_vfiprintf_r+0x1ea>
 800a14c:	0800bc94 	.word	0x0800bc94
 800a150:	0800bc9e 	.word	0x0800bc9e
 800a154:	00000000 	.word	0x00000000
 800a158:	08009f07 	.word	0x08009f07
 800a15c:	0800bc9a 	.word	0x0800bc9a

0800a160 <_printf_common>:
 800a160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a164:	4616      	mov	r6, r2
 800a166:	4699      	mov	r9, r3
 800a168:	688a      	ldr	r2, [r1, #8]
 800a16a:	690b      	ldr	r3, [r1, #16]
 800a16c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a170:	4293      	cmp	r3, r2
 800a172:	bfb8      	it	lt
 800a174:	4613      	movlt	r3, r2
 800a176:	6033      	str	r3, [r6, #0]
 800a178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a17c:	4607      	mov	r7, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	b10a      	cbz	r2, 800a186 <_printf_common+0x26>
 800a182:	3301      	adds	r3, #1
 800a184:	6033      	str	r3, [r6, #0]
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	0699      	lsls	r1, r3, #26
 800a18a:	bf42      	ittt	mi
 800a18c:	6833      	ldrmi	r3, [r6, #0]
 800a18e:	3302      	addmi	r3, #2
 800a190:	6033      	strmi	r3, [r6, #0]
 800a192:	6825      	ldr	r5, [r4, #0]
 800a194:	f015 0506 	ands.w	r5, r5, #6
 800a198:	d106      	bne.n	800a1a8 <_printf_common+0x48>
 800a19a:	f104 0a19 	add.w	sl, r4, #25
 800a19e:	68e3      	ldr	r3, [r4, #12]
 800a1a0:	6832      	ldr	r2, [r6, #0]
 800a1a2:	1a9b      	subs	r3, r3, r2
 800a1a4:	42ab      	cmp	r3, r5
 800a1a6:	dc26      	bgt.n	800a1f6 <_printf_common+0x96>
 800a1a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1ac:	1e13      	subs	r3, r2, #0
 800a1ae:	6822      	ldr	r2, [r4, #0]
 800a1b0:	bf18      	it	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	0692      	lsls	r2, r2, #26
 800a1b6:	d42b      	bmi.n	800a210 <_printf_common+0xb0>
 800a1b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1bc:	4649      	mov	r1, r9
 800a1be:	4638      	mov	r0, r7
 800a1c0:	47c0      	blx	r8
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d01e      	beq.n	800a204 <_printf_common+0xa4>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	6922      	ldr	r2, [r4, #16]
 800a1ca:	f003 0306 	and.w	r3, r3, #6
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	bf02      	ittt	eq
 800a1d2:	68e5      	ldreq	r5, [r4, #12]
 800a1d4:	6833      	ldreq	r3, [r6, #0]
 800a1d6:	1aed      	subeq	r5, r5, r3
 800a1d8:	68a3      	ldr	r3, [r4, #8]
 800a1da:	bf0c      	ite	eq
 800a1dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e0:	2500      	movne	r5, #0
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bfc4      	itt	gt
 800a1e6:	1a9b      	subgt	r3, r3, r2
 800a1e8:	18ed      	addgt	r5, r5, r3
 800a1ea:	2600      	movs	r6, #0
 800a1ec:	341a      	adds	r4, #26
 800a1ee:	42b5      	cmp	r5, r6
 800a1f0:	d11a      	bne.n	800a228 <_printf_common+0xc8>
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	e008      	b.n	800a208 <_printf_common+0xa8>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	47c0      	blx	r8
 800a200:	3001      	adds	r0, #1
 800a202:	d103      	bne.n	800a20c <_printf_common+0xac>
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20c:	3501      	adds	r5, #1
 800a20e:	e7c6      	b.n	800a19e <_printf_common+0x3e>
 800a210:	18e1      	adds	r1, r4, r3
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	2030      	movs	r0, #48	; 0x30
 800a216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a21a:	4422      	add	r2, r4
 800a21c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a224:	3302      	adds	r3, #2
 800a226:	e7c7      	b.n	800a1b8 <_printf_common+0x58>
 800a228:	2301      	movs	r3, #1
 800a22a:	4622      	mov	r2, r4
 800a22c:	4649      	mov	r1, r9
 800a22e:	4638      	mov	r0, r7
 800a230:	47c0      	blx	r8
 800a232:	3001      	adds	r0, #1
 800a234:	d0e6      	beq.n	800a204 <_printf_common+0xa4>
 800a236:	3601      	adds	r6, #1
 800a238:	e7d9      	b.n	800a1ee <_printf_common+0x8e>
	...

0800a23c <_printf_i>:
 800a23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	7e0f      	ldrb	r7, [r1, #24]
 800a242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a244:	2f78      	cmp	r7, #120	; 0x78
 800a246:	4691      	mov	r9, r2
 800a248:	4680      	mov	r8, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	469a      	mov	sl, r3
 800a24e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a252:	d807      	bhi.n	800a264 <_printf_i+0x28>
 800a254:	2f62      	cmp	r7, #98	; 0x62
 800a256:	d80a      	bhi.n	800a26e <_printf_i+0x32>
 800a258:	2f00      	cmp	r7, #0
 800a25a:	f000 80d4 	beq.w	800a406 <_printf_i+0x1ca>
 800a25e:	2f58      	cmp	r7, #88	; 0x58
 800a260:	f000 80c0 	beq.w	800a3e4 <_printf_i+0x1a8>
 800a264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a26c:	e03a      	b.n	800a2e4 <_printf_i+0xa8>
 800a26e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a272:	2b15      	cmp	r3, #21
 800a274:	d8f6      	bhi.n	800a264 <_printf_i+0x28>
 800a276:	a101      	add	r1, pc, #4	; (adr r1, 800a27c <_printf_i+0x40>)
 800a278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a265 	.word	0x0800a265
 800a288:	0800a265 	.word	0x0800a265
 800a28c:	0800a265 	.word	0x0800a265
 800a290:	0800a265 	.word	0x0800a265
 800a294:	0800a2e9 	.word	0x0800a2e9
 800a298:	0800a265 	.word	0x0800a265
 800a29c:	0800a265 	.word	0x0800a265
 800a2a0:	0800a265 	.word	0x0800a265
 800a2a4:	0800a265 	.word	0x0800a265
 800a2a8:	0800a3ed 	.word	0x0800a3ed
 800a2ac:	0800a315 	.word	0x0800a315
 800a2b0:	0800a3a7 	.word	0x0800a3a7
 800a2b4:	0800a265 	.word	0x0800a265
 800a2b8:	0800a265 	.word	0x0800a265
 800a2bc:	0800a40f 	.word	0x0800a40f
 800a2c0:	0800a265 	.word	0x0800a265
 800a2c4:	0800a315 	.word	0x0800a315
 800a2c8:	0800a265 	.word	0x0800a265
 800a2cc:	0800a265 	.word	0x0800a265
 800a2d0:	0800a3af 	.word	0x0800a3af
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	1d1a      	adds	r2, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	602a      	str	r2, [r5, #0]
 800a2dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e09f      	b.n	800a428 <_printf_i+0x1ec>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	0607      	lsls	r7, r0, #24
 800a2ee:	f103 0104 	add.w	r1, r3, #4
 800a2f2:	6029      	str	r1, [r5, #0]
 800a2f4:	d501      	bpl.n	800a2fa <_printf_i+0xbe>
 800a2f6:	681e      	ldr	r6, [r3, #0]
 800a2f8:	e003      	b.n	800a302 <_printf_i+0xc6>
 800a2fa:	0646      	lsls	r6, r0, #25
 800a2fc:	d5fb      	bpl.n	800a2f6 <_printf_i+0xba>
 800a2fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a302:	2e00      	cmp	r6, #0
 800a304:	da03      	bge.n	800a30e <_printf_i+0xd2>
 800a306:	232d      	movs	r3, #45	; 0x2d
 800a308:	4276      	negs	r6, r6
 800a30a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a30e:	485a      	ldr	r0, [pc, #360]	; (800a478 <_printf_i+0x23c>)
 800a310:	230a      	movs	r3, #10
 800a312:	e012      	b.n	800a33a <_printf_i+0xfe>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	6820      	ldr	r0, [r4, #0]
 800a318:	1d19      	adds	r1, r3, #4
 800a31a:	6029      	str	r1, [r5, #0]
 800a31c:	0605      	lsls	r5, r0, #24
 800a31e:	d501      	bpl.n	800a324 <_printf_i+0xe8>
 800a320:	681e      	ldr	r6, [r3, #0]
 800a322:	e002      	b.n	800a32a <_printf_i+0xee>
 800a324:	0641      	lsls	r1, r0, #25
 800a326:	d5fb      	bpl.n	800a320 <_printf_i+0xe4>
 800a328:	881e      	ldrh	r6, [r3, #0]
 800a32a:	4853      	ldr	r0, [pc, #332]	; (800a478 <_printf_i+0x23c>)
 800a32c:	2f6f      	cmp	r7, #111	; 0x6f
 800a32e:	bf0c      	ite	eq
 800a330:	2308      	moveq	r3, #8
 800a332:	230a      	movne	r3, #10
 800a334:	2100      	movs	r1, #0
 800a336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a33a:	6865      	ldr	r5, [r4, #4]
 800a33c:	60a5      	str	r5, [r4, #8]
 800a33e:	2d00      	cmp	r5, #0
 800a340:	bfa2      	ittt	ge
 800a342:	6821      	ldrge	r1, [r4, #0]
 800a344:	f021 0104 	bicge.w	r1, r1, #4
 800a348:	6021      	strge	r1, [r4, #0]
 800a34a:	b90e      	cbnz	r6, 800a350 <_printf_i+0x114>
 800a34c:	2d00      	cmp	r5, #0
 800a34e:	d04b      	beq.n	800a3e8 <_printf_i+0x1ac>
 800a350:	4615      	mov	r5, r2
 800a352:	fbb6 f1f3 	udiv	r1, r6, r3
 800a356:	fb03 6711 	mls	r7, r3, r1, r6
 800a35a:	5dc7      	ldrb	r7, [r0, r7]
 800a35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a360:	4637      	mov	r7, r6
 800a362:	42bb      	cmp	r3, r7
 800a364:	460e      	mov	r6, r1
 800a366:	d9f4      	bls.n	800a352 <_printf_i+0x116>
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d10b      	bne.n	800a384 <_printf_i+0x148>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	07de      	lsls	r6, r3, #31
 800a370:	d508      	bpl.n	800a384 <_printf_i+0x148>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	6861      	ldr	r1, [r4, #4]
 800a376:	4299      	cmp	r1, r3
 800a378:	bfde      	ittt	le
 800a37a:	2330      	movle	r3, #48	; 0x30
 800a37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a380:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a384:	1b52      	subs	r2, r2, r5
 800a386:	6122      	str	r2, [r4, #16]
 800a388:	f8cd a000 	str.w	sl, [sp]
 800a38c:	464b      	mov	r3, r9
 800a38e:	aa03      	add	r2, sp, #12
 800a390:	4621      	mov	r1, r4
 800a392:	4640      	mov	r0, r8
 800a394:	f7ff fee4 	bl	800a160 <_printf_common>
 800a398:	3001      	adds	r0, #1
 800a39a:	d14a      	bne.n	800a432 <_printf_i+0x1f6>
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a0:	b004      	add	sp, #16
 800a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	f043 0320 	orr.w	r3, r3, #32
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	4833      	ldr	r0, [pc, #204]	; (800a47c <_printf_i+0x240>)
 800a3b0:	2778      	movs	r7, #120	; 0x78
 800a3b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	6829      	ldr	r1, [r5, #0]
 800a3ba:	061f      	lsls	r7, r3, #24
 800a3bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3c0:	d402      	bmi.n	800a3c8 <_printf_i+0x18c>
 800a3c2:	065f      	lsls	r7, r3, #25
 800a3c4:	bf48      	it	mi
 800a3c6:	b2b6      	uxthmi	r6, r6
 800a3c8:	07df      	lsls	r7, r3, #31
 800a3ca:	bf48      	it	mi
 800a3cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a3d0:	6029      	str	r1, [r5, #0]
 800a3d2:	bf48      	it	mi
 800a3d4:	6023      	strmi	r3, [r4, #0]
 800a3d6:	b91e      	cbnz	r6, 800a3e0 <_printf_i+0x1a4>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	f023 0320 	bic.w	r3, r3, #32
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	e7a7      	b.n	800a334 <_printf_i+0xf8>
 800a3e4:	4824      	ldr	r0, [pc, #144]	; (800a478 <_printf_i+0x23c>)
 800a3e6:	e7e4      	b.n	800a3b2 <_printf_i+0x176>
 800a3e8:	4615      	mov	r5, r2
 800a3ea:	e7bd      	b.n	800a368 <_printf_i+0x12c>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	6826      	ldr	r6, [r4, #0]
 800a3f0:	6961      	ldr	r1, [r4, #20]
 800a3f2:	1d18      	adds	r0, r3, #4
 800a3f4:	6028      	str	r0, [r5, #0]
 800a3f6:	0635      	lsls	r5, r6, #24
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	d501      	bpl.n	800a400 <_printf_i+0x1c4>
 800a3fc:	6019      	str	r1, [r3, #0]
 800a3fe:	e002      	b.n	800a406 <_printf_i+0x1ca>
 800a400:	0670      	lsls	r0, r6, #25
 800a402:	d5fb      	bpl.n	800a3fc <_printf_i+0x1c0>
 800a404:	8019      	strh	r1, [r3, #0]
 800a406:	2300      	movs	r3, #0
 800a408:	6123      	str	r3, [r4, #16]
 800a40a:	4615      	mov	r5, r2
 800a40c:	e7bc      	b.n	800a388 <_printf_i+0x14c>
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	602a      	str	r2, [r5, #0]
 800a414:	681d      	ldr	r5, [r3, #0]
 800a416:	6862      	ldr	r2, [r4, #4]
 800a418:	2100      	movs	r1, #0
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7f5 fee0 	bl	80001e0 <memchr>
 800a420:	b108      	cbz	r0, 800a426 <_printf_i+0x1ea>
 800a422:	1b40      	subs	r0, r0, r5
 800a424:	6060      	str	r0, [r4, #4]
 800a426:	6863      	ldr	r3, [r4, #4]
 800a428:	6123      	str	r3, [r4, #16]
 800a42a:	2300      	movs	r3, #0
 800a42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a430:	e7aa      	b.n	800a388 <_printf_i+0x14c>
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	462a      	mov	r2, r5
 800a436:	4649      	mov	r1, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	47d0      	blx	sl
 800a43c:	3001      	adds	r0, #1
 800a43e:	d0ad      	beq.n	800a39c <_printf_i+0x160>
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	079b      	lsls	r3, r3, #30
 800a444:	d413      	bmi.n	800a46e <_printf_i+0x232>
 800a446:	68e0      	ldr	r0, [r4, #12]
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	4298      	cmp	r0, r3
 800a44c:	bfb8      	it	lt
 800a44e:	4618      	movlt	r0, r3
 800a450:	e7a6      	b.n	800a3a0 <_printf_i+0x164>
 800a452:	2301      	movs	r3, #1
 800a454:	4632      	mov	r2, r6
 800a456:	4649      	mov	r1, r9
 800a458:	4640      	mov	r0, r8
 800a45a:	47d0      	blx	sl
 800a45c:	3001      	adds	r0, #1
 800a45e:	d09d      	beq.n	800a39c <_printf_i+0x160>
 800a460:	3501      	adds	r5, #1
 800a462:	68e3      	ldr	r3, [r4, #12]
 800a464:	9903      	ldr	r1, [sp, #12]
 800a466:	1a5b      	subs	r3, r3, r1
 800a468:	42ab      	cmp	r3, r5
 800a46a:	dcf2      	bgt.n	800a452 <_printf_i+0x216>
 800a46c:	e7eb      	b.n	800a446 <_printf_i+0x20a>
 800a46e:	2500      	movs	r5, #0
 800a470:	f104 0619 	add.w	r6, r4, #25
 800a474:	e7f5      	b.n	800a462 <_printf_i+0x226>
 800a476:	bf00      	nop
 800a478:	0800bca5 	.word	0x0800bca5
 800a47c:	0800bcb6 	.word	0x0800bcb6

0800a480 <__sflush_r>:
 800a480:	898a      	ldrh	r2, [r1, #12]
 800a482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a486:	4605      	mov	r5, r0
 800a488:	0710      	lsls	r0, r2, #28
 800a48a:	460c      	mov	r4, r1
 800a48c:	d458      	bmi.n	800a540 <__sflush_r+0xc0>
 800a48e:	684b      	ldr	r3, [r1, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	dc05      	bgt.n	800a4a0 <__sflush_r+0x20>
 800a494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	dc02      	bgt.n	800a4a0 <__sflush_r+0x20>
 800a49a:	2000      	movs	r0, #0
 800a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	d0f9      	beq.n	800a49a <__sflush_r+0x1a>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4ac:	682f      	ldr	r7, [r5, #0]
 800a4ae:	6a21      	ldr	r1, [r4, #32]
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	d032      	beq.n	800a51a <__sflush_r+0x9a>
 800a4b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	075a      	lsls	r2, r3, #29
 800a4ba:	d505      	bpl.n	800a4c8 <__sflush_r+0x48>
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	1ac0      	subs	r0, r0, r3
 800a4c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4c2:	b10b      	cbz	r3, 800a4c8 <__sflush_r+0x48>
 800a4c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4c6:	1ac0      	subs	r0, r0, r3
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ce:	6a21      	ldr	r1, [r4, #32]
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	47b0      	blx	r6
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	d106      	bne.n	800a4e8 <__sflush_r+0x68>
 800a4da:	6829      	ldr	r1, [r5, #0]
 800a4dc:	291d      	cmp	r1, #29
 800a4de:	d82b      	bhi.n	800a538 <__sflush_r+0xb8>
 800a4e0:	4a29      	ldr	r2, [pc, #164]	; (800a588 <__sflush_r+0x108>)
 800a4e2:	410a      	asrs	r2, r1
 800a4e4:	07d6      	lsls	r6, r2, #31
 800a4e6:	d427      	bmi.n	800a538 <__sflush_r+0xb8>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	6062      	str	r2, [r4, #4]
 800a4ec:	04d9      	lsls	r1, r3, #19
 800a4ee:	6922      	ldr	r2, [r4, #16]
 800a4f0:	6022      	str	r2, [r4, #0]
 800a4f2:	d504      	bpl.n	800a4fe <__sflush_r+0x7e>
 800a4f4:	1c42      	adds	r2, r0, #1
 800a4f6:	d101      	bne.n	800a4fc <__sflush_r+0x7c>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b903      	cbnz	r3, 800a4fe <__sflush_r+0x7e>
 800a4fc:	6560      	str	r0, [r4, #84]	; 0x54
 800a4fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a500:	602f      	str	r7, [r5, #0]
 800a502:	2900      	cmp	r1, #0
 800a504:	d0c9      	beq.n	800a49a <__sflush_r+0x1a>
 800a506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a50a:	4299      	cmp	r1, r3
 800a50c:	d002      	beq.n	800a514 <__sflush_r+0x94>
 800a50e:	4628      	mov	r0, r5
 800a510:	f7ff fa92 	bl	8009a38 <_free_r>
 800a514:	2000      	movs	r0, #0
 800a516:	6360      	str	r0, [r4, #52]	; 0x34
 800a518:	e7c0      	b.n	800a49c <__sflush_r+0x1c>
 800a51a:	2301      	movs	r3, #1
 800a51c:	4628      	mov	r0, r5
 800a51e:	47b0      	blx	r6
 800a520:	1c41      	adds	r1, r0, #1
 800a522:	d1c8      	bne.n	800a4b6 <__sflush_r+0x36>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0c5      	beq.n	800a4b6 <__sflush_r+0x36>
 800a52a:	2b1d      	cmp	r3, #29
 800a52c:	d001      	beq.n	800a532 <__sflush_r+0xb2>
 800a52e:	2b16      	cmp	r3, #22
 800a530:	d101      	bne.n	800a536 <__sflush_r+0xb6>
 800a532:	602f      	str	r7, [r5, #0]
 800a534:	e7b1      	b.n	800a49a <__sflush_r+0x1a>
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	e7ad      	b.n	800a49c <__sflush_r+0x1c>
 800a540:	690f      	ldr	r7, [r1, #16]
 800a542:	2f00      	cmp	r7, #0
 800a544:	d0a9      	beq.n	800a49a <__sflush_r+0x1a>
 800a546:	0793      	lsls	r3, r2, #30
 800a548:	680e      	ldr	r6, [r1, #0]
 800a54a:	bf08      	it	eq
 800a54c:	694b      	ldreq	r3, [r1, #20]
 800a54e:	600f      	str	r7, [r1, #0]
 800a550:	bf18      	it	ne
 800a552:	2300      	movne	r3, #0
 800a554:	eba6 0807 	sub.w	r8, r6, r7
 800a558:	608b      	str	r3, [r1, #8]
 800a55a:	f1b8 0f00 	cmp.w	r8, #0
 800a55e:	dd9c      	ble.n	800a49a <__sflush_r+0x1a>
 800a560:	6a21      	ldr	r1, [r4, #32]
 800a562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a564:	4643      	mov	r3, r8
 800a566:	463a      	mov	r2, r7
 800a568:	4628      	mov	r0, r5
 800a56a:	47b0      	blx	r6
 800a56c:	2800      	cmp	r0, #0
 800a56e:	dc06      	bgt.n	800a57e <__sflush_r+0xfe>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	e78e      	b.n	800a49c <__sflush_r+0x1c>
 800a57e:	4407      	add	r7, r0
 800a580:	eba8 0800 	sub.w	r8, r8, r0
 800a584:	e7e9      	b.n	800a55a <__sflush_r+0xda>
 800a586:	bf00      	nop
 800a588:	dfbffffe 	.word	0xdfbffffe

0800a58c <_fflush_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	690b      	ldr	r3, [r1, #16]
 800a590:	4605      	mov	r5, r0
 800a592:	460c      	mov	r4, r1
 800a594:	b913      	cbnz	r3, 800a59c <_fflush_r+0x10>
 800a596:	2500      	movs	r5, #0
 800a598:	4628      	mov	r0, r5
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	b118      	cbz	r0, 800a5a6 <_fflush_r+0x1a>
 800a59e:	6a03      	ldr	r3, [r0, #32]
 800a5a0:	b90b      	cbnz	r3, 800a5a6 <_fflush_r+0x1a>
 800a5a2:	f7ff f8d5 	bl	8009750 <__sinit>
 800a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0f3      	beq.n	800a596 <_fflush_r+0xa>
 800a5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5b0:	07d0      	lsls	r0, r2, #31
 800a5b2:	d404      	bmi.n	800a5be <_fflush_r+0x32>
 800a5b4:	0599      	lsls	r1, r3, #22
 800a5b6:	d402      	bmi.n	800a5be <_fflush_r+0x32>
 800a5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ba:	f7ff fa34 	bl	8009a26 <__retarget_lock_acquire_recursive>
 800a5be:	4628      	mov	r0, r5
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	f7ff ff5d 	bl	800a480 <__sflush_r>
 800a5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c8:	07da      	lsls	r2, r3, #31
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	d4e4      	bmi.n	800a598 <_fflush_r+0xc>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	059b      	lsls	r3, r3, #22
 800a5d2:	d4e1      	bmi.n	800a598 <_fflush_r+0xc>
 800a5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d6:	f7ff fa27 	bl	8009a28 <__retarget_lock_release_recursive>
 800a5da:	e7dd      	b.n	800a598 <_fflush_r+0xc>

0800a5dc <__swbuf_r>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	460e      	mov	r6, r1
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	b118      	cbz	r0, 800a5ee <__swbuf_r+0x12>
 800a5e6:	6a03      	ldr	r3, [r0, #32]
 800a5e8:	b90b      	cbnz	r3, 800a5ee <__swbuf_r+0x12>
 800a5ea:	f7ff f8b1 	bl	8009750 <__sinit>
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	071a      	lsls	r2, r3, #28
 800a5f6:	d525      	bpl.n	800a644 <__swbuf_r+0x68>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	b31b      	cbz	r3, 800a644 <__swbuf_r+0x68>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	6922      	ldr	r2, [r4, #16]
 800a600:	1a98      	subs	r0, r3, r2
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	b2f6      	uxtb	r6, r6
 800a606:	4283      	cmp	r3, r0
 800a608:	4637      	mov	r7, r6
 800a60a:	dc04      	bgt.n	800a616 <__swbuf_r+0x3a>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f7ff ffbc 	bl	800a58c <_fflush_r>
 800a614:	b9e0      	cbnz	r0, 800a650 <__swbuf_r+0x74>
 800a616:	68a3      	ldr	r3, [r4, #8]
 800a618:	3b01      	subs	r3, #1
 800a61a:	60a3      	str	r3, [r4, #8]
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	6022      	str	r2, [r4, #0]
 800a622:	701e      	strb	r6, [r3, #0]
 800a624:	6962      	ldr	r2, [r4, #20]
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	429a      	cmp	r2, r3
 800a62a:	d004      	beq.n	800a636 <__swbuf_r+0x5a>
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	07db      	lsls	r3, r3, #31
 800a630:	d506      	bpl.n	800a640 <__swbuf_r+0x64>
 800a632:	2e0a      	cmp	r6, #10
 800a634:	d104      	bne.n	800a640 <__swbuf_r+0x64>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f7ff ffa7 	bl	800a58c <_fflush_r>
 800a63e:	b938      	cbnz	r0, 800a650 <__swbuf_r+0x74>
 800a640:	4638      	mov	r0, r7
 800a642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a644:	4621      	mov	r1, r4
 800a646:	4628      	mov	r0, r5
 800a648:	f000 f806 	bl	800a658 <__swsetup_r>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d0d5      	beq.n	800a5fc <__swbuf_r+0x20>
 800a650:	f04f 37ff 	mov.w	r7, #4294967295
 800a654:	e7f4      	b.n	800a640 <__swbuf_r+0x64>
	...

0800a658 <__swsetup_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4b2a      	ldr	r3, [pc, #168]	; (800a704 <__swsetup_r+0xac>)
 800a65c:	4605      	mov	r5, r0
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	460c      	mov	r4, r1
 800a662:	b118      	cbz	r0, 800a66c <__swsetup_r+0x14>
 800a664:	6a03      	ldr	r3, [r0, #32]
 800a666:	b90b      	cbnz	r3, 800a66c <__swsetup_r+0x14>
 800a668:	f7ff f872 	bl	8009750 <__sinit>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a672:	0718      	lsls	r0, r3, #28
 800a674:	d422      	bmi.n	800a6bc <__swsetup_r+0x64>
 800a676:	06d9      	lsls	r1, r3, #27
 800a678:	d407      	bmi.n	800a68a <__swsetup_r+0x32>
 800a67a:	2309      	movs	r3, #9
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	f04f 30ff 	mov.w	r0, #4294967295
 800a688:	e034      	b.n	800a6f4 <__swsetup_r+0x9c>
 800a68a:	0758      	lsls	r0, r3, #29
 800a68c:	d512      	bpl.n	800a6b4 <__swsetup_r+0x5c>
 800a68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a690:	b141      	cbz	r1, 800a6a4 <__swsetup_r+0x4c>
 800a692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a696:	4299      	cmp	r1, r3
 800a698:	d002      	beq.n	800a6a0 <__swsetup_r+0x48>
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7ff f9cc 	bl	8009a38 <_free_r>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	6363      	str	r3, [r4, #52]	; 0x34
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f043 0308 	orr.w	r3, r3, #8
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	b94b      	cbnz	r3, 800a6d4 <__swsetup_r+0x7c>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ca:	d003      	beq.n	800a6d4 <__swsetup_r+0x7c>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 f8eb 	bl	800a8aa <__smakebuf_r>
 800a6d4:	89a0      	ldrh	r0, [r4, #12]
 800a6d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6da:	f010 0301 	ands.w	r3, r0, #1
 800a6de:	d00a      	beq.n	800a6f6 <__swsetup_r+0x9e>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60a3      	str	r3, [r4, #8]
 800a6e4:	6963      	ldr	r3, [r4, #20]
 800a6e6:	425b      	negs	r3, r3
 800a6e8:	61a3      	str	r3, [r4, #24]
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	b943      	cbnz	r3, 800a700 <__swsetup_r+0xa8>
 800a6ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6f2:	d1c4      	bne.n	800a67e <__swsetup_r+0x26>
 800a6f4:	bd38      	pop	{r3, r4, r5, pc}
 800a6f6:	0781      	lsls	r1, r0, #30
 800a6f8:	bf58      	it	pl
 800a6fa:	6963      	ldrpl	r3, [r4, #20]
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	e7f4      	b.n	800a6ea <__swsetup_r+0x92>
 800a700:	2000      	movs	r0, #0
 800a702:	e7f7      	b.n	800a6f4 <__swsetup_r+0x9c>
 800a704:	20000068 	.word	0x20000068

0800a708 <memmove>:
 800a708:	4288      	cmp	r0, r1
 800a70a:	b510      	push	{r4, lr}
 800a70c:	eb01 0402 	add.w	r4, r1, r2
 800a710:	d902      	bls.n	800a718 <memmove+0x10>
 800a712:	4284      	cmp	r4, r0
 800a714:	4623      	mov	r3, r4
 800a716:	d807      	bhi.n	800a728 <memmove+0x20>
 800a718:	1e43      	subs	r3, r0, #1
 800a71a:	42a1      	cmp	r1, r4
 800a71c:	d008      	beq.n	800a730 <memmove+0x28>
 800a71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a722:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a726:	e7f8      	b.n	800a71a <memmove+0x12>
 800a728:	4402      	add	r2, r0
 800a72a:	4601      	mov	r1, r0
 800a72c:	428a      	cmp	r2, r1
 800a72e:	d100      	bne.n	800a732 <memmove+0x2a>
 800a730:	bd10      	pop	{r4, pc}
 800a732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a73a:	e7f7      	b.n	800a72c <memmove+0x24>

0800a73c <_raise_r>:
 800a73c:	291f      	cmp	r1, #31
 800a73e:	b538      	push	{r3, r4, r5, lr}
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	d904      	bls.n	800a750 <_raise_r+0x14>
 800a746:	2316      	movs	r3, #22
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a752:	b112      	cbz	r2, 800a75a <_raise_r+0x1e>
 800a754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a758:	b94b      	cbnz	r3, 800a76e <_raise_r+0x32>
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 f830 	bl	800a7c0 <_getpid_r>
 800a760:	462a      	mov	r2, r5
 800a762:	4601      	mov	r1, r0
 800a764:	4620      	mov	r0, r4
 800a766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a76a:	f000 b817 	b.w	800a79c <_kill_r>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d00a      	beq.n	800a788 <_raise_r+0x4c>
 800a772:	1c59      	adds	r1, r3, #1
 800a774:	d103      	bne.n	800a77e <_raise_r+0x42>
 800a776:	2316      	movs	r3, #22
 800a778:	6003      	str	r3, [r0, #0]
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7e7      	b.n	800a74e <_raise_r+0x12>
 800a77e:	2400      	movs	r4, #0
 800a780:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a784:	4628      	mov	r0, r5
 800a786:	4798      	blx	r3
 800a788:	2000      	movs	r0, #0
 800a78a:	e7e0      	b.n	800a74e <_raise_r+0x12>

0800a78c <raise>:
 800a78c:	4b02      	ldr	r3, [pc, #8]	; (800a798 <raise+0xc>)
 800a78e:	4601      	mov	r1, r0
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	f7ff bfd3 	b.w	800a73c <_raise_r>
 800a796:	bf00      	nop
 800a798:	20000068 	.word	0x20000068

0800a79c <_kill_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	; (800a7bc <_kill_r+0x20>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	f7f7 fd17 	bl	80021dc <_kill>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	d102      	bne.n	800a7b8 <_kill_r+0x1c>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b103      	cbz	r3, 800a7b8 <_kill_r+0x1c>
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200006d8 	.word	0x200006d8

0800a7c0 <_getpid_r>:
 800a7c0:	f7f7 bd04 	b.w	80021cc <_getpid>

0800a7c4 <_sbrk_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_sbrk_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f7 fd8c 	bl	80022ec <_sbrk>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_sbrk_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_sbrk_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	200006d8 	.word	0x200006d8

0800a7e4 <memcpy>:
 800a7e4:	440a      	add	r2, r1
 800a7e6:	4291      	cmp	r1, r2
 800a7e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ec:	d100      	bne.n	800a7f0 <memcpy+0xc>
 800a7ee:	4770      	bx	lr
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7fa:	4291      	cmp	r1, r2
 800a7fc:	d1f9      	bne.n	800a7f2 <memcpy+0xe>
 800a7fe:	bd10      	pop	{r4, pc}

0800a800 <_realloc_r>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	4680      	mov	r8, r0
 800a806:	4614      	mov	r4, r2
 800a808:	460e      	mov	r6, r1
 800a80a:	b921      	cbnz	r1, 800a816 <_realloc_r+0x16>
 800a80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	4611      	mov	r1, r2
 800a812:	f7ff b97d 	b.w	8009b10 <_malloc_r>
 800a816:	b92a      	cbnz	r2, 800a824 <_realloc_r+0x24>
 800a818:	f7ff f90e 	bl	8009a38 <_free_r>
 800a81c:	4625      	mov	r5, r4
 800a81e:	4628      	mov	r0, r5
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	f000 f8a0 	bl	800a968 <_malloc_usable_size_r>
 800a828:	4284      	cmp	r4, r0
 800a82a:	4607      	mov	r7, r0
 800a82c:	d802      	bhi.n	800a834 <_realloc_r+0x34>
 800a82e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a832:	d812      	bhi.n	800a85a <_realloc_r+0x5a>
 800a834:	4621      	mov	r1, r4
 800a836:	4640      	mov	r0, r8
 800a838:	f7ff f96a 	bl	8009b10 <_malloc_r>
 800a83c:	4605      	mov	r5, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0ed      	beq.n	800a81e <_realloc_r+0x1e>
 800a842:	42bc      	cmp	r4, r7
 800a844:	4622      	mov	r2, r4
 800a846:	4631      	mov	r1, r6
 800a848:	bf28      	it	cs
 800a84a:	463a      	movcs	r2, r7
 800a84c:	f7ff ffca 	bl	800a7e4 <memcpy>
 800a850:	4631      	mov	r1, r6
 800a852:	4640      	mov	r0, r8
 800a854:	f7ff f8f0 	bl	8009a38 <_free_r>
 800a858:	e7e1      	b.n	800a81e <_realloc_r+0x1e>
 800a85a:	4635      	mov	r5, r6
 800a85c:	e7df      	b.n	800a81e <_realloc_r+0x1e>

0800a85e <__swhatbuf_r>:
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	460c      	mov	r4, r1
 800a862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a866:	2900      	cmp	r1, #0
 800a868:	b096      	sub	sp, #88	; 0x58
 800a86a:	4615      	mov	r5, r2
 800a86c:	461e      	mov	r6, r3
 800a86e:	da0d      	bge.n	800a88c <__swhatbuf_r+0x2e>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a876:	f04f 0100 	mov.w	r1, #0
 800a87a:	bf0c      	ite	eq
 800a87c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a880:	2340      	movne	r3, #64	; 0x40
 800a882:	2000      	movs	r0, #0
 800a884:	6031      	str	r1, [r6, #0]
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	b016      	add	sp, #88	; 0x58
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	466a      	mov	r2, sp
 800a88e:	f000 f849 	bl	800a924 <_fstat_r>
 800a892:	2800      	cmp	r0, #0
 800a894:	dbec      	blt.n	800a870 <__swhatbuf_r+0x12>
 800a896:	9901      	ldr	r1, [sp, #4]
 800a898:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a89c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a8a0:	4259      	negs	r1, r3
 800a8a2:	4159      	adcs	r1, r3
 800a8a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a8:	e7eb      	b.n	800a882 <__swhatbuf_r+0x24>

0800a8aa <__smakebuf_r>:
 800a8aa:	898b      	ldrh	r3, [r1, #12]
 800a8ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8ae:	079d      	lsls	r5, r3, #30
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	d507      	bpl.n	800a8c6 <__smakebuf_r+0x1c>
 800a8b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	6123      	str	r3, [r4, #16]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	6163      	str	r3, [r4, #20]
 800a8c2:	b002      	add	sp, #8
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	ab01      	add	r3, sp, #4
 800a8c8:	466a      	mov	r2, sp
 800a8ca:	f7ff ffc8 	bl	800a85e <__swhatbuf_r>
 800a8ce:	9900      	ldr	r1, [sp, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff f91c 	bl	8009b10 <_malloc_r>
 800a8d8:	b948      	cbnz	r0, 800a8ee <__smakebuf_r+0x44>
 800a8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8de:	059a      	lsls	r2, r3, #22
 800a8e0:	d4ef      	bmi.n	800a8c2 <__smakebuf_r+0x18>
 800a8e2:	f023 0303 	bic.w	r3, r3, #3
 800a8e6:	f043 0302 	orr.w	r3, r3, #2
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	e7e3      	b.n	800a8b6 <__smakebuf_r+0xc>
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	6020      	str	r0, [r4, #0]
 800a8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	9b00      	ldr	r3, [sp, #0]
 800a8fa:	6163      	str	r3, [r4, #20]
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	6120      	str	r0, [r4, #16]
 800a900:	b15b      	cbz	r3, 800a91a <__smakebuf_r+0x70>
 800a902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f81e 	bl	800a948 <_isatty_r>
 800a90c:	b128      	cbz	r0, 800a91a <__smakebuf_r+0x70>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	431d      	orrs	r5, r3
 800a91e:	81a5      	strh	r5, [r4, #12]
 800a920:	e7cf      	b.n	800a8c2 <__smakebuf_r+0x18>
	...

0800a924 <_fstat_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	; (800a944 <_fstat_r+0x20>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	4611      	mov	r1, r2
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f7f7 fcb2 	bl	800229a <_fstat>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	d102      	bne.n	800a940 <_fstat_r+0x1c>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	b103      	cbz	r3, 800a940 <_fstat_r+0x1c>
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	bf00      	nop
 800a944:	200006d8 	.word	0x200006d8

0800a948 <_isatty_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4d06      	ldr	r5, [pc, #24]	; (800a964 <_isatty_r+0x1c>)
 800a94c:	2300      	movs	r3, #0
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	602b      	str	r3, [r5, #0]
 800a954:	f7f7 fcb1 	bl	80022ba <_isatty>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_isatty_r+0x1a>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_isatty_r+0x1a>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	200006d8 	.word	0x200006d8

0800a968 <_malloc_usable_size_r>:
 800a968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96c:	1f18      	subs	r0, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bfbc      	itt	lt
 800a972:	580b      	ldrlt	r3, [r1, r0]
 800a974:	18c0      	addlt	r0, r0, r3
 800a976:	4770      	bx	lr

0800a978 <tan>:
 800a978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97a:	ec53 2b10 	vmov	r2, r3, d0
 800a97e:	4816      	ldr	r0, [pc, #88]	; (800a9d8 <tan+0x60>)
 800a980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a984:	4281      	cmp	r1, r0
 800a986:	dc07      	bgt.n	800a998 <tan+0x20>
 800a988:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a9d0 <tan+0x58>
 800a98c:	2001      	movs	r0, #1
 800a98e:	b005      	add	sp, #20
 800a990:	f85d eb04 	ldr.w	lr, [sp], #4
 800a994:	f000 b824 	b.w	800a9e0 <__kernel_tan>
 800a998:	4810      	ldr	r0, [pc, #64]	; (800a9dc <tan+0x64>)
 800a99a:	4281      	cmp	r1, r0
 800a99c:	dd09      	ble.n	800a9b2 <tan+0x3a>
 800a99e:	ee10 0a10 	vmov	r0, s0
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f7f5 fc70 	bl	8000288 <__aeabi_dsub>
 800a9a8:	ec41 0b10 	vmov	d0, r0, r1
 800a9ac:	b005      	add	sp, #20
 800a9ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9b2:	4668      	mov	r0, sp
 800a9b4:	f000 fa20 	bl	800adf8 <__ieee754_rem_pio2>
 800a9b8:	0040      	lsls	r0, r0, #1
 800a9ba:	f000 0002 	and.w	r0, r0, #2
 800a9be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9c2:	ed9d 0b00 	vldr	d0, [sp]
 800a9c6:	f1c0 0001 	rsb	r0, r0, #1
 800a9ca:	f000 f809 	bl	800a9e0 <__kernel_tan>
 800a9ce:	e7ed      	b.n	800a9ac <tan+0x34>
	...
 800a9d8:	3fe921fb 	.word	0x3fe921fb
 800a9dc:	7fefffff 	.word	0x7fefffff

0800a9e0 <__kernel_tan>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b06 	vpush	{d8-d10}
 800a9e8:	ec5b ab10 	vmov	sl, fp, d0
 800a9ec:	4be0      	ldr	r3, [pc, #896]	; (800ad70 <__kernel_tan+0x390>)
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800a9f4:	429f      	cmp	r7, r3
 800a9f6:	ec59 8b11 	vmov	r8, r9, d1
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	f8cd b000 	str.w	fp, [sp]
 800aa00:	dc61      	bgt.n	800aac6 <__kernel_tan+0xe6>
 800aa02:	ee10 0a10 	vmov	r0, s0
 800aa06:	4659      	mov	r1, fp
 800aa08:	f7f6 f890 	bl	8000b2c <__aeabi_d2iz>
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f040 8083 	bne.w	800ab1a <__kernel_tan+0x13a>
 800aa14:	1c73      	adds	r3, r6, #1
 800aa16:	4652      	mov	r2, sl
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	433b      	orrs	r3, r7
 800aa1c:	d112      	bne.n	800aa44 <__kernel_tan+0x64>
 800aa1e:	ec4b ab10 	vmov	d0, sl, fp
 800aa22:	f000 fbef 	bl	800b204 <fabs>
 800aa26:	49d3      	ldr	r1, [pc, #844]	; (800ad74 <__kernel_tan+0x394>)
 800aa28:	ec53 2b10 	vmov	r2, r3, d0
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f7f5 ff0d 	bl	800084c <__aeabi_ddiv>
 800aa32:	4682      	mov	sl, r0
 800aa34:	468b      	mov	fp, r1
 800aa36:	ec4b ab10 	vmov	d0, sl, fp
 800aa3a:	b003      	add	sp, #12
 800aa3c:	ecbd 8b06 	vpop	{d8-d10}
 800aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa44:	2e01      	cmp	r6, #1
 800aa46:	d0f6      	beq.n	800aa36 <__kernel_tan+0x56>
 800aa48:	4642      	mov	r2, r8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	4659      	mov	r1, fp
 800aa50:	f7f5 fc1c 	bl	800028c <__adddf3>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	460f      	mov	r7, r1
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	49c6      	ldr	r1, [pc, #792]	; (800ad78 <__kernel_tan+0x398>)
 800aa5e:	f7f5 fef5 	bl	800084c <__aeabi_ddiv>
 800aa62:	e9cd 0100 	strd	r0, r1, [sp]
 800aa66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa6a:	462e      	mov	r6, r5
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	462c      	mov	r4, r5
 800aa70:	4630      	mov	r0, r6
 800aa72:	461d      	mov	r5, r3
 800aa74:	4639      	mov	r1, r7
 800aa76:	465b      	mov	r3, fp
 800aa78:	f7f5 fc06 	bl	8000288 <__aeabi_dsub>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f5 fc00 	bl	8000288 <__aeabi_dsub>
 800aa88:	4632      	mov	r2, r6
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	f7f5 fdb4 	bl	80005f8 <__aeabi_dmul>
 800aa90:	4632      	mov	r2, r6
 800aa92:	4680      	mov	r8, r0
 800aa94:	4689      	mov	r9, r1
 800aa96:	462b      	mov	r3, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f5 fdac 	bl	80005f8 <__aeabi_dmul>
 800aaa0:	4bb4      	ldr	r3, [pc, #720]	; (800ad74 <__kernel_tan+0x394>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f7f5 fbf2 	bl	800028c <__adddf3>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7f5 fbec 	bl	800028c <__adddf3>
 800aab4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	4622      	mov	r2, r4
 800aabe:	462b      	mov	r3, r5
 800aac0:	f7f5 fbe4 	bl	800028c <__adddf3>
 800aac4:	e7b5      	b.n	800aa32 <__kernel_tan+0x52>
 800aac6:	4bad      	ldr	r3, [pc, #692]	; (800ad7c <__kernel_tan+0x39c>)
 800aac8:	429f      	cmp	r7, r3
 800aaca:	dd26      	ble.n	800ab1a <__kernel_tan+0x13a>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	da09      	bge.n	800aae6 <__kernel_tan+0x106>
 800aad2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aad6:	469b      	mov	fp, r3
 800aad8:	ee10 aa10 	vmov	sl, s0
 800aadc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aae0:	ee11 8a10 	vmov	r8, s2
 800aae4:	4699      	mov	r9, r3
 800aae6:	4652      	mov	r2, sl
 800aae8:	465b      	mov	r3, fp
 800aaea:	a183      	add	r1, pc, #524	; (adr r1, 800acf8 <__kernel_tan+0x318>)
 800aaec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaf0:	f7f5 fbca 	bl	8000288 <__aeabi_dsub>
 800aaf4:	4642      	mov	r2, r8
 800aaf6:	464b      	mov	r3, r9
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	a180      	add	r1, pc, #512	; (adr r1, 800ad00 <__kernel_tan+0x320>)
 800aafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab02:	f7f5 fbc1 	bl	8000288 <__aeabi_dsub>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	f7f5 fbbf 	bl	800028c <__adddf3>
 800ab0e:	f04f 0800 	mov.w	r8, #0
 800ab12:	4682      	mov	sl, r0
 800ab14:	468b      	mov	fp, r1
 800ab16:	f04f 0900 	mov.w	r9, #0
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	4650      	mov	r0, sl
 800ab20:	4659      	mov	r1, fp
 800ab22:	f7f5 fd69 	bl	80005f8 <__aeabi_dmul>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	ec43 2b18 	vmov	d8, r2, r3
 800ab2e:	f7f5 fd63 	bl	80005f8 <__aeabi_dmul>
 800ab32:	ec53 2b18 	vmov	r2, r3, d8
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	f7f5 fd5b 	bl	80005f8 <__aeabi_dmul>
 800ab42:	a371      	add	r3, pc, #452	; (adr r3, 800ad08 <__kernel_tan+0x328>)
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	ec41 0b19 	vmov	d9, r0, r1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	a36e      	add	r3, pc, #440	; (adr r3, 800ad10 <__kernel_tan+0x330>)
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	f7f5 fb97 	bl	800028c <__adddf3>
 800ab5e:	4622      	mov	r2, r4
 800ab60:	462b      	mov	r3, r5
 800ab62:	f7f5 fd49 	bl	80005f8 <__aeabi_dmul>
 800ab66:	a36c      	add	r3, pc, #432	; (adr r3, 800ad18 <__kernel_tan+0x338>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	f7f5 fb8e 	bl	800028c <__adddf3>
 800ab70:	4622      	mov	r2, r4
 800ab72:	462b      	mov	r3, r5
 800ab74:	f7f5 fd40 	bl	80005f8 <__aeabi_dmul>
 800ab78:	a369      	add	r3, pc, #420	; (adr r3, 800ad20 <__kernel_tan+0x340>)
 800ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7e:	f7f5 fb85 	bl	800028c <__adddf3>
 800ab82:	4622      	mov	r2, r4
 800ab84:	462b      	mov	r3, r5
 800ab86:	f7f5 fd37 	bl	80005f8 <__aeabi_dmul>
 800ab8a:	a367      	add	r3, pc, #412	; (adr r3, 800ad28 <__kernel_tan+0x348>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7f5 fb7c 	bl	800028c <__adddf3>
 800ab94:	4622      	mov	r2, r4
 800ab96:	462b      	mov	r3, r5
 800ab98:	f7f5 fd2e 	bl	80005f8 <__aeabi_dmul>
 800ab9c:	a364      	add	r3, pc, #400	; (adr r3, 800ad30 <__kernel_tan+0x350>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fb73 	bl	800028c <__adddf3>
 800aba6:	ec53 2b18 	vmov	r2, r3, d8
 800abaa:	f7f5 fd25 	bl	80005f8 <__aeabi_dmul>
 800abae:	a362      	add	r3, pc, #392	; (adr r3, 800ad38 <__kernel_tan+0x358>)
 800abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb4:	ec41 0b1a 	vmov	d10, r0, r1
 800abb8:	4620      	mov	r0, r4
 800abba:	4629      	mov	r1, r5
 800abbc:	f7f5 fd1c 	bl	80005f8 <__aeabi_dmul>
 800abc0:	a35f      	add	r3, pc, #380	; (adr r3, 800ad40 <__kernel_tan+0x360>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f7f5 fb61 	bl	800028c <__adddf3>
 800abca:	4622      	mov	r2, r4
 800abcc:	462b      	mov	r3, r5
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	a35d      	add	r3, pc, #372	; (adr r3, 800ad48 <__kernel_tan+0x368>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f7f5 fb58 	bl	800028c <__adddf3>
 800abdc:	4622      	mov	r2, r4
 800abde:	462b      	mov	r3, r5
 800abe0:	f7f5 fd0a 	bl	80005f8 <__aeabi_dmul>
 800abe4:	a35a      	add	r3, pc, #360	; (adr r3, 800ad50 <__kernel_tan+0x370>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f7f5 fb4f 	bl	800028c <__adddf3>
 800abee:	4622      	mov	r2, r4
 800abf0:	462b      	mov	r3, r5
 800abf2:	f7f5 fd01 	bl	80005f8 <__aeabi_dmul>
 800abf6:	a358      	add	r3, pc, #352	; (adr r3, 800ad58 <__kernel_tan+0x378>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f7f5 fb46 	bl	800028c <__adddf3>
 800ac00:	4622      	mov	r2, r4
 800ac02:	462b      	mov	r3, r5
 800ac04:	f7f5 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ac08:	a355      	add	r3, pc, #340	; (adr r3, 800ad60 <__kernel_tan+0x380>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f7f5 fb3d 	bl	800028c <__adddf3>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	ec51 0b1a 	vmov	r0, r1, d10
 800ac1a:	f7f5 fb37 	bl	800028c <__adddf3>
 800ac1e:	ec53 2b19 	vmov	r2, r3, d9
 800ac22:	f7f5 fce9 	bl	80005f8 <__aeabi_dmul>
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	f7f5 fb2f 	bl	800028c <__adddf3>
 800ac2e:	ec53 2b18 	vmov	r2, r3, d8
 800ac32:	f7f5 fce1 	bl	80005f8 <__aeabi_dmul>
 800ac36:	4642      	mov	r2, r8
 800ac38:	464b      	mov	r3, r9
 800ac3a:	f7f5 fb27 	bl	800028c <__adddf3>
 800ac3e:	a34a      	add	r3, pc, #296	; (adr r3, 800ad68 <__kernel_tan+0x388>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	4604      	mov	r4, r0
 800ac46:	460d      	mov	r5, r1
 800ac48:	ec51 0b19 	vmov	r0, r1, d9
 800ac4c:	f7f5 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ac50:	4622      	mov	r2, r4
 800ac52:	462b      	mov	r3, r5
 800ac54:	f7f5 fb1a 	bl	800028c <__adddf3>
 800ac58:	460b      	mov	r3, r1
 800ac5a:	ec41 0b18 	vmov	d8, r0, r1
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4659      	mov	r1, fp
 800ac62:	4650      	mov	r0, sl
 800ac64:	f7f5 fb12 	bl	800028c <__adddf3>
 800ac68:	4b44      	ldr	r3, [pc, #272]	; (800ad7c <__kernel_tan+0x39c>)
 800ac6a:	429f      	cmp	r7, r3
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	f340 8086 	ble.w	800ad80 <__kernel_tan+0x3a0>
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7f5 fc55 	bl	8000524 <__aeabi_i2d>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	4680      	mov	r8, r0
 800ac7e:	4689      	mov	r9, r1
 800ac80:	462b      	mov	r3, r5
 800ac82:	4620      	mov	r0, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	f7f5 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ac8a:	4642      	mov	r2, r8
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	460f      	mov	r7, r1
 800ac90:	464b      	mov	r3, r9
 800ac92:	4620      	mov	r0, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 faf9 	bl	800028c <__adddf3>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4639      	mov	r1, r7
 800aca2:	f7f5 fdd3 	bl	800084c <__aeabi_ddiv>
 800aca6:	ec53 2b18 	vmov	r2, r3, d8
 800acaa:	f7f5 faed 	bl	8000288 <__aeabi_dsub>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4650      	mov	r0, sl
 800acb4:	4659      	mov	r1, fp
 800acb6:	f7f5 fae7 	bl	8000288 <__aeabi_dsub>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	f7f5 fae5 	bl	800028c <__adddf3>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4640      	mov	r0, r8
 800acc8:	4649      	mov	r1, r9
 800acca:	f7f5 fadd 	bl	8000288 <__aeabi_dsub>
 800acce:	9b00      	ldr	r3, [sp, #0]
 800acd0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800acd4:	f00a 0a02 	and.w	sl, sl, #2
 800acd8:	4604      	mov	r4, r0
 800acda:	f1ca 0001 	rsb	r0, sl, #1
 800acde:	460d      	mov	r5, r1
 800ace0:	f7f5 fc20 	bl	8000524 <__aeabi_i2d>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4620      	mov	r0, r4
 800acea:	4629      	mov	r1, r5
 800acec:	f7f5 fc84 	bl	80005f8 <__aeabi_dmul>
 800acf0:	e69f      	b.n	800aa32 <__kernel_tan+0x52>
 800acf2:	bf00      	nop
 800acf4:	f3af 8000 	nop.w
 800acf8:	54442d18 	.word	0x54442d18
 800acfc:	3fe921fb 	.word	0x3fe921fb
 800ad00:	33145c07 	.word	0x33145c07
 800ad04:	3c81a626 	.word	0x3c81a626
 800ad08:	74bf7ad4 	.word	0x74bf7ad4
 800ad0c:	3efb2a70 	.word	0x3efb2a70
 800ad10:	32f0a7e9 	.word	0x32f0a7e9
 800ad14:	3f12b80f 	.word	0x3f12b80f
 800ad18:	1a8d1068 	.word	0x1a8d1068
 800ad1c:	3f3026f7 	.word	0x3f3026f7
 800ad20:	fee08315 	.word	0xfee08315
 800ad24:	3f57dbc8 	.word	0x3f57dbc8
 800ad28:	e96e8493 	.word	0xe96e8493
 800ad2c:	3f8226e3 	.word	0x3f8226e3
 800ad30:	1bb341fe 	.word	0x1bb341fe
 800ad34:	3faba1ba 	.word	0x3faba1ba
 800ad38:	db605373 	.word	0xdb605373
 800ad3c:	bef375cb 	.word	0xbef375cb
 800ad40:	a03792a6 	.word	0xa03792a6
 800ad44:	3f147e88 	.word	0x3f147e88
 800ad48:	f2f26501 	.word	0xf2f26501
 800ad4c:	3f4344d8 	.word	0x3f4344d8
 800ad50:	c9560328 	.word	0xc9560328
 800ad54:	3f6d6d22 	.word	0x3f6d6d22
 800ad58:	8406d637 	.word	0x8406d637
 800ad5c:	3f9664f4 	.word	0x3f9664f4
 800ad60:	1110fe7a 	.word	0x1110fe7a
 800ad64:	3fc11111 	.word	0x3fc11111
 800ad68:	55555563 	.word	0x55555563
 800ad6c:	3fd55555 	.word	0x3fd55555
 800ad70:	3e2fffff 	.word	0x3e2fffff
 800ad74:	3ff00000 	.word	0x3ff00000
 800ad78:	bff00000 	.word	0xbff00000
 800ad7c:	3fe59427 	.word	0x3fe59427
 800ad80:	2e01      	cmp	r6, #1
 800ad82:	d02f      	beq.n	800ade4 <__kernel_tan+0x404>
 800ad84:	460f      	mov	r7, r1
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4689      	mov	r9, r1
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	4917      	ldr	r1, [pc, #92]	; (800adec <__kernel_tan+0x40c>)
 800ad90:	f7f5 fd5c 	bl	800084c <__aeabi_ddiv>
 800ad94:	2600      	movs	r6, #0
 800ad96:	e9cd 0100 	strd	r0, r1, [sp]
 800ad9a:	4652      	mov	r2, sl
 800ad9c:	465b      	mov	r3, fp
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	f7f5 fa71 	bl	8000288 <__aeabi_dsub>
 800ada6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	ec51 0b18 	vmov	r0, r1, d8
 800adb2:	f7f5 fa69 	bl	8000288 <__aeabi_dsub>
 800adb6:	4632      	mov	r2, r6
 800adb8:	462b      	mov	r3, r5
 800adba:	f7f5 fc1d 	bl	80005f8 <__aeabi_dmul>
 800adbe:	46b0      	mov	r8, r6
 800adc0:	460f      	mov	r7, r1
 800adc2:	4642      	mov	r2, r8
 800adc4:	462b      	mov	r3, r5
 800adc6:	4634      	mov	r4, r6
 800adc8:	4649      	mov	r1, r9
 800adca:	4606      	mov	r6, r0
 800adcc:	4640      	mov	r0, r8
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <__kernel_tan+0x410>)
 800add4:	2200      	movs	r2, #0
 800add6:	f7f5 fa59 	bl	800028c <__adddf3>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	e665      	b.n	800aab0 <__kernel_tan+0xd0>
 800ade4:	4682      	mov	sl, r0
 800ade6:	468b      	mov	fp, r1
 800ade8:	e625      	b.n	800aa36 <__kernel_tan+0x56>
 800adea:	bf00      	nop
 800adec:	bff00000 	.word	0xbff00000
 800adf0:	3ff00000 	.word	0x3ff00000
 800adf4:	00000000 	.word	0x00000000

0800adf8 <__ieee754_rem_pio2>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	ed2d 8b02 	vpush	{d8}
 800ae00:	ec55 4b10 	vmov	r4, r5, d0
 800ae04:	4bca      	ldr	r3, [pc, #808]	; (800b130 <__ieee754_rem_pio2+0x338>)
 800ae06:	b08b      	sub	sp, #44	; 0x2c
 800ae08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae0c:	4598      	cmp	r8, r3
 800ae0e:	4682      	mov	sl, r0
 800ae10:	9502      	str	r5, [sp, #8]
 800ae12:	dc08      	bgt.n	800ae26 <__ieee754_rem_pio2+0x2e>
 800ae14:	2200      	movs	r2, #0
 800ae16:	2300      	movs	r3, #0
 800ae18:	ed80 0b00 	vstr	d0, [r0]
 800ae1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ae20:	f04f 0b00 	mov.w	fp, #0
 800ae24:	e028      	b.n	800ae78 <__ieee754_rem_pio2+0x80>
 800ae26:	4bc3      	ldr	r3, [pc, #780]	; (800b134 <__ieee754_rem_pio2+0x33c>)
 800ae28:	4598      	cmp	r8, r3
 800ae2a:	dc78      	bgt.n	800af1e <__ieee754_rem_pio2+0x126>
 800ae2c:	9b02      	ldr	r3, [sp, #8]
 800ae2e:	4ec2      	ldr	r6, [pc, #776]	; (800b138 <__ieee754_rem_pio2+0x340>)
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	ee10 0a10 	vmov	r0, s0
 800ae36:	a3b0      	add	r3, pc, #704	; (adr r3, 800b0f8 <__ieee754_rem_pio2+0x300>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	dd39      	ble.n	800aeb4 <__ieee754_rem_pio2+0xbc>
 800ae40:	f7f5 fa22 	bl	8000288 <__aeabi_dsub>
 800ae44:	45b0      	cmp	r8, r6
 800ae46:	4604      	mov	r4, r0
 800ae48:	460d      	mov	r5, r1
 800ae4a:	d01b      	beq.n	800ae84 <__ieee754_rem_pio2+0x8c>
 800ae4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b100 <__ieee754_rem_pio2+0x308>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 fa19 	bl	8000288 <__aeabi_dsub>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fa11 	bl	8000288 <__aeabi_dsub>
 800ae66:	a3a6      	add	r3, pc, #664	; (adr r3, 800b100 <__ieee754_rem_pio2+0x308>)
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f7f5 fa0c 	bl	8000288 <__aeabi_dsub>
 800ae70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae74:	f04f 0b01 	mov.w	fp, #1
 800ae78:	4658      	mov	r0, fp
 800ae7a:	b00b      	add	sp, #44	; 0x2c
 800ae7c:	ecbd 8b02 	vpop	{d8}
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	a3a0      	add	r3, pc, #640	; (adr r3, 800b108 <__ieee754_rem_pio2+0x310>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 f9fd 	bl	8000288 <__aeabi_dsub>
 800ae8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b110 <__ieee754_rem_pio2+0x318>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	f7f5 f9f6 	bl	8000288 <__aeabi_dsub>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	e9ca 2300 	strd	r2, r3, [sl]
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	a398      	add	r3, pc, #608	; (adr r3, 800b110 <__ieee754_rem_pio2+0x318>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	e7db      	b.n	800ae6c <__ieee754_rem_pio2+0x74>
 800aeb4:	f7f5 f9ea 	bl	800028c <__adddf3>
 800aeb8:	45b0      	cmp	r8, r6
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	d016      	beq.n	800aeee <__ieee754_rem_pio2+0xf6>
 800aec0:	a38f      	add	r3, pc, #572	; (adr r3, 800b100 <__ieee754_rem_pio2+0x308>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	f7f5 f9e1 	bl	800028c <__adddf3>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	e9ca 2300 	strd	r2, r3, [sl]
 800aed2:	4620      	mov	r0, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	f7f5 f9d7 	bl	8000288 <__aeabi_dsub>
 800aeda:	a389      	add	r3, pc, #548	; (adr r3, 800b100 <__ieee754_rem_pio2+0x308>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 f9d4 	bl	800028c <__adddf3>
 800aee4:	f04f 3bff 	mov.w	fp, #4294967295
 800aee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aeec:	e7c4      	b.n	800ae78 <__ieee754_rem_pio2+0x80>
 800aeee:	a386      	add	r3, pc, #536	; (adr r3, 800b108 <__ieee754_rem_pio2+0x310>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f7f5 f9ca 	bl	800028c <__adddf3>
 800aef8:	a385      	add	r3, pc, #532	; (adr r3, 800b110 <__ieee754_rem_pio2+0x318>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	e9ca 2300 	strd	r2, r3, [sl]
 800af0e:	4620      	mov	r0, r4
 800af10:	4629      	mov	r1, r5
 800af12:	f7f5 f9b9 	bl	8000288 <__aeabi_dsub>
 800af16:	a37e      	add	r3, pc, #504	; (adr r3, 800b110 <__ieee754_rem_pio2+0x318>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	e7e0      	b.n	800aee0 <__ieee754_rem_pio2+0xe8>
 800af1e:	4b87      	ldr	r3, [pc, #540]	; (800b13c <__ieee754_rem_pio2+0x344>)
 800af20:	4598      	cmp	r8, r3
 800af22:	f300 80d8 	bgt.w	800b0d6 <__ieee754_rem_pio2+0x2de>
 800af26:	f000 f96d 	bl	800b204 <fabs>
 800af2a:	ec55 4b10 	vmov	r4, r5, d0
 800af2e:	ee10 0a10 	vmov	r0, s0
 800af32:	a379      	add	r3, pc, #484	; (adr r3, 800b118 <__ieee754_rem_pio2+0x320>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	4629      	mov	r1, r5
 800af3a:	f7f5 fb5d 	bl	80005f8 <__aeabi_dmul>
 800af3e:	4b80      	ldr	r3, [pc, #512]	; (800b140 <__ieee754_rem_pio2+0x348>)
 800af40:	2200      	movs	r2, #0
 800af42:	f7f5 f9a3 	bl	800028c <__adddf3>
 800af46:	f7f5 fdf1 	bl	8000b2c <__aeabi_d2iz>
 800af4a:	4683      	mov	fp, r0
 800af4c:	f7f5 faea 	bl	8000524 <__aeabi_i2d>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	ec43 2b18 	vmov	d8, r2, r3
 800af58:	a367      	add	r3, pc, #412	; (adr r3, 800b0f8 <__ieee754_rem_pio2+0x300>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f7f5 fb4b 	bl	80005f8 <__aeabi_dmul>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 f98d 	bl	8000288 <__aeabi_dsub>
 800af6e:	a364      	add	r3, pc, #400	; (adr r3, 800b100 <__ieee754_rem_pio2+0x308>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	ec51 0b18 	vmov	r0, r1, d8
 800af7c:	f7f5 fb3c 	bl	80005f8 <__aeabi_dmul>
 800af80:	f1bb 0f1f 	cmp.w	fp, #31
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	dc0d      	bgt.n	800afa6 <__ieee754_rem_pio2+0x1ae>
 800af8a:	4b6e      	ldr	r3, [pc, #440]	; (800b144 <__ieee754_rem_pio2+0x34c>)
 800af8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af94:	4543      	cmp	r3, r8
 800af96:	d006      	beq.n	800afa6 <__ieee754_rem_pio2+0x1ae>
 800af98:	4622      	mov	r2, r4
 800af9a:	462b      	mov	r3, r5
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 f972 	bl	8000288 <__aeabi_dsub>
 800afa4:	e00e      	b.n	800afc4 <__ieee754_rem_pio2+0x1cc>
 800afa6:	462b      	mov	r3, r5
 800afa8:	4622      	mov	r2, r4
 800afaa:	4630      	mov	r0, r6
 800afac:	4639      	mov	r1, r7
 800afae:	f7f5 f96b 	bl	8000288 <__aeabi_dsub>
 800afb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800afb6:	9303      	str	r3, [sp, #12]
 800afb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800afbc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800afc0:	2b10      	cmp	r3, #16
 800afc2:	dc02      	bgt.n	800afca <__ieee754_rem_pio2+0x1d2>
 800afc4:	e9ca 0100 	strd	r0, r1, [sl]
 800afc8:	e039      	b.n	800b03e <__ieee754_rem_pio2+0x246>
 800afca:	a34f      	add	r3, pc, #316	; (adr r3, 800b108 <__ieee754_rem_pio2+0x310>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	ec51 0b18 	vmov	r0, r1, d8
 800afd4:	f7f5 fb10 	bl	80005f8 <__aeabi_dmul>
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 f950 	bl	8000288 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4680      	mov	r8, r0
 800afee:	4689      	mov	r9, r1
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 f948 	bl	8000288 <__aeabi_dsub>
 800aff8:	4622      	mov	r2, r4
 800affa:	462b      	mov	r3, r5
 800affc:	f7f5 f944 	bl	8000288 <__aeabi_dsub>
 800b000:	a343      	add	r3, pc, #268	; (adr r3, 800b110 <__ieee754_rem_pio2+0x318>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	ec51 0b18 	vmov	r0, r1, d8
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 f937 	bl	8000288 <__aeabi_dsub>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	4640      	mov	r0, r8
 800b024:	4649      	mov	r1, r9
 800b026:	f7f5 f92f 	bl	8000288 <__aeabi_dsub>
 800b02a:	9a03      	ldr	r2, [sp, #12]
 800b02c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b31      	cmp	r3, #49	; 0x31
 800b034:	dc24      	bgt.n	800b080 <__ieee754_rem_pio2+0x288>
 800b036:	e9ca 0100 	strd	r0, r1, [sl]
 800b03a:	4646      	mov	r6, r8
 800b03c:	464f      	mov	r7, r9
 800b03e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b042:	4630      	mov	r0, r6
 800b044:	4642      	mov	r2, r8
 800b046:	464b      	mov	r3, r9
 800b048:	4639      	mov	r1, r7
 800b04a:	f7f5 f91d 	bl	8000288 <__aeabi_dsub>
 800b04e:	462b      	mov	r3, r5
 800b050:	4622      	mov	r2, r4
 800b052:	f7f5 f919 	bl	8000288 <__aeabi_dsub>
 800b056:	9b02      	ldr	r3, [sp, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b05e:	f6bf af0b 	bge.w	800ae78 <__ieee754_rem_pio2+0x80>
 800b062:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b066:	f8ca 3004 	str.w	r3, [sl, #4]
 800b06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b06e:	f8ca 8000 	str.w	r8, [sl]
 800b072:	f8ca 0008 	str.w	r0, [sl, #8]
 800b076:	f8ca 300c 	str.w	r3, [sl, #12]
 800b07a:	f1cb 0b00 	rsb	fp, fp, #0
 800b07e:	e6fb      	b.n	800ae78 <__ieee754_rem_pio2+0x80>
 800b080:	a327      	add	r3, pc, #156	; (adr r3, 800b120 <__ieee754_rem_pio2+0x328>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	ec51 0b18 	vmov	r0, r1, d8
 800b08a:	f7f5 fab5 	bl	80005f8 <__aeabi_dmul>
 800b08e:	4604      	mov	r4, r0
 800b090:	460d      	mov	r5, r1
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4640      	mov	r0, r8
 800b098:	4649      	mov	r1, r9
 800b09a:	f7f5 f8f5 	bl	8000288 <__aeabi_dsub>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	460f      	mov	r7, r1
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	4649      	mov	r1, r9
 800b0aa:	f7f5 f8ed 	bl	8000288 <__aeabi_dsub>
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	f7f5 f8e9 	bl	8000288 <__aeabi_dsub>
 800b0b6:	a31c      	add	r3, pc, #112	; (adr r3, 800b128 <__ieee754_rem_pio2+0x330>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	ec51 0b18 	vmov	r0, r1, d8
 800b0c4:	f7f5 fa98 	bl	80005f8 <__aeabi_dmul>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 f8dc 	bl	8000288 <__aeabi_dsub>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	e760      	b.n	800af98 <__ieee754_rem_pio2+0x1a0>
 800b0d6:	4b1c      	ldr	r3, [pc, #112]	; (800b148 <__ieee754_rem_pio2+0x350>)
 800b0d8:	4598      	cmp	r8, r3
 800b0da:	dd37      	ble.n	800b14c <__ieee754_rem_pio2+0x354>
 800b0dc:	ee10 2a10 	vmov	r2, s0
 800b0e0:	462b      	mov	r3, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0ee:	e9ca 0100 	strd	r0, r1, [sl]
 800b0f2:	e695      	b.n	800ae20 <__ieee754_rem_pio2+0x28>
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	54400000 	.word	0x54400000
 800b0fc:	3ff921fb 	.word	0x3ff921fb
 800b100:	1a626331 	.word	0x1a626331
 800b104:	3dd0b461 	.word	0x3dd0b461
 800b108:	1a600000 	.word	0x1a600000
 800b10c:	3dd0b461 	.word	0x3dd0b461
 800b110:	2e037073 	.word	0x2e037073
 800b114:	3ba3198a 	.word	0x3ba3198a
 800b118:	6dc9c883 	.word	0x6dc9c883
 800b11c:	3fe45f30 	.word	0x3fe45f30
 800b120:	2e000000 	.word	0x2e000000
 800b124:	3ba3198a 	.word	0x3ba3198a
 800b128:	252049c1 	.word	0x252049c1
 800b12c:	397b839a 	.word	0x397b839a
 800b130:	3fe921fb 	.word	0x3fe921fb
 800b134:	4002d97b 	.word	0x4002d97b
 800b138:	3ff921fb 	.word	0x3ff921fb
 800b13c:	413921fb 	.word	0x413921fb
 800b140:	3fe00000 	.word	0x3fe00000
 800b144:	0800bcc8 	.word	0x0800bcc8
 800b148:	7fefffff 	.word	0x7fefffff
 800b14c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b150:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b154:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b158:	4620      	mov	r0, r4
 800b15a:	460d      	mov	r5, r1
 800b15c:	f7f5 fce6 	bl	8000b2c <__aeabi_d2iz>
 800b160:	f7f5 f9e0 	bl	8000524 <__aeabi_i2d>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b170:	f7f5 f88a 	bl	8000288 <__aeabi_dsub>
 800b174:	4b21      	ldr	r3, [pc, #132]	; (800b1fc <__ieee754_rem_pio2+0x404>)
 800b176:	2200      	movs	r2, #0
 800b178:	f7f5 fa3e 	bl	80005f8 <__aeabi_dmul>
 800b17c:	460d      	mov	r5, r1
 800b17e:	4604      	mov	r4, r0
 800b180:	f7f5 fcd4 	bl	8000b2c <__aeabi_d2iz>
 800b184:	f7f5 f9ce 	bl	8000524 <__aeabi_i2d>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b194:	f7f5 f878 	bl	8000288 <__aeabi_dsub>
 800b198:	4b18      	ldr	r3, [pc, #96]	; (800b1fc <__ieee754_rem_pio2+0x404>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	f7f5 fa2c 	bl	80005f8 <__aeabi_dmul>
 800b1a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b1a8:	2703      	movs	r7, #3
 800b1aa:	2400      	movs	r4, #0
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	46b9      	mov	r9, r7
 800b1b8:	3f01      	subs	r7, #1
 800b1ba:	f7f5 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d1f5      	bne.n	800b1ae <__ieee754_rem_pio2+0x3b6>
 800b1c2:	4b0f      	ldr	r3, [pc, #60]	; (800b200 <__ieee754_rem_pio2+0x408>)
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	4632      	mov	r2, r6
 800b1cc:	464b      	mov	r3, r9
 800b1ce:	4651      	mov	r1, sl
 800b1d0:	a804      	add	r0, sp, #16
 800b1d2:	f000 f821 	bl	800b218 <__kernel_rem_pio2>
 800b1d6:	9b02      	ldr	r3, [sp, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	4683      	mov	fp, r0
 800b1dc:	f6bf ae4c 	bge.w	800ae78 <__ieee754_rem_pio2+0x80>
 800b1e0:	e9da 2100 	ldrd	r2, r1, [sl]
 800b1e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1e8:	e9ca 2300 	strd	r2, r3, [sl]
 800b1ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b1f8:	e73f      	b.n	800b07a <__ieee754_rem_pio2+0x282>
 800b1fa:	bf00      	nop
 800b1fc:	41700000 	.word	0x41700000
 800b200:	0800bd48 	.word	0x0800bd48

0800b204 <fabs>:
 800b204:	ec51 0b10 	vmov	r0, r1, d0
 800b208:	ee10 2a10 	vmov	r2, s0
 800b20c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b210:	ec43 2b10 	vmov	d0, r2, r3
 800b214:	4770      	bx	lr
	...

0800b218 <__kernel_rem_pio2>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ed2d 8b02 	vpush	{d8}
 800b220:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b224:	f112 0f14 	cmn.w	r2, #20
 800b228:	9306      	str	r3, [sp, #24]
 800b22a:	9104      	str	r1, [sp, #16]
 800b22c:	4bc2      	ldr	r3, [pc, #776]	; (800b538 <__kernel_rem_pio2+0x320>)
 800b22e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b230:	9009      	str	r0, [sp, #36]	; 0x24
 800b232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	9b06      	ldr	r3, [sp, #24]
 800b23a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b23e:	bfa8      	it	ge
 800b240:	1ed4      	subge	r4, r2, #3
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	bfb2      	itee	lt
 800b246:	2400      	movlt	r4, #0
 800b248:	2318      	movge	r3, #24
 800b24a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b24e:	f06f 0317 	mvn.w	r3, #23
 800b252:	fb04 3303 	mla	r3, r4, r3, r3
 800b256:	eb03 0a02 	add.w	sl, r3, r2
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	9a05      	ldr	r2, [sp, #20]
 800b25e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800b528 <__kernel_rem_pio2+0x310>
 800b262:	eb03 0802 	add.w	r8, r3, r2
 800b266:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b268:	1aa7      	subs	r7, r4, r2
 800b26a:	ae20      	add	r6, sp, #128	; 0x80
 800b26c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b270:	2500      	movs	r5, #0
 800b272:	4545      	cmp	r5, r8
 800b274:	dd13      	ble.n	800b29e <__kernel_rem_pio2+0x86>
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	aa20      	add	r2, sp, #128	; 0x80
 800b27a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b27e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b282:	f04f 0800 	mov.w	r8, #0
 800b286:	9b00      	ldr	r3, [sp, #0]
 800b288:	4598      	cmp	r8, r3
 800b28a:	dc31      	bgt.n	800b2f0 <__kernel_rem_pio2+0xd8>
 800b28c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b528 <__kernel_rem_pio2+0x310>
 800b290:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b294:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b298:	462f      	mov	r7, r5
 800b29a:	2600      	movs	r6, #0
 800b29c:	e01b      	b.n	800b2d6 <__kernel_rem_pio2+0xbe>
 800b29e:	42ef      	cmn	r7, r5
 800b2a0:	d407      	bmi.n	800b2b2 <__kernel_rem_pio2+0x9a>
 800b2a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b2a6:	f7f5 f93d 	bl	8000524 <__aeabi_i2d>
 800b2aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b2ae:	3501      	adds	r5, #1
 800b2b0:	e7df      	b.n	800b272 <__kernel_rem_pio2+0x5a>
 800b2b2:	ec51 0b18 	vmov	r0, r1, d8
 800b2b6:	e7f8      	b.n	800b2aa <__kernel_rem_pio2+0x92>
 800b2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b2c0:	f7f5 f99a 	bl	80005f8 <__aeabi_dmul>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2cc:	f7f4 ffde 	bl	800028c <__adddf3>
 800b2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d4:	3601      	adds	r6, #1
 800b2d6:	9b05      	ldr	r3, [sp, #20]
 800b2d8:	429e      	cmp	r6, r3
 800b2da:	f1a7 0708 	sub.w	r7, r7, #8
 800b2de:	ddeb      	ble.n	800b2b8 <__kernel_rem_pio2+0xa0>
 800b2e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2e4:	f108 0801 	add.w	r8, r8, #1
 800b2e8:	ecab 7b02 	vstmia	fp!, {d7}
 800b2ec:	3508      	adds	r5, #8
 800b2ee:	e7ca      	b.n	800b286 <__kernel_rem_pio2+0x6e>
 800b2f0:	9b00      	ldr	r3, [sp, #0]
 800b2f2:	aa0c      	add	r2, sp, #48	; 0x30
 800b2f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b2fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b300:	9c00      	ldr	r4, [sp, #0]
 800b302:	930a      	str	r3, [sp, #40]	; 0x28
 800b304:	00e3      	lsls	r3, r4, #3
 800b306:	9308      	str	r3, [sp, #32]
 800b308:	ab98      	add	r3, sp, #608	; 0x260
 800b30a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b30e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b312:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800b316:	ab70      	add	r3, sp, #448	; 0x1c0
 800b318:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b31c:	46c3      	mov	fp, r8
 800b31e:	46a1      	mov	r9, r4
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	f1a5 0508 	sub.w	r5, r5, #8
 800b328:	dc77      	bgt.n	800b41a <__kernel_rem_pio2+0x202>
 800b32a:	ec47 6b10 	vmov	d0, r6, r7
 800b32e:	4650      	mov	r0, sl
 800b330:	f000 fac2 	bl	800b8b8 <scalbn>
 800b334:	ec57 6b10 	vmov	r6, r7, d0
 800b338:	2200      	movs	r2, #0
 800b33a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b33e:	ee10 0a10 	vmov	r0, s0
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 f958 	bl	80005f8 <__aeabi_dmul>
 800b348:	ec41 0b10 	vmov	d0, r0, r1
 800b34c:	f000 fb34 	bl	800b9b8 <floor>
 800b350:	4b7a      	ldr	r3, [pc, #488]	; (800b53c <__kernel_rem_pio2+0x324>)
 800b352:	ec51 0b10 	vmov	r0, r1, d0
 800b356:	2200      	movs	r2, #0
 800b358:	f7f5 f94e 	bl	80005f8 <__aeabi_dmul>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	4630      	mov	r0, r6
 800b362:	4639      	mov	r1, r7
 800b364:	f7f4 ff90 	bl	8000288 <__aeabi_dsub>
 800b368:	460f      	mov	r7, r1
 800b36a:	4606      	mov	r6, r0
 800b36c:	f7f5 fbde 	bl	8000b2c <__aeabi_d2iz>
 800b370:	9002      	str	r0, [sp, #8]
 800b372:	f7f5 f8d7 	bl	8000524 <__aeabi_i2d>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f4 ff83 	bl	8000288 <__aeabi_dsub>
 800b382:	f1ba 0f00 	cmp.w	sl, #0
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	dd6d      	ble.n	800b468 <__kernel_rem_pio2+0x250>
 800b38c:	1e61      	subs	r1, r4, #1
 800b38e:	ab0c      	add	r3, sp, #48	; 0x30
 800b390:	9d02      	ldr	r5, [sp, #8]
 800b392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b396:	f1ca 0018 	rsb	r0, sl, #24
 800b39a:	fa43 f200 	asr.w	r2, r3, r0
 800b39e:	4415      	add	r5, r2
 800b3a0:	4082      	lsls	r2, r0
 800b3a2:	1a9b      	subs	r3, r3, r2
 800b3a4:	aa0c      	add	r2, sp, #48	; 0x30
 800b3a6:	9502      	str	r5, [sp, #8]
 800b3a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b3ac:	f1ca 0217 	rsb	r2, sl, #23
 800b3b0:	fa43 fb02 	asr.w	fp, r3, r2
 800b3b4:	f1bb 0f00 	cmp.w	fp, #0
 800b3b8:	dd65      	ble.n	800b486 <__kernel_rem_pio2+0x26e>
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	3301      	adds	r3, #1
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	4615      	mov	r5, r2
 800b3c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b3c8:	4294      	cmp	r4, r2
 800b3ca:	f300 809f 	bgt.w	800b50c <__kernel_rem_pio2+0x2f4>
 800b3ce:	f1ba 0f00 	cmp.w	sl, #0
 800b3d2:	dd07      	ble.n	800b3e4 <__kernel_rem_pio2+0x1cc>
 800b3d4:	f1ba 0f01 	cmp.w	sl, #1
 800b3d8:	f000 80c1 	beq.w	800b55e <__kernel_rem_pio2+0x346>
 800b3dc:	f1ba 0f02 	cmp.w	sl, #2
 800b3e0:	f000 80c7 	beq.w	800b572 <__kernel_rem_pio2+0x35a>
 800b3e4:	f1bb 0f02 	cmp.w	fp, #2
 800b3e8:	d14d      	bne.n	800b486 <__kernel_rem_pio2+0x26e>
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	463b      	mov	r3, r7
 800b3ee:	4954      	ldr	r1, [pc, #336]	; (800b540 <__kernel_rem_pio2+0x328>)
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f7f4 ff49 	bl	8000288 <__aeabi_dsub>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	2d00      	cmp	r5, #0
 800b3fc:	d043      	beq.n	800b486 <__kernel_rem_pio2+0x26e>
 800b3fe:	4650      	mov	r0, sl
 800b400:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800b530 <__kernel_rem_pio2+0x318>
 800b404:	f000 fa58 	bl	800b8b8 <scalbn>
 800b408:	4630      	mov	r0, r6
 800b40a:	4639      	mov	r1, r7
 800b40c:	ec53 2b10 	vmov	r2, r3, d0
 800b410:	f7f4 ff3a 	bl	8000288 <__aeabi_dsub>
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	e035      	b.n	800b486 <__kernel_rem_pio2+0x26e>
 800b41a:	4b4a      	ldr	r3, [pc, #296]	; (800b544 <__kernel_rem_pio2+0x32c>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	4630      	mov	r0, r6
 800b420:	4639      	mov	r1, r7
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	f7f5 fb81 	bl	8000b2c <__aeabi_d2iz>
 800b42a:	f7f5 f87b 	bl	8000524 <__aeabi_i2d>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	ec43 2b18 	vmov	d8, r2, r3
 800b436:	4b44      	ldr	r3, [pc, #272]	; (800b548 <__kernel_rem_pio2+0x330>)
 800b438:	2200      	movs	r2, #0
 800b43a:	f7f5 f8dd 	bl	80005f8 <__aeabi_dmul>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4630      	mov	r0, r6
 800b444:	4639      	mov	r1, r7
 800b446:	f7f4 ff1f 	bl	8000288 <__aeabi_dsub>
 800b44a:	f7f5 fb6f 	bl	8000b2c <__aeabi_d2iz>
 800b44e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b452:	f84b 0b04 	str.w	r0, [fp], #4
 800b456:	ec51 0b18 	vmov	r0, r1, d8
 800b45a:	f7f4 ff17 	bl	800028c <__adddf3>
 800b45e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b462:	4606      	mov	r6, r0
 800b464:	460f      	mov	r7, r1
 800b466:	e75b      	b.n	800b320 <__kernel_rem_pio2+0x108>
 800b468:	d106      	bne.n	800b478 <__kernel_rem_pio2+0x260>
 800b46a:	1e63      	subs	r3, r4, #1
 800b46c:	aa0c      	add	r2, sp, #48	; 0x30
 800b46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b472:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800b476:	e79d      	b.n	800b3b4 <__kernel_rem_pio2+0x19c>
 800b478:	4b34      	ldr	r3, [pc, #208]	; (800b54c <__kernel_rem_pio2+0x334>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	f7f5 fb42 	bl	8000b04 <__aeabi_dcmpge>
 800b480:	2800      	cmp	r0, #0
 800b482:	d140      	bne.n	800b506 <__kernel_rem_pio2+0x2ee>
 800b484:	4683      	mov	fp, r0
 800b486:	2200      	movs	r2, #0
 800b488:	2300      	movs	r3, #0
 800b48a:	4630      	mov	r0, r6
 800b48c:	4639      	mov	r1, r7
 800b48e:	f7f5 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b492:	2800      	cmp	r0, #0
 800b494:	f000 80c1 	beq.w	800b61a <__kernel_rem_pio2+0x402>
 800b498:	1e65      	subs	r5, r4, #1
 800b49a:	462b      	mov	r3, r5
 800b49c:	2200      	movs	r2, #0
 800b49e:	9900      	ldr	r1, [sp, #0]
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	da6d      	bge.n	800b580 <__kernel_rem_pio2+0x368>
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	f000 808a 	beq.w	800b5be <__kernel_rem_pio2+0x3a6>
 800b4aa:	ab0c      	add	r3, sp, #48	; 0x30
 800b4ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800b4b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 80ae 	beq.w	800b616 <__kernel_rem_pio2+0x3fe>
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800b530 <__kernel_rem_pio2+0x318>
 800b4c0:	f000 f9fa 	bl	800b8b8 <scalbn>
 800b4c4:	1c6b      	adds	r3, r5, #1
 800b4c6:	00da      	lsls	r2, r3, #3
 800b4c8:	9205      	str	r2, [sp, #20]
 800b4ca:	ec57 6b10 	vmov	r6, r7, d0
 800b4ce:	aa70      	add	r2, sp, #448	; 0x1c0
 800b4d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800b544 <__kernel_rem_pio2+0x32c>
 800b4d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800b4d8:	462c      	mov	r4, r5
 800b4da:	f04f 0800 	mov.w	r8, #0
 800b4de:	2c00      	cmp	r4, #0
 800b4e0:	f280 80d4 	bge.w	800b68c <__kernel_rem_pio2+0x474>
 800b4e4:	462c      	mov	r4, r5
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	f2c0 8102 	blt.w	800b6f0 <__kernel_rem_pio2+0x4d8>
 800b4ec:	4b18      	ldr	r3, [pc, #96]	; (800b550 <__kernel_rem_pio2+0x338>)
 800b4ee:	461e      	mov	r6, r3
 800b4f0:	ab70      	add	r3, sp, #448	; 0x1c0
 800b4f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800b4f6:	1b2b      	subs	r3, r5, r4
 800b4f8:	f04f 0900 	mov.w	r9, #0
 800b4fc:	f04f 0a00 	mov.w	sl, #0
 800b500:	2700      	movs	r7, #0
 800b502:	9306      	str	r3, [sp, #24]
 800b504:	e0e6      	b.n	800b6d4 <__kernel_rem_pio2+0x4bc>
 800b506:	f04f 0b02 	mov.w	fp, #2
 800b50a:	e756      	b.n	800b3ba <__kernel_rem_pio2+0x1a2>
 800b50c:	f8d8 3000 	ldr.w	r3, [r8]
 800b510:	bb05      	cbnz	r5, 800b554 <__kernel_rem_pio2+0x33c>
 800b512:	b123      	cbz	r3, 800b51e <__kernel_rem_pio2+0x306>
 800b514:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b518:	f8c8 3000 	str.w	r3, [r8]
 800b51c:	2301      	movs	r3, #1
 800b51e:	3201      	adds	r2, #1
 800b520:	f108 0804 	add.w	r8, r8, #4
 800b524:	461d      	mov	r5, r3
 800b526:	e74f      	b.n	800b3c8 <__kernel_rem_pio2+0x1b0>
	...
 800b534:	3ff00000 	.word	0x3ff00000
 800b538:	0800be90 	.word	0x0800be90
 800b53c:	40200000 	.word	0x40200000
 800b540:	3ff00000 	.word	0x3ff00000
 800b544:	3e700000 	.word	0x3e700000
 800b548:	41700000 	.word	0x41700000
 800b54c:	3fe00000 	.word	0x3fe00000
 800b550:	0800be50 	.word	0x0800be50
 800b554:	1acb      	subs	r3, r1, r3
 800b556:	f8c8 3000 	str.w	r3, [r8]
 800b55a:	462b      	mov	r3, r5
 800b55c:	e7df      	b.n	800b51e <__kernel_rem_pio2+0x306>
 800b55e:	1e62      	subs	r2, r4, #1
 800b560:	ab0c      	add	r3, sp, #48	; 0x30
 800b562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b566:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b56a:	a90c      	add	r1, sp, #48	; 0x30
 800b56c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b570:	e738      	b.n	800b3e4 <__kernel_rem_pio2+0x1cc>
 800b572:	1e62      	subs	r2, r4, #1
 800b574:	ab0c      	add	r3, sp, #48	; 0x30
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b57e:	e7f4      	b.n	800b56a <__kernel_rem_pio2+0x352>
 800b580:	a90c      	add	r1, sp, #48	; 0x30
 800b582:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b586:	3b01      	subs	r3, #1
 800b588:	430a      	orrs	r2, r1
 800b58a:	e788      	b.n	800b49e <__kernel_rem_pio2+0x286>
 800b58c:	3301      	adds	r3, #1
 800b58e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b592:	2900      	cmp	r1, #0
 800b594:	d0fa      	beq.n	800b58c <__kernel_rem_pio2+0x374>
 800b596:	9a08      	ldr	r2, [sp, #32]
 800b598:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800b59c:	446a      	add	r2, sp
 800b59e:	3a98      	subs	r2, #152	; 0x98
 800b5a0:	9208      	str	r2, [sp, #32]
 800b5a2:	9a06      	ldr	r2, [sp, #24]
 800b5a4:	a920      	add	r1, sp, #128	; 0x80
 800b5a6:	18a2      	adds	r2, r4, r2
 800b5a8:	18e3      	adds	r3, r4, r3
 800b5aa:	f104 0801 	add.w	r8, r4, #1
 800b5ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	4543      	cmp	r3, r8
 800b5b8:	da04      	bge.n	800b5c4 <__kernel_rem_pio2+0x3ac>
 800b5ba:	461c      	mov	r4, r3
 800b5bc:	e6a2      	b.n	800b304 <__kernel_rem_pio2+0xec>
 800b5be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e7e4      	b.n	800b58e <__kernel_rem_pio2+0x376>
 800b5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b5ca:	f7f4 ffab 	bl	8000524 <__aeabi_i2d>
 800b5ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d4:	46ab      	mov	fp, r5
 800b5d6:	461c      	mov	r4, r3
 800b5d8:	f04f 0900 	mov.w	r9, #0
 800b5dc:	2600      	movs	r6, #0
 800b5de:	2700      	movs	r7, #0
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	4599      	cmp	r9, r3
 800b5e4:	dd06      	ble.n	800b5f4 <__kernel_rem_pio2+0x3dc>
 800b5e6:	9b08      	ldr	r3, [sp, #32]
 800b5e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b5ec:	f108 0801 	add.w	r8, r8, #1
 800b5f0:	9308      	str	r3, [sp, #32]
 800b5f2:	e7df      	b.n	800b5b4 <__kernel_rem_pio2+0x39c>
 800b5f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b5f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4630      	mov	r0, r6
 800b606:	4639      	mov	r1, r7
 800b608:	f7f4 fe40 	bl	800028c <__adddf3>
 800b60c:	f109 0901 	add.w	r9, r9, #1
 800b610:	4606      	mov	r6, r0
 800b612:	460f      	mov	r7, r1
 800b614:	e7e4      	b.n	800b5e0 <__kernel_rem_pio2+0x3c8>
 800b616:	3d01      	subs	r5, #1
 800b618:	e747      	b.n	800b4aa <__kernel_rem_pio2+0x292>
 800b61a:	ec47 6b10 	vmov	d0, r6, r7
 800b61e:	f1ca 0000 	rsb	r0, sl, #0
 800b622:	f000 f949 	bl	800b8b8 <scalbn>
 800b626:	ec57 6b10 	vmov	r6, r7, d0
 800b62a:	4ba0      	ldr	r3, [pc, #640]	; (800b8ac <__kernel_rem_pio2+0x694>)
 800b62c:	ee10 0a10 	vmov	r0, s0
 800b630:	2200      	movs	r2, #0
 800b632:	4639      	mov	r1, r7
 800b634:	f7f5 fa66 	bl	8000b04 <__aeabi_dcmpge>
 800b638:	b1f8      	cbz	r0, 800b67a <__kernel_rem_pio2+0x462>
 800b63a:	4b9d      	ldr	r3, [pc, #628]	; (800b8b0 <__kernel_rem_pio2+0x698>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f4 ffd9 	bl	80005f8 <__aeabi_dmul>
 800b646:	f7f5 fa71 	bl	8000b2c <__aeabi_d2iz>
 800b64a:	4680      	mov	r8, r0
 800b64c:	f7f4 ff6a 	bl	8000524 <__aeabi_i2d>
 800b650:	4b96      	ldr	r3, [pc, #600]	; (800b8ac <__kernel_rem_pio2+0x694>)
 800b652:	2200      	movs	r2, #0
 800b654:	f7f4 ffd0 	bl	80005f8 <__aeabi_dmul>
 800b658:	460b      	mov	r3, r1
 800b65a:	4602      	mov	r2, r0
 800b65c:	4639      	mov	r1, r7
 800b65e:	4630      	mov	r0, r6
 800b660:	f7f4 fe12 	bl	8000288 <__aeabi_dsub>
 800b664:	f7f5 fa62 	bl	8000b2c <__aeabi_d2iz>
 800b668:	1c65      	adds	r5, r4, #1
 800b66a:	ab0c      	add	r3, sp, #48	; 0x30
 800b66c:	f10a 0a18 	add.w	sl, sl, #24
 800b670:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b674:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b678:	e71f      	b.n	800b4ba <__kernel_rem_pio2+0x2a2>
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	f7f5 fa55 	bl	8000b2c <__aeabi_d2iz>
 800b682:	ab0c      	add	r3, sp, #48	; 0x30
 800b684:	4625      	mov	r5, r4
 800b686:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b68a:	e716      	b.n	800b4ba <__kernel_rem_pio2+0x2a2>
 800b68c:	ab0c      	add	r3, sp, #48	; 0x30
 800b68e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b692:	f7f4 ff47 	bl	8000524 <__aeabi_i2d>
 800b696:	4632      	mov	r2, r6
 800b698:	463b      	mov	r3, r7
 800b69a:	f7f4 ffad 	bl	80005f8 <__aeabi_dmul>
 800b69e:	4642      	mov	r2, r8
 800b6a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f4 ffa5 	bl	80005f8 <__aeabi_dmul>
 800b6ae:	3c01      	subs	r4, #1
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	e713      	b.n	800b4de <__kernel_rem_pio2+0x2c6>
 800b6b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b6ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4648      	mov	r0, r9
 800b6c8:	4651      	mov	r1, sl
 800b6ca:	f7f4 fddf 	bl	800028c <__adddf3>
 800b6ce:	3701      	adds	r7, #1
 800b6d0:	4681      	mov	r9, r0
 800b6d2:	468a      	mov	sl, r1
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	429f      	cmp	r7, r3
 800b6d8:	dc02      	bgt.n	800b6e0 <__kernel_rem_pio2+0x4c8>
 800b6da:	9b06      	ldr	r3, [sp, #24]
 800b6dc:	429f      	cmp	r7, r3
 800b6de:	ddea      	ble.n	800b6b6 <__kernel_rem_pio2+0x49e>
 800b6e0:	9a06      	ldr	r2, [sp, #24]
 800b6e2:	ab48      	add	r3, sp, #288	; 0x120
 800b6e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800b6e8:	e9c6 9a00 	strd	r9, sl, [r6]
 800b6ec:	3c01      	subs	r4, #1
 800b6ee:	e6fa      	b.n	800b4e6 <__kernel_rem_pio2+0x2ce>
 800b6f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	dc0b      	bgt.n	800b70e <__kernel_rem_pio2+0x4f6>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dc39      	bgt.n	800b76e <__kernel_rem_pio2+0x556>
 800b6fa:	d05d      	beq.n	800b7b8 <__kernel_rem_pio2+0x5a0>
 800b6fc:	9b02      	ldr	r3, [sp, #8]
 800b6fe:	f003 0007 	and.w	r0, r3, #7
 800b702:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b706:	ecbd 8b02 	vpop	{d8}
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b710:	2b03      	cmp	r3, #3
 800b712:	d1f3      	bne.n	800b6fc <__kernel_rem_pio2+0x4e4>
 800b714:	9b05      	ldr	r3, [sp, #20]
 800b716:	9500      	str	r5, [sp, #0]
 800b718:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b71c:	eb0d 0403 	add.w	r4, sp, r3
 800b720:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800b724:	46a2      	mov	sl, r4
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f1aa 0a08 	sub.w	sl, sl, #8
 800b72e:	dc69      	bgt.n	800b804 <__kernel_rem_pio2+0x5ec>
 800b730:	46aa      	mov	sl, r5
 800b732:	f1ba 0f01 	cmp.w	sl, #1
 800b736:	f1a4 0408 	sub.w	r4, r4, #8
 800b73a:	f300 8083 	bgt.w	800b844 <__kernel_rem_pio2+0x62c>
 800b73e:	9c05      	ldr	r4, [sp, #20]
 800b740:	ab48      	add	r3, sp, #288	; 0x120
 800b742:	441c      	add	r4, r3
 800b744:	2000      	movs	r0, #0
 800b746:	2100      	movs	r1, #0
 800b748:	2d01      	cmp	r5, #1
 800b74a:	f300 809a 	bgt.w	800b882 <__kernel_rem_pio2+0x66a>
 800b74e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800b752:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b756:	f1bb 0f00 	cmp.w	fp, #0
 800b75a:	f040 8098 	bne.w	800b88e <__kernel_rem_pio2+0x676>
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	e9c3 7800 	strd	r7, r8, [r3]
 800b764:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b768:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b76c:	e7c6      	b.n	800b6fc <__kernel_rem_pio2+0x4e4>
 800b76e:	9e05      	ldr	r6, [sp, #20]
 800b770:	ab48      	add	r3, sp, #288	; 0x120
 800b772:	441e      	add	r6, r3
 800b774:	462c      	mov	r4, r5
 800b776:	2000      	movs	r0, #0
 800b778:	2100      	movs	r1, #0
 800b77a:	2c00      	cmp	r4, #0
 800b77c:	da33      	bge.n	800b7e6 <__kernel_rem_pio2+0x5ce>
 800b77e:	f1bb 0f00 	cmp.w	fp, #0
 800b782:	d036      	beq.n	800b7f2 <__kernel_rem_pio2+0x5da>
 800b784:	4602      	mov	r2, r0
 800b786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b78a:	9c04      	ldr	r4, [sp, #16]
 800b78c:	e9c4 2300 	strd	r2, r3, [r4]
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b798:	f7f4 fd76 	bl	8000288 <__aeabi_dsub>
 800b79c:	ae4a      	add	r6, sp, #296	; 0x128
 800b79e:	2401      	movs	r4, #1
 800b7a0:	42a5      	cmp	r5, r4
 800b7a2:	da29      	bge.n	800b7f8 <__kernel_rem_pio2+0x5e0>
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	d002      	beq.n	800b7b0 <__kernel_rem_pio2+0x598>
 800b7aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b7b6:	e7a1      	b.n	800b6fc <__kernel_rem_pio2+0x4e4>
 800b7b8:	9c05      	ldr	r4, [sp, #20]
 800b7ba:	ab48      	add	r3, sp, #288	; 0x120
 800b7bc:	441c      	add	r4, r3
 800b7be:	2000      	movs	r0, #0
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	2d00      	cmp	r5, #0
 800b7c4:	da09      	bge.n	800b7da <__kernel_rem_pio2+0x5c2>
 800b7c6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ca:	d002      	beq.n	800b7d2 <__kernel_rem_pio2+0x5ba>
 800b7cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	e9c3 0100 	strd	r0, r1, [r3]
 800b7d8:	e790      	b.n	800b6fc <__kernel_rem_pio2+0x4e4>
 800b7da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b7de:	f7f4 fd55 	bl	800028c <__adddf3>
 800b7e2:	3d01      	subs	r5, #1
 800b7e4:	e7ed      	b.n	800b7c2 <__kernel_rem_pio2+0x5aa>
 800b7e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b7ea:	f7f4 fd4f 	bl	800028c <__adddf3>
 800b7ee:	3c01      	subs	r4, #1
 800b7f0:	e7c3      	b.n	800b77a <__kernel_rem_pio2+0x562>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	e7c8      	b.n	800b78a <__kernel_rem_pio2+0x572>
 800b7f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b7fc:	f7f4 fd46 	bl	800028c <__adddf3>
 800b800:	3401      	adds	r4, #1
 800b802:	e7cd      	b.n	800b7a0 <__kernel_rem_pio2+0x588>
 800b804:	e9da 8900 	ldrd	r8, r9, [sl]
 800b808:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	3b01      	subs	r3, #1
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	4632      	mov	r2, r6
 800b814:	463b      	mov	r3, r7
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f4 fd37 	bl	800028c <__adddf3>
 800b81e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4640      	mov	r0, r8
 800b828:	4649      	mov	r1, r9
 800b82a:	f7f4 fd2d 	bl	8000288 <__aeabi_dsub>
 800b82e:	4632      	mov	r2, r6
 800b830:	463b      	mov	r3, r7
 800b832:	f7f4 fd2b 	bl	800028c <__adddf3>
 800b836:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b83a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b83e:	ed8a 7b00 	vstr	d7, [sl]
 800b842:	e770      	b.n	800b726 <__kernel_rem_pio2+0x50e>
 800b844:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b848:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b84c:	4640      	mov	r0, r8
 800b84e:	4632      	mov	r2, r6
 800b850:	463b      	mov	r3, r7
 800b852:	4649      	mov	r1, r9
 800b854:	f7f4 fd1a 	bl	800028c <__adddf3>
 800b858:	e9cd 0100 	strd	r0, r1, [sp]
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	f7f4 fd10 	bl	8000288 <__aeabi_dsub>
 800b868:	4632      	mov	r2, r6
 800b86a:	463b      	mov	r3, r7
 800b86c:	f7f4 fd0e 	bl	800028c <__adddf3>
 800b870:	ed9d 7b00 	vldr	d7, [sp]
 800b874:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b878:	ed84 7b00 	vstr	d7, [r4]
 800b87c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b880:	e757      	b.n	800b732 <__kernel_rem_pio2+0x51a>
 800b882:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b886:	f7f4 fd01 	bl	800028c <__adddf3>
 800b88a:	3d01      	subs	r5, #1
 800b88c:	e75c      	b.n	800b748 <__kernel_rem_pio2+0x530>
 800b88e:	9b04      	ldr	r3, [sp, #16]
 800b890:	9a04      	ldr	r2, [sp, #16]
 800b892:	601f      	str	r7, [r3, #0]
 800b894:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b898:	605c      	str	r4, [r3, #4]
 800b89a:	609d      	str	r5, [r3, #8]
 800b89c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b8a0:	60d3      	str	r3, [r2, #12]
 800b8a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8a6:	6110      	str	r0, [r2, #16]
 800b8a8:	6153      	str	r3, [r2, #20]
 800b8aa:	e727      	b.n	800b6fc <__kernel_rem_pio2+0x4e4>
 800b8ac:	41700000 	.word	0x41700000
 800b8b0:	3e700000 	.word	0x3e700000
 800b8b4:	00000000 	.word	0x00000000

0800b8b8 <scalbn>:
 800b8b8:	b570      	push	{r4, r5, r6, lr}
 800b8ba:	ec55 4b10 	vmov	r4, r5, d0
 800b8be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	b999      	cbnz	r1, 800b8f0 <scalbn+0x38>
 800b8c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b8cc:	4323      	orrs	r3, r4
 800b8ce:	d03f      	beq.n	800b950 <scalbn+0x98>
 800b8d0:	4b35      	ldr	r3, [pc, #212]	; (800b9a8 <scalbn+0xf0>)
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	ee10 0a10 	vmov	r0, s0
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	4b33      	ldr	r3, [pc, #204]	; (800b9ac <scalbn+0xf4>)
 800b8e0:	429e      	cmp	r6, r3
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	da10      	bge.n	800b90a <scalbn+0x52>
 800b8e8:	a327      	add	r3, pc, #156	; (adr r3, 800b988 <scalbn+0xd0>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	e01f      	b.n	800b930 <scalbn+0x78>
 800b8f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b8f4:	4291      	cmp	r1, r2
 800b8f6:	d10c      	bne.n	800b912 <scalbn+0x5a>
 800b8f8:	ee10 2a10 	vmov	r2, s0
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f4 fcc4 	bl	800028c <__adddf3>
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	e022      	b.n	800b950 <scalbn+0x98>
 800b90a:	460b      	mov	r3, r1
 800b90c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b910:	3936      	subs	r1, #54	; 0x36
 800b912:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b916:	4296      	cmp	r6, r2
 800b918:	dd0d      	ble.n	800b936 <scalbn+0x7e>
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	a11c      	add	r1, pc, #112	; (adr r1, 800b990 <scalbn+0xd8>)
 800b91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b922:	da02      	bge.n	800b92a <scalbn+0x72>
 800b924:	a11c      	add	r1, pc, #112	; (adr r1, 800b998 <scalbn+0xe0>)
 800b926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b92a:	a319      	add	r3, pc, #100	; (adr r3, 800b990 <scalbn+0xd8>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fe62 	bl	80005f8 <__aeabi_dmul>
 800b934:	e7e6      	b.n	800b904 <scalbn+0x4c>
 800b936:	1872      	adds	r2, r6, r1
 800b938:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b93c:	428a      	cmp	r2, r1
 800b93e:	dcec      	bgt.n	800b91a <scalbn+0x62>
 800b940:	2a00      	cmp	r2, #0
 800b942:	dd08      	ble.n	800b956 <scalbn+0x9e>
 800b944:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b948:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b94c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b950:	ec45 4b10 	vmov	d0, r4, r5
 800b954:	bd70      	pop	{r4, r5, r6, pc}
 800b956:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b95a:	da08      	bge.n	800b96e <scalbn+0xb6>
 800b95c:	2d00      	cmp	r5, #0
 800b95e:	a10a      	add	r1, pc, #40	; (adr r1, 800b988 <scalbn+0xd0>)
 800b960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b964:	dac0      	bge.n	800b8e8 <scalbn+0x30>
 800b966:	a10e      	add	r1, pc, #56	; (adr r1, 800b9a0 <scalbn+0xe8>)
 800b968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96c:	e7bc      	b.n	800b8e8 <scalbn+0x30>
 800b96e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b972:	3236      	adds	r2, #54	; 0x36
 800b974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b978:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b97c:	4620      	mov	r0, r4
 800b97e:	4b0c      	ldr	r3, [pc, #48]	; (800b9b0 <scalbn+0xf8>)
 800b980:	2200      	movs	r2, #0
 800b982:	e7d5      	b.n	800b930 <scalbn+0x78>
 800b984:	f3af 8000 	nop.w
 800b988:	c2f8f359 	.word	0xc2f8f359
 800b98c:	01a56e1f 	.word	0x01a56e1f
 800b990:	8800759c 	.word	0x8800759c
 800b994:	7e37e43c 	.word	0x7e37e43c
 800b998:	8800759c 	.word	0x8800759c
 800b99c:	fe37e43c 	.word	0xfe37e43c
 800b9a0:	c2f8f359 	.word	0xc2f8f359
 800b9a4:	81a56e1f 	.word	0x81a56e1f
 800b9a8:	43500000 	.word	0x43500000
 800b9ac:	ffff3cb0 	.word	0xffff3cb0
 800b9b0:	3c900000 	.word	0x3c900000
 800b9b4:	00000000 	.word	0x00000000

0800b9b8 <floor>:
 800b9b8:	ec51 0b10 	vmov	r0, r1, d0
 800b9bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b9c8:	2e13      	cmp	r6, #19
 800b9ca:	ee10 5a10 	vmov	r5, s0
 800b9ce:	ee10 8a10 	vmov	r8, s0
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	dc31      	bgt.n	800ba3a <floor+0x82>
 800b9d6:	2e00      	cmp	r6, #0
 800b9d8:	da14      	bge.n	800ba04 <floor+0x4c>
 800b9da:	a333      	add	r3, pc, #204	; (adr r3, 800baa8 <floor+0xf0>)
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f7f4 fc54 	bl	800028c <__adddf3>
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f7f5 f896 	bl	8000b18 <__aeabi_dcmpgt>
 800b9ec:	b138      	cbz	r0, 800b9fe <floor+0x46>
 800b9ee:	2c00      	cmp	r4, #0
 800b9f0:	da53      	bge.n	800ba9a <floor+0xe2>
 800b9f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b9f6:	4325      	orrs	r5, r4
 800b9f8:	d052      	beq.n	800baa0 <floor+0xe8>
 800b9fa:	4c2d      	ldr	r4, [pc, #180]	; (800bab0 <floor+0xf8>)
 800b9fc:	2500      	movs	r5, #0
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	e024      	b.n	800ba4e <floor+0x96>
 800ba04:	4f2b      	ldr	r7, [pc, #172]	; (800bab4 <floor+0xfc>)
 800ba06:	4137      	asrs	r7, r6
 800ba08:	ea01 0307 	and.w	r3, r1, r7
 800ba0c:	4303      	orrs	r3, r0
 800ba0e:	d01e      	beq.n	800ba4e <floor+0x96>
 800ba10:	a325      	add	r3, pc, #148	; (adr r3, 800baa8 <floor+0xf0>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fc39 	bl	800028c <__adddf3>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f7f5 f87b 	bl	8000b18 <__aeabi_dcmpgt>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0eb      	beq.n	800b9fe <floor+0x46>
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	bfbe      	ittt	lt
 800ba2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba2e:	4133      	asrlt	r3, r6
 800ba30:	18e4      	addlt	r4, r4, r3
 800ba32:	ea24 0407 	bic.w	r4, r4, r7
 800ba36:	2500      	movs	r5, #0
 800ba38:	e7e1      	b.n	800b9fe <floor+0x46>
 800ba3a:	2e33      	cmp	r6, #51	; 0x33
 800ba3c:	dd0b      	ble.n	800ba56 <floor+0x9e>
 800ba3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba42:	d104      	bne.n	800ba4e <floor+0x96>
 800ba44:	ee10 2a10 	vmov	r2, s0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	f7f4 fc1f 	bl	800028c <__adddf3>
 800ba4e:	ec41 0b10 	vmov	d0, r0, r1
 800ba52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ba5a:	f04f 37ff 	mov.w	r7, #4294967295
 800ba5e:	40df      	lsrs	r7, r3
 800ba60:	4238      	tst	r0, r7
 800ba62:	d0f4      	beq.n	800ba4e <floor+0x96>
 800ba64:	a310      	add	r3, pc, #64	; (adr r3, 800baa8 <floor+0xf0>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f7f4 fc0f 	bl	800028c <__adddf3>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2300      	movs	r3, #0
 800ba72:	f7f5 f851 	bl	8000b18 <__aeabi_dcmpgt>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d0c1      	beq.n	800b9fe <floor+0x46>
 800ba7a:	2c00      	cmp	r4, #0
 800ba7c:	da0a      	bge.n	800ba94 <floor+0xdc>
 800ba7e:	2e14      	cmp	r6, #20
 800ba80:	d101      	bne.n	800ba86 <floor+0xce>
 800ba82:	3401      	adds	r4, #1
 800ba84:	e006      	b.n	800ba94 <floor+0xdc>
 800ba86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	40b3      	lsls	r3, r6
 800ba8e:	441d      	add	r5, r3
 800ba90:	45a8      	cmp	r8, r5
 800ba92:	d8f6      	bhi.n	800ba82 <floor+0xca>
 800ba94:	ea25 0507 	bic.w	r5, r5, r7
 800ba98:	e7b1      	b.n	800b9fe <floor+0x46>
 800ba9a:	2500      	movs	r5, #0
 800ba9c:	462c      	mov	r4, r5
 800ba9e:	e7ae      	b.n	800b9fe <floor+0x46>
 800baa0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800baa4:	e7ab      	b.n	800b9fe <floor+0x46>
 800baa6:	bf00      	nop
 800baa8:	8800759c 	.word	0x8800759c
 800baac:	7e37e43c 	.word	0x7e37e43c
 800bab0:	bff00000 	.word	0xbff00000
 800bab4:	000fffff 	.word	0x000fffff

0800bab8 <_init>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr

0800bac4 <_fini>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr
