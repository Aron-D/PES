
projectNucleo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800715c  0800715c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007164  08007164  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800716c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000070  080071dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080071dc  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fba0  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258a  00000000  00000000  0002fc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00032210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9c  00000000  00000000  00032fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021538  00000000  00000000  00033a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119bc  00000000  00000000  00054fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4124  00000000  00000000  00066960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042d8  00000000  00000000  0012aa84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0012ed5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f1c 	.word	0x08006f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006f1c 	.word	0x08006f1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800057c:	b480      	push	{r7}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000586:	23ff      	movs	r3, #255	; 0xff
 8000588:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	e020      	b.n	80005d2 <calculate_crc+0x56>
		crc ^= data[i];
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	4413      	add	r3, r2
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	4053      	eors	r3, r2
 800059c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e010      	b.n	80005c6 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 80005a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da06      	bge.n	80005ba <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80005b6:	75fb      	strb	r3, [r7, #23]
 80005b8:	e002      	b.n	80005c0 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d9eb      	bls.n	80005a4 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	3301      	adds	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3da      	bcc.n	8000590 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	b299      	uxth	r1, r3
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	231e      	movs	r3, #30
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	f001 fabf 	bl	8001b9c <HAL_I2C_Master_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <sht3x_send_command+0x42>
	}

	return true;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	460a      	mov	r2, r1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4613      	mov	r3, r2
 8000640:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b29b      	uxth	r3, r3
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	b29a      	uxth	r2, r3
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af04      	add	r7, sp, #16
 8000666:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <sht3x_init+0x1e>
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <sht3x_init+0x74>)
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <sht3x_init+0x78>)
 8000676:	2138      	movs	r1, #56	; 0x38
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <sht3x_init+0x7c>)
 800067a:	f005 fac5 	bl	8005c08 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	889b      	ldrh	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	b299      	uxth	r1, r3
 800068a:	231e      	movs	r3, #30
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2303      	movs	r3, #3
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2302      	movs	r3, #2
 800069a:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800069e:	f001 fd49 	bl	8002134 <HAL_I2C_Mem_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e00e      	b.n	80006ca <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff62 	bl	800057c <calculate_crc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d001      	beq.n	80006c8 <sht3x_init+0x68>
		return false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e000      	b.n	80006ca <sht3x_init+0x6a>
	}

	return true;
 80006c8:	2301      	movs	r3, #1
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08006f34 	.word	0x08006f34
 80006d8:	08007098 	.word	0x08007098
 80006dc:	08006f74 	.word	0x08006f74

080006e0 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80006ec:	f642 4106 	movw	r1, #11270	; 0x2c06
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ff79 	bl	80005e8 <sht3x_send_command>

	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 feae 	bl	8001458 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b299      	uxth	r1, r3
 8000708:	f107 0214 	add.w	r2, r7, #20
 800070c:	231e      	movs	r3, #30
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2306      	movs	r3, #6
 8000712:	f001 fb5b 	bl	8001dcc <HAL_I2C_Master_Receive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 800071c:	2300      	movs	r3, #0
 800071e:	e04f      	b.n	80007c0 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff28 	bl	800057c <calculate_crc>
 800072c:	4603      	mov	r3, r0
 800072e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	3303      	adds	r3, #3
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff1f 	bl	800057c <calculate_crc>
 800073e:	4603      	mov	r3, r0
 8000740:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000742:	7dbb      	ldrb	r3, [r7, #22]
 8000744:	7ffa      	ldrb	r2, [r7, #31]
 8000746:	429a      	cmp	r2, r3
 8000748:	d103      	bne.n	8000752 <sht3x_read_temperature_and_humidity+0x72>
 800074a:	7e7b      	ldrb	r3, [r7, #25]
 800074c:	7fba      	ldrb	r2, [r7, #30]
 800074e:	429a      	cmp	r2, r3
 8000750:	d001      	beq.n	8000756 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000752:	2300      	movs	r3, #0
 8000754:	e034      	b.n	80007c0 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8000756:	7d3b      	ldrb	r3, [r7, #20]
 8000758:	7d7a      	ldrb	r2, [r7, #21]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff68 	bl	8000632 <uint8_to_uint16>
 8000762:	4603      	mov	r3, r0
 8000764:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	7e3a      	ldrb	r2, [r7, #24]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff60 	bl	8000632 <uint8_to_uint16>
 8000772:	4603      	mov	r3, r0
 8000774:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000776:	8bbb      	ldrh	r3, [r7, #28]
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80007c8 <sht3x_read_temperature_and_humidity+0xe8>
 8000784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000788:	eddf 6a10 	vldr	s13, [pc, #64]	; 80007cc <sht3x_read_temperature_and_humidity+0xec>
 800078c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000790:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80007d0 <sht3x_read_temperature_and_humidity+0xf0>
 8000794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800079e:	8b7b      	ldrh	r3, [r7, #26]
 80007a0:	ee07 3a90 	vmov	s15, r3
 80007a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80007d4 <sht3x_read_temperature_and_humidity+0xf4>
 80007ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007b0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80007cc <sht3x_read_temperature_and_humidity+0xec>
 80007b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	edc3 7a00 	vstr	s15, [r3]

	return true;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	432f0000 	.word	0x432f0000
 80007cc:	477fff00 	.word	0x477fff00
 80007d0:	42340000 	.word	0x42340000
 80007d4:	42c80000 	.word	0x42c80000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af02      	add	r7, sp, #8
//	HAL_StatusTypeDef ret;

//	int16_t val;
//	float temp_c;

	sht3x_handle_t handle = {
 80007de:	4a50      	ldr	r2, [pc, #320]	; (8000920 <main+0x148>)
 80007e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e8:	e883 0003 	stmia.w	r3, {r0, r1}
	    .i2c_handle = &hi2c3,
	    .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
	};

	if (!sht3x_init(&handle)) {
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff35 	bl	8000660 <sht3x_init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <main+0x30>
	    printf("SHT3x access failed.\n\r");
 8000802:	4848      	ldr	r0, [pc, #288]	; (8000924 <main+0x14c>)
 8000804:	f005 faf2 	bl	8005dec <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fdb1 	bl	800136e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f8a6 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f9b6 	bl	8000b80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000814:	f000 f984 	bl	8000b20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000818:	f000 f902 	bl	8000a20 <MX_I2C1_Init>
  MX_I2C3_Init();
 800081c:	f000 f940 	bl	8000aa0 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, " - Nucleo 1 online - \n\r", 23, HAL_MAX_DELAY);
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2217      	movs	r2, #23
 8000826:	4940      	ldr	r1, [pc, #256]	; (8000928 <main+0x150>)
 8000828:	4840      	ldr	r0, [pc, #256]	; (800092c <main+0x154>)
 800082a:	f004 fd21 	bl	8005270 <HAL_UART_Transmit>
  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	493f      	ldr	r1, [pc, #252]	; (8000930 <main+0x158>)
 8000832:	4840      	ldr	r0, [pc, #256]	; (8000934 <main+0x15c>)
 8000834:	f001 fc2e 	bl	8002094 <HAL_I2C_Slave_Receive_IT>

  HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, (uint8_t[]) {0x20, 0x03}, 2, HAL_MAX_DELAY);
 8000838:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <main+0x160>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8000840:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2302      	movs	r3, #2
 800084c:	21b0      	movs	r1, #176	; 0xb0
 800084e:	483b      	ldr	r0, [pc, #236]	; (800093c <main+0x164>)
 8000850:	f001 f9a4 	bl	8001b9c <HAL_I2C_Master_Transmit>

  while (1)
  {
	  HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	4936      	ldr	r1, [pc, #216]	; (8000930 <main+0x158>)
 8000858:	4836      	ldr	r0, [pc, #216]	; (8000934 <main+0x15c>)
 800085a:	f001 fc1b 	bl	8002094 <HAL_I2C_Slave_Receive_IT>
	  /*
	   * Readout temperature and humidity using library functions and store them in corresponding buffers
	   */
	  sht3x_read_temperature_and_humidity(&handle, &temp, &humidity);
 800085e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000862:	4a37      	ldr	r2, [pc, #220]	; (8000940 <main+0x168>)
 8000864:	4937      	ldr	r1, [pc, #220]	; (8000944 <main+0x16c>)
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff3a 	bl	80006e0 <sht3x_read_temperature_and_humidity>
	  sprintf((char*) temperatureBuf, "%u", (unsigned int) temp);
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <main+0x16c>)
 800086e:	edd3 7a00 	vldr	s15, [r3]
 8000872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000876:	ee17 2a90 	vmov	r2, s15
 800087a:	4933      	ldr	r1, [pc, #204]	; (8000948 <main+0x170>)
 800087c:	4833      	ldr	r0, [pc, #204]	; (800094c <main+0x174>)
 800087e:	f005 fac7 	bl	8005e10 <siprintf>
	  HAL_Delay(10);
 8000882:	200a      	movs	r0, #10
 8000884:	f000 fde8 	bl	8001458 <HAL_Delay>

		char buf[50];       // Read data from SGP30 sensor
		uint8_t data[6]; // Data buffer to store sensor readings
		// Request measurement
		uint8_t command[] = {0x20, 0x08}; // Command for reading measurement data
 8000888:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800088c:	86bb      	strh	r3, [r7, #52]	; 0x34
		HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, command, sizeof(command), HAL_MAX_DELAY);
 800088e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2302      	movs	r3, #2
 800089a:	21b0      	movs	r1, #176	; 0xb0
 800089c:	4827      	ldr	r0, [pc, #156]	; (800093c <main+0x164>)
 800089e:	f001 f97d 	bl	8001b9c <HAL_I2C_Master_Transmit>
		// Wait for measurement to complete
		HAL_Delay(20);
 80008a2:	2014      	movs	r0, #20
 80008a4:	f000 fdd8 	bl	8001458 <HAL_Delay>
		// Read measurement data
		HAL_I2C_Master_Receive(&hi2c3, (0x58 << 1) | 0x01, data, sizeof(data), HAL_MAX_DELAY);
 80008a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2306      	movs	r3, #6
 80008b4:	21b1      	movs	r1, #177	; 0xb1
 80008b6:	4821      	ldr	r0, [pc, #132]	; (800093c <main+0x164>)
 80008b8:	f001 fa88 	bl	8001dcc <HAL_I2C_Master_Receive>
		// Process data to get CO2 and TVOC
		int16_t CO2 = (data[0] << 8) | data[1];
 80008bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t TVOC = (data[3] << 8) | data[4];        // Print data to Serial port (UART)
 80008d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		sprintf(buf, "CO2: %d TVOC: %d \r\n", CO2, TVOC);
 80008e6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80008ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80008ee:	4638      	mov	r0, r7
 80008f0:	4917      	ldr	r1, [pc, #92]	; (8000950 <main+0x178>)
 80008f2:	f005 fa8d 	bl	8005e10 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc69 	bl	80001d0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	4639      	mov	r1, r7
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	4808      	ldr	r0, [pc, #32]	; (800092c <main+0x154>)
 800090a:	f004 fcb1 	bl	8005270 <HAL_UART_Transmit>
		sprintf(co2Buf, "%d", CO2);
 800090e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000912:	461a      	mov	r2, r3
 8000914:	490f      	ldr	r1, [pc, #60]	; (8000954 <main+0x17c>)
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <main+0x180>)
 8000918:	f005 fa7a 	bl	8005e10 <siprintf>
  {
 800091c:	e79a      	b.n	8000854 <main+0x7c>
 800091e:	bf00      	nop
 8000920:	08006fd4 	.word	0x08006fd4
 8000924:	08006f88 	.word	0x08006f88
 8000928:	08006fa0 	.word	0x08006fa0
 800092c:	20000134 	.word	0x20000134
 8000930:	200001bc 	.word	0x200001bc
 8000934:	2000008c 	.word	0x2000008c
 8000938:	08006fdc 	.word	0x08006fdc
 800093c:	200000e0 	.word	0x200000e0
 8000940:	20000004 	.word	0x20000004
 8000944:	20000000 	.word	0x20000000
 8000948:	08006fb8 	.word	0x08006fb8
 800094c:	200001c0 	.word	0x200001c0
 8000950:	08006fbc 	.word	0x08006fbc
 8000954:	08006fd0 	.word	0x08006fd0
 8000958:	200001cc 	.word	0x200001cc

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	; 0x58
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2244      	movs	r2, #68	; 0x44
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f005 fab3 	bl	8005ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800097e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000982:	f003 faa1 	bl	8003ec8 <HAL_PWREx_ControlVoltageScaling>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800098c:	f000 fa2e 	bl	8000dec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000990:	f003 fa7c 	bl	8003e8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <SystemClock_Config+0xc0>)
 8000996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <SystemClock_Config+0xc0>)
 800099c:	f023 0318 	bic.w	r3, r3, #24
 80009a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009a4:	2314      	movs	r3, #20
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009b4:	2360      	movs	r3, #96	; 0x60
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009bc:	2301      	movs	r3, #1
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009c4:	2310      	movs	r3, #16
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c8:	2307      	movs	r3, #7
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 facb 	bl	8003f74 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009e4:	f000 fa02 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2303      	movs	r3, #3
 80009ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2101      	movs	r1, #1
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fecb 	bl	800479c <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a0c:	f000 f9ee 	bl	8000dec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a10:	f004 fade 	bl	8004fd0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a14:	bf00      	nop
 8000a16:	3758      	adds	r7, #88	; 0x58
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C1_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a32:	2220      	movs	r2, #32
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a5c:	f001 f802 	bl	8001a64 <HAL_I2C_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f000 f9c1 	bl	8000dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a6e:	f003 f975 	bl	8003d5c <HAL_I2CEx_ConfigAnalogFilter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 f9b8 	bl	8000dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a80:	f003 f9b7 	bl	8003df2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 f9af 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	00707cbb 	.word	0x00707cbb

08000aa0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C3_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C3_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000adc:	f000 ffc2 	bl	8001a64 <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f981 	bl	8000dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000aee:	f003 f935 	bl	8003d5c <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f978 	bl	8000dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000b00:	f003 f977 	bl	8003df2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f96f 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000e0 	.word	0x200000e0
 8000b18:	40005c00 	.word	0x40005c00
 8000b1c:	00707cbb 	.word	0x00707cbb

08000b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART2_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b64:	f004 fb36 	bl	80051d4 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f93d 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000134 	.word	0x20000134
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDOUT_Pin|output1_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f640 0108 	movw	r1, #2056	; 0x808
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 ff24 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2108      	movs	r1, #8
 8000bf0:	4819      	ldr	r0, [pc, #100]	; (8000c58 <MX_GPIO_Init+0xd8>)
 8000bf2:	f000 ff1f 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDOUT_Pin output1_Pin */
  GPIO_InitStruct.Pin = LEDOUT_Pin|output1_Pin;
 8000bf6:	f640 0308 	movw	r3, #2056	; 0x808
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f000 fda5 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <MX_GPIO_Init+0xd8>)
 8000c2a:	f000 fd99 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_GPIO_Init+0xd8>)
 8000c46:	f000 fd8b 	bl	8001760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <HAL_I2C_SlaveRxCpltCallback>:
 * 0x01 - Request temperature data
 * 0x02 - Turn single LED ON
 * 0x03 - Turn single LED OFF
 * 0x04 - Request button data (Not in use)
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	if (received_command == 0x01) {
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d132      	bne.n	8000cd2 <HAL_I2C_SlaveRxCpltCallback+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received TEMP flag, returning temp: ", 36, HAL_MAX_DELAY);
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	2224      	movs	r2, #36	; 0x24
 8000c72:	4953      	ldr	r1, [pc, #332]	; (8000dc0 <HAL_I2C_SlaveRxCpltCallback+0x164>)
 8000c74:	4853      	ldr	r0, [pc, #332]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000c76:	f004 fafb 	bl	8005270 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, temperatureBuf, strlen((char*)temperatureBuf), HAL_MAX_DELAY);
 8000c7a:	4853      	ldr	r0, [pc, #332]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x16c>)
 8000c7c:	f7ff faa8 	bl	80001d0 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	494f      	ldr	r1, [pc, #316]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x16c>)
 8000c8a:	484e      	ldr	r0, [pc, #312]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000c8c:	f004 faf0 	bl	8005270 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2202      	movs	r2, #2
 8000c96:	494d      	ldr	r1, [pc, #308]	; (8000dcc <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000c98:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000c9a:	f004 fae9 	bl	8005270 <HAL_UART_Transmit>
	    if (HAL_I2C_Slave_Transmit_IT(&hi2c1, temperatureBuf, strlen((char*)temperatureBuf)) != HAL_OK) {
 8000c9e:	484a      	ldr	r0, [pc, #296]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x16c>)
 8000ca0:	f7ff fa96 	bl	80001d0 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4947      	ldr	r1, [pc, #284]	; (8000dc8 <HAL_I2C_SlaveRxCpltCallback+0x16c>)
 8000cac:	4848      	ldr	r0, [pc, #288]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000cae:	f001 f983 	bl	8001fb8 <HAL_I2C_Slave_Transmit_IT>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_I2C_SlaveRxCpltCallback+0x6a>
	    	HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	2228      	movs	r2, #40	; 0x28
 8000cbe:	4945      	ldr	r1, [pc, #276]	; (8000dd4 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000cc0:	4840      	ldr	r0, [pc, #256]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000cc2:	f004 fad5 	bl	8005270 <HAL_UART_Transmit>
	    }
	    HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	493c      	ldr	r1, [pc, #240]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000cca:	4841      	ldr	r0, [pc, #260]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000ccc:	f001 f9e2 	bl	8002094 <HAL_I2C_Slave_Receive_IT>
		}
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
	}
}
 8000cd0:	e06f      	b.n	8000db2 <HAL_I2C_SlaveRxCpltCallback+0x156>
	} else if (received_command == 0x02) {
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d112      	bne.n	8000d00 <HAL_I2C_SlaveRxCpltCallback+0xa4>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDON flag, turning LED ON\n\r", 37, HAL_MAX_DELAY);
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	2225      	movs	r2, #37	; 0x25
 8000ce0:	493d      	ldr	r1, [pc, #244]	; (8000dd8 <HAL_I2C_SlaveRxCpltCallback+0x17c>)
 8000ce2:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000ce4:	f004 fac4 	bl	8005270 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2108      	movs	r1, #8
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 fea0 	bl	8001a34 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4931      	ldr	r1, [pc, #196]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000cf8:	4835      	ldr	r0, [pc, #212]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000cfa:	f001 f9cb 	bl	8002094 <HAL_I2C_Slave_Receive_IT>
}
 8000cfe:	e058      	b.n	8000db2 <HAL_I2C_SlaveRxCpltCallback+0x156>
	} else if (received_command == 0x03) {
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d112      	bne.n	8000d2e <HAL_I2C_SlaveRxCpltCallback+0xd2>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received LEDOFF flag, turning LED OFF\n\r", 39, HAL_MAX_DELAY);
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	2227      	movs	r2, #39	; 0x27
 8000d0e:	4933      	ldr	r1, [pc, #204]	; (8000ddc <HAL_I2C_SlaveRxCpltCallback+0x180>)
 8000d10:	482c      	ldr	r0, [pc, #176]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000d12:	f004 faad 	bl	8005270 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LEDOUT_GPIO_Port, LEDOUT_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2108      	movs	r1, #8
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fe89 	bl	8001a34 <HAL_GPIO_WritePin>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	4925      	ldr	r1, [pc, #148]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000d26:	482a      	ldr	r0, [pc, #168]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000d28:	f001 f9b4 	bl	8002094 <HAL_I2C_Slave_Receive_IT>
}
 8000d2c:	e041      	b.n	8000db2 <HAL_I2C_SlaveRxCpltCallback+0x156>
	} else if (received_command == 0x04) {
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d03d      	beq.n	8000db2 <HAL_I2C_SlaveRxCpltCallback+0x156>
	}  else if (received_command == 0x06){
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d132      	bne.n	8000da4 <HAL_I2C_SlaveRxCpltCallback+0x148>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Received CO2 flag, returning CO2: ", 34, HAL_MAX_DELAY);
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	2222      	movs	r2, #34	; 0x22
 8000d44:	4926      	ldr	r1, [pc, #152]	; (8000de0 <HAL_I2C_SlaveRxCpltCallback+0x184>)
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000d48:	f004 fa92 	bl	8005270 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, co2Buf, strlen((char*)co2Buf), HAL_MAX_DELAY);
 8000d4c:	4825      	ldr	r0, [pc, #148]	; (8000de4 <HAL_I2C_SlaveRxCpltCallback+0x188>)
 8000d4e:	f7ff fa3f 	bl	80001d0 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	4922      	ldr	r1, [pc, #136]	; (8000de4 <HAL_I2C_SlaveRxCpltCallback+0x188>)
 8000d5c:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000d5e:	f004 fa87 	bl	8005270 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2202      	movs	r2, #2
 8000d68:	4918      	ldr	r1, [pc, #96]	; (8000dcc <HAL_I2C_SlaveRxCpltCallback+0x170>)
 8000d6a:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000d6c:	f004 fa80 	bl	8005270 <HAL_UART_Transmit>
		if (HAL_I2C_Slave_Transmit_IT(&hi2c1, co2Buf, strlen((char*)co2Buf)) != HAL_OK) {
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <HAL_I2C_SlaveRxCpltCallback+0x188>)
 8000d72:	f7ff fa2d 	bl	80001d0 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4919      	ldr	r1, [pc, #100]	; (8000de4 <HAL_I2C_SlaveRxCpltCallback+0x188>)
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000d80:	f001 f91a 	bl	8001fb8 <HAL_I2C_Slave_Transmit_IT>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <HAL_I2C_SlaveRxCpltCallback+0x13c>
			HAL_UART_Transmit(&huart2, (uint8_t*) "Didn't work!\n\r", 40, HAL_MAX_DELAY);
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	2228      	movs	r2, #40	; 0x28
 8000d90:	4910      	ldr	r1, [pc, #64]	; (8000dd4 <HAL_I2C_SlaveRxCpltCallback+0x178>)
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000d94:	f004 fa6c 	bl	8005270 <HAL_UART_Transmit>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &received_command, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <HAL_I2C_SlaveRxCpltCallback+0x160>)
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_I2C_SlaveRxCpltCallback+0x174>)
 8000d9e:	f001 f979 	bl	8002094 <HAL_I2C_Slave_Receive_IT>
}
 8000da2:	e006      	b.n	8000db2 <HAL_I2C_SlaveRxCpltCallback+0x156>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Huh?\n", 5, HAL_MAX_DELAY);
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	2205      	movs	r2, #5
 8000daa:	490f      	ldr	r1, [pc, #60]	; (8000de8 <HAL_I2C_SlaveRxCpltCallback+0x18c>)
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_I2C_SlaveRxCpltCallback+0x168>)
 8000dae:	f004 fa5f 	bl	8005270 <HAL_UART_Transmit>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001bc 	.word	0x200001bc
 8000dc0:	08006fe0 	.word	0x08006fe0
 8000dc4:	20000134 	.word	0x20000134
 8000dc8:	200001c0 	.word	0x200001c0
 8000dcc:	08007008 	.word	0x08007008
 8000dd0:	2000008c 	.word	0x2000008c
 8000dd4:	0800700c 	.word	0x0800700c
 8000dd8:	0800701c 	.word	0x0800701c
 8000ddc:	08007044 	.word	0x08007044
 8000de0:	0800706c 	.word	0x0800706c
 8000de4:	200001cc 	.word	0x200001cc
 8000de8:	08007090 	.word	0x08007090

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0a2      	sub	sp, #136	; 0x88
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	2254      	movs	r2, #84	; 0x54
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f005 f838 	bl	8005ed6 <memset>
  if(hi2c->Instance==I2C1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a5e      	ldr	r2, [pc, #376]	; (8000fe4 <HAL_I2C_MspInit+0x1a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d148      	bne.n	8000f02 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e70:	2340      	movs	r3, #64	; 0x40
 8000e72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 feb1 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff ffb0 	bl	8000dec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a55      	ldr	r2, [pc, #340]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea4:	23c0      	movs	r3, #192	; 0xc0
 8000ea6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	484a      	ldr	r0, [pc, #296]	; (8000fec <HAL_I2C_MspInit+0x1ac>)
 8000ec4:	f000 fc4c 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed4:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	201f      	movs	r0, #31
 8000ee6:	f000 fbb6 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eea:	201f      	movs	r0, #31
 8000eec:	f000 fbcf 	bl	800168e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2020      	movs	r0, #32
 8000ef6:	f000 fbae 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000efa:	2020      	movs	r0, #32
 8000efc:	f000 fbc7 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f00:	e06c      	b.n	8000fdc <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <HAL_I2C_MspInit+0x1b0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d167      	bne.n	8000fdc <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fe62 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_I2C_MspInit+0xea>
      Error_Handler();
 8000f26:	f7ff ff61 	bl	8000dec <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5e:	2312      	movs	r3, #18
 8000f60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f000 fbf0 	bl	8001760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f80:	2310      	movs	r3, #16
 8000f82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f84:	2312      	movs	r3, #18
 8000f86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f92:	2304      	movs	r3, #4
 8000f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4813      	ldr	r0, [pc, #76]	; (8000fec <HAL_I2C_MspInit+0x1ac>)
 8000fa0:	f000 fbde 	bl	8001760 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fae:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_I2C_MspInit+0x1a8>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2048      	movs	r0, #72	; 0x48
 8000fc2:	f000 fb48 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000fc6:	2048      	movs	r0, #72	; 0x48
 8000fc8:	f000 fb61 	bl	800168e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2049      	movs	r0, #73	; 0x49
 8000fd2:	f000 fb40 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000fd6:	2049      	movs	r0, #73	; 0x49
 8000fd8:	f000 fb59 	bl	800168e <HAL_NVIC_EnableIRQ>
}
 8000fdc:	bf00      	nop
 8000fde:	3788      	adds	r7, #136	; 0x88
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	40005c00 	.word	0x40005c00

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09e      	sub	sp, #120	; 0x78
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2254      	movs	r2, #84	; 0x54
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 ff5e 	bl	8005ed6 <memset>
  if(huart->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <HAL_UART_MspInit+0xcc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d148      	bne.n	80010b6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fdd7 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff fed6 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_UART_MspInit+0xd0>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_UART_MspInit+0xd0>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_UART_MspInit+0xd0>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_UART_MspInit+0xd0>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_UART_MspInit+0xd0>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_UART_MspInit+0xd0>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001070:	2304      	movs	r3, #4
 8001072:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001080:	2307      	movs	r3, #7
 8001082:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f000 fb67 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001096:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010a4:	2303      	movs	r3, #3
 80010a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f000 fb55 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3778      	adds	r7, #120	; 0x78
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f980 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <I2C1_EV_IRQHandler+0x10>)
 8001122:	f001 f921 	bl	8002368 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000008c 	.word	0x2000008c

08001130 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <I2C1_ER_IRQHandler+0x10>)
 8001136:	f001 f931 	bl	800239c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000008c 	.word	0x2000008c

08001144 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <I2C3_EV_IRQHandler+0x10>)
 800114a:	f001 f90d 	bl	8002368 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000e0 	.word	0x200000e0

08001158 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <I2C3_ER_IRQHandler+0x10>)
 800115e:	f001 f91d 	bl	800239c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000e0 	.word	0x200000e0

0800116c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_kill>:

int _kill(int pid, int sig)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001186:	f004 fef5 	bl	8005f74 <__errno>
 800118a:	4603      	mov	r3, r0
 800118c:	2216      	movs	r2, #22
 800118e:	601a      	str	r2, [r3, #0]
  return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_exit>:

void _exit (int status)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe7 	bl	800117c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011ae:	e7fe      	b.n	80011ae <_exit+0x12>

080011b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e00a      	b.n	80011d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011c2:	f3af 8000 	nop.w
 80011c6:	4601      	mov	r1, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	60ba      	str	r2, [r7, #8]
 80011ce:	b2ca      	uxtb	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf0      	blt.n	80011c2 <_read+0x12>
  }

  return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf1      	blt.n	80011fc <_write+0x12>
  }
  return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_close>:

int _close(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124a:	605a      	str	r2, [r3, #4]
  return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_isatty>:

int _isatty(int file)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f004 fe5a 	bl	8005f74 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20010000 	.word	0x20010000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	200001d8 	.word	0x200001d8
 80012f4:	20000330 	.word	0x20000330

080012f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SystemInit+0x20>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <SystemInit+0x20>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff ffea 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopForever+0x6>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopForever+0xe>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopForever+0x16>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f004 fe19 	bl	8005f80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134e:	f7ff fa43 	bl	80007d8 <main>

08001352 <LoopForever>:

LoopForever:
    b LoopForever
 8001352:	e7fe      	b.n	8001352 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001354:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001360:	0800716c 	.word	0x0800716c
  ldr r2, =_sbss
 8001364:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001368:	2000032c 	.word	0x2000032c

0800136c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_IRQHandler>

0800136e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f961 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f80e 	bl	80013a0 <HAL_InitTick>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	e001      	b.n	8001394 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001390:	f7ff fd32 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001394:	79fb      	ldrb	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_InitTick+0x6c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d023      	beq.n	80013fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_InitTick+0x70>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_InitTick+0x6c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f96d 	bl	80016aa <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10f      	bne.n	80013f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d809      	bhi.n	80013f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f937 	bl	8001656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_InitTick+0x74>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e007      	b.n	8001400 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e004      	b.n	8001400 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e001      	b.n	8001400 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000010 	.word	0x20000010
 8001410:	20000008 	.word	0x20000008
 8001414:	2000000c 	.word	0x2000000c

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000010 	.word	0x20000010
 800143c:	200001dc 	.word	0x200001dc

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200001dc 	.word	0x200001dc

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000010 	.word	0x20000010

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff29 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff3e 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff8e 	bl	8001594 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5d 	bl	8001540 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff31 	bl	8001504 <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d005      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2204      	movs	r2, #4
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e029      	b.n	800173a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 020e 	bic.w	r2, r2, #14
 80016f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021c 	and.w	r2, r3, #28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
    }
  }
  return status;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001752:	b2db      	uxtb	r3, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e148      	b.n	8001a02 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 813a 	beq.w	80019fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_Init+0x40>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	6939      	ldr	r1, [r7, #16]
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8094 	beq.w	80019fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <HAL_GPIO_Init+0x2c0>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x2c0>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6613      	str	r3, [r2, #96]	; 0x60
 80018e0:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <HAL_GPIO_Init+0x2c0>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ec:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1d4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a43      	ldr	r2, [pc, #268]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1d0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a42      	ldr	r2, [pc, #264]	; (8001a2c <HAL_GPIO_Init+0x2cc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1cc>
 8001928:	2302      	movs	r3, #2
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x1d6>
 800192c:	2307      	movs	r3, #7
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x1d6>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x1d6>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001978:	4a2d      	ldr	r2, [pc, #180]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a2:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f aeaf 	bne.w	8001770 <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e08d      	b.n	8001b92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f9d8 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	e006      	b.n	8001aec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d108      	bne.n	8001b06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	e007      	b.n	8001b16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69d9      	ldr	r1, [r3, #28]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	817b      	strh	r3, [r7, #10]
 8001bac:	4613      	mov	r3, r2
 8001bae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	f040 80fd 	bne.w	8001db8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x30>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0f6      	b.n	8001dba <HAL_I2C_Master_Transmit+0x21e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fc34 	bl	8001440 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2319      	movs	r3, #25
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f001 fd69 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e1      	b.n	8001dba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2221      	movs	r2, #33	; 0x21
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2210      	movs	r2, #16
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2bff      	cmp	r3, #255	; 0xff
 8001c26:	d906      	bls.n	8001c36 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	22ff      	movs	r2, #255	; 0xff
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e007      	b.n	8001c46 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c44:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d024      	beq.n	8001c98 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	8979      	ldrh	r1, [r7, #10]
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <HAL_I2C_Master_Transmit+0x228>)
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f001 ff4f 	bl	8003b34 <I2C_TransferConfig>
 8001c96:	e066      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	8979      	ldrh	r1, [r7, #10]
 8001ca0:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <HAL_I2C_Master_Transmit+0x228>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f001 ff44 	bl	8003b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001cac:	e05b      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f001 fd52 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07b      	b.n	8001dba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d034      	beq.n	8001d66 <HAL_I2C_Master_Transmit+0x1ca>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d130      	bne.n	8001d66 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f001 fcd5 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e04d      	b.n	8001dba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2bff      	cmp	r3, #255	; 0xff
 8001d26:	d90e      	bls.n	8001d46 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	8979      	ldrh	r1, [r7, #10]
 8001d36:	2300      	movs	r3, #0
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f001 fef8 	bl	8003b34 <I2C_TransferConfig>
 8001d44:	e00f      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	8979      	ldrh	r1, [r7, #10]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f001 fee7 	bl	8003b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d19e      	bne.n	8001cae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	6a39      	ldr	r1, [r7, #32]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f001 fd38 	bl	80037ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e01a      	b.n	8001dba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_I2C_Master_Transmit+0x22c>)
 8001d98:	400b      	ands	r3, r1
 8001d9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	80002000 	.word	0x80002000
 8001dc8:	fe00e800 	.word	0xfe00e800

08001dcc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	460b      	mov	r3, r1
 8001dda:	817b      	strh	r3, [r7, #10]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	f040 80db 	bne.w	8001fa4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_I2C_Master_Receive+0x30>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0d4      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x1da>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e04:	f7ff fb1c 	bl	8001440 <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2319      	movs	r3, #25
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f001 fc51 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0bf      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2222      	movs	r2, #34	; 0x22
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2210      	movs	r2, #16
 8001e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	893a      	ldrh	r2, [r7, #8]
 8001e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2bff      	cmp	r3, #255	; 0xff
 8001e56:	d90e      	bls.n	8001e76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	22ff      	movs	r2, #255	; 0xff
 8001e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	8979      	ldrh	r1, [r7, #10]
 8001e66:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <HAL_I2C_Master_Receive+0x1e4>)
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f001 fe60 	bl	8003b34 <I2C_TransferConfig>
 8001e74:	e06d      	b.n	8001f52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_I2C_Master_Receive+0x1e4>)
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f001 fe4f 	bl	8003b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e96:	e05c      	b.n	8001f52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	6a39      	ldr	r1, [r7, #32]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f001 fce7 	bl	8003870 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e07c      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d034      	beq.n	8001f52 <HAL_I2C_Master_Receive+0x186>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d130      	bne.n	8001f52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f001 fbdf 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e04d      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2bff      	cmp	r3, #255	; 0xff
 8001f12:	d90e      	bls.n	8001f32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	2300      	movs	r3, #0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f001 fe02 	bl	8003b34 <I2C_TransferConfig>
 8001f30:	e00f      	b.n	8001f52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	8979      	ldrh	r1, [r7, #10]
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f001 fdf1 	bl	8003b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d19d      	bne.n	8001e98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	6a39      	ldr	r1, [r7, #32]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f001 fc42 	bl	80037ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e01a      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2220      	movs	r2, #32
 8001f76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_I2C_Master_Receive+0x1e8>)
 8001f84:	400b      	ands	r3, r1
 8001f86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	80002400 	.word	0x80002400
 8001fb4:	fe00e800 	.word	0xfe00e800

08001fb8 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d156      	bne.n	8002080 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2C_Slave_Transmit_IT+0x28>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e050      	b.n	8002082 <HAL_I2C_Slave_Transmit_IT+0xca>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2221      	movs	r2, #33	; 0x21
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 800202e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002038:	d117      	bne.n	800206a <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002072:	f248 0101 	movw	r1, #32769	; 0x8001
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f001 fd8e 	bl	8003b98 <I2C_Enable_IRQ>

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	ffff0000 	.word	0xffff0000
 8002090:	0800250f 	.word	0x0800250f

08002094 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d139      	bne.n	8002122 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Slave_Receive_IT+0x28>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e033      	b.n	8002124 <HAL_I2C_Slave_Receive_IT+0x90>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2222      	movs	r2, #34	; 0x22
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_I2C_Slave_Receive_IT+0x98>)
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800210a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002114:	f248 0102 	movw	r1, #32770	; 0x8002
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f001 fd3d 	bl	8003b98 <I2C_Enable_IRQ>

    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	ffff0000 	.word	0xffff0000
 8002130:	0800250f 	.word	0x0800250f

08002134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4603      	mov	r3, r0
 8002144:	817b      	strh	r3, [r7, #10]
 8002146:	460b      	mov	r3, r1
 8002148:	813b      	strh	r3, [r7, #8]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	f040 80fd 	bne.w	8002356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_I2C_Mem_Read+0x34>
 8002162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0f1      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_I2C_Mem_Read+0x4e>
 800217e:	2302      	movs	r3, #2
 8002180:	e0ea      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800218a:	f7ff f959 	bl	8001440 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2319      	movs	r3, #25
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f001 fa8e 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d5      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2222      	movs	r2, #34	; 0x22
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d4:	88f8      	ldrh	r0, [r7, #6]
 80021d6:	893a      	ldrh	r2, [r7, #8]
 80021d8:	8979      	ldrh	r1, [r7, #10]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4603      	mov	r3, r0
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fd71 	bl	8002ccc <I2C_RequestMemoryRead>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0ad      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d90e      	bls.n	8002224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	b2da      	uxtb	r2, r3
 8002212:	8979      	ldrh	r1, [r7, #10]
 8002214:	4b52      	ldr	r3, [pc, #328]	; (8002360 <HAL_I2C_Mem_Read+0x22c>)
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f001 fc89 	bl	8003b34 <I2C_TransferConfig>
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	b2da      	uxtb	r2, r3
 8002234:	8979      	ldrh	r1, [r7, #10]
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_I2C_Mem_Read+0x22c>)
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f001 fc78 	bl	8003b34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	2200      	movs	r2, #0
 800224c:	2104      	movs	r1, #4
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f001 fa35 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e07c      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d034      	beq.n	8002304 <HAL_I2C_Mem_Read+0x1d0>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d130      	bne.n	8002304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f001 fa06 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e04d      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d90e      	bls.n	80022e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	8979      	ldrh	r1, [r7, #10]
 80022d4:	2300      	movs	r3, #0
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f001 fc29 	bl	8003b34 <I2C_TransferConfig>
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	8979      	ldrh	r1, [r7, #10]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f001 fc18 	bl	8003b34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d19a      	bne.n	8002244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f001 fa69 	bl	80037ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e01a      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2220      	movs	r2, #32
 8002328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_I2C_Mem_Read+0x230>)
 8002336:	400b      	ands	r3, r1
 8002338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	80002400 	.word	0x80002400
 8002364:	fe00e800 	.word	0xfe00e800

08002368 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
  }
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00f      	beq.n	80023de <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00f      	beq.n	8002408 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0208 	orr.w	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002406:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00f      	beq.n	8002432 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f043 0202 	orr.w	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002430:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 030b 	and.w	r3, r3, #11
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 ffe1 	bl	800340c <I2C_ITError>
  }
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
 800249a:	4613      	mov	r3, r2
 800249c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <I2C_Slave_ISR_IT+0x24>
 800252e:	2302      	movs	r3, #2
 8002530:	e0e1      	b.n	80026f6 <I2C_Slave_ISR_IT+0x1e8>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800254e:	6939      	ldr	r1, [r7, #16]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fdf5 	bl	8003140 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d04b      	beq.n	80025f8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002566:	2b00      	cmp	r3, #0
 8002568:	d046      	beq.n	80025f8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d128      	bne.n	80025c6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b28      	cmp	r3, #40	; 0x28
 800257e:	d108      	bne.n	8002592 <I2C_Slave_ISR_IT+0x84>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002586:	d104      	bne.n	8002592 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002588:	6939      	ldr	r1, [r7, #16]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 feea 	bl	8003364 <I2C_ITListenCplt>
 8002590:	e031      	b.n	80025f6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b29      	cmp	r3, #41	; 0x29
 800259c:	d10e      	bne.n	80025bc <I2C_Slave_ISR_IT+0xae>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025a4:	d00a      	beq.n	80025bc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f001 f843 	bl	800363a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fc9e 	bl	8002ef6 <I2C_ITSlaveSeqCplt>
 80025ba:	e01c      	b.n	80025f6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2210      	movs	r2, #16
 80025c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025c4:	e08f      	b.n	80026e6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2210      	movs	r2, #16
 80025cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f043 0204 	orr.w	r2, r3, #4
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <I2C_Slave_ISR_IT+0xda>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e6:	d17e      	bne.n	80026e6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	4619      	mov	r1, r3
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 ff0c 	bl	800340c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025f4:	e077      	b.n	80026e6 <I2C_Slave_ISR_IT+0x1d8>
 80025f6:	e076      	b.n	80026e6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02f      	beq.n	8002662 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002608:	2b00      	cmp	r3, #0
 800260a:	d02a      	beq.n	8002662 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d14b      	bne.n	80026ea <I2C_Slave_ISR_IT+0x1dc>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002658:	d047      	beq.n	80026ea <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fc4b 	bl	8002ef6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002660:	e043      	b.n	80026ea <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002676:	6939      	ldr	r1, [r7, #16]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fb7b 	bl	8002d74 <I2C_ITAddrCplt>
 800267e:	e035      	b.n	80026ec <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d030      	beq.n	80026ec <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02b      	beq.n	80026ec <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80026ce:	e00d      	b.n	80026ec <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d6:	d002      	beq.n	80026de <I2C_Slave_ISR_IT+0x1d0>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fc09 	bl	8002ef6 <I2C_ITSlaveSeqCplt>
 80026e4:	e002      	b.n	80026ec <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80026ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b088      	sub	sp, #32
 8002702:	af02      	add	r7, sp, #8
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <I2C_Master_ISR_DMA+0x1a>
 8002714:	2302      	movs	r3, #2
 8002716:	e0d9      	b.n	80028cc <I2C_Master_ISR_DMA+0x1ce>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002730:	2b00      	cmp	r3, #0
 8002732:	d011      	beq.n	8002758 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2210      	movs	r2, #16
 800273a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002748:	2120      	movs	r1, #32
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 fa24 	bl	8003b98 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 ff72 	bl	800363a <I2C_Flush_TXDR>
 8002756:	e0b4      	b.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d071      	beq.n	8002846 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002768:	2b00      	cmp	r3, #0
 800276a:	d06c      	beq.n	8002846 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d04e      	beq.n	8002824 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002792:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	d906      	bls.n	80027ac <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80027a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e010      	b.n	80027ce <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027be:	d003      	beq.n	80027c8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e002      	b.n	80027ce <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027cc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	8a79      	ldrh	r1, [r7, #18]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f001 f9a9 	bl	8003b34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b22      	cmp	r3, #34	; 0x22
 80027fe:	d108      	bne.n	8002812 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002810:	e057      	b.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002820:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002822:	e04e      	b.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002832:	d003      	beq.n	800283c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fb21 	bl	8002e7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800283a:	e042      	b.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800283c:	2140      	movs	r1, #64	; 0x40
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fde4 	bl	800340c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002844:	e03d      	b.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d028      	beq.n	80028a2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002856:	2b00      	cmp	r3, #0
 8002858:	d023      	beq.n	80028a2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d119      	bne.n	8002898 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002872:	d025      	beq.n	80028c0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800287c:	d108      	bne.n	8002890 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800288e:	e017      	b.n	80028c0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 faf3 	bl	8002e7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002896:	e013      	b.n	80028c0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fdb6 	bl	800340c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028a0:	e00e      	b.n	80028c0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fb79 	bl	8002fb0 <I2C_ITMasterCplt>
 80028be:	e000      	b.n	80028c2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80028e0:	4b8d      	ldr	r3, [pc, #564]	; (8002b18 <I2C_Mem_ISR_DMA+0x244>)
 80028e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <I2C_Mem_ISR_DMA+0x1e>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e10e      	b.n	8002b10 <I2C_Mem_ISR_DMA+0x23c>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	d016      	beq.n	8002932 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800290a:	2b00      	cmp	r3, #0
 800290c:	d011      	beq.n	8002932 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2210      	movs	r2, #16
 8002914:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f043 0204 	orr.w	r2, r3, #4
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002922:	2120      	movs	r1, #32
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f001 f937 	bl	8003b98 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fe85 	bl	800363a <I2C_Flush_TXDR>
 8002930:	e0e9      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	651a      	str	r2, [r3, #80]	; 0x50
 8002958:	e0d5      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05f      	beq.n	8002a24 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800296a:	2b00      	cmp	r3, #0
 800296c:	d05a      	beq.n	8002a24 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800296e:	2101      	movs	r1, #1
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f001 f995 	bl	8003ca0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002976:	2110      	movs	r1, #16
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f001 f90d 	bl	8003b98 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d048      	beq.n	8002a1a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2bff      	cmp	r3, #255	; 0xff
 8002990:	d910      	bls.n	80029b4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299c:	b299      	uxth	r1, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f001 f8c1 	bl	8003b34 <I2C_TransferConfig>
 80029b2:	e011      	b.n	80029d8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	b299      	uxth	r1, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f001 f8ae 	bl	8003b34 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b22      	cmp	r3, #34	; 0x22
 80029f4:	d108      	bne.n	8002a08 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a06:	e07e      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a16:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a18:	e075      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a1a:	2140      	movs	r1, #64	; 0x40
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fcf5 	bl	800340c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a22:	e070      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d05d      	beq.n	8002aea <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d058      	beq.n	8002aea <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f001 f930 	bl	8003ca0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a40:	2110      	movs	r1, #16
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f001 f8a8 	bl	8003b98 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b22      	cmp	r3, #34	; 0x22
 8002a52:	d101      	bne.n	8002a58 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a54:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <I2C_Mem_ISR_DMA+0x248>)
 8002a56:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d910      	bls.n	8002a84 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	b299      	uxth	r1, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f001 f859 	bl	8003b34 <I2C_TransferConfig>
 8002a82:	e011      	b.n	8002aa8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	b299      	uxth	r1, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f001 f846 	bl	8003b34 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b22      	cmp	r3, #34	; 0x22
 8002ac4:	d108      	bne.n	8002ad8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ad6:	e016      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae8:	e00d      	b.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fa55 	bl	8002fb0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	80002000 	.word	0x80002000
 8002b1c:	80002400 	.word	0x80002400

08002b20 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <I2C_Slave_ISR_DMA+0x24>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0bf      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x1a4>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 faec 	bl	8003140 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8095 	beq.w	8002c9e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 808f 	beq.w	8002c9e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d07d      	beq.n	8002c90 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d128      	bne.n	8002c30 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b28      	cmp	r3, #40	; 0x28
 8002be8:	d108      	bne.n	8002bfc <I2C_Slave_ISR_DMA+0xdc>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bf0:	d104      	bne.n	8002bfc <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fbb5 	bl	8003364 <I2C_ITListenCplt>
 8002bfa:	e048      	b.n	8002c8e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b29      	cmp	r3, #41	; 0x29
 8002c06:	d10e      	bne.n	8002c26 <I2C_Slave_ISR_DMA+0x106>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c0e:	d00a      	beq.n	8002c26 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2210      	movs	r2, #16
 8002c16:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fd0e 	bl	800363a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f969 	bl	8002ef6 <I2C_ITSlaveSeqCplt>
 8002c24:	e033      	b.n	8002c8e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c2e:	e034      	b.n	8002c9a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <I2C_Slave_ISR_DMA+0x13a>
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d11f      	bne.n	8002c9a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b21      	cmp	r3, #33	; 0x21
 8002c5e:	d002      	beq.n	8002c66 <I2C_Slave_ISR_DMA+0x146>
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b29      	cmp	r3, #41	; 0x29
 8002c64:	d103      	bne.n	8002c6e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2221      	movs	r2, #33	; 0x21
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6c:	e008      	b.n	8002c80 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b22      	cmp	r3, #34	; 0x22
 8002c72:	d002      	beq.n	8002c7a <I2C_Slave_ISR_DMA+0x15a>
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b2a      	cmp	r3, #42	; 0x2a
 8002c78:	d102      	bne.n	8002c80 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2222      	movs	r2, #34	; 0x22
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	4619      	mov	r1, r3
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fbc0 	bl	800340c <I2C_ITError>
      if (treatdmanack == 1U)
 8002c8c:	e005      	b.n	8002c9a <I2C_Slave_ISR_DMA+0x17a>
 8002c8e:	e004      	b.n	8002c9a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c98:	e00f      	b.n	8002cba <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002c9a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c9c:	e00d      	b.n	8002cba <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f85d 	bl	8002d74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	8979      	ldrh	r1, [r7, #10]
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <I2C_RequestMemoryRead+0xa4>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 ff1e 	bl	8003b34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fd2d 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02c      	b.n	8002d66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1c:	e015      	b.n	8002d4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fd13 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e012      	b.n	8002d66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fcb2 	bl	80036be <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	80002000 	.word	0x80002000

08002d74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d8a:	2b28      	cmp	r3, #40	; 0x28
 8002d8c:	d16a      	bne.n	8002e64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002dac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002dc8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d138      	bne.n	8002e44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	09db      	lsrs	r3, r3, #7
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	89bb      	ldrh	r3, [r7, #12]
 8002dda:	4053      	eors	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f003 0306 	and.w	r3, r3, #6
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11c      	bne.n	8002e20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d13b      	bne.n	8002e74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2208      	movs	r2, #8
 8002e08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e12:	89ba      	ldrh	r2, [r7, #12]
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fb38 	bl	800248e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e1e:	e029      	b.n	8002e74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 ff39 	bl	8003ca0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e36:	89ba      	ldrh	r2, [r7, #12]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fb26 	bl	800248e <HAL_I2C_AddrCallback>
}
 8002e42:	e017      	b.n	8002e74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 ff29 	bl	8003ca0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e56:	89ba      	ldrh	r2, [r7, #12]
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fb16 	bl	800248e <HAL_I2C_AddrCallback>
}
 8002e62:	e007      	b.n	8002e74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2208      	movs	r2, #8
 8002e6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b21      	cmp	r3, #33	; 0x21
 8002e96:	d115      	bne.n	8002ec4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2211      	movs	r2, #17
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002eac:	2101      	movs	r1, #1
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fef6 	bl	8003ca0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fac8 	bl	8002452 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ec2:	e014      	b.n	8002eee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2212      	movs	r2, #18
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ed8:	2102      	movs	r1, #2
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fee0 	bl	8003ca0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fabc 	bl	8002466 <HAL_I2C_MasterRxCpltCallback>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e00c      	b.n	8002f44 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b29      	cmp	r3, #41	; 0x29
 8002f4e:	d112      	bne.n	8002f76 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2228      	movs	r2, #40	; 0x28
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fe9d 	bl	8003ca0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fa83 	bl	800247a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f74:	e017      	b.n	8002fa6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f80:	d111      	bne.n	8002fa6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2228      	movs	r2, #40	; 0x28
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2222      	movs	r2, #34	; 0x22
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f90:	2102      	movs	r1, #2
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fe84 	bl	8003ca0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fd fe5b 	bl	8000c5c <HAL_I2C_SlaveRxCpltCallback>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b21      	cmp	r3, #33	; 0x21
 8002fd0:	d107      	bne.n	8002fe2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fe63 	bl	8003ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2211      	movs	r2, #17
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe0:	e00c      	b.n	8002ffc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b22      	cmp	r3, #34	; 0x22
 8002fec:	d106      	bne.n	8002ffc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fee:	2102      	movs	r1, #2
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fe55 	bl	8003ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2212      	movs	r2, #18
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <I2C_ITMasterCplt+0x188>)
 8003008:	400b      	ands	r3, r1
 800300a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <I2C_ITMasterCplt+0x18c>)
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2210      	movs	r2, #16
 8003028:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b60      	cmp	r3, #96	; 0x60
 8003040:	d10a      	bne.n	8003058 <I2C_ITMasterCplt+0xa8>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	b2db      	uxtb	r3, r3
 8003054:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003056:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 faee 	bl	800363a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d002      	beq.n	8003076 <I2C_ITMasterCplt+0xc6>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9c5 	bl	800340c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003082:	e054      	b.n	800312e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b21      	cmp	r3, #33	; 0x21
 800308e:	d124      	bne.n	80030da <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d10b      	bne.n	80030c2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff f9ff 	bl	80024be <HAL_I2C_MemTxCpltCallback>
}
 80030c0:	e035      	b.n	800312e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f9bd 	bl	8002452 <HAL_I2C_MasterTxCpltCallback>
}
 80030d8:	e029      	b.n	800312e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b22      	cmp	r3, #34	; 0x22
 80030e4:	d123      	bne.n	800312e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d10b      	bne.n	8003118 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff f9de 	bl	80024d2 <HAL_I2C_MemRxCpltCallback>
}
 8003116:	e00a      	b.n	800312e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff f99c 	bl	8002466 <HAL_I2C_MasterRxCpltCallback>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	fe00e800 	.word	0xfe00e800
 800313c:	ffff0000 	.word	0xffff0000

08003140 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b21      	cmp	r3, #33	; 0x21
 800316a:	d002      	beq.n	8003172 <I2C_ITSlaveCplt+0x32>
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b29      	cmp	r3, #41	; 0x29
 8003170:	d108      	bne.n	8003184 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003172:	f248 0101 	movw	r1, #32769	; 0x8001
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fd92 	bl	8003ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2221      	movs	r2, #33	; 0x21
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
 8003182:	e019      	b.n	80031b8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b22      	cmp	r3, #34	; 0x22
 8003188:	d002      	beq.n	8003190 <I2C_ITSlaveCplt+0x50>
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b2a      	cmp	r3, #42	; 0x2a
 800318e:	d108      	bne.n	80031a2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003190:	f248 0102 	movw	r1, #32770	; 0x8002
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fd83 	bl	8003ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2222      	movs	r2, #34	; 0x22
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
 80031a0:	e00a      	b.n	80031b8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b28      	cmp	r3, #40	; 0x28
 80031a6:	d107      	bne.n	80031b8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80031a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fd77 	bl	8003ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b62      	ldr	r3, [pc, #392]	; (800335c <I2C_ITSlaveCplt+0x21c>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fa2e 	bl	800363a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01f      	beq.n	8003240 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800320e:	e017      	b.n	8003240 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003228:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d020      	beq.n	800328c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f043 0204 	orr.w	r2, r3, #4
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8a4 	bl	800340c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b28      	cmp	r3, #40	; 0x28
 80032ce:	d141      	bne.n	8003354 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f846 	bl	8003364 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032d8:	e03c      	b.n	8003354 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e2:	d014      	beq.n	800330e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fe06 	bl	8002ef6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <I2C_ITSlaveCplt+0x220>)
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff f8cf 	bl	80024aa <HAL_I2C_ListenCpltCallback>
}
 800330c:	e022      	b.n	8003354 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b22      	cmp	r3, #34	; 0x22
 8003318:	d10e      	bne.n	8003338 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd fc93 	bl	8000c5c <HAL_I2C_SlaveRxCpltCallback>
}
 8003336:	e00d      	b.n	8003354 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff f893 	bl	800247a <HAL_I2C_SlaveTxCpltCallback>
}
 8003354:	bf00      	nop
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	fe00e800 	.word	0xfe00e800
 8003360:	ffff0000 	.word	0xffff0000

08003364 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a25      	ldr	r2, [pc, #148]	; (8003408 <I2C_ITListenCplt+0xa4>)
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d022      	beq.n	80033e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fc5b 	bl	8003ca0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff f855 	bl	80024aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	ffff0000 	.word	0xffff0000

0800340c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a6d      	ldr	r2, [pc, #436]	; (80035e0 <I2C_ITError+0x1d4>)
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	2b28      	cmp	r3, #40	; 0x28
 8003442:	d005      	beq.n	8003450 <I2C_ITError+0x44>
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b29      	cmp	r3, #41	; 0x29
 8003448:	d002      	beq.n	8003450 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b2a      	cmp	r3, #42	; 0x2a
 800344e:	d10b      	bne.n	8003468 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003450:	2103      	movs	r1, #3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fc24 	bl	8003ca0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2228      	movs	r2, #40	; 0x28
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a60      	ldr	r2, [pc, #384]	; (80035e4 <I2C_ITError+0x1d8>)
 8003464:	635a      	str	r2, [r3, #52]	; 0x34
 8003466:	e030      	b.n	80034ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003468:	f248 0103 	movw	r1, #32771	; 0x8003
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fc17 	bl	8003ca0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8e1 	bl	800363a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d01f      	beq.n	80034c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d114      	bne.n	80034c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d109      	bne.n	80034bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2210      	movs	r2, #16
 80034ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d039      	beq.n	800354c <I2C_ITError+0x140>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b11      	cmp	r3, #17
 80034dc:	d002      	beq.n	80034e4 <I2C_ITError+0xd8>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b21      	cmp	r3, #33	; 0x21
 80034e2:	d133      	bne.n	800354c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f2:	d107      	bne.n	8003504 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003502:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe f91b 	bl	8001744 <HAL_DMA_GetState>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d017      	beq.n	8003544 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <I2C_ITError+0x1dc>)
 800351a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe f8ca 	bl	80016c2 <HAL_DMA_Abort_IT>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d04d      	beq.n	80035d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800353e:	4610      	mov	r0, r2
 8003540:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003542:	e045      	b.n	80035d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f851 	bl	80035ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800354a:	e041      	b.n	80035d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d039      	beq.n	80035c8 <I2C_ITError+0x1bc>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b12      	cmp	r3, #18
 8003558:	d002      	beq.n	8003560 <I2C_ITError+0x154>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b22      	cmp	r3, #34	; 0x22
 800355e:	d133      	bne.n	80035c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356e:	d107      	bne.n	8003580 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe f8dd 	bl	8001744 <HAL_DMA_GetState>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d017      	beq.n	80035c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <I2C_ITError+0x1dc>)
 8003596:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe f88c 	bl	80016c2 <HAL_DMA_Abort_IT>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d011      	beq.n	80035d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ba:	4610      	mov	r0, r2
 80035bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035be:	e009      	b.n	80035d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f813 	bl	80035ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035c6:	e005      	b.n	80035d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f80f 	bl	80035ec <I2C_TreatErrorCallback>
  }
}
 80035ce:	e002      	b.n	80035d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035d4:	bf00      	nop
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	ffff0000 	.word	0xffff0000
 80035e4:	0800250f 	.word	0x0800250f
 80035e8:	08003683 	.word	0x08003683

080035ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b60      	cmp	r3, #96	; 0x60
 80035fe:	d10e      	bne.n	800361e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe ff6f 	bl	80024fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800361c:	e009      	b.n	8003632 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe ff5a 	bl	80024e6 <HAL_I2C_ErrorCallback>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d103      	bne.n	8003658 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d007      	beq.n	8003676 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	619a      	str	r2, [r3, #24]
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	2200      	movs	r2, #0
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	2200      	movs	r2, #0
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff ff9b 	bl	80035ec <I2C_TreatErrorCallback>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ce:	e031      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d02d      	beq.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fd feb2 	bl	8001440 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d122      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d113      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e00f      	b.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	d0be      	beq.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003768:	e033      	b.n	80037d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f900 	bl	8003974 <I2C_IsErrorOccurred>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e031      	b.n	80037e2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d025      	beq.n	80037d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fd fe5b 	bl	8001440 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11a      	bne.n	80037d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d013      	beq.n	80037d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e007      	b.n	80037e2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d1c4      	bne.n	800376a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f6:	e02f      	b.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f8b9 	bl	8003974 <I2C_IsErrorOccurred>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e02d      	b.n	8003868 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fe18 	bl	8001440 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11a      	bne.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b20      	cmp	r3, #32
 800382e:	d013      	beq.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e007      	b.n	8003868 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b20      	cmp	r3, #32
 8003864:	d1c8      	bne.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800387c:	e06b      	b.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f876 	bl	8003974 <I2C_IsErrorOccurred>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e069      	b.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b20      	cmp	r3, #32
 800389e:	d138      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d105      	bne.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e055      	b.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d107      	bne.n	80038d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2204      	movs	r2, #4
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
 80038d6:	e002      	b.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80038f2:	400b      	ands	r3, r1
 80038f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e029      	b.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fd fd95 	bl	8001440 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00f      	beq.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e007      	b.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d18c      	bne.n	800387e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	fe00e800 	.word	0xfe00e800

08003974 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d068      	beq.n	8003a72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2210      	movs	r2, #16
 80039a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039a8:	e049      	b.n	8003a3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d045      	beq.n	8003a3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd fd45 	bl	8001440 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_IsErrorOccurred+0x54>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d13a      	bne.n	8003a3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d121      	bne.n	8003a30 <I2C_IsErrorOccurred+0xbc>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f2:	d01d      	beq.n	8003a30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d01a      	beq.n	8003a30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a0a:	f7fd fd19 	bl	8001440 <HAL_GetTick>
 8003a0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a10:	e00e      	b.n	8003a30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a12:	f7fd fd15 	bl	8001440 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b19      	cmp	r3, #25
 8003a1e:	d907      	bls.n	8003a30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f043 0320 	orr.w	r3, r3, #32
 8003a26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a2e:	e006      	b.n	8003a3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d1e9      	bne.n	8003a12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d003      	beq.n	8003a54 <I2C_IsErrorOccurred+0xe0>
 8003a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0aa      	beq.n	80039aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2220      	movs	r2, #32
 8003a62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01c      	beq.n	8003b22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fda6 	bl	800363a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <I2C_IsErrorOccurred+0x1bc>)
 8003afa:	400b      	ands	r3, r1
 8003afc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3728      	adds	r7, #40	; 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	fe00e800 	.word	0xfe00e800

08003b34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	4613      	mov	r3, r2
 8003b44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b4c:	7a7b      	ldrb	r3, [r7, #9]
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	0d5b      	lsrs	r3, r3, #21
 8003b6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <I2C_TransferConfig+0x60>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	43db      	mvns	r3, r3
 8003b78:	ea02 0103 	and.w	r1, r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	03ff63ff 	.word	0x03ff63ff

08003b98 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	4a39      	ldr	r2, [pc, #228]	; (8003c94 <I2C_Enable_IRQ+0xfc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d032      	beq.n	8003c18 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003bb6:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <I2C_Enable_IRQ+0x100>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d02d      	beq.n	8003c18 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003bc0:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <I2C_Enable_IRQ+0x104>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d028      	beq.n	8003c18 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da03      	bge.n	8003bd6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003bd4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003be6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003bf8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d103      	bne.n	8003c08 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d133      	bne.n	8003c76 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c16:	e02e      	b.n	8003c76 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	da03      	bge.n	8003c28 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c26:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c38:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d103      	bne.n	8003c5a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c58:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d103      	bne.n	8003c68 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d103      	bne.n	8003c76 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	080026ff 	.word	0x080026ff
 8003c98:	08002b21 	.word	0x08002b21
 8003c9c:	080028d5 	.word	0x080028d5

08003ca0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00f      	beq.n	8003cda <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cce:	2b28      	cmp	r3, #40	; 0x28
 8003cd0:	d003      	beq.n	8003cda <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cd8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cda:	887b      	ldrh	r3, [r7, #2]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003cea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf8:	2b28      	cmp	r3, #40	; 0x28
 8003cfa:	d003      	beq.n	8003d04 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d02:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	da03      	bge.n	8003d14 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d103      	bne.n	8003d22 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d103      	bne.n	8003d30 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d103      	bne.n	8003d3e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	43da      	mvns	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d138      	bne.n	8003de4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e032      	b.n	8003de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d139      	bne.n	8003e7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e033      	b.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2224      	movs	r2, #36	; 0x24
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000

08003eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40007000 	.word	0x40007000

08003ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed6:	d130      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed8:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d038      	beq.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ef6:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2232      	movs	r2, #50	; 0x32
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	0c9b      	lsrs	r3, r3, #18
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f0c:	e002      	b.n	8003f14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d102      	bne.n	8003f28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f2      	bne.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f28:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f34:	d110      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e00f      	b.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d007      	beq.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f50:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	20000008 	.word	0x20000008
 8003f70:	431bde83 	.word	0x431bde83

08003f74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f000 bc02 	b.w	800478c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f88:	4b96      	ldr	r3, [pc, #600]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f92:	4b94      	ldr	r3, [pc, #592]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80e4 	beq.w	8004172 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4c>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	f040 808b 	bne.w	80040ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	f040 8087 	bne.w	80040ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc0:	4b88      	ldr	r3, [pc, #544]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x64>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e3d9      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	4b81      	ldr	r3, [pc, #516]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x7e>
 8003fe8:	4b7e      	ldr	r3, [pc, #504]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff0:	e005      	b.n	8003ffe <HAL_RCC_OscConfig+0x8a>
 8003ff2:	4b7c      	ldr	r3, [pc, #496]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d223      	bcs.n	800404a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fd8c 	bl	8004b24 <RCC_SetFlashLatencyFromMSIRange>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e3ba      	b.n	800478c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004016:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a72      	ldr	r2, [pc, #456]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800401c:	f043 0308 	orr.w	r3, r3, #8
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b70      	ldr	r3, [pc, #448]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	496d      	ldr	r1, [pc, #436]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004034:	4b6b      	ldr	r3, [pc, #428]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	4968      	ldr	r1, [pc, #416]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
 8004048:	e025      	b.n	8004096 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800404a:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a65      	ldr	r2, [pc, #404]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004050:	f043 0308 	orr.w	r3, r3, #8
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4960      	ldr	r1, [pc, #384]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004068:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	495b      	ldr	r1, [pc, #364]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd4c 	bl	8004b24 <RCC_SetFlashLatencyFromMSIRange>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e37a      	b.n	800478c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004096:	f000 fc81 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	4950      	ldr	r1, [pc, #320]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a4e      	ldr	r2, [pc, #312]	; (80041ec <HAL_RCC_OscConfig+0x278>)
 80040b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040b6:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd f970 	bl	80013a0 <HAL_InitTick>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d052      	beq.n	8004170 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	e35e      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d032      	beq.n	800413c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040d6:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a42      	ldr	r2, [pc, #264]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040e2:	f7fd f9ad 	bl	8001440 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ea:	f7fd f9a9 	bl	8001440 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e347      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004108:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a35      	ldr	r2, [pc, #212]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800410e:	f043 0308 	orr.w	r3, r3, #8
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	4930      	ldr	r1, [pc, #192]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004126:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	492b      	ldr	r1, [pc, #172]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
 800413a:	e01a      	b.n	8004172 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800413c:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004148:	f7fd f97a 	bl	8001440 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004150:	f7fd f976 	bl	8001440 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e314      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x1dc>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d073      	beq.n	8004266 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x21c>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d10e      	bne.n	80041a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d10b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d063      	beq.n	8004264 <HAL_RCC_OscConfig+0x2f0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d15f      	bne.n	8004264 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e2f1      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d106      	bne.n	80041c0 <HAL_RCC_OscConfig+0x24c>
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a0b      	ldr	r2, [pc, #44]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e025      	b.n	800420c <HAL_RCC_OscConfig+0x298>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c8:	d114      	bne.n	80041f4 <HAL_RCC_OscConfig+0x280>
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a02      	ldr	r2, [pc, #8]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e013      	b.n	800420c <HAL_RCC_OscConfig+0x298>
 80041e4:	40021000 	.word	0x40021000
 80041e8:	080070a4 	.word	0x080070a4
 80041ec:	20000008 	.word	0x20000008
 80041f0:	2000000c 	.word	0x2000000c
 80041f4:	4ba0      	ldr	r3, [pc, #640]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a9f      	ldr	r2, [pc, #636]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b9d      	ldr	r3, [pc, #628]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a9c      	ldr	r2, [pc, #624]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd f914 	bl	8001440 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7fd f910 	bl	8001440 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e2ae      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422e:	4b92      	ldr	r3, [pc, #584]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x2a8>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd f900 	bl	8001440 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004244:	f7fd f8fc 	bl	8001440 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e29a      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004256:	4b88      	ldr	r3, [pc, #544]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x2d0>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d060      	beq.n	8004334 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x310>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b0c      	cmp	r3, #12
 800427c:	d119      	bne.n	80042b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d116      	bne.n	80042b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	4b7c      	ldr	r3, [pc, #496]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x328>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e277      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b76      	ldr	r3, [pc, #472]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	4973      	ldr	r1, [pc, #460]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b0:	e040      	b.n	8004334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d023      	beq.n	8004302 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ba:	4b6f      	ldr	r3, [pc, #444]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6e      	ldr	r2, [pc, #440]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd f8bb 	bl	8001440 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fd f8b7 	bl	8001440 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e255      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e0:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ec:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	495f      	ldr	r1, [pc, #380]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
 8004300:	e018      	b.n	8004334 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004302:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a5c      	ldr	r2, [pc, #368]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fd f897 	bl	8001440 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004316:	f7fd f893 	bl	8001440 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e231      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004328:	4b53      	ldr	r3, [pc, #332]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d03c      	beq.n	80043ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01c      	beq.n	8004382 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434e:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd f872 	bl	8001440 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004360:	f7fd f86e 	bl	8001440 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e20c      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ef      	beq.n	8004360 <HAL_RCC_OscConfig+0x3ec>
 8004380:	e01b      	b.n	80043ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004382:	4b3d      	ldr	r3, [pc, #244]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004388:	4a3b      	ldr	r2, [pc, #236]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fd f855 	bl	8001440 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd f851 	bl	8001440 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1ef      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ef      	bne.n	800439a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80a6 	beq.w	8004514 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043cc:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	4a26      	ldr	r2, [pc, #152]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80043de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6593      	str	r3, [r2, #88]	; 0x58
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f0:	2301      	movs	r3, #1
 80043f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_RCC_OscConfig+0x508>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d118      	bne.n	8004432 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <HAL_RCC_OscConfig+0x508>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <HAL_RCC_OscConfig+0x508>)
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440c:	f7fd f818 	bl	8001440 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004414:	f7fd f814 	bl	8001440 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1b2      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <HAL_RCC_OscConfig+0x508>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d108      	bne.n	800444c <HAL_RCC_OscConfig+0x4d8>
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800444a:	e029      	b.n	80044a0 <HAL_RCC_OscConfig+0x52c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b05      	cmp	r3, #5
 8004452:	d115      	bne.n	8004480 <HAL_RCC_OscConfig+0x50c>
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	4a03      	ldr	r2, [pc, #12]	; (8004478 <HAL_RCC_OscConfig+0x504>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004474:	e014      	b.n	80044a0 <HAL_RCC_OscConfig+0x52c>
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	40007000 	.word	0x40007000
 8004480:	4b9a      	ldr	r3, [pc, #616]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	4a99      	ldr	r2, [pc, #612]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004490:	4b96      	ldr	r3, [pc, #600]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	4a95      	ldr	r2, [pc, #596]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004498:	f023 0304 	bic.w	r3, r3, #4
 800449c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fc ffca 	bl	8001440 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b0:	f7fc ffc6 	bl	8001440 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e162      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c6:	4b89      	ldr	r3, [pc, #548]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ed      	beq.n	80044b0 <HAL_RCC_OscConfig+0x53c>
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d6:	f7fc ffb3 	bl	8001440 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044dc:	e00a      	b.n	80044f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f7fc ffaf 	bl	8001440 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e14b      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044f4:	4b7d      	ldr	r3, [pc, #500]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ed      	bne.n	80044de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004502:	7ffb      	ldrb	r3, [r7, #31]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004508:	4b78      	ldr	r3, [pc, #480]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	4a77      	ldr	r2, [pc, #476]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 800450e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004512:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d03c      	beq.n	800459a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01c      	beq.n	8004562 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004528:	4b70      	ldr	r3, [pc, #448]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 800452a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452e:	4a6f      	ldr	r2, [pc, #444]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fc ff82 	bl	8001440 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004540:	f7fc ff7e 	bl	8001440 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e11c      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004552:	4b66      	ldr	r3, [pc, #408]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ef      	beq.n	8004540 <HAL_RCC_OscConfig+0x5cc>
 8004560:	e01b      	b.n	800459a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004568:	4a60      	ldr	r2, [pc, #384]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fc ff65 	bl	8001440 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800457a:	f7fc ff61 	bl	8001440 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e0ff      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800458c:	4b57      	ldr	r3, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 800458e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ef      	bne.n	800457a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80f3 	beq.w	800478a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f040 80c9 	bne.w	8004740 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045ae:	4b4f      	ldr	r3, [pc, #316]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d12c      	bne.n	800461c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	3b01      	subs	r3, #1
 80045ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d123      	bne.n	800461c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d11b      	bne.n	800461c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d113      	bne.n	800461c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d109      	bne.n	800461c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	3b01      	subs	r3, #1
 8004616:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d06b      	beq.n	80046f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d062      	beq.n	80046e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004622:	4b32      	ldr	r3, [pc, #200]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e0ac      	b.n	800478c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004632:	4b2e      	ldr	r3, [pc, #184]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800463c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800463e:	f7fc feff 	bl	8001440 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fc fefb 	bl	8001440 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e099      	b.n	800478c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <HAL_RCC_OscConfig+0x77c>)
 800466a:	4013      	ands	r3, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004674:	3a01      	subs	r2, #1
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467e:	0212      	lsls	r2, r2, #8
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004686:	0852      	lsrs	r2, r2, #1
 8004688:	3a01      	subs	r2, #1
 800468a:	0552      	lsls	r2, r2, #21
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004692:	0852      	lsrs	r2, r2, #1
 8004694:	3a01      	subs	r2, #1
 8004696:	0652      	lsls	r2, r2, #25
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800469e:	06d2      	lsls	r2, r2, #27
 80046a0:	430a      	orrs	r2, r1
 80046a2:	4912      	ldr	r1, [pc, #72]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046a8:	4b10      	ldr	r3, [pc, #64]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80046ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80046ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c0:	f7fc febe 	bl	8001440 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc feba 	bl	8001440 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e058      	b.n	800478c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_OscConfig+0x778>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046e6:	e050      	b.n	800478a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04f      	b.n	800478c <HAL_RCC_OscConfig+0x818>
 80046ec:	40021000 	.word	0x40021000
 80046f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f4:	4b27      	ldr	r3, [pc, #156]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d144      	bne.n	800478a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a20      	ldr	r2, [pc, #128]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 8004712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004718:	f7fc fe92 	bl	8001440 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fc fe8e 	bl	8001440 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e02c      	b.n	800478c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004732:	4b18      	ldr	r3, [pc, #96]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x7ac>
 800473e:	e024      	b.n	800478a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d01f      	beq.n	8004786 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a12      	ldr	r2, [pc, #72]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 800474c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004752:	f7fc fe75 	bl	8001440 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7fc fe71 	bl	8001440 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e00f      	b.n	800478c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4905      	ldr	r1, [pc, #20]	; (8004794 <HAL_RCC_OscConfig+0x820>)
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCC_OscConfig+0x824>)
 8004780:	4013      	ands	r3, r2
 8004782:	60cb      	str	r3, [r1, #12]
 8004784:	e001      	b.n	800478a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	feeefffc 	.word	0xfeeefffc

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0e7      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b75      	ldr	r3, [pc, #468]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b72      	ldr	r3, [pc, #456]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 0207 	bic.w	r2, r3, #7
 80047c6:	4970      	ldr	r1, [pc, #448]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b6e      	ldr	r3, [pc, #440]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0cf      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b66      	ldr	r3, [pc, #408]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d908      	bls.n	800480e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b63      	ldr	r3, [pc, #396]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4960      	ldr	r1, [pc, #384]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04c      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b5a      	ldr	r3, [pc, #360]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d121      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0a6      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e09a      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004852:	4b4e      	ldr	r3, [pc, #312]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e08e      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004862:	4b4a      	ldr	r3, [pc, #296]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e086      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b46      	ldr	r3, [pc, #280]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4943      	ldr	r1, [pc, #268]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fc fddc 	bl	8001440 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fc fdd8 	bl	8001440 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e06e      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b3a      	ldr	r3, [pc, #232]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d208      	bcs.n	80048e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	492b      	ldr	r1, [pc, #172]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d210      	bcs.n	8004912 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f0:	4b25      	ldr	r3, [pc, #148]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 0207 	bic.w	r2, r3, #7
 80048f8:	4923      	ldr	r1, [pc, #140]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004900:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e036      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	4918      	ldr	r1, [pc, #96]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4910      	ldr	r1, [pc, #64]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004950:	f000 f824 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	490b      	ldr	r1, [pc, #44]	; (8004990 <HAL_RCC_ClockConfig+0x1f4>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_ClockConfig+0x1f8>)
 800496e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0x1fc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fd13 	bl	80013a0 <HAL_InitTick>
 800497a:	4603      	mov	r3, r0
 800497c:	72fb      	strb	r3, [r7, #11]

  return status;
 800497e:	7afb      	ldrb	r3, [r7, #11]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40022000 	.word	0x40022000
 800498c:	40021000 	.word	0x40021000
 8004990:	080070a4 	.word	0x080070a4
 8004994:	20000008 	.word	0x20000008
 8004998:	2000000c 	.word	0x2000000c

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4b3e      	ldr	r3, [pc, #248]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b4:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x34>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d121      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11e      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049d0:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049dc:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e005      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f8:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d102      	bne.n	8004a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e004      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d134      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d003      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0xac>
 8004a40:	e005      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a44:	617b      	str	r3, [r7, #20]
      break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	fb03 f202 	mul.w	r2, r3, r2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	0e5b      	lsrs	r3, r3, #25
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	3301      	adds	r3, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a94:	69bb      	ldr	r3, [r7, #24]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	080070bc 	.word	0x080070bc
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000008 	.word	0x20000008

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ad0:	f7ff fff0 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	080070b4 	.word	0x080070b4

08004af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004afc:	f7ff ffda 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0adb      	lsrs	r3, r3, #11
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4904      	ldr	r1, [pc, #16]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	080070b4 	.word	0x080070b4

08004b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b30:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b3c:	f7ff f9b6 	bl	8003eac <HAL_PWREx_GetVoltageRange>
 8004b40:	6178      	str	r0, [r7, #20]
 8004b42:	e014      	b.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b50:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b5c:	f7ff f9a6 	bl	8003eac <HAL_PWREx_GetVoltageRange>
 8004b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b74:	d10b      	bne.n	8004b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d919      	bls.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2ba0      	cmp	r3, #160	; 0xa0
 8004b80:	d902      	bls.n	8004b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b82:	2302      	movs	r3, #2
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e013      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b88:	2301      	movs	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e010      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d902      	bls.n	8004b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b94:	2303      	movs	r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	e00a      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d102      	bne.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e004      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b70      	cmp	r3, #112	; 0x70
 8004baa:	d101      	bne.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bac:	2301      	movs	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 0207 	bic.w	r2, r3, #7
 8004bb8:	4909      	ldr	r1, [pc, #36]	; (8004be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d001      	beq.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40022000 	.word	0x40022000

08004be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bec:	2300      	movs	r3, #0
 8004bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d031      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c08:	d01a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c0e:	d814      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c18:	d10f      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c1a:	4b5d      	ldr	r3, [pc, #372]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4a5c      	ldr	r2, [pc, #368]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c26:	e00c      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f9de 	bl	8004ff0 <RCCEx_PLLSAI1_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c38:	e003      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c48:	4b51      	ldr	r3, [pc, #324]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	494e      	ldr	r1, [pc, #312]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c5e:	e001      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 809e 	beq.w	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c72:	2300      	movs	r3, #0
 8004c74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c76:	4b46      	ldr	r3, [pc, #280]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	4a3f      	ldr	r2, [pc, #252]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6593      	str	r3, [r2, #88]	; 0x58
 8004c98:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a39      	ldr	r2, [pc, #228]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cb4:	f7fc fbc4 	bl	8001440 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cba:	e009      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cbc:	f7fc fbc0 	bl	8001440 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	74fb      	strb	r3, [r7, #19]
        break;
 8004cce:	e005      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cd0:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ef      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d15a      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ce2:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01e      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d019      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d0a:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d2a:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fc fb80 	bl	8001440 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d42:	e00b      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fc fb7c 	bl	8001440 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d902      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	74fb      	strb	r3, [r7, #19]
            break;
 8004d5a:	e006      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ec      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7e:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d86:	e009      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	74bb      	strb	r3, [r7, #18]
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d8e:	bf00      	nop
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d9c:	7c7b      	ldrb	r3, [r7, #17]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da2:	4b8a      	ldr	r3, [pc, #552]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	4a89      	ldr	r2, [pc, #548]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dba:	4b84      	ldr	r3, [pc, #528]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f023 0203 	bic.w	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4980      	ldr	r1, [pc, #512]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ddc:	4b7b      	ldr	r3, [pc, #492]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f023 020c 	bic.w	r2, r3, #12
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	4978      	ldr	r1, [pc, #480]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfe:	4b73      	ldr	r3, [pc, #460]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	496f      	ldr	r1, [pc, #444]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e20:	4b6a      	ldr	r3, [pc, #424]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	4967      	ldr	r1, [pc, #412]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	495e      	ldr	r1, [pc, #376]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4956      	ldr	r1, [pc, #344]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e86:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d028      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ea8:	4b48      	ldr	r3, [pc, #288]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4945      	ldr	r1, [pc, #276]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a3f      	ldr	r2, [pc, #252]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed2:	60d3      	str	r3, [r2, #12]
 8004ed4:	e011      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ede:	d10c      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f882 	bl	8004ff0 <RCCEx_PLLSAI1_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d028      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f06:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	492d      	ldr	r1, [pc, #180]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f24:	d106      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f26:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	4a28      	ldr	r2, [pc, #160]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f30:	60d3      	str	r3, [r2, #12]
 8004f32:	e011      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2101      	movs	r1, #1
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f853 	bl	8004ff0 <RCCEx_PLLSAI1_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01c      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	2102      	movs	r1, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f830 	bl	8004ff0 <RCCEx_PLLSAI1_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb8:	4904      	ldr	r1, [pc, #16]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000

08004ff0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ffe:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800500a:	4b71      	ldr	r3, [pc, #452]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0203 	and.w	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d10d      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
       ||
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005022:	4b6b      	ldr	r3, [pc, #428]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
       ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d047      	beq.n	80050c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
 800503a:	e044      	b.n	80050c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d018      	beq.n	8005076 <RCCEx_PLLSAI1_Config+0x86>
 8005044:	2b03      	cmp	r3, #3
 8005046:	d825      	bhi.n	8005094 <RCCEx_PLLSAI1_Config+0xa4>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d002      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x62>
 800504c:	2b02      	cmp	r3, #2
 800504e:	d009      	beq.n	8005064 <RCCEx_PLLSAI1_Config+0x74>
 8005050:	e020      	b.n	8005094 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005052:	4b5f      	ldr	r3, [pc, #380]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d11d      	bne.n	800509a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005062:	e01a      	b.n	800509a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005064:	4b5a      	ldr	r3, [pc, #360]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	2b00      	cmp	r3, #0
 800506e:	d116      	bne.n	800509e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005074:	e013      	b.n	800509e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005076:	4b56      	ldr	r3, [pc, #344]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005082:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005092:	e006      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      break;
 8005098:	e004      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10d      	bne.n	80050c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050aa:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	430b      	orrs	r3, r1
 80050c0:	4943      	ldr	r1, [pc, #268]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d17c      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050cc:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3f      	ldr	r2, [pc, #252]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d8:	f7fc f9b2 	bl	8001440 <HAL_GetTick>
 80050dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050de:	e009      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050e0:	f7fc f9ae 	bl	8001440 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d902      	bls.n	80050f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	73fb      	strb	r3, [r7, #15]
        break;
 80050f2:	e005      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050f4:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ef      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d15f      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d110      	bne.n	800512e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800510c:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005114:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6892      	ldr	r2, [r2, #8]
 800511c:	0211      	lsls	r1, r2, #8
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68d2      	ldr	r2, [r2, #12]
 8005122:	06d2      	lsls	r2, r2, #27
 8005124:	430a      	orrs	r2, r1
 8005126:	492a      	ldr	r1, [pc, #168]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005128:	4313      	orrs	r3, r2
 800512a:	610b      	str	r3, [r1, #16]
 800512c:	e027      	b.n	800517e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d112      	bne.n	800515a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005134:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800513c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6892      	ldr	r2, [r2, #8]
 8005144:	0211      	lsls	r1, r2, #8
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6912      	ldr	r2, [r2, #16]
 800514a:	0852      	lsrs	r2, r2, #1
 800514c:	3a01      	subs	r2, #1
 800514e:	0552      	lsls	r2, r2, #21
 8005150:	430a      	orrs	r2, r1
 8005152:	491f      	ldr	r1, [pc, #124]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	610b      	str	r3, [r1, #16]
 8005158:	e011      	b.n	800517e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800515a:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005162:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6892      	ldr	r2, [r2, #8]
 800516a:	0211      	lsls	r1, r2, #8
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6952      	ldr	r2, [r2, #20]
 8005170:	0852      	lsrs	r2, r2, #1
 8005172:	3a01      	subs	r2, #1
 8005174:	0652      	lsls	r2, r2, #25
 8005176:	430a      	orrs	r2, r1
 8005178:	4915      	ldr	r1, [pc, #84]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800517a:	4313      	orrs	r3, r2
 800517c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005188:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518a:	f7fc f959 	bl	8001440 <HAL_GetTick>
 800518e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005190:	e009      	b.n	80051a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005192:	f7fc f955 	bl	8001440 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d902      	bls.n	80051a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	73fb      	strb	r3, [r7, #15]
          break;
 80051a4:	e005      	b.n	80051b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ef      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000

080051d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e040      	b.n	8005268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fb fefc 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2224      	movs	r2, #36	; 0x24
 8005200:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fade 	bl	80057dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8af 	bl	8005384 <UART_SetConfig>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01b      	b.n	8005268 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800523e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800524e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fb5d 	bl	8005920 <UART_CheckIdleState>
 8005266:	4603      	mov	r3, r0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005284:	2b20      	cmp	r3, #32
 8005286:	d178      	bne.n	800537a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Transmit+0x24>
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e071      	b.n	800537c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2221      	movs	r2, #33	; 0x21
 80052a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a6:	f7fc f8cb 	bl	8001440 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c4:	d108      	bne.n	80052d8 <HAL_UART_Transmit+0x68>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e003      	b.n	80052e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052e0:	e030      	b.n	8005344 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	; 0x80
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fbbf 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e03c      	b.n	800537c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	881a      	ldrh	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005314:	b292      	uxth	r2, r2
 8005316:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	3302      	adds	r3, #2
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	e008      	b.n	8005332 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b292      	uxth	r2, r2
 800532a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1c8      	bne.n	80052e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2200      	movs	r2, #0
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fb88 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e005      	b.n	800537c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005388:	b08a      	sub	sp, #40	; 0x28
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4bb4      	ldr	r3, [pc, #720]	; (8005684 <UART_SetConfig+0x300>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053bc:	430b      	orrs	r3, r1
 80053be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4aa9      	ldr	r2, [pc, #676]	; (8005688 <UART_SetConfig+0x304>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ec:	4313      	orrs	r3, r2
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4aa0      	ldr	r2, [pc, #640]	; (800568c <UART_SetConfig+0x308>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d126      	bne.n	800545c <UART_SetConfig+0xd8>
 800540e:	4ba0      	ldr	r3, [pc, #640]	; (8005690 <UART_SetConfig+0x30c>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b03      	cmp	r3, #3
 800541a:	d81b      	bhi.n	8005454 <UART_SetConfig+0xd0>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0xa0>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005435 	.word	0x08005435
 8005428:	08005445 	.word	0x08005445
 800542c:	0800543d 	.word	0x0800543d
 8005430:	0800544d 	.word	0x0800544d
 8005434:	2301      	movs	r3, #1
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e080      	b.n	800553e <UART_SetConfig+0x1ba>
 800543c:	2302      	movs	r3, #2
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005442:	e07c      	b.n	800553e <UART_SetConfig+0x1ba>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e078      	b.n	800553e <UART_SetConfig+0x1ba>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e074      	b.n	800553e <UART_SetConfig+0x1ba>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e070      	b.n	800553e <UART_SetConfig+0x1ba>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a8c      	ldr	r2, [pc, #560]	; (8005694 <UART_SetConfig+0x310>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d138      	bne.n	80054d8 <UART_SetConfig+0x154>
 8005466:	4b8a      	ldr	r3, [pc, #552]	; (8005690 <UART_SetConfig+0x30c>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d82d      	bhi.n	80054d0 <UART_SetConfig+0x14c>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0xf8>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054b1 	.word	0x080054b1
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054d1 	.word	0x080054d1
 8005488:	080054d1 	.word	0x080054d1
 800548c:	080054c1 	.word	0x080054c1
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054d1 	.word	0x080054d1
 8005498:	080054d1 	.word	0x080054d1
 800549c:	080054b9 	.word	0x080054b9
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054c9 	.word	0x080054c9
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b6:	e042      	b.n	800553e <UART_SetConfig+0x1ba>
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054be:	e03e      	b.n	800553e <UART_SetConfig+0x1ba>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c6:	e03a      	b.n	800553e <UART_SetConfig+0x1ba>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e036      	b.n	800553e <UART_SetConfig+0x1ba>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e032      	b.n	800553e <UART_SetConfig+0x1ba>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a6a      	ldr	r2, [pc, #424]	; (8005688 <UART_SetConfig+0x304>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d12a      	bne.n	8005538 <UART_SetConfig+0x1b4>
 80054e2:	4b6b      	ldr	r3, [pc, #428]	; (8005690 <UART_SetConfig+0x30c>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054f0:	d01a      	beq.n	8005528 <UART_SetConfig+0x1a4>
 80054f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054f6:	d81b      	bhi.n	8005530 <UART_SetConfig+0x1ac>
 80054f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fc:	d00c      	beq.n	8005518 <UART_SetConfig+0x194>
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005502:	d815      	bhi.n	8005530 <UART_SetConfig+0x1ac>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <UART_SetConfig+0x18c>
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d008      	beq.n	8005520 <UART_SetConfig+0x19c>
 800550e:	e00f      	b.n	8005530 <UART_SetConfig+0x1ac>
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e012      	b.n	800553e <UART_SetConfig+0x1ba>
 8005518:	2302      	movs	r3, #2
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551e:	e00e      	b.n	800553e <UART_SetConfig+0x1ba>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005526:	e00a      	b.n	800553e <UART_SetConfig+0x1ba>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e006      	b.n	800553e <UART_SetConfig+0x1ba>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e002      	b.n	800553e <UART_SetConfig+0x1ba>
 8005538:	2310      	movs	r3, #16
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a51      	ldr	r2, [pc, #324]	; (8005688 <UART_SetConfig+0x304>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d17a      	bne.n	800563e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800554c:	2b08      	cmp	r3, #8
 800554e:	d824      	bhi.n	800559a <UART_SetConfig+0x216>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x1d4>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800557d 	.word	0x0800557d
 800555c:	0800559b 	.word	0x0800559b
 8005560:	08005585 	.word	0x08005585
 8005564:	0800559b 	.word	0x0800559b
 8005568:	0800558b 	.word	0x0800558b
 800556c:	0800559b 	.word	0x0800559b
 8005570:	0800559b 	.word	0x0800559b
 8005574:	0800559b 	.word	0x0800559b
 8005578:	08005593 	.word	0x08005593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7ff faa6 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8005580:	61f8      	str	r0, [r7, #28]
        break;
 8005582:	e010      	b.n	80055a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005584:	4b44      	ldr	r3, [pc, #272]	; (8005698 <UART_SetConfig+0x314>)
 8005586:	61fb      	str	r3, [r7, #28]
        break;
 8005588:	e00d      	b.n	80055a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558a:	f7ff fa07 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800558e:	61f8      	str	r0, [r7, #28]
        break;
 8005590:	e009      	b.n	80055a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005596:	61fb      	str	r3, [r7, #28]
        break;
 8005598:	e005      	b.n	80055a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8107 	beq.w	80057bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d305      	bcc.n	80055ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d903      	bls.n	80055d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055d0:	e0f4      	b.n	80057bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2200      	movs	r2, #0
 80055d6:	461c      	mov	r4, r3
 80055d8:	4615      	mov	r5, r2
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	022b      	lsls	r3, r5, #8
 80055e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055e8:	0222      	lsls	r2, r4, #8
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	6849      	ldr	r1, [r1, #4]
 80055ee:	0849      	lsrs	r1, r1, #1
 80055f0:	2000      	movs	r0, #0
 80055f2:	4688      	mov	r8, r1
 80055f4:	4681      	mov	r9, r0
 80055f6:	eb12 0a08 	adds.w	sl, r2, r8
 80055fa:	eb43 0b09 	adc.w	fp, r3, r9
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560c:	4650      	mov	r0, sl
 800560e:	4659      	mov	r1, fp
 8005610:	f7fa fe36 	bl	8000280 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005622:	d308      	bcc.n	8005636 <UART_SetConfig+0x2b2>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562a:	d204      	bcs.n	8005636 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	e0c2      	b.n	80057bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800563c:	e0be      	b.n	80057bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005646:	d16a      	bne.n	800571e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800564c:	2b08      	cmp	r3, #8
 800564e:	d834      	bhi.n	80056ba <UART_SetConfig+0x336>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x2d4>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800567d 	.word	0x0800567d
 800565c:	0800569d 	.word	0x0800569d
 8005660:	080056a5 	.word	0x080056a5
 8005664:	080056bb 	.word	0x080056bb
 8005668:	080056ab 	.word	0x080056ab
 800566c:	080056bb 	.word	0x080056bb
 8005670:	080056bb 	.word	0x080056bb
 8005674:	080056bb 	.word	0x080056bb
 8005678:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7ff fa26 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8005680:	61f8      	str	r0, [r7, #28]
        break;
 8005682:	e020      	b.n	80056c6 <UART_SetConfig+0x342>
 8005684:	efff69f3 	.word	0xefff69f3
 8005688:	40008000 	.word	0x40008000
 800568c:	40013800 	.word	0x40013800
 8005690:	40021000 	.word	0x40021000
 8005694:	40004400 	.word	0x40004400
 8005698:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7ff fa2c 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 80056a0:	61f8      	str	r0, [r7, #28]
        break;
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b4c      	ldr	r3, [pc, #304]	; (80057d8 <UART_SetConfig+0x454>)
 80056a6:	61fb      	str	r3, [r7, #28]
        break;
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7ff f977 	bl	800499c <HAL_RCC_GetSysClockFreq>
 80056ae:	61f8      	str	r0, [r7, #28]
        break;
 80056b0:	e009      	b.n	80056c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61fb      	str	r3, [r7, #28]
        break;
 80056b8:	e005      	b.n	80056c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d077      	beq.n	80057bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005a      	lsls	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d916      	bls.n	8005716 <UART_SetConfig+0x392>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ee:	d212      	bcs.n	8005716 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f023 030f 	bic.w	r3, r3, #15
 80056f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	b29a      	uxth	r2, r3
 8005706:	8afb      	ldrh	r3, [r7, #22]
 8005708:	4313      	orrs	r3, r2
 800570a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	8afa      	ldrh	r2, [r7, #22]
 8005712:	60da      	str	r2, [r3, #12]
 8005714:	e052      	b.n	80057bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800571c:	e04e      	b.n	80057bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800571e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005722:	2b08      	cmp	r3, #8
 8005724:	d827      	bhi.n	8005776 <UART_SetConfig+0x3f2>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <UART_SetConfig+0x3a8>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005751 	.word	0x08005751
 8005730:	08005759 	.word	0x08005759
 8005734:	08005761 	.word	0x08005761
 8005738:	08005777 	.word	0x08005777
 800573c:	08005767 	.word	0x08005767
 8005740:	08005777 	.word	0x08005777
 8005744:	08005777 	.word	0x08005777
 8005748:	08005777 	.word	0x08005777
 800574c:	0800576f 	.word	0x0800576f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005750:	f7ff f9bc 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8005754:	61f8      	str	r0, [r7, #28]
        break;
 8005756:	e014      	b.n	8005782 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7ff f9ce 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 800575c:	61f8      	str	r0, [r7, #28]
        break;
 800575e:	e010      	b.n	8005782 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005760:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <UART_SetConfig+0x454>)
 8005762:	61fb      	str	r3, [r7, #28]
        break;
 8005764:	e00d      	b.n	8005782 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005766:	f7ff f919 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800576a:	61f8      	str	r0, [r7, #28]
        break;
 800576c:	e009      	b.n	8005782 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005772:	61fb      	str	r3, [r7, #28]
        break;
 8005774:	e005      	b.n	8005782 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005780:	bf00      	nop
    }

    if (pclk != 0U)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d019      	beq.n	80057bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	085a      	lsrs	r2, r3, #1
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	441a      	add	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d909      	bls.n	80057b6 <UART_SetConfig+0x432>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a8:	d205      	bcs.n	80057b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	e002      	b.n	80057bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3728      	adds	r7, #40	; 0x28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d6:	bf00      	nop
 80057d8:	00f42400 	.word	0x00f42400

080057dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d10a      	bne.n	80058f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b098      	sub	sp, #96	; 0x60
 8005924:	af02      	add	r7, sp, #8
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005930:	f7fb fd86 	bl	8001440 <HAL_GetTick>
 8005934:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b08      	cmp	r3, #8
 8005942:	d12e      	bne.n	80059a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f88c 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d021      	beq.n	80059a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	653b      	str	r3, [r7, #80]	; 0x50
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
 800597e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e6      	bne.n	800595e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e062      	b.n	8005a68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d149      	bne.n	8005a44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f856 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d03c      	beq.n	8005a44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	623b      	str	r3, [r7, #32]
   return(result);
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a1c:	61fa      	str	r2, [r7, #28]
 8005a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69b9      	ldr	r1, [r7, #24]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e011      	b.n	8005a68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3758      	adds	r7, #88	; 0x58
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a80:	e049      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d045      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fb fcd9 	bl	8001440 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e048      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d031      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d110      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f838 	bl	8005b3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e029      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af0:	d111      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f81e 	bl	8005b3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e00f      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	bf0c      	ite	eq
 8005b26:	2301      	moveq	r3, #1
 8005b28:	2300      	movne	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d0a6      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b095      	sub	sp, #84	; 0x54
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	643b      	str	r3, [r7, #64]	; 0x40
 8005b66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d118      	bne.n	8005be6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f023 0310 	bic.w	r3, r3, #16
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6979      	ldr	r1, [r7, #20]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	613b      	str	r3, [r7, #16]
   return(result);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e6      	bne.n	8005bb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bfa:	bf00      	nop
 8005bfc:	3754      	adds	r7, #84	; 0x54
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <__assert_func>:
 8005c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <__assert_func+0x2c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4605      	mov	r5, r0
 8005c14:	68d8      	ldr	r0, [r3, #12]
 8005c16:	b14c      	cbz	r4, 8005c2c <__assert_func+0x24>
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <__assert_func+0x30>)
 8005c1a:	9100      	str	r1, [sp, #0]
 8005c1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c20:	4906      	ldr	r1, [pc, #24]	; (8005c3c <__assert_func+0x34>)
 8005c22:	462b      	mov	r3, r5
 8005c24:	f000 f8b2 	bl	8005d8c <fiprintf>
 8005c28:	f000 f9d1 	bl	8005fce <abort>
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <__assert_func+0x38>)
 8005c2e:	461c      	mov	r4, r3
 8005c30:	e7f3      	b.n	8005c1a <__assert_func+0x12>
 8005c32:	bf00      	nop
 8005c34:	2000006c 	.word	0x2000006c
 8005c38:	080070ec 	.word	0x080070ec
 8005c3c:	080070f9 	.word	0x080070f9
 8005c40:	08007127 	.word	0x08007127

08005c44 <std>:
 8005c44:	2300      	movs	r3, #0
 8005c46:	b510      	push	{r4, lr}
 8005c48:	4604      	mov	r4, r0
 8005c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c52:	6083      	str	r3, [r0, #8]
 8005c54:	8181      	strh	r1, [r0, #12]
 8005c56:	6643      	str	r3, [r0, #100]	; 0x64
 8005c58:	81c2      	strh	r2, [r0, #14]
 8005c5a:	6183      	str	r3, [r0, #24]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	2208      	movs	r2, #8
 8005c60:	305c      	adds	r0, #92	; 0x5c
 8005c62:	f000 f938 	bl	8005ed6 <memset>
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <std+0x58>)
 8005c68:	6263      	str	r3, [r4, #36]	; 0x24
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <std+0x5c>)
 8005c6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <std+0x60>)
 8005c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <std+0x64>)
 8005c74:	6323      	str	r3, [r4, #48]	; 0x30
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <std+0x68>)
 8005c78:	6224      	str	r4, [r4, #32]
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	d006      	beq.n	8005c8c <std+0x48>
 8005c7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005c82:	4294      	cmp	r4, r2
 8005c84:	d002      	beq.n	8005c8c <std+0x48>
 8005c86:	33d0      	adds	r3, #208	; 0xd0
 8005c88:	429c      	cmp	r4, r3
 8005c8a:	d105      	bne.n	8005c98 <std+0x54>
 8005c8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c94:	f000 b998 	b.w	8005fc8 <__retarget_lock_init_recursive>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08005e51 	.word	0x08005e51
 8005ca0:	08005e73 	.word	0x08005e73
 8005ca4:	08005eab 	.word	0x08005eab
 8005ca8:	08005ecf 	.word	0x08005ecf
 8005cac:	200001e0 	.word	0x200001e0

08005cb0 <stdio_exit_handler>:
 8005cb0:	4a02      	ldr	r2, [pc, #8]	; (8005cbc <stdio_exit_handler+0xc>)
 8005cb2:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <stdio_exit_handler+0x10>)
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <stdio_exit_handler+0x14>)
 8005cb6:	f000 b87b 	b.w	8005db0 <_fwalk_sglue>
 8005cba:	bf00      	nop
 8005cbc:	20000014 	.word	0x20000014
 8005cc0:	08006b31 	.word	0x08006b31
 8005cc4:	20000020 	.word	0x20000020

08005cc8 <cleanup_stdio>:
 8005cc8:	6841      	ldr	r1, [r0, #4]
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <cleanup_stdio+0x34>)
 8005ccc:	4299      	cmp	r1, r3
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	d001      	beq.n	8005cd8 <cleanup_stdio+0x10>
 8005cd4:	f000 ff2c 	bl	8006b30 <_fflush_r>
 8005cd8:	68a1      	ldr	r1, [r4, #8]
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <cleanup_stdio+0x38>)
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	d002      	beq.n	8005ce6 <cleanup_stdio+0x1e>
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 ff25 	bl	8006b30 <_fflush_r>
 8005ce6:	68e1      	ldr	r1, [r4, #12]
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <cleanup_stdio+0x3c>)
 8005cea:	4299      	cmp	r1, r3
 8005cec:	d004      	beq.n	8005cf8 <cleanup_stdio+0x30>
 8005cee:	4620      	mov	r0, r4
 8005cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf4:	f000 bf1c 	b.w	8006b30 <_fflush_r>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200001e0 	.word	0x200001e0
 8005d00:	20000248 	.word	0x20000248
 8005d04:	200002b0 	.word	0x200002b0

08005d08 <global_stdio_init.part.0>:
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <global_stdio_init.part.0+0x30>)
 8005d0c:	4c0b      	ldr	r4, [pc, #44]	; (8005d3c <global_stdio_init.part.0+0x34>)
 8005d0e:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <global_stdio_init.part.0+0x38>)
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	4620      	mov	r0, r4
 8005d14:	2200      	movs	r2, #0
 8005d16:	2104      	movs	r1, #4
 8005d18:	f7ff ff94 	bl	8005c44 <std>
 8005d1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d20:	2201      	movs	r2, #1
 8005d22:	2109      	movs	r1, #9
 8005d24:	f7ff ff8e 	bl	8005c44 <std>
 8005d28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d32:	2112      	movs	r1, #18
 8005d34:	f7ff bf86 	b.w	8005c44 <std>
 8005d38:	20000318 	.word	0x20000318
 8005d3c:	200001e0 	.word	0x200001e0
 8005d40:	08005cb1 	.word	0x08005cb1

08005d44 <__sfp_lock_acquire>:
 8005d44:	4801      	ldr	r0, [pc, #4]	; (8005d4c <__sfp_lock_acquire+0x8>)
 8005d46:	f000 b940 	b.w	8005fca <__retarget_lock_acquire_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	20000321 	.word	0x20000321

08005d50 <__sfp_lock_release>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__sfp_lock_release+0x8>)
 8005d52:	f000 b93b 	b.w	8005fcc <__retarget_lock_release_recursive>
 8005d56:	bf00      	nop
 8005d58:	20000321 	.word	0x20000321

08005d5c <__sinit>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	f7ff fff0 	bl	8005d44 <__sfp_lock_acquire>
 8005d64:	6a23      	ldr	r3, [r4, #32]
 8005d66:	b11b      	cbz	r3, 8005d70 <__sinit+0x14>
 8005d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6c:	f7ff bff0 	b.w	8005d50 <__sfp_lock_release>
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <__sinit+0x28>)
 8005d72:	6223      	str	r3, [r4, #32]
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <__sinit+0x2c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f5      	bne.n	8005d68 <__sinit+0xc>
 8005d7c:	f7ff ffc4 	bl	8005d08 <global_stdio_init.part.0>
 8005d80:	e7f2      	b.n	8005d68 <__sinit+0xc>
 8005d82:	bf00      	nop
 8005d84:	08005cc9 	.word	0x08005cc9
 8005d88:	20000318 	.word	0x20000318

08005d8c <fiprintf>:
 8005d8c:	b40e      	push	{r1, r2, r3}
 8005d8e:	b503      	push	{r0, r1, lr}
 8005d90:	4601      	mov	r1, r0
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	4805      	ldr	r0, [pc, #20]	; (8005dac <fiprintf+0x20>)
 8005d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	f000 fb97 	bl	80064d0 <_vfiprintf_r>
 8005da2:	b002      	add	sp, #8
 8005da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da8:	b003      	add	sp, #12
 8005daa:	4770      	bx	lr
 8005dac:	2000006c 	.word	0x2000006c

08005db0 <_fwalk_sglue>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	4607      	mov	r7, r0
 8005db6:	4688      	mov	r8, r1
 8005db8:	4614      	mov	r4, r2
 8005dba:	2600      	movs	r6, #0
 8005dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8005dc4:	d505      	bpl.n	8005dd2 <_fwalk_sglue+0x22>
 8005dc6:	6824      	ldr	r4, [r4, #0]
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	d1f7      	bne.n	8005dbc <_fwalk_sglue+0xc>
 8005dcc:	4630      	mov	r0, r6
 8005dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d907      	bls.n	8005de8 <_fwalk_sglue+0x38>
 8005dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	d003      	beq.n	8005de8 <_fwalk_sglue+0x38>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c0      	blx	r8
 8005de6:	4306      	orrs	r6, r0
 8005de8:	3568      	adds	r5, #104	; 0x68
 8005dea:	e7e9      	b.n	8005dc0 <_fwalk_sglue+0x10>

08005dec <iprintf>:
 8005dec:	b40f      	push	{r0, r1, r2, r3}
 8005dee:	b507      	push	{r0, r1, r2, lr}
 8005df0:	4906      	ldr	r1, [pc, #24]	; (8005e0c <iprintf+0x20>)
 8005df2:	ab04      	add	r3, sp, #16
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dfa:	6881      	ldr	r1, [r0, #8]
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f000 fb67 	bl	80064d0 <_vfiprintf_r>
 8005e02:	b003      	add	sp, #12
 8005e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e08:	b004      	add	sp, #16
 8005e0a:	4770      	bx	lr
 8005e0c:	2000006c 	.word	0x2000006c

08005e10 <siprintf>:
 8005e10:	b40e      	push	{r1, r2, r3}
 8005e12:	b500      	push	{lr}
 8005e14:	b09c      	sub	sp, #112	; 0x70
 8005e16:	ab1d      	add	r3, sp, #116	; 0x74
 8005e18:	9002      	str	r0, [sp, #8]
 8005e1a:	9006      	str	r0, [sp, #24]
 8005e1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e20:	4809      	ldr	r0, [pc, #36]	; (8005e48 <siprintf+0x38>)
 8005e22:	9107      	str	r1, [sp, #28]
 8005e24:	9104      	str	r1, [sp, #16]
 8005e26:	4909      	ldr	r1, [pc, #36]	; (8005e4c <siprintf+0x3c>)
 8005e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2c:	9105      	str	r1, [sp, #20]
 8005e2e:	6800      	ldr	r0, [r0, #0]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	a902      	add	r1, sp, #8
 8005e34:	f000 fa24 	bl	8006280 <_svfiprintf_r>
 8005e38:	9b02      	ldr	r3, [sp, #8]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	b01c      	add	sp, #112	; 0x70
 8005e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e44:	b003      	add	sp, #12
 8005e46:	4770      	bx	lr
 8005e48:	2000006c 	.word	0x2000006c
 8005e4c:	ffff0208 	.word	0xffff0208

08005e50 <__sread>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	460c      	mov	r4, r1
 8005e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e58:	f000 f868 	bl	8005f2c <_read_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	bfab      	itete	ge
 8005e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e62:	89a3      	ldrhlt	r3, [r4, #12]
 8005e64:	181b      	addge	r3, r3, r0
 8005e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e6a:	bfac      	ite	ge
 8005e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e6e:	81a3      	strhlt	r3, [r4, #12]
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <__swrite>:
 8005e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e76:	461f      	mov	r7, r3
 8005e78:	898b      	ldrh	r3, [r1, #12]
 8005e7a:	05db      	lsls	r3, r3, #23
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	4616      	mov	r6, r2
 8005e82:	d505      	bpl.n	8005e90 <__swrite+0x1e>
 8005e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e88:	2302      	movs	r3, #2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f000 f83c 	bl	8005f08 <_lseek_r>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea6:	f000 b853 	b.w	8005f50 <_write_r>

08005eaa <__sseek>:
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	460c      	mov	r4, r1
 8005eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb2:	f000 f829 	bl	8005f08 <_lseek_r>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	bf15      	itete	ne
 8005ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ec6:	81a3      	strheq	r3, [r4, #12]
 8005ec8:	bf18      	it	ne
 8005eca:	81a3      	strhne	r3, [r4, #12]
 8005ecc:	bd10      	pop	{r4, pc}

08005ece <__sclose>:
 8005ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed2:	f000 b809 	b.w	8005ee8 <_close_r>

08005ed6 <memset>:
 8005ed6:	4402      	add	r2, r0
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d100      	bne.n	8005ee0 <memset+0xa>
 8005ede:	4770      	bx	lr
 8005ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee4:	e7f9      	b.n	8005eda <memset+0x4>
	...

08005ee8 <_close_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d06      	ldr	r5, [pc, #24]	; (8005f04 <_close_r+0x1c>)
 8005eec:	2300      	movs	r3, #0
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	f7fb f995 	bl	8001222 <_close>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_close_r+0x1a>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_close_r+0x1a>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	2000031c 	.word	0x2000031c

08005f08 <_lseek_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4d07      	ldr	r5, [pc, #28]	; (8005f28 <_lseek_r+0x20>)
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4608      	mov	r0, r1
 8005f10:	4611      	mov	r1, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	602a      	str	r2, [r5, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f7fb f9aa 	bl	8001270 <_lseek>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d102      	bne.n	8005f26 <_lseek_r+0x1e>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b103      	cbz	r3, 8005f26 <_lseek_r+0x1e>
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	2000031c 	.word	0x2000031c

08005f2c <_read_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d07      	ldr	r5, [pc, #28]	; (8005f4c <_read_r+0x20>)
 8005f30:	4604      	mov	r4, r0
 8005f32:	4608      	mov	r0, r1
 8005f34:	4611      	mov	r1, r2
 8005f36:	2200      	movs	r2, #0
 8005f38:	602a      	str	r2, [r5, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fb f938 	bl	80011b0 <_read>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_read_r+0x1e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_read_r+0x1e>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	2000031c 	.word	0x2000031c

08005f50 <_write_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	; (8005f70 <_write_r+0x20>)
 8005f54:	4604      	mov	r4, r0
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fb f943 	bl	80011ea <_write>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_write_r+0x1e>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_write_r+0x1e>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	2000031c 	.word	0x2000031c

08005f74 <__errno>:
 8005f74:	4b01      	ldr	r3, [pc, #4]	; (8005f7c <__errno+0x8>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	2000006c 	.word	0x2000006c

08005f80 <__libc_init_array>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4d0d      	ldr	r5, [pc, #52]	; (8005fb8 <__libc_init_array+0x38>)
 8005f84:	4c0d      	ldr	r4, [pc, #52]	; (8005fbc <__libc_init_array+0x3c>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	42a6      	cmp	r6, r4
 8005f8e:	d109      	bne.n	8005fa4 <__libc_init_array+0x24>
 8005f90:	4d0b      	ldr	r5, [pc, #44]	; (8005fc0 <__libc_init_array+0x40>)
 8005f92:	4c0c      	ldr	r4, [pc, #48]	; (8005fc4 <__libc_init_array+0x44>)
 8005f94:	f000 ffc2 	bl	8006f1c <_init>
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	d105      	bne.n	8005fae <__libc_init_array+0x2e>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa8:	4798      	blx	r3
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7ee      	b.n	8005f8c <__libc_init_array+0xc>
 8005fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb2:	4798      	blx	r3
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7f2      	b.n	8005f9e <__libc_init_array+0x1e>
 8005fb8:	08007164 	.word	0x08007164
 8005fbc:	08007164 	.word	0x08007164
 8005fc0:	08007164 	.word	0x08007164
 8005fc4:	08007168 	.word	0x08007168

08005fc8 <__retarget_lock_init_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_acquire_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <__retarget_lock_release_recursive>:
 8005fcc:	4770      	bx	lr

08005fce <abort>:
 8005fce:	b508      	push	{r3, lr}
 8005fd0:	2006      	movs	r0, #6
 8005fd2:	f000 fead 	bl	8006d30 <raise>
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	f7fb f8e0 	bl	800119c <_exit>

08005fdc <_free_r>:
 8005fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d044      	beq.n	800606c <_free_r+0x90>
 8005fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe6:	9001      	str	r0, [sp, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f1a1 0404 	sub.w	r4, r1, #4
 8005fee:	bfb8      	it	lt
 8005ff0:	18e4      	addlt	r4, r4, r3
 8005ff2:	f000 f8df 	bl	80061b4 <__malloc_lock>
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <_free_r+0x94>)
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	b933      	cbnz	r3, 800600c <_free_r+0x30>
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	6014      	str	r4, [r2, #0]
 8006002:	b003      	add	sp, #12
 8006004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006008:	f000 b8da 	b.w	80061c0 <__malloc_unlock>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d908      	bls.n	8006022 <_free_r+0x46>
 8006010:	6825      	ldr	r5, [r4, #0]
 8006012:	1961      	adds	r1, r4, r5
 8006014:	428b      	cmp	r3, r1
 8006016:	bf01      	itttt	eq
 8006018:	6819      	ldreq	r1, [r3, #0]
 800601a:	685b      	ldreq	r3, [r3, #4]
 800601c:	1949      	addeq	r1, r1, r5
 800601e:	6021      	streq	r1, [r4, #0]
 8006020:	e7ed      	b.n	8005ffe <_free_r+0x22>
 8006022:	461a      	mov	r2, r3
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b10b      	cbz	r3, 800602c <_free_r+0x50>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d9fa      	bls.n	8006022 <_free_r+0x46>
 800602c:	6811      	ldr	r1, [r2, #0]
 800602e:	1855      	adds	r5, r2, r1
 8006030:	42a5      	cmp	r5, r4
 8006032:	d10b      	bne.n	800604c <_free_r+0x70>
 8006034:	6824      	ldr	r4, [r4, #0]
 8006036:	4421      	add	r1, r4
 8006038:	1854      	adds	r4, r2, r1
 800603a:	42a3      	cmp	r3, r4
 800603c:	6011      	str	r1, [r2, #0]
 800603e:	d1e0      	bne.n	8006002 <_free_r+0x26>
 8006040:	681c      	ldr	r4, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	6053      	str	r3, [r2, #4]
 8006046:	440c      	add	r4, r1
 8006048:	6014      	str	r4, [r2, #0]
 800604a:	e7da      	b.n	8006002 <_free_r+0x26>
 800604c:	d902      	bls.n	8006054 <_free_r+0x78>
 800604e:	230c      	movs	r3, #12
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	e7d6      	b.n	8006002 <_free_r+0x26>
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1961      	adds	r1, r4, r5
 8006058:	428b      	cmp	r3, r1
 800605a:	bf04      	itt	eq
 800605c:	6819      	ldreq	r1, [r3, #0]
 800605e:	685b      	ldreq	r3, [r3, #4]
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	bf04      	itt	eq
 8006064:	1949      	addeq	r1, r1, r5
 8006066:	6021      	streq	r1, [r4, #0]
 8006068:	6054      	str	r4, [r2, #4]
 800606a:	e7ca      	b.n	8006002 <_free_r+0x26>
 800606c:	b003      	add	sp, #12
 800606e:	bd30      	pop	{r4, r5, pc}
 8006070:	20000324 	.word	0x20000324

08006074 <sbrk_aligned>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4e0e      	ldr	r6, [pc, #56]	; (80060b0 <sbrk_aligned+0x3c>)
 8006078:	460c      	mov	r4, r1
 800607a:	6831      	ldr	r1, [r6, #0]
 800607c:	4605      	mov	r5, r0
 800607e:	b911      	cbnz	r1, 8006086 <sbrk_aligned+0x12>
 8006080:	f000 fe72 	bl	8006d68 <_sbrk_r>
 8006084:	6030      	str	r0, [r6, #0]
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 fe6d 	bl	8006d68 <_sbrk_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	d00a      	beq.n	80060a8 <sbrk_aligned+0x34>
 8006092:	1cc4      	adds	r4, r0, #3
 8006094:	f024 0403 	bic.w	r4, r4, #3
 8006098:	42a0      	cmp	r0, r4
 800609a:	d007      	beq.n	80060ac <sbrk_aligned+0x38>
 800609c:	1a21      	subs	r1, r4, r0
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 fe62 	bl	8006d68 <_sbrk_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d101      	bne.n	80060ac <sbrk_aligned+0x38>
 80060a8:	f04f 34ff 	mov.w	r4, #4294967295
 80060ac:	4620      	mov	r0, r4
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	20000328 	.word	0x20000328

080060b4 <_malloc_r>:
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b8:	1ccd      	adds	r5, r1, #3
 80060ba:	f025 0503 	bic.w	r5, r5, #3
 80060be:	3508      	adds	r5, #8
 80060c0:	2d0c      	cmp	r5, #12
 80060c2:	bf38      	it	cc
 80060c4:	250c      	movcc	r5, #12
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	4607      	mov	r7, r0
 80060ca:	db01      	blt.n	80060d0 <_malloc_r+0x1c>
 80060cc:	42a9      	cmp	r1, r5
 80060ce:	d905      	bls.n	80060dc <_malloc_r+0x28>
 80060d0:	230c      	movs	r3, #12
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	2600      	movs	r6, #0
 80060d6:	4630      	mov	r0, r6
 80060d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061b0 <_malloc_r+0xfc>
 80060e0:	f000 f868 	bl	80061b4 <__malloc_lock>
 80060e4:	f8d8 3000 	ldr.w	r3, [r8]
 80060e8:	461c      	mov	r4, r3
 80060ea:	bb5c      	cbnz	r4, 8006144 <_malloc_r+0x90>
 80060ec:	4629      	mov	r1, r5
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7ff ffc0 	bl	8006074 <sbrk_aligned>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	4604      	mov	r4, r0
 80060f8:	d155      	bne.n	80061a6 <_malloc_r+0xf2>
 80060fa:	f8d8 4000 	ldr.w	r4, [r8]
 80060fe:	4626      	mov	r6, r4
 8006100:	2e00      	cmp	r6, #0
 8006102:	d145      	bne.n	8006190 <_malloc_r+0xdc>
 8006104:	2c00      	cmp	r4, #0
 8006106:	d048      	beq.n	800619a <_malloc_r+0xe6>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	4631      	mov	r1, r6
 800610c:	4638      	mov	r0, r7
 800610e:	eb04 0903 	add.w	r9, r4, r3
 8006112:	f000 fe29 	bl	8006d68 <_sbrk_r>
 8006116:	4581      	cmp	r9, r0
 8006118:	d13f      	bne.n	800619a <_malloc_r+0xe6>
 800611a:	6821      	ldr	r1, [r4, #0]
 800611c:	1a6d      	subs	r5, r5, r1
 800611e:	4629      	mov	r1, r5
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff ffa7 	bl	8006074 <sbrk_aligned>
 8006126:	3001      	adds	r0, #1
 8006128:	d037      	beq.n	800619a <_malloc_r+0xe6>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	442b      	add	r3, r5
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	f8d8 3000 	ldr.w	r3, [r8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d038      	beq.n	80061aa <_malloc_r+0xf6>
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	42a2      	cmp	r2, r4
 800613c:	d12b      	bne.n	8006196 <_malloc_r+0xe2>
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	e00f      	b.n	8006164 <_malloc_r+0xb0>
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	1b52      	subs	r2, r2, r5
 8006148:	d41f      	bmi.n	800618a <_malloc_r+0xd6>
 800614a:	2a0b      	cmp	r2, #11
 800614c:	d917      	bls.n	800617e <_malloc_r+0xca>
 800614e:	1961      	adds	r1, r4, r5
 8006150:	42a3      	cmp	r3, r4
 8006152:	6025      	str	r5, [r4, #0]
 8006154:	bf18      	it	ne
 8006156:	6059      	strne	r1, [r3, #4]
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	bf08      	it	eq
 800615c:	f8c8 1000 	streq.w	r1, [r8]
 8006160:	5162      	str	r2, [r4, r5]
 8006162:	604b      	str	r3, [r1, #4]
 8006164:	4638      	mov	r0, r7
 8006166:	f104 060b 	add.w	r6, r4, #11
 800616a:	f000 f829 	bl	80061c0 <__malloc_unlock>
 800616e:	f026 0607 	bic.w	r6, r6, #7
 8006172:	1d23      	adds	r3, r4, #4
 8006174:	1af2      	subs	r2, r6, r3
 8006176:	d0ae      	beq.n	80060d6 <_malloc_r+0x22>
 8006178:	1b9b      	subs	r3, r3, r6
 800617a:	50a3      	str	r3, [r4, r2]
 800617c:	e7ab      	b.n	80060d6 <_malloc_r+0x22>
 800617e:	42a3      	cmp	r3, r4
 8006180:	6862      	ldr	r2, [r4, #4]
 8006182:	d1dd      	bne.n	8006140 <_malloc_r+0x8c>
 8006184:	f8c8 2000 	str.w	r2, [r8]
 8006188:	e7ec      	b.n	8006164 <_malloc_r+0xb0>
 800618a:	4623      	mov	r3, r4
 800618c:	6864      	ldr	r4, [r4, #4]
 800618e:	e7ac      	b.n	80060ea <_malloc_r+0x36>
 8006190:	4634      	mov	r4, r6
 8006192:	6876      	ldr	r6, [r6, #4]
 8006194:	e7b4      	b.n	8006100 <_malloc_r+0x4c>
 8006196:	4613      	mov	r3, r2
 8006198:	e7cc      	b.n	8006134 <_malloc_r+0x80>
 800619a:	230c      	movs	r3, #12
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4638      	mov	r0, r7
 80061a0:	f000 f80e 	bl	80061c0 <__malloc_unlock>
 80061a4:	e797      	b.n	80060d6 <_malloc_r+0x22>
 80061a6:	6025      	str	r5, [r4, #0]
 80061a8:	e7dc      	b.n	8006164 <_malloc_r+0xb0>
 80061aa:	605b      	str	r3, [r3, #4]
 80061ac:	deff      	udf	#255	; 0xff
 80061ae:	bf00      	nop
 80061b0:	20000324 	.word	0x20000324

080061b4 <__malloc_lock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__malloc_lock+0x8>)
 80061b6:	f7ff bf08 	b.w	8005fca <__retarget_lock_acquire_recursive>
 80061ba:	bf00      	nop
 80061bc:	20000320 	.word	0x20000320

080061c0 <__malloc_unlock>:
 80061c0:	4801      	ldr	r0, [pc, #4]	; (80061c8 <__malloc_unlock+0x8>)
 80061c2:	f7ff bf03 	b.w	8005fcc <__retarget_lock_release_recursive>
 80061c6:	bf00      	nop
 80061c8:	20000320 	.word	0x20000320

080061cc <__ssputs_r>:
 80061cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d0:	688e      	ldr	r6, [r1, #8]
 80061d2:	461f      	mov	r7, r3
 80061d4:	42be      	cmp	r6, r7
 80061d6:	680b      	ldr	r3, [r1, #0]
 80061d8:	4682      	mov	sl, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	4690      	mov	r8, r2
 80061de:	d82c      	bhi.n	800623a <__ssputs_r+0x6e>
 80061e0:	898a      	ldrh	r2, [r1, #12]
 80061e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061e6:	d026      	beq.n	8006236 <__ssputs_r+0x6a>
 80061e8:	6965      	ldr	r5, [r4, #20]
 80061ea:	6909      	ldr	r1, [r1, #16]
 80061ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061f0:	eba3 0901 	sub.w	r9, r3, r1
 80061f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f8:	1c7b      	adds	r3, r7, #1
 80061fa:	444b      	add	r3, r9
 80061fc:	106d      	asrs	r5, r5, #1
 80061fe:	429d      	cmp	r5, r3
 8006200:	bf38      	it	cc
 8006202:	461d      	movcc	r5, r3
 8006204:	0553      	lsls	r3, r2, #21
 8006206:	d527      	bpl.n	8006258 <__ssputs_r+0x8c>
 8006208:	4629      	mov	r1, r5
 800620a:	f7ff ff53 	bl	80060b4 <_malloc_r>
 800620e:	4606      	mov	r6, r0
 8006210:	b360      	cbz	r0, 800626c <__ssputs_r+0xa0>
 8006212:	6921      	ldr	r1, [r4, #16]
 8006214:	464a      	mov	r2, r9
 8006216:	f000 fdb7 	bl	8006d88 <memcpy>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	6126      	str	r6, [r4, #16]
 8006228:	6165      	str	r5, [r4, #20]
 800622a:	444e      	add	r6, r9
 800622c:	eba5 0509 	sub.w	r5, r5, r9
 8006230:	6026      	str	r6, [r4, #0]
 8006232:	60a5      	str	r5, [r4, #8]
 8006234:	463e      	mov	r6, r7
 8006236:	42be      	cmp	r6, r7
 8006238:	d900      	bls.n	800623c <__ssputs_r+0x70>
 800623a:	463e      	mov	r6, r7
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	4632      	mov	r2, r6
 8006240:	4641      	mov	r1, r8
 8006242:	f000 fd33 	bl	8006cac <memmove>
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	1b9b      	subs	r3, r3, r6
 800624a:	60a3      	str	r3, [r4, #8]
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	4433      	add	r3, r6
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	2000      	movs	r0, #0
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	462a      	mov	r2, r5
 800625a:	f000 fda3 	bl	8006da4 <_realloc_r>
 800625e:	4606      	mov	r6, r0
 8006260:	2800      	cmp	r0, #0
 8006262:	d1e0      	bne.n	8006226 <__ssputs_r+0x5a>
 8006264:	6921      	ldr	r1, [r4, #16]
 8006266:	4650      	mov	r0, sl
 8006268:	f7ff feb8 	bl	8005fdc <_free_r>
 800626c:	230c      	movs	r3, #12
 800626e:	f8ca 3000 	str.w	r3, [sl]
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	f04f 30ff 	mov.w	r0, #4294967295
 800627e:	e7e9      	b.n	8006254 <__ssputs_r+0x88>

08006280 <_svfiprintf_r>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	4698      	mov	r8, r3
 8006286:	898b      	ldrh	r3, [r1, #12]
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	b09d      	sub	sp, #116	; 0x74
 800628c:	4607      	mov	r7, r0
 800628e:	460d      	mov	r5, r1
 8006290:	4614      	mov	r4, r2
 8006292:	d50e      	bpl.n	80062b2 <_svfiprintf_r+0x32>
 8006294:	690b      	ldr	r3, [r1, #16]
 8006296:	b963      	cbnz	r3, 80062b2 <_svfiprintf_r+0x32>
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	f7ff ff0b 	bl	80060b4 <_malloc_r>
 800629e:	6028      	str	r0, [r5, #0]
 80062a0:	6128      	str	r0, [r5, #16]
 80062a2:	b920      	cbnz	r0, 80062ae <_svfiprintf_r+0x2e>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e0d0      	b.n	8006450 <_svfiprintf_r+0x1d0>
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	616b      	str	r3, [r5, #20]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9309      	str	r3, [sp, #36]	; 0x24
 80062b6:	2320      	movs	r3, #32
 80062b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c0:	2330      	movs	r3, #48	; 0x30
 80062c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006468 <_svfiprintf_r+0x1e8>
 80062c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ca:	f04f 0901 	mov.w	r9, #1
 80062ce:	4623      	mov	r3, r4
 80062d0:	469a      	mov	sl, r3
 80062d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d6:	b10a      	cbz	r2, 80062dc <_svfiprintf_r+0x5c>
 80062d8:	2a25      	cmp	r2, #37	; 0x25
 80062da:	d1f9      	bne.n	80062d0 <_svfiprintf_r+0x50>
 80062dc:	ebba 0b04 	subs.w	fp, sl, r4
 80062e0:	d00b      	beq.n	80062fa <_svfiprintf_r+0x7a>
 80062e2:	465b      	mov	r3, fp
 80062e4:	4622      	mov	r2, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ff6f 	bl	80061cc <__ssputs_r>
 80062ee:	3001      	adds	r0, #1
 80062f0:	f000 80a9 	beq.w	8006446 <_svfiprintf_r+0x1c6>
 80062f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f6:	445a      	add	r2, fp
 80062f8:	9209      	str	r2, [sp, #36]	; 0x24
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80a1 	beq.w	8006446 <_svfiprintf_r+0x1c6>
 8006304:	2300      	movs	r3, #0
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630e:	f10a 0a01 	add.w	sl, sl, #1
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631a:	931a      	str	r3, [sp, #104]	; 0x68
 800631c:	4654      	mov	r4, sl
 800631e:	2205      	movs	r2, #5
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	4850      	ldr	r0, [pc, #320]	; (8006468 <_svfiprintf_r+0x1e8>)
 8006326:	f7f9 ff5b 	bl	80001e0 <memchr>
 800632a:	9a04      	ldr	r2, [sp, #16]
 800632c:	b9d8      	cbnz	r0, 8006366 <_svfiprintf_r+0xe6>
 800632e:	06d0      	lsls	r0, r2, #27
 8006330:	bf44      	itt	mi
 8006332:	2320      	movmi	r3, #32
 8006334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006338:	0711      	lsls	r1, r2, #28
 800633a:	bf44      	itt	mi
 800633c:	232b      	movmi	r3, #43	; 0x2b
 800633e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b2a      	cmp	r3, #42	; 0x2a
 8006348:	d015      	beq.n	8006376 <_svfiprintf_r+0xf6>
 800634a:	9a07      	ldr	r2, [sp, #28]
 800634c:	4654      	mov	r4, sl
 800634e:	2000      	movs	r0, #0
 8006350:	f04f 0c0a 	mov.w	ip, #10
 8006354:	4621      	mov	r1, r4
 8006356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635a:	3b30      	subs	r3, #48	; 0x30
 800635c:	2b09      	cmp	r3, #9
 800635e:	d94d      	bls.n	80063fc <_svfiprintf_r+0x17c>
 8006360:	b1b0      	cbz	r0, 8006390 <_svfiprintf_r+0x110>
 8006362:	9207      	str	r2, [sp, #28]
 8006364:	e014      	b.n	8006390 <_svfiprintf_r+0x110>
 8006366:	eba0 0308 	sub.w	r3, r0, r8
 800636a:	fa09 f303 	lsl.w	r3, r9, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	9304      	str	r3, [sp, #16]
 8006372:	46a2      	mov	sl, r4
 8006374:	e7d2      	b.n	800631c <_svfiprintf_r+0x9c>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9103      	str	r1, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfbb      	ittet	lt
 8006382:	425b      	neglt	r3, r3
 8006384:	f042 0202 	orrlt.w	r2, r2, #2
 8006388:	9307      	strge	r3, [sp, #28]
 800638a:	9307      	strlt	r3, [sp, #28]
 800638c:	bfb8      	it	lt
 800638e:	9204      	strlt	r2, [sp, #16]
 8006390:	7823      	ldrb	r3, [r4, #0]
 8006392:	2b2e      	cmp	r3, #46	; 0x2e
 8006394:	d10c      	bne.n	80063b0 <_svfiprintf_r+0x130>
 8006396:	7863      	ldrb	r3, [r4, #1]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d134      	bne.n	8006406 <_svfiprintf_r+0x186>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	1d1a      	adds	r2, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9203      	str	r2, [sp, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfb8      	it	lt
 80063a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ac:	3402      	adds	r4, #2
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006478 <_svfiprintf_r+0x1f8>
 80063b4:	7821      	ldrb	r1, [r4, #0]
 80063b6:	2203      	movs	r2, #3
 80063b8:	4650      	mov	r0, sl
 80063ba:	f7f9 ff11 	bl	80001e0 <memchr>
 80063be:	b138      	cbz	r0, 80063d0 <_svfiprintf_r+0x150>
 80063c0:	9b04      	ldr	r3, [sp, #16]
 80063c2:	eba0 000a 	sub.w	r0, r0, sl
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	4082      	lsls	r2, r0
 80063ca:	4313      	orrs	r3, r2
 80063cc:	3401      	adds	r4, #1
 80063ce:	9304      	str	r3, [sp, #16]
 80063d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d4:	4825      	ldr	r0, [pc, #148]	; (800646c <_svfiprintf_r+0x1ec>)
 80063d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063da:	2206      	movs	r2, #6
 80063dc:	f7f9 ff00 	bl	80001e0 <memchr>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d038      	beq.n	8006456 <_svfiprintf_r+0x1d6>
 80063e4:	4b22      	ldr	r3, [pc, #136]	; (8006470 <_svfiprintf_r+0x1f0>)
 80063e6:	bb1b      	cbnz	r3, 8006430 <_svfiprintf_r+0x1b0>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	3307      	adds	r3, #7
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	3308      	adds	r3, #8
 80063f2:	9303      	str	r3, [sp, #12]
 80063f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f6:	4433      	add	r3, r6
 80063f8:	9309      	str	r3, [sp, #36]	; 0x24
 80063fa:	e768      	b.n	80062ce <_svfiprintf_r+0x4e>
 80063fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006400:	460c      	mov	r4, r1
 8006402:	2001      	movs	r0, #1
 8006404:	e7a6      	b.n	8006354 <_svfiprintf_r+0xd4>
 8006406:	2300      	movs	r3, #0
 8006408:	3401      	adds	r4, #1
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	4619      	mov	r1, r3
 800640e:	f04f 0c0a 	mov.w	ip, #10
 8006412:	4620      	mov	r0, r4
 8006414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006418:	3a30      	subs	r2, #48	; 0x30
 800641a:	2a09      	cmp	r2, #9
 800641c:	d903      	bls.n	8006426 <_svfiprintf_r+0x1a6>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0c6      	beq.n	80063b0 <_svfiprintf_r+0x130>
 8006422:	9105      	str	r1, [sp, #20]
 8006424:	e7c4      	b.n	80063b0 <_svfiprintf_r+0x130>
 8006426:	fb0c 2101 	mla	r1, ip, r1, r2
 800642a:	4604      	mov	r4, r0
 800642c:	2301      	movs	r3, #1
 800642e:	e7f0      	b.n	8006412 <_svfiprintf_r+0x192>
 8006430:	ab03      	add	r3, sp, #12
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	462a      	mov	r2, r5
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <_svfiprintf_r+0x1f4>)
 8006438:	a904      	add	r1, sp, #16
 800643a:	4638      	mov	r0, r7
 800643c:	f3af 8000 	nop.w
 8006440:	1c42      	adds	r2, r0, #1
 8006442:	4606      	mov	r6, r0
 8006444:	d1d6      	bne.n	80063f4 <_svfiprintf_r+0x174>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	065b      	lsls	r3, r3, #25
 800644a:	f53f af2d 	bmi.w	80062a8 <_svfiprintf_r+0x28>
 800644e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006450:	b01d      	add	sp, #116	; 0x74
 8006452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006456:	ab03      	add	r3, sp, #12
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	462a      	mov	r2, r5
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <_svfiprintf_r+0x1f4>)
 800645e:	a904      	add	r1, sp, #16
 8006460:	4638      	mov	r0, r7
 8006462:	f000 f9bd 	bl	80067e0 <_printf_i>
 8006466:	e7eb      	b.n	8006440 <_svfiprintf_r+0x1c0>
 8006468:	08007128 	.word	0x08007128
 800646c:	08007132 	.word	0x08007132
 8006470:	00000000 	.word	0x00000000
 8006474:	080061cd 	.word	0x080061cd
 8006478:	0800712e 	.word	0x0800712e

0800647c <__sfputc_r>:
 800647c:	6893      	ldr	r3, [r2, #8]
 800647e:	3b01      	subs	r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	b410      	push	{r4}
 8006484:	6093      	str	r3, [r2, #8]
 8006486:	da08      	bge.n	800649a <__sfputc_r+0x1e>
 8006488:	6994      	ldr	r4, [r2, #24]
 800648a:	42a3      	cmp	r3, r4
 800648c:	db01      	blt.n	8006492 <__sfputc_r+0x16>
 800648e:	290a      	cmp	r1, #10
 8006490:	d103      	bne.n	800649a <__sfputc_r+0x1e>
 8006492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006496:	f000 bb73 	b.w	8006b80 <__swbuf_r>
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	1c58      	adds	r0, r3, #1
 800649e:	6010      	str	r0, [r2, #0]
 80064a0:	7019      	strb	r1, [r3, #0]
 80064a2:	4608      	mov	r0, r1
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <__sfputs_r>:
 80064aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ac:	4606      	mov	r6, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	4614      	mov	r4, r2
 80064b2:	18d5      	adds	r5, r2, r3
 80064b4:	42ac      	cmp	r4, r5
 80064b6:	d101      	bne.n	80064bc <__sfputs_r+0x12>
 80064b8:	2000      	movs	r0, #0
 80064ba:	e007      	b.n	80064cc <__sfputs_r+0x22>
 80064bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c0:	463a      	mov	r2, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ffda 	bl	800647c <__sfputc_r>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d1f3      	bne.n	80064b4 <__sfputs_r+0xa>
 80064cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064d0 <_vfiprintf_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	460d      	mov	r5, r1
 80064d6:	b09d      	sub	sp, #116	; 0x74
 80064d8:	4614      	mov	r4, r2
 80064da:	4698      	mov	r8, r3
 80064dc:	4606      	mov	r6, r0
 80064de:	b118      	cbz	r0, 80064e8 <_vfiprintf_r+0x18>
 80064e0:	6a03      	ldr	r3, [r0, #32]
 80064e2:	b90b      	cbnz	r3, 80064e8 <_vfiprintf_r+0x18>
 80064e4:	f7ff fc3a 	bl	8005d5c <__sinit>
 80064e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ea:	07d9      	lsls	r1, r3, #31
 80064ec:	d405      	bmi.n	80064fa <_vfiprintf_r+0x2a>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	059a      	lsls	r2, r3, #22
 80064f2:	d402      	bmi.n	80064fa <_vfiprintf_r+0x2a>
 80064f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064f6:	f7ff fd68 	bl	8005fca <__retarget_lock_acquire_recursive>
 80064fa:	89ab      	ldrh	r3, [r5, #12]
 80064fc:	071b      	lsls	r3, r3, #28
 80064fe:	d501      	bpl.n	8006504 <_vfiprintf_r+0x34>
 8006500:	692b      	ldr	r3, [r5, #16]
 8006502:	b99b      	cbnz	r3, 800652c <_vfiprintf_r+0x5c>
 8006504:	4629      	mov	r1, r5
 8006506:	4630      	mov	r0, r6
 8006508:	f000 fb78 	bl	8006bfc <__swsetup_r>
 800650c:	b170      	cbz	r0, 800652c <_vfiprintf_r+0x5c>
 800650e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006510:	07dc      	lsls	r4, r3, #31
 8006512:	d504      	bpl.n	800651e <_vfiprintf_r+0x4e>
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	b01d      	add	sp, #116	; 0x74
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	0598      	lsls	r0, r3, #22
 8006522:	d4f7      	bmi.n	8006514 <_vfiprintf_r+0x44>
 8006524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006526:	f7ff fd51 	bl	8005fcc <__retarget_lock_release_recursive>
 800652a:	e7f3      	b.n	8006514 <_vfiprintf_r+0x44>
 800652c:	2300      	movs	r3, #0
 800652e:	9309      	str	r3, [sp, #36]	; 0x24
 8006530:	2320      	movs	r3, #32
 8006532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006536:	f8cd 800c 	str.w	r8, [sp, #12]
 800653a:	2330      	movs	r3, #48	; 0x30
 800653c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80066f0 <_vfiprintf_r+0x220>
 8006540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006544:	f04f 0901 	mov.w	r9, #1
 8006548:	4623      	mov	r3, r4
 800654a:	469a      	mov	sl, r3
 800654c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006550:	b10a      	cbz	r2, 8006556 <_vfiprintf_r+0x86>
 8006552:	2a25      	cmp	r2, #37	; 0x25
 8006554:	d1f9      	bne.n	800654a <_vfiprintf_r+0x7a>
 8006556:	ebba 0b04 	subs.w	fp, sl, r4
 800655a:	d00b      	beq.n	8006574 <_vfiprintf_r+0xa4>
 800655c:	465b      	mov	r3, fp
 800655e:	4622      	mov	r2, r4
 8006560:	4629      	mov	r1, r5
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff ffa1 	bl	80064aa <__sfputs_r>
 8006568:	3001      	adds	r0, #1
 800656a:	f000 80a9 	beq.w	80066c0 <_vfiprintf_r+0x1f0>
 800656e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006570:	445a      	add	r2, fp
 8006572:	9209      	str	r2, [sp, #36]	; 0x24
 8006574:	f89a 3000 	ldrb.w	r3, [sl]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80a1 	beq.w	80066c0 <_vfiprintf_r+0x1f0>
 800657e:	2300      	movs	r3, #0
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006588:	f10a 0a01 	add.w	sl, sl, #1
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	9307      	str	r3, [sp, #28]
 8006590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006594:	931a      	str	r3, [sp, #104]	; 0x68
 8006596:	4654      	mov	r4, sl
 8006598:	2205      	movs	r2, #5
 800659a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659e:	4854      	ldr	r0, [pc, #336]	; (80066f0 <_vfiprintf_r+0x220>)
 80065a0:	f7f9 fe1e 	bl	80001e0 <memchr>
 80065a4:	9a04      	ldr	r2, [sp, #16]
 80065a6:	b9d8      	cbnz	r0, 80065e0 <_vfiprintf_r+0x110>
 80065a8:	06d1      	lsls	r1, r2, #27
 80065aa:	bf44      	itt	mi
 80065ac:	2320      	movmi	r3, #32
 80065ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b2:	0713      	lsls	r3, r2, #28
 80065b4:	bf44      	itt	mi
 80065b6:	232b      	movmi	r3, #43	; 0x2b
 80065b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065bc:	f89a 3000 	ldrb.w	r3, [sl]
 80065c0:	2b2a      	cmp	r3, #42	; 0x2a
 80065c2:	d015      	beq.n	80065f0 <_vfiprintf_r+0x120>
 80065c4:	9a07      	ldr	r2, [sp, #28]
 80065c6:	4654      	mov	r4, sl
 80065c8:	2000      	movs	r0, #0
 80065ca:	f04f 0c0a 	mov.w	ip, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d4:	3b30      	subs	r3, #48	; 0x30
 80065d6:	2b09      	cmp	r3, #9
 80065d8:	d94d      	bls.n	8006676 <_vfiprintf_r+0x1a6>
 80065da:	b1b0      	cbz	r0, 800660a <_vfiprintf_r+0x13a>
 80065dc:	9207      	str	r2, [sp, #28]
 80065de:	e014      	b.n	800660a <_vfiprintf_r+0x13a>
 80065e0:	eba0 0308 	sub.w	r3, r0, r8
 80065e4:	fa09 f303 	lsl.w	r3, r9, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	46a2      	mov	sl, r4
 80065ee:	e7d2      	b.n	8006596 <_vfiprintf_r+0xc6>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	1d19      	adds	r1, r3, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	9103      	str	r1, [sp, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfbb      	ittet	lt
 80065fc:	425b      	neglt	r3, r3
 80065fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006602:	9307      	strge	r3, [sp, #28]
 8006604:	9307      	strlt	r3, [sp, #28]
 8006606:	bfb8      	it	lt
 8006608:	9204      	strlt	r2, [sp, #16]
 800660a:	7823      	ldrb	r3, [r4, #0]
 800660c:	2b2e      	cmp	r3, #46	; 0x2e
 800660e:	d10c      	bne.n	800662a <_vfiprintf_r+0x15a>
 8006610:	7863      	ldrb	r3, [r4, #1]
 8006612:	2b2a      	cmp	r3, #42	; 0x2a
 8006614:	d134      	bne.n	8006680 <_vfiprintf_r+0x1b0>
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	1d1a      	adds	r2, r3, #4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	9203      	str	r2, [sp, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	bfb8      	it	lt
 8006622:	f04f 33ff 	movlt.w	r3, #4294967295
 8006626:	3402      	adds	r4, #2
 8006628:	9305      	str	r3, [sp, #20]
 800662a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006700 <_vfiprintf_r+0x230>
 800662e:	7821      	ldrb	r1, [r4, #0]
 8006630:	2203      	movs	r2, #3
 8006632:	4650      	mov	r0, sl
 8006634:	f7f9 fdd4 	bl	80001e0 <memchr>
 8006638:	b138      	cbz	r0, 800664a <_vfiprintf_r+0x17a>
 800663a:	9b04      	ldr	r3, [sp, #16]
 800663c:	eba0 000a 	sub.w	r0, r0, sl
 8006640:	2240      	movs	r2, #64	; 0x40
 8006642:	4082      	lsls	r2, r0
 8006644:	4313      	orrs	r3, r2
 8006646:	3401      	adds	r4, #1
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664e:	4829      	ldr	r0, [pc, #164]	; (80066f4 <_vfiprintf_r+0x224>)
 8006650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006654:	2206      	movs	r2, #6
 8006656:	f7f9 fdc3 	bl	80001e0 <memchr>
 800665a:	2800      	cmp	r0, #0
 800665c:	d03f      	beq.n	80066de <_vfiprintf_r+0x20e>
 800665e:	4b26      	ldr	r3, [pc, #152]	; (80066f8 <_vfiprintf_r+0x228>)
 8006660:	bb1b      	cbnz	r3, 80066aa <_vfiprintf_r+0x1da>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	3307      	adds	r3, #7
 8006666:	f023 0307 	bic.w	r3, r3, #7
 800666a:	3308      	adds	r3, #8
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006670:	443b      	add	r3, r7
 8006672:	9309      	str	r3, [sp, #36]	; 0x24
 8006674:	e768      	b.n	8006548 <_vfiprintf_r+0x78>
 8006676:	fb0c 3202 	mla	r2, ip, r2, r3
 800667a:	460c      	mov	r4, r1
 800667c:	2001      	movs	r0, #1
 800667e:	e7a6      	b.n	80065ce <_vfiprintf_r+0xfe>
 8006680:	2300      	movs	r3, #0
 8006682:	3401      	adds	r4, #1
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	4619      	mov	r1, r3
 8006688:	f04f 0c0a 	mov.w	ip, #10
 800668c:	4620      	mov	r0, r4
 800668e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006692:	3a30      	subs	r2, #48	; 0x30
 8006694:	2a09      	cmp	r2, #9
 8006696:	d903      	bls.n	80066a0 <_vfiprintf_r+0x1d0>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0c6      	beq.n	800662a <_vfiprintf_r+0x15a>
 800669c:	9105      	str	r1, [sp, #20]
 800669e:	e7c4      	b.n	800662a <_vfiprintf_r+0x15a>
 80066a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066a4:	4604      	mov	r4, r0
 80066a6:	2301      	movs	r3, #1
 80066a8:	e7f0      	b.n	800668c <_vfiprintf_r+0x1bc>
 80066aa:	ab03      	add	r3, sp, #12
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	462a      	mov	r2, r5
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <_vfiprintf_r+0x22c>)
 80066b2:	a904      	add	r1, sp, #16
 80066b4:	4630      	mov	r0, r6
 80066b6:	f3af 8000 	nop.w
 80066ba:	4607      	mov	r7, r0
 80066bc:	1c78      	adds	r0, r7, #1
 80066be:	d1d6      	bne.n	800666e <_vfiprintf_r+0x19e>
 80066c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c2:	07d9      	lsls	r1, r3, #31
 80066c4:	d405      	bmi.n	80066d2 <_vfiprintf_r+0x202>
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	059a      	lsls	r2, r3, #22
 80066ca:	d402      	bmi.n	80066d2 <_vfiprintf_r+0x202>
 80066cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ce:	f7ff fc7d 	bl	8005fcc <__retarget_lock_release_recursive>
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	065b      	lsls	r3, r3, #25
 80066d6:	f53f af1d 	bmi.w	8006514 <_vfiprintf_r+0x44>
 80066da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066dc:	e71c      	b.n	8006518 <_vfiprintf_r+0x48>
 80066de:	ab03      	add	r3, sp, #12
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	462a      	mov	r2, r5
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <_vfiprintf_r+0x22c>)
 80066e6:	a904      	add	r1, sp, #16
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f879 	bl	80067e0 <_printf_i>
 80066ee:	e7e4      	b.n	80066ba <_vfiprintf_r+0x1ea>
 80066f0:	08007128 	.word	0x08007128
 80066f4:	08007132 	.word	0x08007132
 80066f8:	00000000 	.word	0x00000000
 80066fc:	080064ab 	.word	0x080064ab
 8006700:	0800712e 	.word	0x0800712e

08006704 <_printf_common>:
 8006704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	4616      	mov	r6, r2
 800670a:	4699      	mov	r9, r3
 800670c:	688a      	ldr	r2, [r1, #8]
 800670e:	690b      	ldr	r3, [r1, #16]
 8006710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006714:	4293      	cmp	r3, r2
 8006716:	bfb8      	it	lt
 8006718:	4613      	movlt	r3, r2
 800671a:	6033      	str	r3, [r6, #0]
 800671c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006720:	4607      	mov	r7, r0
 8006722:	460c      	mov	r4, r1
 8006724:	b10a      	cbz	r2, 800672a <_printf_common+0x26>
 8006726:	3301      	adds	r3, #1
 8006728:	6033      	str	r3, [r6, #0]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	0699      	lsls	r1, r3, #26
 800672e:	bf42      	ittt	mi
 8006730:	6833      	ldrmi	r3, [r6, #0]
 8006732:	3302      	addmi	r3, #2
 8006734:	6033      	strmi	r3, [r6, #0]
 8006736:	6825      	ldr	r5, [r4, #0]
 8006738:	f015 0506 	ands.w	r5, r5, #6
 800673c:	d106      	bne.n	800674c <_printf_common+0x48>
 800673e:	f104 0a19 	add.w	sl, r4, #25
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	6832      	ldr	r2, [r6, #0]
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	42ab      	cmp	r3, r5
 800674a:	dc26      	bgt.n	800679a <_printf_common+0x96>
 800674c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006750:	1e13      	subs	r3, r2, #0
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	bf18      	it	ne
 8006756:	2301      	movne	r3, #1
 8006758:	0692      	lsls	r2, r2, #26
 800675a:	d42b      	bmi.n	80067b4 <_printf_common+0xb0>
 800675c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006760:	4649      	mov	r1, r9
 8006762:	4638      	mov	r0, r7
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d01e      	beq.n	80067a8 <_printf_common+0xa4>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	6922      	ldr	r2, [r4, #16]
 800676e:	f003 0306 	and.w	r3, r3, #6
 8006772:	2b04      	cmp	r3, #4
 8006774:	bf02      	ittt	eq
 8006776:	68e5      	ldreq	r5, [r4, #12]
 8006778:	6833      	ldreq	r3, [r6, #0]
 800677a:	1aed      	subeq	r5, r5, r3
 800677c:	68a3      	ldr	r3, [r4, #8]
 800677e:	bf0c      	ite	eq
 8006780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006784:	2500      	movne	r5, #0
 8006786:	4293      	cmp	r3, r2
 8006788:	bfc4      	itt	gt
 800678a:	1a9b      	subgt	r3, r3, r2
 800678c:	18ed      	addgt	r5, r5, r3
 800678e:	2600      	movs	r6, #0
 8006790:	341a      	adds	r4, #26
 8006792:	42b5      	cmp	r5, r6
 8006794:	d11a      	bne.n	80067cc <_printf_common+0xc8>
 8006796:	2000      	movs	r0, #0
 8006798:	e008      	b.n	80067ac <_printf_common+0xa8>
 800679a:	2301      	movs	r3, #1
 800679c:	4652      	mov	r2, sl
 800679e:	4649      	mov	r1, r9
 80067a0:	4638      	mov	r0, r7
 80067a2:	47c0      	blx	r8
 80067a4:	3001      	adds	r0, #1
 80067a6:	d103      	bne.n	80067b0 <_printf_common+0xac>
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b0:	3501      	adds	r5, #1
 80067b2:	e7c6      	b.n	8006742 <_printf_common+0x3e>
 80067b4:	18e1      	adds	r1, r4, r3
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	2030      	movs	r0, #48	; 0x30
 80067ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067be:	4422      	add	r2, r4
 80067c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c8:	3302      	adds	r3, #2
 80067ca:	e7c7      	b.n	800675c <_printf_common+0x58>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4622      	mov	r2, r4
 80067d0:	4649      	mov	r1, r9
 80067d2:	4638      	mov	r0, r7
 80067d4:	47c0      	blx	r8
 80067d6:	3001      	adds	r0, #1
 80067d8:	d0e6      	beq.n	80067a8 <_printf_common+0xa4>
 80067da:	3601      	adds	r6, #1
 80067dc:	e7d9      	b.n	8006792 <_printf_common+0x8e>
	...

080067e0 <_printf_i>:
 80067e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	7e0f      	ldrb	r7, [r1, #24]
 80067e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e8:	2f78      	cmp	r7, #120	; 0x78
 80067ea:	4691      	mov	r9, r2
 80067ec:	4680      	mov	r8, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	469a      	mov	sl, r3
 80067f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067f6:	d807      	bhi.n	8006808 <_printf_i+0x28>
 80067f8:	2f62      	cmp	r7, #98	; 0x62
 80067fa:	d80a      	bhi.n	8006812 <_printf_i+0x32>
 80067fc:	2f00      	cmp	r7, #0
 80067fe:	f000 80d4 	beq.w	80069aa <_printf_i+0x1ca>
 8006802:	2f58      	cmp	r7, #88	; 0x58
 8006804:	f000 80c0 	beq.w	8006988 <_printf_i+0x1a8>
 8006808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800680c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006810:	e03a      	b.n	8006888 <_printf_i+0xa8>
 8006812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006816:	2b15      	cmp	r3, #21
 8006818:	d8f6      	bhi.n	8006808 <_printf_i+0x28>
 800681a:	a101      	add	r1, pc, #4	; (adr r1, 8006820 <_printf_i+0x40>)
 800681c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006820:	08006879 	.word	0x08006879
 8006824:	0800688d 	.word	0x0800688d
 8006828:	08006809 	.word	0x08006809
 800682c:	08006809 	.word	0x08006809
 8006830:	08006809 	.word	0x08006809
 8006834:	08006809 	.word	0x08006809
 8006838:	0800688d 	.word	0x0800688d
 800683c:	08006809 	.word	0x08006809
 8006840:	08006809 	.word	0x08006809
 8006844:	08006809 	.word	0x08006809
 8006848:	08006809 	.word	0x08006809
 800684c:	08006991 	.word	0x08006991
 8006850:	080068b9 	.word	0x080068b9
 8006854:	0800694b 	.word	0x0800694b
 8006858:	08006809 	.word	0x08006809
 800685c:	08006809 	.word	0x08006809
 8006860:	080069b3 	.word	0x080069b3
 8006864:	08006809 	.word	0x08006809
 8006868:	080068b9 	.word	0x080068b9
 800686c:	08006809 	.word	0x08006809
 8006870:	08006809 	.word	0x08006809
 8006874:	08006953 	.word	0x08006953
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	1d1a      	adds	r2, r3, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	602a      	str	r2, [r5, #0]
 8006880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006888:	2301      	movs	r3, #1
 800688a:	e09f      	b.n	80069cc <_printf_i+0x1ec>
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	682b      	ldr	r3, [r5, #0]
 8006890:	0607      	lsls	r7, r0, #24
 8006892:	f103 0104 	add.w	r1, r3, #4
 8006896:	6029      	str	r1, [r5, #0]
 8006898:	d501      	bpl.n	800689e <_printf_i+0xbe>
 800689a:	681e      	ldr	r6, [r3, #0]
 800689c:	e003      	b.n	80068a6 <_printf_i+0xc6>
 800689e:	0646      	lsls	r6, r0, #25
 80068a0:	d5fb      	bpl.n	800689a <_printf_i+0xba>
 80068a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	da03      	bge.n	80068b2 <_printf_i+0xd2>
 80068aa:	232d      	movs	r3, #45	; 0x2d
 80068ac:	4276      	negs	r6, r6
 80068ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b2:	485a      	ldr	r0, [pc, #360]	; (8006a1c <_printf_i+0x23c>)
 80068b4:	230a      	movs	r3, #10
 80068b6:	e012      	b.n	80068de <_printf_i+0xfe>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	6029      	str	r1, [r5, #0]
 80068c0:	0605      	lsls	r5, r0, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0xe8>
 80068c4:	681e      	ldr	r6, [r3, #0]
 80068c6:	e002      	b.n	80068ce <_printf_i+0xee>
 80068c8:	0641      	lsls	r1, r0, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0xe4>
 80068cc:	881e      	ldrh	r6, [r3, #0]
 80068ce:	4853      	ldr	r0, [pc, #332]	; (8006a1c <_printf_i+0x23c>)
 80068d0:	2f6f      	cmp	r7, #111	; 0x6f
 80068d2:	bf0c      	ite	eq
 80068d4:	2308      	moveq	r3, #8
 80068d6:	230a      	movne	r3, #10
 80068d8:	2100      	movs	r1, #0
 80068da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068de:	6865      	ldr	r5, [r4, #4]
 80068e0:	60a5      	str	r5, [r4, #8]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	bfa2      	ittt	ge
 80068e6:	6821      	ldrge	r1, [r4, #0]
 80068e8:	f021 0104 	bicge.w	r1, r1, #4
 80068ec:	6021      	strge	r1, [r4, #0]
 80068ee:	b90e      	cbnz	r6, 80068f4 <_printf_i+0x114>
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	d04b      	beq.n	800698c <_printf_i+0x1ac>
 80068f4:	4615      	mov	r5, r2
 80068f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068fa:	fb03 6711 	mls	r7, r3, r1, r6
 80068fe:	5dc7      	ldrb	r7, [r0, r7]
 8006900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006904:	4637      	mov	r7, r6
 8006906:	42bb      	cmp	r3, r7
 8006908:	460e      	mov	r6, r1
 800690a:	d9f4      	bls.n	80068f6 <_printf_i+0x116>
 800690c:	2b08      	cmp	r3, #8
 800690e:	d10b      	bne.n	8006928 <_printf_i+0x148>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07de      	lsls	r6, r3, #31
 8006914:	d508      	bpl.n	8006928 <_printf_i+0x148>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	4299      	cmp	r1, r3
 800691c:	bfde      	ittt	le
 800691e:	2330      	movle	r3, #48	; 0x30
 8006920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006924:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006928:	1b52      	subs	r2, r2, r5
 800692a:	6122      	str	r2, [r4, #16]
 800692c:	f8cd a000 	str.w	sl, [sp]
 8006930:	464b      	mov	r3, r9
 8006932:	aa03      	add	r2, sp, #12
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff fee4 	bl	8006704 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	d14a      	bne.n	80069d6 <_printf_i+0x1f6>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b004      	add	sp, #16
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	f043 0320 	orr.w	r3, r3, #32
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	4833      	ldr	r0, [pc, #204]	; (8006a20 <_printf_i+0x240>)
 8006954:	2778      	movs	r7, #120	; 0x78
 8006956:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6829      	ldr	r1, [r5, #0]
 800695e:	061f      	lsls	r7, r3, #24
 8006960:	f851 6b04 	ldr.w	r6, [r1], #4
 8006964:	d402      	bmi.n	800696c <_printf_i+0x18c>
 8006966:	065f      	lsls	r7, r3, #25
 8006968:	bf48      	it	mi
 800696a:	b2b6      	uxthmi	r6, r6
 800696c:	07df      	lsls	r7, r3, #31
 800696e:	bf48      	it	mi
 8006970:	f043 0320 	orrmi.w	r3, r3, #32
 8006974:	6029      	str	r1, [r5, #0]
 8006976:	bf48      	it	mi
 8006978:	6023      	strmi	r3, [r4, #0]
 800697a:	b91e      	cbnz	r6, 8006984 <_printf_i+0x1a4>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	f023 0320 	bic.w	r3, r3, #32
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	2310      	movs	r3, #16
 8006986:	e7a7      	b.n	80068d8 <_printf_i+0xf8>
 8006988:	4824      	ldr	r0, [pc, #144]	; (8006a1c <_printf_i+0x23c>)
 800698a:	e7e4      	b.n	8006956 <_printf_i+0x176>
 800698c:	4615      	mov	r5, r2
 800698e:	e7bd      	b.n	800690c <_printf_i+0x12c>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	6826      	ldr	r6, [r4, #0]
 8006994:	6961      	ldr	r1, [r4, #20]
 8006996:	1d18      	adds	r0, r3, #4
 8006998:	6028      	str	r0, [r5, #0]
 800699a:	0635      	lsls	r5, r6, #24
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0x1c4>
 80069a0:	6019      	str	r1, [r3, #0]
 80069a2:	e002      	b.n	80069aa <_printf_i+0x1ca>
 80069a4:	0670      	lsls	r0, r6, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0x1c0>
 80069a8:	8019      	strh	r1, [r3, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	4615      	mov	r5, r2
 80069b0:	e7bc      	b.n	800692c <_printf_i+0x14c>
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	602a      	str	r2, [r5, #0]
 80069b8:	681d      	ldr	r5, [r3, #0]
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	2100      	movs	r1, #0
 80069be:	4628      	mov	r0, r5
 80069c0:	f7f9 fc0e 	bl	80001e0 <memchr>
 80069c4:	b108      	cbz	r0, 80069ca <_printf_i+0x1ea>
 80069c6:	1b40      	subs	r0, r0, r5
 80069c8:	6060      	str	r0, [r4, #4]
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	2300      	movs	r3, #0
 80069d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d4:	e7aa      	b.n	800692c <_printf_i+0x14c>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	462a      	mov	r2, r5
 80069da:	4649      	mov	r1, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	47d0      	blx	sl
 80069e0:	3001      	adds	r0, #1
 80069e2:	d0ad      	beq.n	8006940 <_printf_i+0x160>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	079b      	lsls	r3, r3, #30
 80069e8:	d413      	bmi.n	8006a12 <_printf_i+0x232>
 80069ea:	68e0      	ldr	r0, [r4, #12]
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	4298      	cmp	r0, r3
 80069f0:	bfb8      	it	lt
 80069f2:	4618      	movlt	r0, r3
 80069f4:	e7a6      	b.n	8006944 <_printf_i+0x164>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4632      	mov	r2, r6
 80069fa:	4649      	mov	r1, r9
 80069fc:	4640      	mov	r0, r8
 80069fe:	47d0      	blx	sl
 8006a00:	3001      	adds	r0, #1
 8006a02:	d09d      	beq.n	8006940 <_printf_i+0x160>
 8006a04:	3501      	adds	r5, #1
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	9903      	ldr	r1, [sp, #12]
 8006a0a:	1a5b      	subs	r3, r3, r1
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dcf2      	bgt.n	80069f6 <_printf_i+0x216>
 8006a10:	e7eb      	b.n	80069ea <_printf_i+0x20a>
 8006a12:	2500      	movs	r5, #0
 8006a14:	f104 0619 	add.w	r6, r4, #25
 8006a18:	e7f5      	b.n	8006a06 <_printf_i+0x226>
 8006a1a:	bf00      	nop
 8006a1c:	08007139 	.word	0x08007139
 8006a20:	0800714a 	.word	0x0800714a

08006a24 <__sflush_r>:
 8006a24:	898a      	ldrh	r2, [r1, #12]
 8006a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	0710      	lsls	r0, r2, #28
 8006a2e:	460c      	mov	r4, r1
 8006a30:	d458      	bmi.n	8006ae4 <__sflush_r+0xc0>
 8006a32:	684b      	ldr	r3, [r1, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dc05      	bgt.n	8006a44 <__sflush_r+0x20>
 8006a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dc02      	bgt.n	8006a44 <__sflush_r+0x20>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	d0f9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a50:	682f      	ldr	r7, [r5, #0]
 8006a52:	6a21      	ldr	r1, [r4, #32]
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	d032      	beq.n	8006abe <__sflush_r+0x9a>
 8006a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	075a      	lsls	r2, r3, #29
 8006a5e:	d505      	bpl.n	8006a6c <__sflush_r+0x48>
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	1ac0      	subs	r0, r0, r3
 8006a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a66:	b10b      	cbz	r3, 8006a6c <__sflush_r+0x48>
 8006a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a6a:	1ac0      	subs	r0, r0, r3
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a72:	6a21      	ldr	r1, [r4, #32]
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b0      	blx	r6
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	d106      	bne.n	8006a8c <__sflush_r+0x68>
 8006a7e:	6829      	ldr	r1, [r5, #0]
 8006a80:	291d      	cmp	r1, #29
 8006a82:	d82b      	bhi.n	8006adc <__sflush_r+0xb8>
 8006a84:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <__sflush_r+0x108>)
 8006a86:	410a      	asrs	r2, r1
 8006a88:	07d6      	lsls	r6, r2, #31
 8006a8a:	d427      	bmi.n	8006adc <__sflush_r+0xb8>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	6062      	str	r2, [r4, #4]
 8006a90:	04d9      	lsls	r1, r3, #19
 8006a92:	6922      	ldr	r2, [r4, #16]
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	d504      	bpl.n	8006aa2 <__sflush_r+0x7e>
 8006a98:	1c42      	adds	r2, r0, #1
 8006a9a:	d101      	bne.n	8006aa0 <__sflush_r+0x7c>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b903      	cbnz	r3, 8006aa2 <__sflush_r+0x7e>
 8006aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8006aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa4:	602f      	str	r7, [r5, #0]
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	d0c9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d002      	beq.n	8006ab8 <__sflush_r+0x94>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7ff fa92 	bl	8005fdc <_free_r>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	6360      	str	r0, [r4, #52]	; 0x34
 8006abc:	e7c0      	b.n	8006a40 <__sflush_r+0x1c>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b0      	blx	r6
 8006ac4:	1c41      	adds	r1, r0, #1
 8006ac6:	d1c8      	bne.n	8006a5a <__sflush_r+0x36>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c5      	beq.n	8006a5a <__sflush_r+0x36>
 8006ace:	2b1d      	cmp	r3, #29
 8006ad0:	d001      	beq.n	8006ad6 <__sflush_r+0xb2>
 8006ad2:	2b16      	cmp	r3, #22
 8006ad4:	d101      	bne.n	8006ada <__sflush_r+0xb6>
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	e7b1      	b.n	8006a3e <__sflush_r+0x1a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	e7ad      	b.n	8006a40 <__sflush_r+0x1c>
 8006ae4:	690f      	ldr	r7, [r1, #16]
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	d0a9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006aea:	0793      	lsls	r3, r2, #30
 8006aec:	680e      	ldr	r6, [r1, #0]
 8006aee:	bf08      	it	eq
 8006af0:	694b      	ldreq	r3, [r1, #20]
 8006af2:	600f      	str	r7, [r1, #0]
 8006af4:	bf18      	it	ne
 8006af6:	2300      	movne	r3, #0
 8006af8:	eba6 0807 	sub.w	r8, r6, r7
 8006afc:	608b      	str	r3, [r1, #8]
 8006afe:	f1b8 0f00 	cmp.w	r8, #0
 8006b02:	dd9c      	ble.n	8006a3e <__sflush_r+0x1a>
 8006b04:	6a21      	ldr	r1, [r4, #32]
 8006b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b08:	4643      	mov	r3, r8
 8006b0a:	463a      	mov	r2, r7
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b0      	blx	r6
 8006b10:	2800      	cmp	r0, #0
 8006b12:	dc06      	bgt.n	8006b22 <__sflush_r+0xfe>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e78e      	b.n	8006a40 <__sflush_r+0x1c>
 8006b22:	4407      	add	r7, r0
 8006b24:	eba8 0800 	sub.w	r8, r8, r0
 8006b28:	e7e9      	b.n	8006afe <__sflush_r+0xda>
 8006b2a:	bf00      	nop
 8006b2c:	dfbffffe 	.word	0xdfbffffe

08006b30 <_fflush_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	4605      	mov	r5, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b913      	cbnz	r3, 8006b40 <_fflush_r+0x10>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	b118      	cbz	r0, 8006b4a <_fflush_r+0x1a>
 8006b42:	6a03      	ldr	r3, [r0, #32]
 8006b44:	b90b      	cbnz	r3, 8006b4a <_fflush_r+0x1a>
 8006b46:	f7ff f909 	bl	8005d5c <__sinit>
 8006b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f3      	beq.n	8006b3a <_fflush_r+0xa>
 8006b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b54:	07d0      	lsls	r0, r2, #31
 8006b56:	d404      	bmi.n	8006b62 <_fflush_r+0x32>
 8006b58:	0599      	lsls	r1, r3, #22
 8006b5a:	d402      	bmi.n	8006b62 <_fflush_r+0x32>
 8006b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5e:	f7ff fa34 	bl	8005fca <__retarget_lock_acquire_recursive>
 8006b62:	4628      	mov	r0, r5
 8006b64:	4621      	mov	r1, r4
 8006b66:	f7ff ff5d 	bl	8006a24 <__sflush_r>
 8006b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6c:	07da      	lsls	r2, r3, #31
 8006b6e:	4605      	mov	r5, r0
 8006b70:	d4e4      	bmi.n	8006b3c <_fflush_r+0xc>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	059b      	lsls	r3, r3, #22
 8006b76:	d4e1      	bmi.n	8006b3c <_fflush_r+0xc>
 8006b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7a:	f7ff fa27 	bl	8005fcc <__retarget_lock_release_recursive>
 8006b7e:	e7dd      	b.n	8006b3c <_fflush_r+0xc>

08006b80 <__swbuf_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	4605      	mov	r5, r0
 8006b88:	b118      	cbz	r0, 8006b92 <__swbuf_r+0x12>
 8006b8a:	6a03      	ldr	r3, [r0, #32]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <__swbuf_r+0x12>
 8006b8e:	f7ff f8e5 	bl	8005d5c <__sinit>
 8006b92:	69a3      	ldr	r3, [r4, #24]
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	071a      	lsls	r2, r3, #28
 8006b9a:	d525      	bpl.n	8006be8 <__swbuf_r+0x68>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	b31b      	cbz	r3, 8006be8 <__swbuf_r+0x68>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	1a98      	subs	r0, r3, r2
 8006ba6:	6963      	ldr	r3, [r4, #20]
 8006ba8:	b2f6      	uxtb	r6, r6
 8006baa:	4283      	cmp	r3, r0
 8006bac:	4637      	mov	r7, r6
 8006bae:	dc04      	bgt.n	8006bba <__swbuf_r+0x3a>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f7ff ffbc 	bl	8006b30 <_fflush_r>
 8006bb8:	b9e0      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	701e      	strb	r6, [r3, #0]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x5a>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d506      	bpl.n	8006be4 <__swbuf_r+0x64>
 8006bd6:	2e0a      	cmp	r6, #10
 8006bd8:	d104      	bne.n	8006be4 <__swbuf_r+0x64>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7ff ffa7 	bl	8006b30 <_fflush_r>
 8006be2:	b938      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006be4:	4638      	mov	r0, r7
 8006be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f806 	bl	8006bfc <__swsetup_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0d5      	beq.n	8006ba0 <__swbuf_r+0x20>
 8006bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf8:	e7f4      	b.n	8006be4 <__swbuf_r+0x64>
	...

08006bfc <__swsetup_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <__swsetup_r+0xac>)
 8006c00:	4605      	mov	r5, r0
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	460c      	mov	r4, r1
 8006c06:	b118      	cbz	r0, 8006c10 <__swsetup_r+0x14>
 8006c08:	6a03      	ldr	r3, [r0, #32]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <__swsetup_r+0x14>
 8006c0c:	f7ff f8a6 	bl	8005d5c <__sinit>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c16:	0718      	lsls	r0, r3, #28
 8006c18:	d422      	bmi.n	8006c60 <__swsetup_r+0x64>
 8006c1a:	06d9      	lsls	r1, r3, #27
 8006c1c:	d407      	bmi.n	8006c2e <__swsetup_r+0x32>
 8006c1e:	2309      	movs	r3, #9
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	e034      	b.n	8006c98 <__swsetup_r+0x9c>
 8006c2e:	0758      	lsls	r0, r3, #29
 8006c30:	d512      	bpl.n	8006c58 <__swsetup_r+0x5c>
 8006c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c34:	b141      	cbz	r1, 8006c48 <__swsetup_r+0x4c>
 8006c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <__swsetup_r+0x48>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7ff f9cc 	bl	8005fdc <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6363      	str	r3, [r4, #52]	; 0x34
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	2300      	movs	r3, #0
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f043 0308 	orr.w	r3, r3, #8
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b94b      	cbnz	r3, 8006c78 <__swsetup_r+0x7c>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d003      	beq.n	8006c78 <__swsetup_r+0x7c>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f8eb 	bl	8006e4e <__smakebuf_r>
 8006c78:	89a0      	ldrh	r0, [r4, #12]
 8006c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7e:	f010 0301 	ands.w	r3, r0, #1
 8006c82:	d00a      	beq.n	8006c9a <__swsetup_r+0x9e>
 8006c84:	2300      	movs	r3, #0
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	61a3      	str	r3, [r4, #24]
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b943      	cbnz	r3, 8006ca4 <__swsetup_r+0xa8>
 8006c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c96:	d1c4      	bne.n	8006c22 <__swsetup_r+0x26>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	0781      	lsls	r1, r0, #30
 8006c9c:	bf58      	it	pl
 8006c9e:	6963      	ldrpl	r3, [r4, #20]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	e7f4      	b.n	8006c8e <__swsetup_r+0x92>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7f7      	b.n	8006c98 <__swsetup_r+0x9c>
 8006ca8:	2000006c 	.word	0x2000006c

08006cac <memmove>:
 8006cac:	4288      	cmp	r0, r1
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	eb01 0402 	add.w	r4, r1, r2
 8006cb4:	d902      	bls.n	8006cbc <memmove+0x10>
 8006cb6:	4284      	cmp	r4, r0
 8006cb8:	4623      	mov	r3, r4
 8006cba:	d807      	bhi.n	8006ccc <memmove+0x20>
 8006cbc:	1e43      	subs	r3, r0, #1
 8006cbe:	42a1      	cmp	r1, r4
 8006cc0:	d008      	beq.n	8006cd4 <memmove+0x28>
 8006cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cca:	e7f8      	b.n	8006cbe <memmove+0x12>
 8006ccc:	4402      	add	r2, r0
 8006cce:	4601      	mov	r1, r0
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	d100      	bne.n	8006cd6 <memmove+0x2a>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cde:	e7f7      	b.n	8006cd0 <memmove+0x24>

08006ce0 <_raise_r>:
 8006ce0:	291f      	cmp	r1, #31
 8006ce2:	b538      	push	{r3, r4, r5, lr}
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	460d      	mov	r5, r1
 8006ce8:	d904      	bls.n	8006cf4 <_raise_r+0x14>
 8006cea:	2316      	movs	r3, #22
 8006cec:	6003      	str	r3, [r0, #0]
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006cf6:	b112      	cbz	r2, 8006cfe <_raise_r+0x1e>
 8006cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cfc:	b94b      	cbnz	r3, 8006d12 <_raise_r+0x32>
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 f830 	bl	8006d64 <_getpid_r>
 8006d04:	462a      	mov	r2, r5
 8006d06:	4601      	mov	r1, r0
 8006d08:	4620      	mov	r0, r4
 8006d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d0e:	f000 b817 	b.w	8006d40 <_kill_r>
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d00a      	beq.n	8006d2c <_raise_r+0x4c>
 8006d16:	1c59      	adds	r1, r3, #1
 8006d18:	d103      	bne.n	8006d22 <_raise_r+0x42>
 8006d1a:	2316      	movs	r3, #22
 8006d1c:	6003      	str	r3, [r0, #0]
 8006d1e:	2001      	movs	r0, #1
 8006d20:	e7e7      	b.n	8006cf2 <_raise_r+0x12>
 8006d22:	2400      	movs	r4, #0
 8006d24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d28:	4628      	mov	r0, r5
 8006d2a:	4798      	blx	r3
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e7e0      	b.n	8006cf2 <_raise_r+0x12>

08006d30 <raise>:
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <raise+0xc>)
 8006d32:	4601      	mov	r1, r0
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f7ff bfd3 	b.w	8006ce0 <_raise_r>
 8006d3a:	bf00      	nop
 8006d3c:	2000006c 	.word	0x2000006c

08006d40 <_kill_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	; (8006d60 <_kill_r+0x20>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	f7fa fa15 	bl	800117c <_kill>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d102      	bne.n	8006d5c <_kill_r+0x1c>
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	b103      	cbz	r3, 8006d5c <_kill_r+0x1c>
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000031c 	.word	0x2000031c

08006d64 <_getpid_r>:
 8006d64:	f7fa ba02 	b.w	800116c <_getpid>

08006d68 <_sbrk_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d06      	ldr	r5, [pc, #24]	; (8006d84 <_sbrk_r+0x1c>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	f7fa fa8a 	bl	800128c <_sbrk>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_sbrk_r+0x1a>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_sbrk_r+0x1a>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	2000031c 	.word	0x2000031c

08006d88 <memcpy>:
 8006d88:	440a      	add	r2, r1
 8006d8a:	4291      	cmp	r1, r2
 8006d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d90:	d100      	bne.n	8006d94 <memcpy+0xc>
 8006d92:	4770      	bx	lr
 8006d94:	b510      	push	{r4, lr}
 8006d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d9e:	4291      	cmp	r1, r2
 8006da0:	d1f9      	bne.n	8006d96 <memcpy+0xe>
 8006da2:	bd10      	pop	{r4, pc}

08006da4 <_realloc_r>:
 8006da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da8:	4680      	mov	r8, r0
 8006daa:	4614      	mov	r4, r2
 8006dac:	460e      	mov	r6, r1
 8006dae:	b921      	cbnz	r1, 8006dba <_realloc_r+0x16>
 8006db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	4611      	mov	r1, r2
 8006db6:	f7ff b97d 	b.w	80060b4 <_malloc_r>
 8006dba:	b92a      	cbnz	r2, 8006dc8 <_realloc_r+0x24>
 8006dbc:	f7ff f90e 	bl	8005fdc <_free_r>
 8006dc0:	4625      	mov	r5, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc8:	f000 f8a0 	bl	8006f0c <_malloc_usable_size_r>
 8006dcc:	4284      	cmp	r4, r0
 8006dce:	4607      	mov	r7, r0
 8006dd0:	d802      	bhi.n	8006dd8 <_realloc_r+0x34>
 8006dd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dd6:	d812      	bhi.n	8006dfe <_realloc_r+0x5a>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f7ff f96a 	bl	80060b4 <_malloc_r>
 8006de0:	4605      	mov	r5, r0
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d0ed      	beq.n	8006dc2 <_realloc_r+0x1e>
 8006de6:	42bc      	cmp	r4, r7
 8006de8:	4622      	mov	r2, r4
 8006dea:	4631      	mov	r1, r6
 8006dec:	bf28      	it	cs
 8006dee:	463a      	movcs	r2, r7
 8006df0:	f7ff ffca 	bl	8006d88 <memcpy>
 8006df4:	4631      	mov	r1, r6
 8006df6:	4640      	mov	r0, r8
 8006df8:	f7ff f8f0 	bl	8005fdc <_free_r>
 8006dfc:	e7e1      	b.n	8006dc2 <_realloc_r+0x1e>
 8006dfe:	4635      	mov	r5, r6
 8006e00:	e7df      	b.n	8006dc2 <_realloc_r+0x1e>

08006e02 <__swhatbuf_r>:
 8006e02:	b570      	push	{r4, r5, r6, lr}
 8006e04:	460c      	mov	r4, r1
 8006e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	b096      	sub	sp, #88	; 0x58
 8006e0e:	4615      	mov	r5, r2
 8006e10:	461e      	mov	r6, r3
 8006e12:	da0d      	bge.n	8006e30 <__swhatbuf_r+0x2e>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e1a:	f04f 0100 	mov.w	r1, #0
 8006e1e:	bf0c      	ite	eq
 8006e20:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e24:	2340      	movne	r3, #64	; 0x40
 8006e26:	2000      	movs	r0, #0
 8006e28:	6031      	str	r1, [r6, #0]
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	b016      	add	sp, #88	; 0x58
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	466a      	mov	r2, sp
 8006e32:	f000 f849 	bl	8006ec8 <_fstat_r>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	dbec      	blt.n	8006e14 <__swhatbuf_r+0x12>
 8006e3a:	9901      	ldr	r1, [sp, #4]
 8006e3c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e40:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e44:	4259      	negs	r1, r3
 8006e46:	4159      	adcs	r1, r3
 8006e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4c:	e7eb      	b.n	8006e26 <__swhatbuf_r+0x24>

08006e4e <__smakebuf_r>:
 8006e4e:	898b      	ldrh	r3, [r1, #12]
 8006e50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e52:	079d      	lsls	r5, r3, #30
 8006e54:	4606      	mov	r6, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	d507      	bpl.n	8006e6a <__smakebuf_r+0x1c>
 8006e5a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	6123      	str	r3, [r4, #16]
 8006e62:	2301      	movs	r3, #1
 8006e64:	6163      	str	r3, [r4, #20]
 8006e66:	b002      	add	sp, #8
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
 8006e6a:	ab01      	add	r3, sp, #4
 8006e6c:	466a      	mov	r2, sp
 8006e6e:	f7ff ffc8 	bl	8006e02 <__swhatbuf_r>
 8006e72:	9900      	ldr	r1, [sp, #0]
 8006e74:	4605      	mov	r5, r0
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff f91c 	bl	80060b4 <_malloc_r>
 8006e7c:	b948      	cbnz	r0, 8006e92 <__smakebuf_r+0x44>
 8006e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e82:	059a      	lsls	r2, r3, #22
 8006e84:	d4ef      	bmi.n	8006e66 <__smakebuf_r+0x18>
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	e7e3      	b.n	8006e5a <__smakebuf_r+0xc>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	6020      	str	r0, [r4, #0]
 8006e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	9b00      	ldr	r3, [sp, #0]
 8006e9e:	6163      	str	r3, [r4, #20]
 8006ea0:	9b01      	ldr	r3, [sp, #4]
 8006ea2:	6120      	str	r0, [r4, #16]
 8006ea4:	b15b      	cbz	r3, 8006ebe <__smakebuf_r+0x70>
 8006ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f000 f81e 	bl	8006eec <_isatty_r>
 8006eb0:	b128      	cbz	r0, 8006ebe <__smakebuf_r+0x70>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f023 0303 	bic.w	r3, r3, #3
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	431d      	orrs	r5, r3
 8006ec2:	81a5      	strh	r5, [r4, #12]
 8006ec4:	e7cf      	b.n	8006e66 <__smakebuf_r+0x18>
	...

08006ec8 <_fstat_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4d07      	ldr	r5, [pc, #28]	; (8006ee8 <_fstat_r+0x20>)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	f7fa f9b0 	bl	800123a <_fstat>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	d102      	bne.n	8006ee4 <_fstat_r+0x1c>
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	b103      	cbz	r3, 8006ee4 <_fstat_r+0x1c>
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
 8006ee6:	bf00      	nop
 8006ee8:	2000031c 	.word	0x2000031c

08006eec <_isatty_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	; (8006f08 <_isatty_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7fa f9af 	bl	800125a <_isatty>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_isatty_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_isatty_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	2000031c 	.word	0x2000031c

08006f0c <_malloc_usable_size_r>:
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f18      	subs	r0, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfbc      	itt	lt
 8006f16:	580b      	ldrlt	r3, [r1, r0]
 8006f18:	18c0      	addlt	r0, r0, r3
 8006f1a:	4770      	bx	lr

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
